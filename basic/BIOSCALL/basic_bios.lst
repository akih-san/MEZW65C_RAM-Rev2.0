     1                        ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.22p5
     2                        ;
     3                        ; -- original sorce code --
     4                        ; https://github.com/Klaus2m5/6502_EhBASIC_V2.22
     5                        ;
     6                        ; MEZW65C_RAM version
     7                        ;
     8                        ; This program was ported for the mezzanine board MEZW65C_RAM
     9                        ; by Akihito Honda. 2024.10
    10                        ; X(Twitter)  @akih_san
    11                        ;
    12                        ; Mezzanine board MEZW65C_RAM works on EMUZ80 SBC
    13                        ;
    14                        ; EMUZ80
    15                        ; https://vintagechips.wordpress.com/2022/03/05/emuz80_reference/
    16                        ; MEZW65C_RAM
    17                        ; https://github.com/akih-san/MEZW65C_RAM
    18                        ;
    19                        ;   Thanks all.
    20                        ;
    21                        	pl	0
    22                        	pw      132
    23                        	chip    65C02
    24                        
    25                        ; zero page use ..
    26                        
    27                        ; the following locations are bulk initialized from StrTab at LAB_GMEM
    28             00000000   LAB_WARM        equ $00       ; BASIC warm start entry point
    29             00000001   Wrmjpl          equ LAB_WARM+1; BASIC warm start vector jump low byte
    30             00000002   Wrmjph          equ LAB_WARM+2; BASIC warm start vector jump high byte
    31                        
    32             0000000A   Usrjmp          equ $0A       ; USR function JMP address
    33             0000000B   Usrjpl          equ Usrjmp+1  ; USR function JMP vector low byte
    34             0000000C   Usrjph          equ Usrjmp+2  ; USR function JMP vector high byte
    35             0000000D   Nullct          equ $0D       ; nulls output after each line
    36             0000000E   TPos            equ $0E       ; BASIC terminal position byte
    37             0000000F   TWidth          equ $0F       ; BASIC terminal width byte
    38             00000010   Iclim           equ $10       ; input column limit
    39             00000011   Itempl          equ $11       ; temporary integer low byte
    40             00000012   Itemph          equ Itempl+1  ; temporary integer high byte
    41                        ; end bulk initialize from StrTab at LAB_GMEM
    42                        
    43             00000011   nums_1          equ Itempl    ; number to bin/hex string convert MSB
    44             00000012   nums_2          equ nums_1+1  ; number to bin/hex string convert
    45             00000013   nums_3          equ nums_1+2  ; number to bin/hex string convert LSB
    46                        
    47             0000005B   Srchc           equ $5B       ; search character
    48             0000005B   Temp3           equ Srchc     ; temp byte used in number routines
    49             0000005C   Scnquo          equ $5C       ; scan-between-quotes flag
    50             0000005C   Asrch           equ Scnquo    ; alt search character
    51                        
    52             0000005B   XOAw_l          equ Srchc     ; eXclusive OR, OR and AND word low byte
    53             0000005C   XOAw_h          equ Scnquo    ; eXclusive OR, OR and AND word high byte
    54                        
    55             0000005D   Ibptr           equ $5D       ; input buffer pointer
    56             0000005D   Dimcnt          equ Ibptr     ; # of dimensions
    57             0000005D   Tindx           equ Ibptr     ; token index
    58                        
    59             0000005E   Defdim          equ $5E       ; default DIM flag
    60             0000005F   Dtypef          equ $5F       ; data type flag, $FF=string, $00=numeric
    61             00000060   Oquote          equ $60       ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
    62             00000060   Gclctd          equ $60       ; garbage collected flag
    63             00000061   Sufnxf          equ $61       ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
    64             00000062   Imode           equ $62       ; input mode flag, $00=INPUT, $80=READ
    65                        
    66             00000063   Cflag           equ $63       ; comparison evaluation flag
    67                        
    68             00000064   TabSiz          equ $64       ; TAB step size (was input flag)
    69                        
    70             00000065   next_s          equ $65       ; next descriptor stack address
    71                        
    72                                                      ; these two bytes form a word pointer to the item
    73                                                      ; currently on top of the descriptor stack
    74             00000066   last_sl         equ $66       ; last descriptor stack address low byte
    75             00000067   last_sh         equ $67       ; last descriptor stack address high byte (always $00)
    76                        
    77             00000068   des_sk          equ $68       ; descriptor stack start address (temp strings)
    78                        
    79                        ;               equ $70       ; End of descriptor stack
    80                        
    81             00000071   ut1_pl          equ $71       ; utility pointer 1 low byte
    82             00000072   ut1_ph          equ ut1_pl+1  ; utility pointer 1 high byte
    83             00000073   ut2_pl          equ $73       ; utility pointer 2 low byte
    84             00000074   ut2_ph          equ ut2_pl+1  ; utility pointer 2 high byte
    85                        
    86             00000071   Temp_2          equ ut1_pl    ; temp byte for block move    
    87                        
    88             00000075   FACt_1          equ $75       ; FAC temp mantissa1
    89             00000076   FACt_2          equ FACt_1+1  ; FAC temp mantissa2
    90             00000077   FACt_3          equ FACt_2+1  ; FAC temp mantissa3
    91                        
    92             00000076   dims_l          equ FACt_2    ; array dimension size low byte
    93             00000077   dims_h          equ FACt_3    ; array dimension size high byte
    94                        
    95             00000078   TempB           equ $78       ; temp page 0 byte
    96                        
    97             00000079   Smeml           equ $79       ; start of mem low byte       (Start-of-Basic)
    98             0000007A   Smemh           equ Smeml+1   ; start of mem high byte      (Start-of-Basic)
    99             0000007B   Svarl           equ $7B       ; start of vars low byte      (Start-of-Variables)
   100             0000007C   Svarh           equ Svarl+1   ; start of vars high byte     (Start-of-Variables)
   101             0000007D   Sarryl          equ $7D       ; var mem end low byte        (Start-of-Arrays)
   102             0000007E   Sarryh          equ Sarryl+1  ; var mem end high byte       (Start-of-Arrays)
   103             0000007F   Earryl          equ $7F       ; array mem end low byte      (End-of-Arrays)
   104             00000080   Earryh          equ Earryl+1  ; array mem end high byte     (End-of-Arrays)
   105             00000081   Sstorl          equ $81       ; string storage low byte     (String storage (moving down))
   106             00000082   Sstorh          equ Sstorl+1  ; string storage high byte    (String storage (moving down))
   107             00000083   Sutill          equ $83       ; string utility ptr low byte
   108             00000084   Sutilh          equ Sutill+1  ; string utility ptr high byte
   109             00000085   Ememl           equ $85       ; end of mem low byte         (Limit-of-memory)
   110             00000086   Ememh           equ Ememl+1   ; end of mem high byte        (Limit-of-memory)
   111             00000087   Clinel          equ $87       ; current line low byte       (Basic line number)
   112             00000088   Clineh          equ Clinel+1  ; current line high byte      (Basic line number)
   113             00000089   Blinel          equ $89       ; break line low byte         (Previous Basic line number)
   114             0000008A   Blineh          equ Blinel+1  ; break line high byte        (Previous Basic line number)
   115                        
   116             0000008B   Cpntrl          equ $8B       ; continue pointer low byte
   117             0000008C   Cpntrh          equ Cpntrl+1  ; continue pointer high byte
   118                        
   119             0000008D   Dlinel          equ $8D       ; current DATA line low byte
   120             0000008E   Dlineh          equ Dlinel+1  ; current DATA line high byte
   121                        
   122             0000008F   Dptrl           equ $8F       ; DATA pointer low byte
   123             00000090   Dptrh           equ Dptrl+1   ; DATA pointer high byte
   124                        
   125             00000091   Rdptrl          equ $91       ; read pointer low byte
   126             00000092   Rdptrh          equ Rdptrl+1  ; read pointer high byte
   127                        
   128             00000093   Varnm1          equ $93       ; current var name 1st byte
   129             00000094   Varnm2          equ Varnm1+1  ; current var name 2nd byte
   130                        
   131             00000095   Cvaral          equ $95       ; current var address low byte
   132             00000096   Cvarah          equ Cvaral+1  ; current var address high byte
   133                        
   134             00000097   Frnxtl          equ $97       ; var pointer for FOR/NEXT low byte
   135             00000098   Frnxth          equ Frnxtl+1  ; var pointer for FOR/NEXT high byte
   136                        
   137             00000097   Tidx1           equ Frnxtl    ; temp line index
   138                        
   139             00000097   Lvarpl          equ Frnxtl    ; let var pointer low byte
   140             00000098   Lvarph          equ Frnxth    ; let var pointer high byte
   141                        
   142             00000099   prstk           equ $99       ; precedence stacked flag
   143                        
   144             0000009B   comp_f          equ $9B       ; compare function flag, bits 0,1 and 2 used
   145                                                      ; bit 2 set if >
   146                                                      ; bit 1 set if =
   147                                                      ; bit 0 set if <
   148                        
   149             0000009C   func_l          equ $9C       ; function pointer low byte
   150             0000009D   func_h          equ func_l+1  ; function pointer high byte
   151                        
   152             0000009C   garb_l          equ func_l    ; garbage collection working pointer low byte
   153             0000009D   garb_h          equ func_h    ; garbage collection working pointer high byte
   154                        
   155             0000009E   des_2l          equ $9E       ; string descriptor_2 pointer low byte
   156             0000009F   des_2h          equ des_2l+1  ; string descriptor_2 pointer high byte
   157                        
   158             000000A0   g_step          equ $A0       ; garbage collect step size
   159                        
   160             000000A1   Fnxjmp          equ $A1       ; jump vector for functions
   161             000000A2   Fnxjpl          equ Fnxjmp+1  ; functions jump vector low byte
   162             000000A3   Fnxjph          equ Fnxjmp+2  ; functions jump vector high byte
   163                        
   164             000000A2   g_indx          equ Fnxjpl    ; garbage collect temp index
   165                        
   166             000000A3   FAC2_r          equ $A3       ; FAC2 rounding byte
   167                        
   168             000000A4   Adatal          equ $A4       ; array data pointer low byte
   169             000000A5   Adatah          equ Adatal+1  ; array data pointer high  byte
   170                        
   171             000000A4   Nbendl          equ Adatal    ; new block end pointer low byte
   172             000000A5   Nbendh          equ Adatah    ; new block end pointer high  byte
   173                        
   174             000000A6   Obendl          equ $A6       ; old block end pointer low byte
   175             000000A7   Obendh          equ Obendl+1  ; old block end pointer high  byte
   176                        
   177             000000A8   numexp          equ $A8       ; string to float number exponent count
   178             000000A9   expcnt          equ $A9       ; string to float exponent count
   179                        
   180             000000A8   numbit          equ numexp    ; bit count for array element calculations
   181                        
   182             000000AA   numdpf          equ $AA       ; string to float decimal point flag
   183             000000AB   expneg          equ $AB       ; string to float eval exponent -ve flag
   184                        
   185             000000AA   Astrtl          equ numdpf    ; array start pointer low byte
   186             000000AB   Astrth          equ expneg    ; array start pointer high  byte
   187                        
   188             000000AA   Histrl          equ numdpf    ; highest string low byte
   189             000000AB   Histrh          equ expneg    ; highest string high  byte
   190                        
   191             000000AA   Baslnl          equ numdpf    ; BASIC search line pointer low byte
   192             000000AB   Baslnh          equ expneg    ; BASIC search line pointer high  byte
   193                        
   194             000000AA   Fvar_l          equ numdpf    ; find/found variable pointer low byte
   195             000000AB   Fvar_h          equ expneg    ; find/found variable pointer high  byte
   196                        
   197             000000AA   Ostrtl          equ numdpf    ; old block start pointer low byte
   198             000000AB   Ostrth          equ expneg    ; old block start pointer high  byte
   199                        
   200             000000AA   Vrschl          equ numdpf    ; variable search pointer low byte
   201             000000AB   Vrschh          equ expneg    ; variable search pointer high  byte
   202                        
   203             000000AC   FAC1_e          equ $AC       ; FAC1 exponent
   204             000000AD   FAC1_1          equ FAC1_e+1  ; FAC1 mantissa1
   205             000000AE   FAC1_2          equ FAC1_e+2  ; FAC1 mantissa2
   206             000000AF   FAC1_3          equ FAC1_e+3  ; FAC1 mantissa3
   207             000000B0   FAC1_s          equ FAC1_e+4  ; FAC1 sign (b7)
   208                        
   209             000000AC   str_ln          equ FAC1_e    ; string length
   210             000000AD   str_pl          equ FAC1_1    ; string pointer low byte
   211             000000AE   str_ph          equ FAC1_2    ; string pointer high byte
   212                        
   213             000000AE   des_pl          equ FAC1_2    ; string descriptor pointer low byte
   214             000000AF   des_ph          equ FAC1_3    ; string descriptor pointer high byte
   215                        
   216             000000AF   mids_l          equ FAC1_3    ; MID$ string temp length byte
   217                        
   218             000000B1   negnum          equ $B1       ; string to float eval -ve flag
   219             000000B1   numcon          equ $B1       ; series evaluation constant count
   220                        
   221             000000B2   FAC1_o          equ $B2       ; FAC1 overflow byte
   222                        
   223             000000B3   FAC2_e          equ $B3       ; FAC2 exponent
   224             000000B4   FAC2_1          equ FAC2_e+1  ; FAC2 mantissa1
   225             000000B5   FAC2_2          equ FAC2_e+2  ; FAC2 mantissa2
   226             000000B6   FAC2_3          equ FAC2_e+3  ; FAC2 mantissa3
   227             000000B7   FAC2_s          equ FAC2_e+4  ; FAC2 sign (b7)
   228                        
   229             000000B8   FAC_sc          equ $B8       ; FAC sign comparison, Acc#1 vs #2
   230             000000B9   FAC1_r          equ $B9       ; FAC1 rounding byte
   231                        
   232             000000B8   ssptr_l         equ FAC_sc    ; string start pointer low byte
   233             000000B9   ssptr_h         equ FAC1_r    ; string start pointer high byte
   234                        
   235             000000B8   sdescr          equ FAC_sc    ; string descriptor pointer
   236                        
   237             000000BA   csidx           equ $BA       ; line crunch save index
   238             000000BA   Asptl           equ csidx     ; array size/pointer low byte
   239             000000BB   Aspth           equ $BB       ; array size/pointer high byte
   240                        
   241             000000BA   Btmpl           equ Asptl     ; BASIC pointer temp low byte
   242             000000BB   Btmph           equ Aspth     ; BASIC pointer temp low byte
   243                        
   244             000000BA   Cptrl           equ Asptl     ; BASIC pointer temp low byte
   245             000000BB   Cptrh           equ Aspth     ; BASIC pointer temp low byte
   246                        
   247             000000BA   Sendl           equ Asptl     ; BASIC pointer temp low byte
   248             000000BB   Sendh           equ Aspth     ; BASIC pointer temp low byte
   249                        
   250                        ; the following locations are bulk initialized from LAB_2CEE at LAB_2D4E
   251             000000BC   LAB_IGBY        equ $BC       ; get next BASIC byte subroutine
   252                        
   253             000000C2   LAB_GBYT        equ $C2       ; get current BASIC byte subroutine
   254             000000C3   Bpntrl          equ $C3       ; BASIC execute (get byte) pointer low byte
   255             000000C4   Bpntrh          equ Bpntrl+1  ; BASIC execute (get byte) pointer high byte
   256                        
   257                        ;               equ $D7       ; end of get BASIC char subroutine
   258                        ; end bulk initialize from LAB_2CEE at LAB_2D4E
   259                        
   260             000000D8   Rbyte4          equ $D8       ; extra PRNG byte
   261             000000D9   Rbyte1          equ Rbyte4+1  ; most significant PRNG byte
   262             000000DA   Rbyte2          equ Rbyte4+2  ; middle PRNG byte
   263             000000DB   Rbyte3          equ Rbyte4+3  ; least significant PRNG byte
   264                        
   265             000000DC   NmiBase         equ $DC       ; NMI handler enabled/setup/triggered flags
   266                                                      ; bit function
   267                                                      ; === ========
   268                                                      ; 7   interrupt enabled
   269                                                      ; 6   interrupt setup
   270                                                      ; 5   interrupt happened
   271                        ;               equ $DD       ; NMI handler addr low byte
   272                        ;               equ $DE       ; NMI handler addr high byte
   273             000000DF   IrqBase         equ $DF       ; IRQ handler enabled/setup/triggered flags
   274                        ;               equ $E0       ; IRQ handler addr low byte
   275                        ;               equ $E1       ; IRQ handler addr high byte
   276                        
   277                        ; *** removed unused comments for $DE-$E1
   278                        
   279                        ;               equ $E2       ; unused
   280                        ;               equ $E3       ; unused
   281                        ;               equ $E4       ; unused
   282                        ;               equ $E5       ; unused
   283                        ;               equ $E6       ; unused
   284                        ;               equ $E7       ; unused
   285                        ;               equ $E8       ; unused
   286                        ;               equ $E9       ; unused
   287                        ;               equ $EA       ; unused
   288                        ;               equ $EB       ; unused
   289                        ;               equ $EC       ; unused
   290                        ;               equ $ED       ; unused
   291                        ;               equ $EE       ; unused
   292                        
   293             000000EF   Decss           equ $EF       ; number to decimal string start
   294             000000F0   Decssp1         equ Decss+1   ; number to decimal string start
   295                        
   296                        ;               equ $FF       ; decimal string end
   297                        
   298                        ; token values needed for BASIC
   299                        
   300                        ; primary command tokens (can start a statement)
   301                        
   302             00000080   TK_END          equ $80             ; END token
   303             00000081   TK_FOR          equ TK_END+1        ; FOR token
   304             00000082   TK_NEXT         equ TK_FOR+1        ; NEXT token
   305             00000083   TK_DATA         equ TK_NEXT+1       ; DATA token
   306             00000084   TK_INPUT        equ TK_DATA+1       ; INPUT token
   307             00000085   TK_DIM          equ TK_INPUT+1      ; DIM token
   308             00000086   TK_READ         equ TK_DIM+1        ; READ token
   309             00000087   TK_LET          equ TK_READ+1       ; LET token
   310             00000088   TK_DEC          equ TK_LET+1        ; DEC token
   311             00000089   TK_GOTO         equ TK_DEC+1        ; GOTO token
   312             0000008A   TK_RUN          equ TK_GOTO+1       ; RUN token
   313             0000008B   TK_IF           equ TK_RUN+1        ; IF token
   314             0000008C   TK_RESTORE      equ TK_IF+1         ; RESTORE token
   315             0000008D   TK_GOSUB        equ TK_RESTORE+1    ; GOSUB token
   316             0000008E   TK_RETIRQ       equ TK_GOSUB+1      ; RETIRQ token
   317             0000008F   TK_RETNMI       equ TK_RETIRQ+1     ; RETNMI token
   318             00000090   TK_RETURN       equ TK_RETNMI+1     ; RETURN token
   319             00000091   TK_REM          equ TK_RETURN+1     ; REM token
   320             00000092   TK_STOP         equ TK_REM+1        ; STOP token
   321             00000093   TK_ON           equ TK_STOP+1       ; ON token
   322             00000094   TK_NULL         equ TK_ON+1         ; NULL token
   323             00000095   TK_INC          equ TK_NULL+1       ; INC token
   324             00000096   TK_WAIT         equ TK_INC+1        ; WAIT token
   325             00000097   TK_LOAD         equ TK_WAIT+1       ; LOAD token
   326             00000098   TK_SAVE         equ TK_LOAD+1       ; SAVE token
   327             00000099   TK_DEF          equ TK_SAVE+1       ; DEF token
   328             0000009A   TK_POKE         equ TK_DEF+1        ; POKE token
   329             0000009B   TK_DOKE         equ TK_POKE+1       ; DOKE token
   330             0000009C   TK_CALL         equ TK_DOKE+1       ; CALL token
   331             0000009D   TK_DO           equ TK_CALL+1       ; DO token
   332             0000009E   TK_LOOP         equ TK_DO+1         ; LOOP token
   333             0000009F   TK_PRINT        equ TK_LOOP+1       ; PRINT token
   334             000000A0   TK_CONT         equ TK_PRINT+1      ; CONT token
   335             000000A1   TK_LIST         equ TK_CONT+1       ; LIST token
   336             000000A2   TK_CLEAR        equ TK_LIST+1       ; CLEAR token
   337             000000A3   TK_NEW          equ TK_CLEAR+1      ; NEW token
   338             000000A4   TK_WIDTH        equ TK_NEW+1        ; WIDTH token
   339             000000A5   TK_GET          equ TK_WIDTH+1      ; GET token
   340             000000A6   TK_SWAP         equ TK_GET+1        ; SWAP token
   341             000000A7   TK_BITSET       equ TK_SWAP+1       ; BITSET token
   342             000000A8   TK_BITCLR       equ TK_BITSET+1     ; BITCLR token
   343             000000A9   TK_IRQ          equ TK_BITCLR+1     ; IRQ token
   344             000000AA   TK_NMI          equ TK_IRQ+1        ; NMI token
   345                        
   346                        ; secondary command tokens, can't start a statement
   347                        
   348             000000AB   TK_TAB          equ TK_NMI+1        ; TAB token
   349             000000AC   TK_ELSE         equ TK_TAB+1        ; ELSE token
   350             000000AD   TK_TO           equ TK_ELSE+1       ; TO token
   351             000000AE   TK_FN           equ TK_TO+1         ; FN token
   352             000000AF   TK_SPC          equ TK_FN+1         ; SPC token
   353             000000B0   TK_THEN         equ TK_SPC+1        ; THEN token
   354             000000B1   TK_NOT          equ TK_THEN+1       ; NOT token
   355             000000B2   TK_STEP         equ TK_NOT+1        ; STEP token
   356             000000B3   TK_UNTIL        equ TK_STEP+1       ; UNTIL token
   357             000000B4   TK_WHILE        equ TK_UNTIL+1      ; WHILE token
   358             000000B5   TK_OFF          equ TK_WHILE+1      ; OFF token
   359                        
   360                        ; opperator tokens
   361                        
   362             000000B6   TK_PLUS         equ TK_OFF+1        ; + token
   363             000000B7   TK_MINUS        equ TK_PLUS+1       ; - token
   364             000000B8   TK_MUL          equ TK_MINUS+1      ; * token
   365             000000B9   TK_DIV          equ TK_MUL+1        ; / token
   366             000000BA   TK_POWER        equ TK_DIV+1        ; ^ token
   367             000000BB   TK_AND          equ TK_POWER+1      ; AND token
   368             000000BC   TK_EOR          equ TK_AND+1        ; EOR token
   369             000000BD   TK_OR           equ TK_EOR+1        ; OR token
   370             000000BE   TK_RSHIFT       equ TK_OR+1         ; RSHIFT token
   371             000000BF   TK_LSHIFT       equ TK_RSHIFT+1     ; LSHIFT token
   372             000000C0   TK_GT           equ TK_LSHIFT+1     ; > token
   373             000000C1   TK_EQUAL        equ TK_GT+1         ; = token
   374             000000C2   TK_LT           equ TK_EQUAL+1      ; < token
   375                        
   376                        ; functions tokens
   377                        
   378             000000C3   TK_SGN          equ TK_LT+1         ; SGN token
   379             000000C4   TK_INT          equ TK_SGN+1        ; INT token
   380             000000C5   TK_ABS          equ TK_INT+1        ; ABS token
   381             000000C6   TK_USR          equ TK_ABS+1        ; USR token
   382             000000C7   TK_FRE          equ TK_USR+1        ; FRE token
   383             000000C8   TK_POS          equ TK_FRE+1        ; POS token
   384             000000C9   TK_SQR          equ TK_POS+1        ; SQR token
   385             000000CA   TK_RND          equ TK_SQR+1        ; RND token
   386             000000CB   TK_LOG          equ TK_RND+1        ; LOG token
   387             000000CC   TK_EXP          equ TK_LOG+1        ; EXP token
   388             000000CD   TK_COS          equ TK_EXP+1        ; COS token
   389             000000CE   TK_SIN          equ TK_COS+1        ; SIN token
   390             000000CF   TK_TAN          equ TK_SIN+1        ; TAN token
   391             000000D0   TK_ATN          equ TK_TAN+1        ; ATN token
   392             000000D1   TK_PEEK         equ TK_ATN+1        ; PEEK token
   393             000000D2   TK_DEEK         equ TK_PEEK+1       ; DEEK token
   394             000000D3   TK_SADD         equ TK_DEEK+1       ; SADD token
   395             000000D4   TK_LEN          equ TK_SADD+1       ; LEN token
   396             000000D5   TK_STRS         equ TK_LEN+1        ; STR$ token
   397             000000D6   TK_VAL          equ TK_STRS+1       ; VAL token
   398             000000D7   TK_ASC          equ TK_VAL+1        ; ASC token
   399             000000D8   TK_UCASES       equ TK_ASC+1        ; UCASE$ token
   400             000000D9   TK_LCASES       equ TK_UCASES+1     ; LCASE$ token
   401             000000DA   TK_CHRS         equ TK_LCASES+1     ; CHR$ token
   402             000000DB   TK_HEXS         equ TK_CHRS+1       ; HEX$ token
   403             000000DC   TK_BINS         equ TK_HEXS+1       ; BIN$ token
   404             000000DD   TK_BITTST       equ TK_BINS+1       ; BITTST token
   405             000000DE   TK_MAX          equ TK_BITTST+1     ; MAX token
   406             000000DF   TK_MIN          equ TK_MAX+1        ; MIN token
   407             000000E0   TK_PI           equ TK_MIN+1        ; PI token
   408             000000E1   TK_TWOPI        equ TK_PI+1         ; TWOPI token
   409             000000E2   TK_VPTR         equ TK_TWOPI+1      ; VARPTR token
   410             000000E3   TK_LEFTS        equ TK_VPTR+1       ; LEFT$ token
   411             000000E4   TK_RIGHTS       equ TK_LEFTS+1      ; RIGHT$ token
   412             000000E5   TK_MIDS         equ TK_RIGHTS+1     ; MID$ token
   413                        
   414                        ; offsets from a base of X or Y
   415                        
   416             00000000   PLUS_0          equ $00       ; X or Y plus 0
   417             00000001   PLUS_1          equ $01       ; X or Y plus 1
   418             00000002   PLUS_2          equ $02       ; X or Y plus 2
   419             00000003   PLUS_3          equ $03       ; X or Y plus 3
   420                        
   421             00000100   LAB_STAK        equ $0100     ; stack bottom, no offset
   422                        
   423             000001FE   LAB_SKFE        equ LAB_STAK+$FE
   424                                                      ; flushed stack address
   425             000001FF   LAB_SKFF        equ LAB_STAK+$FF
   426                                                      ; flushed stack address
   427                        
   428                        ; the following locations are bulk initialized from PG2_TABS at LAB_COLD
   429             00000200   ccflag          equ $0200     ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
   430             00000201   ccbyte          equ ccflag+1  ; BASIC CTRL-C byte
   431             00000202   ccnull          equ ccbyte+1  ; BASIC CTRL-C byte timeout
   432                        
   433             00000203   VEC_CC          equ ccnull+1  ; ctrl c check vector
   434                        ; end bulk initialize from PG2_TABS at LAB_COLD
   435                        
   436                        ; the following locations are bulk initialized by min_mon.asm from LAB_vec at LAB_stlp
   437             00000205   VEC_IN          equ VEC_CC+2  ; input vector
   438             00000207   VEC_OUT         equ VEC_IN+2  ; output vector
   439             00000209   VEC_LD          equ VEC_OUT+2 ; load vector
   440             0000020B   VEC_SV          equ VEC_LD+2  ; save vector
   441                        ; end bulk initialize by min_mon.asm from LAB_vec at LAB_stlp
   442                        
   443                        ; Ibuffs can now be anywhere in RAM, ensure that the max length is < $80,
   444                        ; the input buffer must not cross a page boundary and must not overlap with
   445                        ; program RAM pages!
   446                        
   447                        ;Ibuffs          equ IRQ_vec+$14
   448             00000221   Ibuffs          equ VEC_SV+$16
   449                                                      ; start of input buffer after IRQ/NMI code
   450             00000268   Ibuffe          equ Ibuffs+$47; end of input buffer
   451                        
   452             00000300   Ram_base        equ $0300     ; start of user RAM (set as needed, should be page aligned)
   453             0000C000   Ram_top          equ $C000     ; end of user RAM+1 (set as needed, should be page aligned)
   454                        
   455             00000010   Stack_floor     equ 16        ; bytes left free on stack for background interrupts
   456                        
   457                        ; This start can be changed to suit your system
   458                        
   459                              org    Ram_top
   460                        
   461                        ; BASIC cold start entry point
   462                        
   463                        ;--------- MEZW65C_RAM file header --------------------------
   464 00:C000: 00           	db	0		; program bank:W65C816, 0:W65C02
   465 00:C001: 20 C0        	dw	LAB_COLD
   466 00:C003: 00           	db	0		; data bank:W65C816, 0:W65C02
   467 00:C004: 7F C1        	dw	LAB_1274
   468                        
   469 00:C006: 00 00        	db	0,0		; reserve
   470                        
   471 00:C008: 4D 45 5A 57  mezID:	db	"MEZW65C",0	; Unique ID
       00:C00C: 36 35 43 00 
   472                        
   473                        start_p:	;file load address
   474 00:C010: 00 C0        	dw	Ram_top		; load address (Low)
   475 00:C012: 00           	db	0		; PBR : program bank(W65C816)
   476 00:C013: 00           	db	0		; reserve
   477                        
   478                        	; define Common memory address
   479 00:C014: 00 00        PIC_IF:	dw	0	; reserve
   480 00:C016: 00 00        	dw	0	; reserve
   481                        
   482 00:C018: 00           SW_816:	db	0	; 0 : W65C02
   483                        			; 1 : W65C816 native mode 
   484 00:C019: 00           irq_sw	db	0	; reserve
   485 00:C01A: 00 00        reg_tp	dw	0	; reserve
   486 00:C01C: 00 00        reg_ts	dw	0	; reserve
   487 00:C01E: 00           nmi_sw	db	0	; reserve
   488 00:C01F: 01           bios_sw	db	1	; 1 : program call bios command
   489                        ;--------- MEZW65C_RAM file header --------------------------
   490                        LAB_COLD
   491                        
   492                        ; set up vectors and interrupt code, copy them to page 2
   493                        
   494 00:C020: A0 08                LDY     #END_CODE-LAB_vec       ; set index/count
   495                        LAB_stlp
   496 00:C022: B9 56 E8             LDA     LAB_vec-1,Y             ; get byte from interrupt code
   497 00:C025: 99 04 02             STA     VEC_IN-1,Y              ; save to RAM
   498 00:C028: 88                   DEY                             ; decrement index/count
   499 00:C029: D0 F7                BNE     LAB_stlp                ; loop if more to do
   500                        
   501 00:C02B: A0 04              LDY   #PG2_TABE-PG2_TABS-1
   502                                                      ; byte count-1
   503                        LAB_2D13
   504 00:C02D: B9 26 E1           LDA   PG2_TABS,Y        ; get byte
   505 00:C030: 99 00 02           STA   ccflag,Y          ; store in page 2
   506 00:C033: 88                 DEY                     ; decrement count
   507 00:C034: 10 F7              BPL   LAB_2D13          ; loop if not done
   508                        
   509 00:C036: A2 FF              LDX   #$FF              ; set byte
   510 00:C038: 86 88              STX   Clineh            ; set current line high byte (set immediate mode)
   511 00:C03A: 9A                 TXS                     ; reset stack pointer
   512                        
   513 00:C03B: A9 4C              LDA   #$4C              ; code for JMP
   514 00:C03D: 85 A1              STA   Fnxjmp            ; save for jump vector for functions
   515                        
   516                        ; copy block from LAB_2CEE to $00BC - $00D7
   517                        
   518 00:C03F: A2 1C              LDX   #StrTab-LAB_2CEE  ; set byte count
   519                        LAB_2D4E
   520 00:C041: BD 2A E1           LDA   LAB_2CEE-1,X      ; get byte from table
   521 00:C044: 95 BB              STA   LAB_IGBY-1,X      ; save byte in page zero
   522 00:C046: CA                 DEX                     ; decrement count
   523 00:C047: D0 F8              BNE   LAB_2D4E          ; loop if not all done
   524                        
   525                        ; copy block from StrTab to $0000 - $0012
   526                        
   527                        LAB_GMEM
   528 00:C049: A2 12              LDX   #EndTab-StrTab-1  ; set byte count-1
   529                        TabLoop
   530 00:C04B: BD 47 E1           LDA   StrTab,X          ; get byte from table
   531 00:C04E: 95 00              STA   PLUS_0,X          ; save byte in page zero
   532 00:C050: CA                 DEX                     ; decrement count
   533 00:C051: 10 F8              BPL   TabLoop           ; loop if not all done
   534                        
   535                        ; set-up start values
   536                        
   537 00:C053: A9 00              LDA   #$00              ; clear A
   538 00:C055: 85 DC              STA   NmiBase           ; clear NMI handler enabled flag
   539 00:C057: 85 DF              STA   IrqBase           ; clear IRQ handler enabled flag
   540 00:C059: 85 B2              STA   FAC1_o            ; clear FAC1 overflow byte
   541 00:C05B: 85 67              STA   last_sh           ; clear descriptor stack top item pointer high byte
   542                        
   543 00:C05D: A9 0E              LDA   #$0E              ; set default tab size
   544 00:C05F: 85 64              STA   TabSiz            ; save it
   545 00:C061: A9 03              LDA   #$03              ; set garbage collect step size for descriptor stack
   546 00:C063: 85 A0              STA   g_step            ; save it
   547 00:C065: A2 68              LDX   #des_sk           ; descriptor stack start
   548 00:C067: 86 65              STX   next_s            ; set descriptor stack pointer
   549 00:C069: 20 B5 C8           JSR   LAB_CRLF          ; print CR/LF
   550                        
   551                        	if 0
   552                              LDA   #<LAB_MSZM        ; point to memory size message (low addr)
   553                              LDY   #>LAB_MSZM        ; point to memory size message (high addr)
   554                              JSR   LAB_18C3          ; print null terminated string from memory
   555                              JSR   LAB_INLN          ; print "? " and get BASIC input
   556                        	endif
   557                        
   558 00:C06C: A2 15        	ldx #21
   559 00:C06E: A0 02        	ldy #02
   560                        
   561 00:C070: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   562 00:C072: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   563                        
   564 00:C074: A9 00        	lda #0
   565                        
   566                        	if 0
   567                              JSR   LAB_GBYT          ; get last byte back
   568                        
   569                              BNE   LAB_2DAA          ; branch if not null (user typed something)
   570                        	endif
   571                        
   572 00:C076: A0 00              LDY   #$00              ; else clear Y
   573                                                      ; character was null so get memory size the hard way
   574                                                      ; we get here with Y=0 and Itempl/h = Ram_base
   575                        LAB_2D93
   576 00:C078: E6 11              INC   Itempl            ; increment temporary integer low byte
   577 00:C07A: D0 08              BNE   LAB_2D99          ; branch if no overflow
   578                        
   579 00:C07C: E6 12              INC   Itemph            ; increment temporary integer high byte
   580 00:C07E: A5 12              LDA   Itemph            ; get high byte
   581 00:C080: C9 C0              CMP   #>Ram_top         ; compare with top of RAM+1
   582 00:C082: F0 1D              BEQ   LAB_2DB6          ; branch if match (end of user RAM)
   583                        
   584                        LAB_2D99
   585 00:C084: A9 55              LDA   #$55              ; set test byte
   586 00:C086: 91 11              STA   (Itempl),Y        ; save via temporary integer
   587 00:C088: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   588 00:C08A: D0 15              BNE   LAB_2DB6          ; branch if fail
   589                        
   590 00:C08C: 0A                 ASL                     ; shift test byte left (now $AA)
   591 00:C08D: 91 11              STA   (Itempl),Y        ; save via temporary integer
   592 00:C08F: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   593 00:C091: F0 E5              BEQ   LAB_2D93          ; if ok go do next byte
   594                        
   595 00:C093: D0 0C              BNE   LAB_2DB6          ; branch if fail
   596                        
   597                        LAB_2DAA
   598 00:C095: 20 D5 D9           JSR   LAB_2887          ; get FAC1 from string
   599 00:C098: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
   600 00:C09A: C9 98              CMP   #$98              ; compare with exponent = 2^24
   601 00:C09C: B0 AB              BCS   LAB_GMEM          ; if too large go try again
   602                        
   603 00:C09E: 20 26 D5           JSR   LAB_F2FU          ; save integer part of FAC1 in temporary integer
   604                                                      ; (no range check)
   605                        
   606                        LAB_2DB6
   607 00:C0A1: A5 11              LDA   Itempl            ; get temporary integer low byte
   608 00:C0A3: A4 12              LDY   Itemph            ; get temporary integer high byte
   609                        ; *** begin patch  2.22p5.0 RAM top sanity check ***
   610                        ; *** replace
   611                        ;      CPY   #<Ram_base+$100      ; compare with start of RAM+$100 high byte
   612                        ; +++ with
   613 00:C0A5: C0 04              CPY   #>Ram_base+$100      ; compare with start of RAM+$100 high byte
   614                        ; *** end patch    2.22p5.0 ***
   615 00:C0A7: 90 A0              BCC   LAB_GMEM          ; if too small go try again
   616                        
   617                        
   618                        ; uncomment these lines if you want to check on the high limit of memory. Note if
   619                        ; Ram_top is set too low then this will fail. default is ignore it and assume the
   620                        ; users know what they're doing!
   621                        
   622                        ;     CPY   #>Ram_top         ; compare with top of RAM high byte
   623                        ;     BCC   MEM_OK            ; branch if < RAM top
   624                        
   625                        ;     BNE   LAB_GMEM          ; if too large go try again
   626                                                      ; else was = so compare low bytes
   627                        ;     CMP   #<Ram_top         ; compare with top of RAM low byte
   628                        ;     BEQ   MEM_OK            ; branch if = RAM top
   629                        
   630                        ;     BCS   LAB_GMEM          ; if too large go try again
   631                        
   632                        ;MEM_OK
   633 00:C0A9: 85 85              STA   Ememl             ; set end of mem low byte
   634 00:C0AB: 84 86              STY   Ememh             ; set end of mem high byte
   635 00:C0AD: 85 81              STA   Sstorl            ; set bottom of string space low byte
   636 00:C0AF: 84 82              STY   Sstorh            ; set bottom of string space high byte
   637                        
   638 00:C0B1: A0 00              LDY   #<Ram_base        ; set start addr low byte
   639 00:C0B3: A2 03              LDX   #>Ram_base        ; set start addr high byte
   640 00:C0B5: 84 79              STY   Smeml             ; save start of mem low byte
   641 00:C0B7: 86 7A              STX   Smemh             ; save start of mem high byte
   642                        
   643                        ; this line is only needed if Ram_base is not $xx00
   644                              .IF   Ram_base&$FF>0
   645                              LDY   #$00              ; clear Y
   646                              .ENDIF
   647                        
   648 00:C0B9: 98                 TYA                     ; clear A
   649 00:C0BA: 91 79              STA   (Smeml),Y         ; clear first byte
   650 00:C0BC: E6 79              INC   Smeml             ; increment start of mem low byte
   651                        
   652                        ; these two lines are only needed if Ram_base is $xxFF
   653                              .IF   Ram_base&$FF=$FF
   654                              BNE   LAB_2E05          ; branch if no rollover
   655                              INC   Smemh             ; increment start of mem high byte
   656                        LAB_2E05
   657                              .ENDIF
   658                        
   659 00:C0BE: 20 B5 C8           JSR   LAB_CRLF          ; print CR/LF
   660 00:C0C1: 20 75 C3           JSR   LAB_1463          ; do "NEW" and "CLEAR"
   661 00:C0C4: A5 85              LDA   Ememl             ; get end of mem low byte
   662 00:C0C6: 38                 SEC                     ; set carry for subtract
   663 00:C0C7: E5 79              SBC   Smeml             ; subtract start of mem low byte
   664 00:C0C9: AA                 TAX                     ; copy to X
   665 00:C0CA: A5 86              LDA   Ememh             ; get end of mem high byte
   666 00:C0CC: E5 7A              SBC   Smemh             ; subtract start of mem high byte
   667 00:C0CE: 20 B1 DA           JSR   LAB_295E          ; print XA as unsigned integer (bytes free)
   668 00:C0D1: A9 69              LDA   #<LAB_SMSG        ; point to sign-on message (low addr)
   669 00:C0D3: A0 E1              LDY   #>LAB_SMSG        ; point to sign-on message (high addr)
   670 00:C0D5: 20 F6 C8           JSR   LAB_18C3          ; print null terminated string from memory
   671 00:C0D8: A9 7F              LDA   #<LAB_1274        ; warm start vector low byte
   672 00:C0DA: A0 C1              LDY   #>LAB_1274        ; warm start vector high byte
   673 00:C0DC: 85 01              STA   Wrmjpl            ; save warm start vector low byte
   674 00:C0DE: 84 02              STY   Wrmjph            ; save warm start vector high byte
   675 00:C0E0: 6C 01 00           JMP   (Wrmjpl)          ; go do warm start
   676                        
   677                        ; open up space in memory
   678                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   679                        
   680                        ; Nbendl,Nbendh - new block end address (A/Y)
   681                        ; Obendl,Obendh - old block end address
   682                        ; Ostrtl,Ostrth - old block start address
   683                        
   684                        ; returns with ..
   685                        
   686                        ; Nbendl,Nbendh - new block start address (high byte - $100)
   687                        ; Obendl,Obendh - old block start address (high byte - $100)
   688                        ; Ostrtl,Ostrth - old block start address (unchanged)
   689                        
   690                        LAB_11CF
   691 00:C0E3: 20 30 C1           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
   692                                                      ; addr to check is in AY (low/high)
   693 00:C0E6: 85 7F              STA   Earryl            ; save new array mem end low byte
   694 00:C0E8: 84 80              STY   Earryh            ; save new array mem end high byte
   695                        
   696                        ; open up space in memory
   697                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   698                        ; don't set array end
   699                        
   700                        LAB_11D6
   701 00:C0EA: 38                 SEC                     ; set carry for subtract
   702 00:C0EB: A5 A6              LDA   Obendl            ; get block end low byte
   703 00:C0ED: E5 AA              SBC   Ostrtl            ; subtract block start low byte
   704 00:C0EF: A8                 TAY                     ; copy MOD(block length/$100) byte to Y
   705 00:C0F0: A5 A7              LDA   Obendh            ; get block end high byte
   706 00:C0F2: E5 AB              SBC   Ostrth            ; subtract block start high byte
   707 00:C0F4: AA                 TAX                     ; copy block length high byte to X
   708 00:C0F5: E8                 INX                     ; +1 to allow for count=0 exit
   709 00:C0F6: 98                 TYA                     ; copy block length low byte to A
   710 00:C0F7: F0 24              BEQ   LAB_120A          ; branch if length low byte=0
   711                        
   712                                                      ; block is (X-1)*256+Y bytes, do the Y bytes first
   713                        
   714 00:C0F9: 38                 SEC                     ; set carry for add + 1, two's complement
   715 00:C0FA: 49 FF              EOR   #$FF              ; invert low byte for subtract
   716 00:C0FC: 65 A6              ADC   Obendl            ; add block end low byte
   717                        
   718 00:C0FE: 85 A6              STA   Obendl            ; save corrected old block end low byte
   719 00:C100: B0 03              BCS   LAB_11F3          ; branch if no underflow
   720                        
   721 00:C102: C6 A7              DEC   Obendh            ; else decrement block end high byte
   722 00:C104: 38                 SEC                     ; set carry for add + 1, two's complement
   723                        LAB_11F3
   724 00:C105: 98                 TYA                     ; get MOD(block length/$100) byte
   725 00:C106: 49 FF              EOR   #$FF              ; invert low byte for subtract
   726 00:C108: 65 A4              ADC   Nbendl            ; add destination end low byte
   727 00:C10A: 85 A4              STA   Nbendl            ; save modified new block end low byte
   728 00:C10C: B0 08              BCS   LAB_1203          ; branch if no underflow
   729                        
   730 00:C10E: C6 A5              DEC   Nbendh            ; else decrement block end high byte
   731 00:C110: 90 04              BCC   LAB_1203          ; branch always
   732                        
   733                        LAB_11FF
   734 00:C112: B1 A6              LDA   (Obendl),Y        ; get byte from source
   735 00:C114: 91 A4              STA   (Nbendl),Y        ; copy byte to destination
   736                        LAB_1203
   737 00:C116: 88                 DEY                     ; decrement index
   738 00:C117: D0 F9              BNE   LAB_11FF          ; loop until Y=0
   739                        
   740                                                      ; now do Y=0 indexed byte
   741 00:C119: B1 A6              LDA   (Obendl),Y        ; get byte from source
   742 00:C11B: 91 A4              STA   (Nbendl),Y        ; save byte to destination
   743                        LAB_120A
   744 00:C11D: C6 A7              DEC   Obendh            ; decrement source pointer high byte
   745 00:C11F: C6 A5              DEC   Nbendh            ; decrement destination pointer high byte
   746 00:C121: CA                 DEX                     ; decrement block count
   747 00:C122: D0 F2              BNE   LAB_1203          ; loop until count = $0
   748                        
   749 00:C124: 60                 RTS
   750                        
   751                        ; check room on stack for A bytes
   752                        ; stack too deep? do OM error
   753                        
   754                        LAB_1212
   755                        ; *** patch - additional stack floor protection for background interrupts
   756                        ; *** add
   757                              .IF   Stack_floor
   758 00:C125: 18                 CLC                     ; prep ADC
   759 00:C126: 69 10              ADC   #Stack_floor      ; stack pointer lower limit before interrupts
   760                              .ENDIF
   761                        ; *** end patch
   762 00:C128: 85 78              STA   TempB             ; save result in temp byte
   763 00:C12A: BA                 TSX                     ; copy stack
   764 00:C12B: E4 78              CPX   TempB             ; compare new "limit" with stack
   765 00:C12D: 90 30              BCC   LAB_OMER          ; if stack < limit do "Out of memory" error then warm start
   766                        
   767 00:C12F: 60                 RTS
   768                        
   769                        ; check available memory, "Out of memory" error if no room
   770                        ; addr to check is in AY (low/high)
   771                        
   772                        LAB_121F
   773 00:C130: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   774 00:C132: 90 2A              BCC   LAB_124B          ; if less then exit (is ok)
   775                        
   776 00:C134: D0 04              BNE   LAB_1229          ; skip next test if greater (tested <)
   777                        
   778                                                      ; high byte was =, now do low byte
   779 00:C136: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   780 00:C138: 90 24              BCC   LAB_124B          ; if less then exit (is ok)
   781                        
   782                                                      ; addr is > string storage ptr (oops!)
   783                        LAB_1229
   784 00:C13A: 48                 PHA                     ; push addr low byte
   785 00:C13B: A2 08              LDX   #$08              ; set index to save Adatal to expneg inclusive
   786 00:C13D: 98                 TYA                     ; copy addr high byte (to push on stack)
   787                        
   788                                                      ; save misc numeric work area
   789                        LAB_122D
   790 00:C13E: 48                 PHA                     ; push byte
   791 00:C13F: B5 A3              LDA   Adatal-1,X        ; get byte from Adatal to expneg ( ,$00 not pushed)
   792 00:C141: CA                 DEX                     ; decrement index
   793 00:C142: 10 FA              BPL   LAB_122D          ; loop until all done
   794                        
   795 00:C144: 20 11 D2           JSR   LAB_GARB          ; garbage collection routine
   796                        
   797                                                      ; restore misc numeric work area
   798 00:C147: A2 00              LDX   #$00              ; clear the index to restore bytes
   799                        LAB_1238
   800 00:C149: 68                 PLA                     ; pop byte
   801 00:C14A: 95 A4              STA   Adatal,X          ; save byte to Adatal to expneg
   802 00:C14C: E8                 INX                     ; increment index
   803 00:C14D: E0 08              CPX   #$08              ; compare with end + 1
   804 00:C14F: 30 F8              BMI   LAB_1238          ; loop if more to do
   805                        
   806 00:C151: 68                 PLA                     ; pop addr high byte
   807 00:C152: A8                 TAY                     ; copy back to Y
   808 00:C153: 68                 PLA                     ; pop addr low byte
   809 00:C154: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   810 00:C156: 90 06              BCC   LAB_124B          ; if less then exit (is ok)
   811                        
   812 00:C158: D0 05              BNE   LAB_OMER          ; if greater do "Out of memory" error then warm start
   813                        
   814                                                      ; high byte was =, now do low byte
   815 00:C15A: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   816 00:C15C: B0 01              BCS   LAB_OMER          ; if >= do "Out of memory" error then warm start
   817                        
   818                                                      ; ok exit, carry clear
   819                        LAB_124B
   820 00:C15E: 60                 RTS
   821                        
   822                        ; do "Out of memory" error then warm start
   823                        
   824                        LAB_OMER
   825 00:C15F: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
   826                        
   827                        ; do error #X, then warm start
   828                        
   829                        LAB_XERR
   830 00:C161: 20 B5 C8           JSR   LAB_CRLF          ; print CR/LF
   831                        
   832 00:C164: BD DB E6           LDA   LAB_BAER,X        ; get error message pointer low byte
   833 00:C167: BC DC E6           LDY   LAB_BAER+1,X      ; get error message pointer high byte
   834 00:C16A: 20 F6 C8           JSR   LAB_18C3          ; print null terminated string from memory
   835                        
   836 00:C16D: 20 AE C3           JSR   LAB_1491          ; flush stack and clear continue flag
   837 00:C170: A9 18              LDA   #<LAB_EMSG        ; point to " Error" low addr
   838 00:C172: A0 E8              LDY   #>LAB_EMSG        ; point to " Error" high addr
   839                        LAB_1269
   840 00:C174: 20 F6 C8           JSR   LAB_18C3          ; print null terminated string from memory
   841 00:C177: A4 88              LDY   Clineh            ; get current line high byte
   842 00:C179: C8                 INY                     ; increment it
   843 00:C17A: F0 03              BEQ   LAB_1274          ; go do warm start (was immediate mode)
   844                        
   845                                                      ; else print line number
   846 00:C17C: 20 A6 DA           JSR   LAB_2953          ; print " in line [LINE #]"
   847                        
   848                        ; BASIC warm start entry point
   849                        ; wait for Basic command
   850                        
   851                        LAB_1274
   852                                                      ; clear ON IRQ/NMI bytes
   853 00:C17F: A9 00              LDA   #$00              ; clear A
   854 00:C181: 85 DF              STA   IrqBase           ; clear enabled byte
   855 00:C183: 85 DC              STA   NmiBase           ; clear enabled byte
   856 00:C185: A9 29              LDA   #<LAB_RMSG        ; point to "Ready" message low byte
   857 00:C187: A0 E8              LDY   #>LAB_RMSG        ; point to "Ready" message high byte
   858                        
   859 00:C189: 20 F6 C8           JSR   LAB_18C3          ; go do print string
   860                        
   861                        ; wait for Basic command (no "Ready")
   862                        
   863                        LAB_127D
   864 00:C18C: 20 72 C2           JSR   LAB_1357          ; call for BASIC input
   865                        LAB_1280
   866 00:C18F: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   867 00:C191: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   868 00:C193: 20 C2 00           JSR   LAB_GBYT          ; scan memory
   869 00:C196: F0 F4              BEQ   LAB_127D          ; loop while null
   870                        
   871                        ; got to interpret input line now ..
   872                        
   873 00:C198: A2 FF              LDX   #$FF              ; current line to null value
   874 00:C19A: 86 88              STX   Clineh            ; set current line high byte
   875 00:C19C: 90 06              BCC   LAB_1295          ; branch if numeric character (handle new BASIC line)
   876                        
   877                                                      ; no line number .. immediate mode
   878 00:C19E: 20 A3 C2           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   879 00:C1A1: 4C 17 C5           JMP   LAB_15F6          ; go scan and interpret code
   880                        
   881                        ; handle new BASIC line
   882                        
   883                        LAB_1295
   884 00:C1A4: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
   885 00:C1A7: 20 A3 C2           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   886 00:C1AA: 84 5D              STY   Ibptr             ; save index pointer to end of crunched line
   887 00:C1AC: 20 49 C3           JSR   LAB_SSLN          ; search BASIC for temp integer line number
   888 00:C1AF: 90 44              BCC   LAB_12E6          ; branch if not found
   889                        
   890                                                      ; aroooogah! line # already exists! delete it
   891 00:C1B1: A0 01              LDY   #$01              ; set index to next line pointer high byte
   892 00:C1B3: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
   893 00:C1B5: 85 72              STA   ut1_ph            ; save it
   894 00:C1B7: A5 7B              LDA   Svarl             ; get start of vars low byte
   895 00:C1B9: 85 71              STA   ut1_pl            ; save it
   896 00:C1BB: A5 AB              LDA   Baslnh            ; get found line pointer high byte
   897 00:C1BD: 85 74              STA   ut2_ph            ; save it
   898 00:C1BF: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   899 00:C1C1: 88                 DEY                     ; decrement index
   900 00:C1C2: F1 AA              SBC   (Baslnl),Y        ; subtract next line pointer low byte
   901 00:C1C4: 18                 CLC                     ; clear carry for add
   902 00:C1C5: 65 7B              ADC   Svarl             ; add start of vars low byte
   903 00:C1C7: 85 7B              STA   Svarl             ; save new start of vars low byte
   904 00:C1C9: 85 73              STA   ut2_pl            ; save destination pointer low byte
   905 00:C1CB: A5 7C              LDA   Svarh             ; get start of vars high byte
   906 00:C1CD: 69 FF              ADC   #$FF              ; -1 + carry
   907 00:C1CF: 85 7C              STA   Svarh             ; save start of vars high byte
   908 00:C1D1: E5 AB              SBC   Baslnh            ; subtract found line pointer high byte
   909 00:C1D3: AA                 TAX                     ; copy to block count
   910 00:C1D4: 38                 SEC                     ; set carry for subtract
   911 00:C1D5: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   912 00:C1D7: E5 7B              SBC   Svarl             ; subtract start of vars low byte
   913 00:C1D9: A8                 TAY                     ; copy to bytes in first block count
   914 00:C1DA: B0 03              BCS   LAB_12D0          ; branch if overflow
   915                        
   916 00:C1DC: E8                 INX                     ; increment block count (correct for =0 loop exit)
   917 00:C1DD: C6 74              DEC   ut2_ph            ; decrement destination high byte
   918                        LAB_12D0
   919 00:C1DF: 18                 CLC                     ; clear carry for add
   920 00:C1E0: 65 71              ADC   ut1_pl            ; add source pointer low byte
   921 00:C1E2: 90 03              BCC   LAB_12D8          ; branch if no overflow
   922                        
   923 00:C1E4: C6 72              DEC   ut1_ph            ; else decrement source pointer high byte
   924 00:C1E6: 18                 CLC                     ; clear carry
   925                        
   926                                                      ; close up memory to delete old line
   927                        LAB_12D8
   928 00:C1E7: B1 71              LDA   (ut1_pl),Y        ; get byte from source
   929 00:C1E9: 91 73              STA   (ut2_pl),Y        ; copy to destination
   930 00:C1EB: C8                 INY                     ; increment index
   931 00:C1EC: D0 F9              BNE   LAB_12D8          ; while <> 0 do this block
   932                        
   933 00:C1EE: E6 72              INC   ut1_ph            ; increment source pointer high byte
   934 00:C1F0: E6 74              INC   ut2_ph            ; increment destination pointer high byte
   935 00:C1F2: CA                 DEX                     ; decrement block count
   936 00:C1F3: D0 F2              BNE   LAB_12D8          ; loop until all done
   937                        
   938                                                      ; got new line in buffer and no existing same #
   939                        LAB_12E6
   940 00:C1F5: AD 21 02           LDA   Ibuffs            ; get byte from start of input buffer
   941 00:C1F8: F0 3F              BEQ   LAB_1319          ; if null line just go flush stack/vars and exit
   942                        
   943                                                      ; got new line and it isn't empty line
   944 00:C1FA: A5 85              LDA   Ememl             ; get end of mem low byte
   945 00:C1FC: A4 86              LDY   Ememh             ; get end of mem high byte
   946 00:C1FE: 85 81              STA   Sstorl            ; set bottom of string space low byte
   947 00:C200: 84 82              STY   Sstorh            ; set bottom of string space high byte
   948 00:C202: A5 7B              LDA   Svarl             ; get start of vars low byte  (end of BASIC)
   949 00:C204: 85 A6              STA   Obendl            ; save old block end low byte
   950 00:C206: A4 7C              LDY   Svarh             ; get start of vars high byte (end of BASIC)
   951 00:C208: 84 A7              STY   Obendh            ; save old block end high byte
   952 00:C20A: 65 5D              ADC   Ibptr             ; add input buffer pointer    (also buffer length)
   953 00:C20C: 90 01              BCC   LAB_1301          ; branch if no overflow from add
   954                        
   955 00:C20E: C8                 INY                     ; else increment high byte
   956                        LAB_1301
   957 00:C20F: 85 A4              STA   Nbendl            ; save new block end low byte (move to, low byte)
   958 00:C211: 84 A5              STY   Nbendh            ; save new block end high byte
   959 00:C213: 20 E3 C0           JSR   LAB_11CF          ; open up space in memory
   960                                                      ; old start pointer Ostrtl,Ostrth set by the find line call
   961 00:C216: A5 7F              LDA   Earryl            ; get array mem end low byte
   962 00:C218: A4 80              LDY   Earryh            ; get array mem end high byte
   963 00:C21A: 85 7B              STA   Svarl             ; save start of vars low byte
   964 00:C21C: 84 7C              STY   Svarh             ; save start of vars high byte
   965 00:C21E: A4 5D              LDY   Ibptr             ; get input buffer pointer    (also buffer length)
   966 00:C220: 88                 DEY                     ; adjust for loop type
   967                        LAB_1311
   968 00:C221: B9 1D 02           LDA   Ibuffs-4,Y        ; get byte from crunched line
   969 00:C224: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   970 00:C226: 88                 DEY                     ; decrement count
   971 00:C227: C0 03              CPY   #$03              ; compare with first byte-1
   972 00:C229: D0 F6              BNE   LAB_1311          ; continue while count <> 3
   973                        
   974 00:C22B: A5 12              LDA   Itemph            ; get line # high byte
   975 00:C22D: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   976 00:C22F: 88                 DEY                     ; decrement count
   977 00:C230: A5 11              LDA   Itempl            ; get line # low byte
   978 00:C232: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   979 00:C234: 88                 DEY                     ; decrement count
   980 00:C235: A9 FF              LDA   #$FF              ; set byte to allow chain rebuild. if you didn't set this
   981                                                      ; byte then a zero already here would stop the chain rebuild
   982                                                      ; as it would think it was the [EOT] marker.
   983 00:C237: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   984                        
   985                        LAB_1319
   986 00:C239: 20 8A C3           JSR   LAB_1477          ; reset execution to start, clear vars and flush stack
   987 00:C23C: A6 79              LDX   Smeml             ; get start of mem low byte
   988 00:C23E: A5 7A              LDA   Smemh             ; get start of mem high byte
   989 00:C240: A0 01              LDY   #$01              ; index to high byte of next line pointer
   990                        LAB_1325
   991 00:C242: 86 71              STX   ut1_pl            ; set line start pointer low byte
   992 00:C244: 85 72              STA   ut1_ph            ; set line start pointer high byte
   993 00:C246: B1 71              LDA   (ut1_pl),Y        ; get it
   994 00:C248: F0 18              BEQ   LAB_133E          ; exit if end of program
   995                        
   996                        ; rebuild chaining of Basic lines
   997                        
   998 00:C24A: A0 04              LDY   #$04              ; point to first code byte of line
   999                                                      ; there is always 1 byte + [EOL] as null entries are deleted
  1000                        LAB_1330
  1001 00:C24C: C8                 INY                     ; next code byte
  1002 00:C24D: B1 71              LDA   (ut1_pl),Y        ; get byte
  1003 00:C24F: D0 FB              BNE   LAB_1330          ; loop if not [EOL]
  1004                        
  1005 00:C251: 38                 SEC                     ; set carry for add + 1
  1006 00:C252: 98                 TYA                     ; copy end index
  1007 00:C253: 65 71              ADC   ut1_pl            ; add to line start pointer low byte
  1008 00:C255: AA                 TAX                     ; copy to X
  1009 00:C256: A0 00              LDY   #$00              ; clear index, point to this line's next line pointer
  1010 00:C258: 91 71              STA   (ut1_pl),Y        ; set next line pointer low byte
  1011 00:C25A: 98                 TYA                     ; clear A
  1012 00:C25B: 65 72              ADC   ut1_ph            ; add line start pointer high byte + carry
  1013 00:C25D: C8                 INY                     ; increment index to high byte
  1014 00:C25E: 91 71              STA   (ut1_pl),Y        ; save next line pointer low byte
  1015 00:C260: 90 E0              BCC   LAB_1325          ; go do next line, branch always, carry clear
  1016                        
  1017                        
  1018                        LAB_133E
  1019 00:C262: 4C 8C C1           JMP   LAB_127D          ; else we just wait for Basic command, no "Ready"
  1020                        
  1021                        ; print "? " and get BASIC input
  1022                        
  1023                        LAB_INLN
  1024 00:C265: 20 0E C9           JSR   LAB_18E3          ; print "?" character
  1025 00:C268: 20 0B C9           JSR   LAB_18E0          ; print " "
  1026 00:C26B: D0 05              BNE   LAB_1357          ; call for BASIC input and return
  1027                        
  1028                        ; receive line from keyboard
  1029                        
  1030                                                      ; $08 as delete key (BACKSPACE on standard keyboard)
  1031                        LAB_134B
  1032 00:C26D: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  1033 00:C270: CA                 DEX                     ; decrement the buffer counter (delete)
  1034 00:C271: 2C                 .byte $2C               ; make LDX into BIT abs
  1035                        
  1036                        ; call for BASIC input (main entry point)
  1037                        
  1038                        LAB_1357
  1039 00:C272: A2 00              LDX   #$00              ; clear BASIC line buffer pointer
  1040                        LAB_1359
  1041 00:C274: 20 1A E1           JSR   V_INPT            ; call scan input device
  1042 00:C277: 90 FB              BCC   LAB_1359          ; loop if no byte
  1043                        
  1044 00:C279: F0 F9              BEQ   LAB_1359          ; loop until valid input (ignore NULLs)
  1045                        
  1046 00:C27B: C9 07              CMP   #$07              ; compare with [BELL]
  1047 00:C27D: F0 10              BEQ   LAB_1378          ; branch if [BELL]
  1048                        
  1049 00:C27F: C9 0D              CMP   #$0D              ; compare with [CR]
  1050 00:C281: F0 19              BEQ   LAB_1384          ; do CR/LF exit if [CR]
  1051                        
  1052 00:C283: E0 00              CPX   #$00              ; compare pointer with $00
  1053 00:C285: D0 04              BNE   LAB_1374          ; branch if not empty
  1054                        
  1055                        ; next two lines ignore any non print character and [SPACE] if input buffer empty
  1056                        
  1057 00:C287: C9 21              CMP   #$21              ; compare with [SP]+1
  1058 00:C289: 90 E9              BCC   LAB_1359          ; if < ignore character
  1059                        
  1060                        LAB_1374
  1061 00:C28B: C9 08              CMP   #$08              ; compare with [BACKSPACE] (delete last character)
  1062 00:C28D: F0 DE              BEQ   LAB_134B          ; go delete last character
  1063                        
  1064                        LAB_1378
  1065 00:C28F: E0 47              CPX   #Ibuffe-Ibuffs    ; compare character count with max
  1066 00:C291: B0 0C              BCS   LAB_138E          ; skip store and do [BELL] if buffer full
  1067                        
  1068 00:C293: 9D 21 02           STA   Ibuffs,X          ; else store in buffer
  1069 00:C296: E8                 INX                     ; increment pointer
  1070                        LAB_137F
  1071 00:C297: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  1072 00:C29A: D0 D8              BNE   LAB_1359          ; always loop for next character
  1073                        
  1074                        LAB_1384
  1075 00:C29C: 4C AC C8           JMP   LAB_1866          ; do CR/LF exit to BASIC
  1076                        
  1077                        ; announce buffer full
  1078                        
  1079                        LAB_138E
  1080 00:C29F: A9 07              LDA   #$07              ; [BELL] character into A
  1081 00:C2A1: D0 F4              BNE   LAB_137F          ; go print the [BELL] but ignore input character
  1082                                                      ; branch always
  1083                        
  1084                        ; crunch keywords into Basic tokens
  1085                        ; position independent buffer version ..
  1086                        ; faster, dictionary search version ....
  1087                        
  1088                        LAB_13A6
  1089 00:C2A3: A0 FF              LDY   #$FF              ; set save index (makes for easy math later)
  1090                        
  1091 00:C2A5: 38                 SEC                     ; set carry for subtract
  1092 00:C2A6: A5 C3              LDA   Bpntrl            ; get basic execute pointer low byte
  1093 00:C2A8: E9 21              SBC   #<Ibuffs          ; subtract input buffer start pointer
  1094 00:C2AA: AA                 TAX                     ; copy result to X (index past line # if any)
  1095                        
  1096 00:C2AB: 86 60              STX   Oquote            ; clear open quote/DATA flag
  1097                        LAB_13AC
  1098 00:C2AD: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1099 00:C2B0: F0 51              BEQ   LAB_13EC          ; if null save byte then exit
  1100                        
  1101 00:C2B2: C9 5F              CMP   #'_'              ; compare with "_"
  1102 00:C2B4: B0 4D              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1103                        
  1104 00:C2B6: C9 3C              CMP   #'<'              ; compare with "<"
  1105 00:C2B8: B0 0E              BCS   LAB_13CC          ; if >= go crunch now
  1106                        
  1107 00:C2BA: C9 30              CMP   #'0'              ; compare with "0"
  1108 00:C2BC: B0 45              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1109                        
  1110 00:C2BE: 85 5C              STA   Scnquo            ; save buffer byte as search character
  1111 00:C2C0: C9 22              CMP   #$22              ; is it quote character?
  1112 00:C2C2: F0 61              BEQ   LAB_1410          ; branch if so (copy quoted string)
  1113                        
  1114 00:C2C4: C9 2A              CMP   #'*'              ; compare with "*"
  1115 00:C2C6: 90 3B              BCC   LAB_13EC          ; if < go save byte then continue crunching
  1116                        
  1117                                                      ; else crunch now
  1118                        LAB_13CC
  1119 00:C2C8: 24 60              BIT   Oquote            ; get open quote/DATA token flag
  1120 00:C2CA: 70 37              BVS   LAB_13EC          ; branch if b6 of Oquote set (was DATA)
  1121                                                      ; go save byte then continue crunching
  1122                        
  1123 00:C2CC: 86 78              STX   TempB             ; save buffer read index
  1124 00:C2CE: 84 BA              STY   csidx             ; copy buffer save index
  1125 00:C2D0: A0 42              LDY   #<TAB_1STC        ; get keyword first character table low address
  1126 00:C2D2: 84 73              STY   ut2_pl            ; save pointer low byte
  1127 00:C2D4: A0 E3              LDY   #>TAB_1STC        ; get keyword first character table high address
  1128 00:C2D6: 84 74              STY   ut2_ph            ; save pointer high byte
  1129 00:C2D8: A0 00              LDY   #$00              ; clear table pointer
  1130                        
  1131                        LAB_13D0
  1132 00:C2DA: D1 73              CMP   (ut2_pl),Y        ; compare with keyword first character table byte
  1133 00:C2DC: F0 05              BEQ   LAB_13D1          ; go do word_table_chr if match
  1134                        
  1135 00:C2DE: 90 21              BCC   LAB_13EA          ; if < keyword first character table byte go restore
  1136                                                      ; Y and save to crunched
  1137                        
  1138 00:C2E0: C8                 INY                     ; else increment pointer
  1139 00:C2E1: D0 F7              BNE   LAB_13D0          ; and loop (branch always)
  1140                        
  1141                        ; have matched first character of some keyword
  1142                        
  1143                        LAB_13D1
  1144 00:C2E3: 98                 TYA                     ; copy matching index
  1145 00:C2E4: 0A                 ASL                     ; *2 (bytes per pointer)
  1146 00:C2E5: AA                 TAX                     ; copy to new index
  1147 00:C2E6: BD 60 E3           LDA   TAB_CHRT,X        ; get keyword table pointer low byte
  1148 00:C2E9: 85 73              STA   ut2_pl            ; save pointer low byte
  1149 00:C2EB: BD 61 E3           LDA   TAB_CHRT+1,X      ; get keyword table pointer high byte
  1150 00:C2EE: 85 74              STA   ut2_ph            ; save pointer high byte
  1151                        
  1152 00:C2F0: A0 FF              LDY   #$FF              ; clear table pointer (make -1 for start)
  1153                        
  1154 00:C2F2: A6 78              LDX   TempB             ; restore buffer read index
  1155                        
  1156                        LAB_13D6
  1157 00:C2F4: C8                 INY                     ; next table byte
  1158 00:C2F5: B1 73              LDA   (ut2_pl),Y        ; get byte from table
  1159                        LAB_13D8
  1160 00:C2F7: 30 08              BMI   LAB_13EA          ; all bytes matched so go save token
  1161                        
  1162 00:C2F9: E8                 INX                     ; next buffer byte
  1163 00:C2FA: DD 21 02           CMP   Ibuffs,X          ; compare with byte from input buffer
  1164 00:C2FD: F0 F5              BEQ   LAB_13D6          ; go compare next if match
  1165                        
  1166 00:C2FF: D0 2B              BNE   LAB_1417          ; branch if >< (not found keyword)
  1167                        
  1168                        LAB_13EA
  1169 00:C301: A4 BA              LDY   csidx             ; restore save index
  1170                        
  1171                                                      ; save crunched to output
  1172                        LAB_13EC
  1173 00:C303: E8                 INX                     ; increment buffer index (to next input byte)
  1174 00:C304: C8                 INY                     ; increment save index (to next output byte)
  1175 00:C305: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1176 00:C308: C9 00              CMP   #$00              ; set the flags, set carry
  1177 00:C30A: F0 32              BEQ   LAB_142A          ; do exit if was null [EOL]
  1178                        
  1179                                                      ; A holds token or byte here
  1180 00:C30C: E9 3A              SBC   #':'              ; subtract ":" (carry set by CMP #00)
  1181 00:C30E: F0 04              BEQ   LAB_13FF          ; branch if it was ":" (is now $00)
  1182                        
  1183                                                      ; A now holds token-$3A
  1184 00:C310: C9 49              CMP   #TK_DATA-$3A      ; compare with DATA token - $3A
  1185 00:C312: D0 02              BNE   LAB_1401          ; branch if not DATA
  1186                        
  1187                                                      ; token was : or DATA
  1188                        LAB_13FF
  1189 00:C314: 85 60              STA   Oquote            ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
  1190                        LAB_1401
  1191 00:C316: 49 57              EOR   #TK_REM-$3A       ; effectively subtract REM token offset
  1192 00:C318: D0 93              BNE   LAB_13AC          ; If wasn't REM then go crunch rest of line
  1193                        
  1194 00:C31A: 85 5C              STA   Asrch             ; else was REM so set search for [EOL]
  1195                        
  1196                                                      ; loop for REM, "..." etc.
  1197                        LAB_1408
  1198 00:C31C: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1199 00:C31F: F0 E2              BEQ   LAB_13EC          ; branch if null [EOL]
  1200                        
  1201 00:C321: C5 5C              CMP   Asrch             ; compare with stored character
  1202 00:C323: F0 DE              BEQ   LAB_13EC          ; branch if match (end quote)
  1203                        
  1204                                                      ; entry for copy string in quotes, don't crunch
  1205                        LAB_1410
  1206 00:C325: C8                 INY                     ; increment buffer save index
  1207 00:C326: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1208 00:C329: E8                 INX                     ; increment buffer read index
  1209 00:C32A: D0 F0              BNE   LAB_1408          ; loop while <> 0 (should never be 0!)
  1210                        
  1211                                                      ; not found keyword this go
  1212                        LAB_1417
  1213 00:C32C: A6 78              LDX   TempB             ; compare has failed, restore buffer index (start byte!)
  1214                        
  1215                                                      ; now find the end of this word in the table
  1216                        LAB_141B
  1217 00:C32E: B1 73              LDA   (ut2_pl),Y        ; get table byte
  1218 00:C330: 08                 PHP                     ; save status
  1219 00:C331: C8                 INY                     ; increment table index
  1220 00:C332: 28                 PLP                     ; restore byte status
  1221 00:C333: 10 F9              BPL   LAB_141B          ; if not end of keyword go do next
  1222                        
  1223 00:C335: B1 73              LDA   (ut2_pl),Y        ; get byte from keyword table
  1224 00:C337: D0 BE              BNE   LAB_13D8          ; go test next word if not zero byte (end of table)
  1225                        
  1226                                                      ; reached end of table with no match
  1227 00:C339: BD 21 02           LDA   Ibuffs,X          ; restore byte from input buffer
  1228 00:C33C: 10 C3              BPL   LAB_13EA          ; branch always (all bytes in buffer are $00-$7F)
  1229                                                      ; go save byte in output and continue crunching
  1230                        
  1231                                                      ; reached [EOL]
  1232                        LAB_142A
  1233 00:C33E: C8                 INY                     ; increment pointer
  1234 00:C33F: C8                 INY                     ; increment pointer (makes it next line pointer high byte)
  1235 00:C340: 99 21 02           STA   Ibuffs,Y          ; save [EOL] (marks [EOT] in immediate mode)
  1236 00:C343: C8                 INY                     ; adjust for line copy
  1237 00:C344: C8                 INY                     ; adjust for line copy
  1238 00:C345: C8                 INY                     ; adjust for line copy
  1239                        ; *** begin patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1240                        ; *** insert
  1241                              .IF   Ibuffs&$FF=0
  1242                              LDA   Bpntrl            ; test for $00
  1243                              BNE   LAB_142P          ; not $00
  1244                              DEC   Bpntrh            ; allow for increment when $xx00
  1245                        LAB_142P
  1246                              .ENDIF
  1247                        ; *** end   patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1248                        ; end of patch
  1249 00:C346: C6 C3              DEC   Bpntrl            ; allow for increment
  1250 00:C348: 60                 RTS
  1251                        
  1252                        ; search Basic for temp integer line number from start of mem
  1253                        
  1254                        LAB_SSLN
  1255 00:C349: A5 79              LDA   Smeml             ; get start of mem low byte
  1256 00:C34B: A6 7A              LDX   Smemh             ; get start of mem high byte
  1257                        
  1258                        ; search Basic for temp integer line number from AX
  1259                        ; returns carry set if found
  1260                        ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
  1261                        
  1262                        ; old 541 new 507
  1263                        
  1264                        LAB_SHLN
  1265 00:C34D: A0 01              LDY   #$01              ; set index
  1266 00:C34F: 85 AA              STA   Baslnl            ; save low byte as current
  1267 00:C351: 86 AB              STX   Baslnh            ; save high byte as current
  1268 00:C353: B1 AA              LDA   (Baslnl),Y        ; get pointer high byte from addr
  1269 00:C355: F0 1A              BEQ   LAB_145F          ; pointer was zero so we're done, do 'not found' exit
  1270                        
  1271 00:C357: A0 03              LDY   #$03              ; set index to line # high byte
  1272 00:C359: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1273 00:C35B: 88                 DEY                     ; decrement index (point to low byte)
  1274 00:C35C: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1275 00:C35E: D0 04              BNE   LAB_1455          ; if <> skip low byte check
  1276                        
  1277 00:C360: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1278 00:C362: C5 11              CMP   Itempl            ; compare with temporary integer low byte
  1279                        LAB_1455
  1280 00:C364: B0 09              BCS   LAB_145E          ; else if temp < this line, exit (passed line#)
  1281                        
  1282                        LAB_1456
  1283 00:C366: 88                 DEY                     ; decrement index to next line ptr high byte
  1284 00:C367: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1285 00:C369: AA                 TAX                     ; copy to X
  1286 00:C36A: 88                 DEY                     ; decrement index to next line ptr low byte
  1287 00:C36B: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1288 00:C36D: 90 DE              BCC   LAB_SHLN          ; go search for line # in temp (Itempl/Itemph) from AX
  1289                                                      ; (carry always clear)
  1290                        
  1291                        LAB_145E
  1292 00:C36F: F0 01              BEQ   LAB_1460          ; exit if temp = found line #, carry is set
  1293                        
  1294                        LAB_145F
  1295 00:C371: 18                 CLC                     ; clear found flag
  1296                        LAB_1460
  1297 00:C372: 60                 RTS
  1298                        
  1299                        ; perform NEW
  1300                        
  1301                        LAB_NEW
  1302 00:C373: D0 FD              BNE   LAB_1460          ; exit if not end of statement (to do syntax error)
  1303                        
  1304                        LAB_1463
  1305 00:C375: A9 00              LDA   #$00              ; clear A
  1306 00:C377: A8                 TAY                     ; clear Y
  1307 00:C378: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, low byte
  1308 00:C37A: C8                 INY                     ; increment index
  1309 00:C37B: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, high byte
  1310 00:C37D: 18                 CLC                     ; clear carry
  1311 00:C37E: A5 79              LDA   Smeml             ; get start of mem low byte
  1312 00:C380: 69 02              ADC   #$02              ; calculate end of BASIC low byte
  1313 00:C382: 85 7B              STA   Svarl             ; save start of vars low byte
  1314 00:C384: A5 7A              LDA   Smemh             ; get start of mem high byte
  1315 00:C386: 69 00              ADC   #$00              ; add any carry
  1316 00:C388: 85 7C              STA   Svarh             ; save start of vars high byte
  1317                        
  1318                        ; reset execution to start, clear vars and flush stack
  1319                        
  1320                        LAB_1477
  1321 00:C38A: 18                 CLC                     ; clear carry
  1322 00:C38B: A5 79              LDA   Smeml             ; get start of mem low byte
  1323 00:C38D: 69 FF              ADC   #$FF              ; -1
  1324 00:C38F: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1325 00:C391: A5 7A              LDA   Smemh             ; get start of mem high byte
  1326 00:C393: 69 FF              ADC   #$FF              ; -1+carry
  1327 00:C395: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1328                        
  1329                        ; "CLEAR" command gets here
  1330                        
  1331                        LAB_147A
  1332 00:C397: A5 85              LDA   Ememl             ; get end of mem low byte
  1333 00:C399: A4 86              LDY   Ememh             ; get end of mem high byte
  1334 00:C39B: 85 81              STA   Sstorl            ; set bottom of string space low byte
  1335 00:C39D: 84 82              STY   Sstorh            ; set bottom of string space high byte
  1336 00:C39F: A5 7B              LDA   Svarl             ; get start of vars low byte
  1337 00:C3A1: A4 7C              LDY   Svarh             ; get start of vars high byte
  1338 00:C3A3: 85 7D              STA   Sarryl            ; save var mem end low byte
  1339 00:C3A5: 84 7E              STY   Sarryh            ; save var mem end high byte
  1340 00:C3A7: 85 7F              STA   Earryl            ; save array mem end low byte
  1341 00:C3A9: 84 80              STY   Earryh            ; save array mem end high byte
  1342 00:C3AB: 20 62 C5           JSR   LAB_161A          ; perform RESTORE command
  1343                        
  1344                        ; flush stack and clear continue flag
  1345                        
  1346                        LAB_1491
  1347 00:C3AE: A2 68              LDX   #des_sk           ; set descriptor stack pointer
  1348 00:C3B0: 86 65              STX   next_s            ; save descriptor stack pointer
  1349 00:C3B2: 68                 PLA                     ; pull return address low byte
  1350 00:C3B3: AA                 TAX                     ; copy return address low byte
  1351 00:C3B4: 68                 PLA                     ; pull return address high byte
  1352 00:C3B5: 8E FE 01           STX   LAB_SKFE          ; save to cleared stack
  1353 00:C3B8: 8D FF 01           STA   LAB_SKFF          ; save to cleared stack
  1354 00:C3BB: A2 FD              LDX   #$FD              ; new stack pointer
  1355 00:C3BD: 9A                 TXS                     ; reset stack
  1356 00:C3BE: A9 00              LDA   #$00              ; clear byte
  1357                        ;*** fix p2: no longer necessary as the continue pointer is saved anyway
  1358                        ;      STA   Cpntrh            ; clear continue pointer high byte
  1359 00:C3C0: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  1360                        LAB_14A6
  1361 00:C3C2: 60                 RTS
  1362                        
  1363                        ; perform CLEAR
  1364                        
  1365                        LAB_CLEAR
  1366 00:C3C3: F0 D2              BEQ   LAB_147A          ; if no following token go do "CLEAR"
  1367                        
  1368                                                      ; else there was a following token (go do syntax error)
  1369 00:C3C5: 60                 RTS
  1370                        
  1371                        ; perform LIST [n][-m]
  1372                        ; bigger, faster version (a _lot_ faster)
  1373                        
  1374                        LAB_LIST
  1375 00:C3C6: 90 06              BCC   LAB_14BD          ; branch if next character numeric (LIST n..)
  1376                        
  1377 00:C3C8: F0 04              BEQ   LAB_14BD          ; branch if next character [NULL] (LIST)
  1378                        
  1379 00:C3CA: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1380 00:C3CC: D0 F4              BNE   LAB_14A6          ; exit if not - (LIST -m)
  1381                        
  1382                                                      ; LIST [[n][-m]]
  1383                                                      ; this bit sets the n , if present, as the start and end
  1384                        LAB_14BD
  1385 00:C3CE: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1386 00:C3D1: 20 49 C3           JSR   LAB_SSLN          ; search BASIC for temp integer line number
  1387                                                      ; (pointer in Baslnl/Baslnh)
  1388 00:C3D4: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1389 00:C3D7: F0 0C              BEQ   LAB_14D4          ; branch if no more characters
  1390                        
  1391                                                      ; this bit checks the - is present
  1392 00:C3D9: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1393 00:C3DB: D0 95              BNE   LAB_1460          ; return if not "-" (will be Syntax error)
  1394                        
  1395                                                      ; LIST [n]-m
  1396                                                      ; the - was there so set m as the end value
  1397 00:C3DD: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1398 00:C3E0: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1399 00:C3E3: D0 8D              BNE   LAB_1460          ; exit if not ok
  1400                        
  1401                        LAB_14D4
  1402 00:C3E5: A5 11              LDA   Itempl            ; get temporary integer low byte
  1403 00:C3E7: 05 12              ORA   Itemph            ; OR temporary integer high byte
  1404 00:C3E9: D0 06              BNE   LAB_14E2          ; branch if start set
  1405                        
  1406 00:C3EB: A9 FF              LDA   #$FF              ; set for -1
  1407 00:C3ED: 85 11              STA   Itempl            ; set temporary integer low byte
  1408 00:C3EF: 85 12              STA   Itemph            ; set temporary integer high byte
  1409                        LAB_14E2
  1410 00:C3F1: A0 01              LDY   #$01              ; set index for line
  1411 00:C3F3: 84 60              STY   Oquote            ; clear open quote flag
  1412 00:C3F5: 20 B5 C8           JSR   LAB_CRLF          ; print CR/LF
  1413 00:C3F8: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1414                                                      ; pointer initially set by search at LAB_14BD
  1415 00:C3FA: F0 3E              BEQ   LAB_152B          ; if null all done so exit
  1416 00:C3FC: 20 38 C5           JSR   LAB_1629          ; do CRTL-C check vector
  1417                        
  1418 00:C3FF: C8                 INY                     ; increment index for line
  1419 00:C400: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1420 00:C402: AA                 TAX                     ; copy to X
  1421 00:C403: C8                 INY                     ; increment index
  1422 00:C404: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1423 00:C406: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1424 00:C408: D0 04              BNE   LAB_14FF          ; branch if no high byte match
  1425                        
  1426 00:C40A: E4 11              CPX   Itempl            ; compare with temporary integer low byte
  1427 00:C40C: F0 02              BEQ   LAB_1501          ; branch if = last line to do (< will pass next branch)
  1428                        
  1429                        LAB_14FF                      ; else ..
  1430 00:C40E: B0 2A              BCS   LAB_152B          ; if greater all done so exit
  1431                        
  1432                        LAB_1501
  1433 00:C410: 84 97              STY   Tidx1             ; save index for line
  1434 00:C412: 20 B1 DA           JSR   LAB_295E          ; print XA as unsigned integer
  1435 00:C415: A9 20              LDA   #$20              ; space is the next character
  1436                        LAB_1508
  1437 00:C417: A4 97              LDY   Tidx1             ; get index for line
  1438 00:C419: 29 7F              AND   #$7F              ; mask top out bit of character
  1439                        LAB_150C
  1440 00:C41B: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  1441 00:C41E: C9 22              CMP   #$22              ; was it " character
  1442 00:C420: D0 06              BNE   LAB_1519          ; branch if not
  1443                        
  1444                                                      ; we are either entering or leaving a pair of quotes
  1445 00:C422: A5 60              LDA   Oquote            ; get open quote flag
  1446 00:C424: 49 FF              EOR   #$FF              ; toggle it
  1447 00:C426: 85 60              STA   Oquote            ; save it back
  1448                        LAB_1519
  1449 00:C428: C8                 INY                     ; increment index
  1450 00:C429: B1 AA              LDA   (Baslnl),Y        ; get next byte
  1451 00:C42B: D0 0E              BNE   LAB_152E          ; branch if not [EOL] (go print character)
  1452 00:C42D: A8                 TAY                     ; else clear index
  1453 00:C42E: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1454 00:C430: AA                 TAX                     ; copy to X
  1455 00:C431: C8                 INY                     ; increment index
  1456 00:C432: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1457 00:C434: 86 AA              STX   Baslnl            ; set pointer to line low byte
  1458 00:C436: 85 AB              STA   Baslnh            ; set pointer to line high byte
  1459 00:C438: D0 B7              BNE   LAB_14E2          ; go do next line if not [EOT]
  1460                                                      ; else ..
  1461                        LAB_152B
  1462 00:C43A: 60                 RTS
  1463                        
  1464                        LAB_152E
  1465 00:C43B: 10 DE              BPL   LAB_150C          ; just go print it if not token byte
  1466                        
  1467                                                      ; else was token byte so uncrunch it (maybe)
  1468 00:C43D: 24 60              BIT   Oquote            ; test the open quote flag
  1469 00:C43F: 30 DA              BMI   LAB_150C          ; just go print character if open quote set
  1470                        
  1471 00:C441: A2 E5              LDX   #>LAB_KEYT        ; get table address high byte
  1472 00:C443: 0A                 ASL                     ; *2
  1473 00:C444: 0A                 ASL                     ; *4
  1474 00:C445: 90 02              BCC   LAB_152F          ; branch if no carry
  1475                        
  1476 00:C447: E8                 INX                     ; else increment high byte
  1477 00:C448: 18                 CLC                     ; clear carry for add
  1478                        LAB_152F
  1479 00:C449: 69 43              ADC   #<LAB_KEYT        ; add low byte
  1480 00:C44B: 90 01              BCC   LAB_1530          ; branch if no carry
  1481                        
  1482 00:C44D: E8                 INX                     ; else increment high byte
  1483                        LAB_1530
  1484 00:C44E: 85 73              STA   ut2_pl            ; save table pointer low byte
  1485 00:C450: 86 74              STX   ut2_ph            ; save table pointer high byte
  1486 00:C452: 84 97              STY   Tidx1             ; save index for line
  1487 00:C454: A0 00              LDY   #$00              ; clear index
  1488 00:C456: B1 73              LDA   (ut2_pl),Y        ; get length
  1489 00:C458: AA                 TAX                     ; copy length
  1490 00:C459: C8                 INY                     ; increment index
  1491 00:C45A: B1 73              LDA   (ut2_pl),Y        ; get 1st character
  1492 00:C45C: CA                 DEX                     ; decrement length
  1493 00:C45D: F0 B8              BEQ   LAB_1508          ; if no more characters exit and print
  1494                        
  1495 00:C45F: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  1496 00:C462: C8                 INY                     ; increment index
  1497 00:C463: B1 73              LDA   (ut2_pl),Y        ; get keyword address low byte
  1498 00:C465: 48                 PHA                     ; save it for now
  1499 00:C466: C8                 INY                     ; increment index
  1500 00:C467: B1 73              LDA   (ut2_pl),Y        ; get keyword address high byte
  1501 00:C469: A0 00              LDY   #$00
  1502 00:C46B: 85 74              STA   ut2_ph            ; save keyword pointer high byte
  1503 00:C46D: 68                 PLA                     ; pull low byte
  1504 00:C46E: 85 73              STA   ut2_pl            ; save keyword pointer low byte
  1505                        LAB_1540
  1506 00:C470: B1 73              LDA   (ut2_pl),Y        ; get character
  1507 00:C472: CA                 DEX                     ; decrement character count
  1508 00:C473: F0 A2              BEQ   LAB_1508          ; if last character exit and print
  1509                        
  1510 00:C475: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  1511 00:C478: C8                 INY                     ; increment index
  1512 00:C479: D0 F5              BNE   LAB_1540          ; loop for next character
  1513                        
  1514                        ; perform FOR
  1515                        
  1516                        LAB_FOR
  1517 00:C47B: A9 80              LDA   #$80              ; set FNX
  1518 00:C47D: 85 61              STA   Sufnxf            ; set subscript/FNX flag
  1519 00:C47F: 20 D7 C7           JSR   LAB_LET           ; go do LET
  1520 00:C482: 68                 PLA                     ; pull return address
  1521 00:C483: 68                 PLA                     ; pull return address
  1522 00:C484: A9 10              LDA   #$10              ; we need 16d bytes !
  1523 00:C486: 20 25 C1           JSR   LAB_1212          ; check room on stack for A bytes
  1524 00:C489: 20 BD C6           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  1525 00:C48C: 18                 CLC                     ; clear carry for add
  1526 00:C48D: 98                 TYA                     ; copy index to A
  1527 00:C48E: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1528 00:C490: 48                 PHA                     ; push onto stack
  1529 00:C491: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1530 00:C493: 69 00              ADC   #$00              ; add carry
  1531 00:C495: 48                 PHA                     ; push onto stack
  1532 00:C496: A5 88              LDA   Clineh            ; get current line high byte
  1533 00:C498: 48                 PHA                     ; push onto stack
  1534 00:C499: A5 87              LDA   Clinel            ; get current line low byte
  1535 00:C49B: 48                 PHA                     ; push onto stack
  1536 00:C49C: A9 AD              LDA   #TK_TO            ; get "TO" token
  1537 00:C49E: 20 13 CC           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  1538 00:C4A1: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  1539 00:C4A4: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1540                                                      ; else do type mismatch
  1541                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  1542                        ; *** add
  1543 00:C4A7: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  1544                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  1545 00:C4AA: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  1546 00:C4AC: 09 7F              ORA   #$7F              ; set all non sign bits
  1547 00:C4AE: 25 AD              AND   FAC1_1            ; and FAC1 mantissa1
  1548 00:C4B0: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  1549 00:C4B2: A9 BD              LDA   #<LAB_159F        ; set return address low byte
  1550 00:C4B4: A0 C4              LDY   #>LAB_159F        ; set return address high byte
  1551 00:C4B6: 85 71              STA   ut1_pl            ; save return address low byte
  1552 00:C4B8: 84 72              STY   ut1_ph            ; save return address high byte
  1553 00:C4BA: 4C A9 CB           JMP   LAB_1B66          ; round FAC1 and put on stack (returns to next instruction)
  1554                        
  1555                        LAB_159F
  1556 00:C4BD: A9 12              LDA   #<LAB_259C        ; set 1 pointer low addr (default step size)
  1557 00:C4BF: A0 E2              LDY   #>LAB_259C        ; set 1 pointer high addr
  1558 00:C4C1: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  1559 00:C4C4: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1560 00:C4C7: C9 B2              CMP   #TK_STEP          ; compare with STEP token
  1561 00:C4C9: D0 06              BNE   LAB_15B3          ; jump if not "STEP"
  1562                        
  1563                                                      ;.was step so ..
  1564 00:C4CB: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1565 00:C4CE: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1566                                                      ; else do type mismatch
  1567                        LAB_15B3
  1568 00:C4D1: 20 18 D9           JSR   LAB_27CA          ; return A=FF,C=1/-ve A=01,C=0/+ve
  1569 00:C4D4: 85 B0              STA   FAC1_s            ; set FAC1 sign (b7)
  1570                                                      ; this is +1 for +ve step and -1 for -ve step, in NEXT we
  1571                                                      ; compare the FOR value and the TO value and return +1 if
  1572                                                      ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
  1573                                                      ; here (+/-1) is then compared to that result and if they
  1574                                                      ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
  1575                                                      ; the loop is done
  1576                                                     
  1577                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1578                        ; *** add
  1579                           .IF $&$FF=$FD
  1580                              NOP                     ; return address of JSR +1 (on  next page)
  1581                           .ENDIF  
  1582                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1583 00:C4D6: 20 9B CB           JSR   LAB_1B5B          ; push sign, round FAC1 and put on stack
  1584 00:C4D9: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  1585 00:C4DB: 48                 PHA                     ; push on stack
  1586 00:C4DC: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  1587 00:C4DE: 48                 PHA                     ; push on stack
  1588 00:C4DF: A9 81              LDA   #TK_FOR           ; get FOR token
  1589 00:C4E1: 48                 PHA                     ; push on stack
  1590                        
  1591                        ; interpreter inner loop
  1592                        
  1593                        LAB_15C2
  1594 00:C4E2: 20 38 C5           JSR   LAB_1629          ; do CRTL-C check vector
  1595 00:C4E5: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1596 00:C4E7: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  1597                        
  1598 00:C4E9: A6 88              LDX   Clineh            ; continue line is $FFxx for immediate mode
  1599                                                      ; ($00xx for RUN from immediate mode)
  1600 00:C4EB: E8                 INX                     ; increment it (now $00 if immediate mode)
  1601                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1602                        ;      BEQ   LAB_15D1          ; branch if null (immediate mode)
  1603                        
  1604 00:C4EC: 85 8B              STA   Cpntrl            ; save continue pointer low byte
  1605 00:C4EE: 84 8C              STY   Cpntrh            ; save continue pointer high byte
  1606                        LAB_15D1
  1607 00:C4F0: A0 00              LDY   #$00              ; clear index
  1608 00:C4F2: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  1609 00:C4F4: F0 07              BEQ   LAB_15DC          ; branch if null [EOL]
  1610                        
  1611 00:C4F6: C9 3A              CMP   #':'              ; compare with ":"
  1612 00:C4F8: F0 1D              BEQ   LAB_15F6          ; branch if = (statement separator)
  1613                        
  1614                        LAB_15D9
  1615 00:C4FA: 4C 24 CC           JMP   LAB_SNER          ; else syntax error then warm start
  1616                        
  1617                                                      ; have reached [EOL]
  1618                        LAB_15DC
  1619 00:C4FD: A0 02              LDY   #$02              ; set index
  1620 00:C4FF: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  1621 00:C501: 18                 CLC                     ; clear carry for no "BREAK" message
  1622 00:C502: F0 50              BEQ   LAB_1651          ; if null go to immediate mode (was immediate or [EOT]
  1623                                                      ; marker)
  1624                        
  1625 00:C504: C8                 INY                     ; increment index
  1626 00:C505: B1 C3              LDA   (Bpntrl),Y        ; get line # low byte
  1627 00:C507: 85 87              STA   Clinel            ; save current line low byte
  1628 00:C509: C8                 INY                     ; increment index
  1629 00:C50A: B1 C3              LDA   (Bpntrl),Y        ; get line # high byte
  1630 00:C50C: 85 88              STA   Clineh            ; save current line high byte
  1631 00:C50E: 98                 TYA                     ; A now = 4
  1632 00:C50F: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1633 00:C511: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1634 00:C513: 90 02              BCC   LAB_15F6          ; branch if no overflow
  1635                        
  1636 00:C515: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  1637                        LAB_15F6
  1638 00:C517: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1639                        
  1640                        LAB_15F9
  1641 00:C51A: 20 20 C5           JSR   LAB_15FF          ; go interpret BASIC code from (Bpntrl)
  1642                        
  1643                        LAB_15FC
  1644 00:C51D: 4C E2 C4           JMP   LAB_15C2          ; loop
  1645                        
  1646                        ; interpret BASIC code from (Bpntrl)
  1647                        
  1648                        LAB_15FF
  1649 00:C520: F0 4E              BEQ   LAB_1628          ; exit if zero [EOL]
  1650                        
  1651                        LAB_1602
  1652 00:C522: 0A                 ASL                     ; *2 bytes per vector and normalise token
  1653 00:C523: B0 03              BCS   LAB_1609          ; branch if was token
  1654                        
  1655 00:C525: 4C D7 C7           JMP   LAB_LET           ; else go do implied LET
  1656                        
  1657                        LAB_1609
  1658 00:C528: C9 56              CMP   #(TK_TAB-$80)*2   ; compare normalised token * 2 with TAB
  1659 00:C52A: B0 CE              BCS   LAB_15D9          ; branch if A>=TAB (do syntax error then warm start)
  1660                                                      ; only tokens before TAB can start a line
  1661 00:C52C: A8                 TAY                     ; copy to index
  1662 00:C52D: B9 3A E2           LDA   LAB_CTBL+1,Y      ; get vector high byte
  1663 00:C530: 48                 PHA                     ; onto stack
  1664 00:C531: B9 39 E2           LDA   LAB_CTBL,Y        ; get vector low byte
  1665 00:C534: 48                 PHA                     ; onto stack
  1666 00:C535: 4C BC 00           JMP   LAB_IGBY          ; jump to increment and scan memory
  1667                                                      ; then "return" to vector
  1668                        
  1669                        ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
  1670                        ; key press is detected.
  1671                        
  1672                        LAB_1629
  1673 00:C538: 6C 03 02           JMP   (VEC_CC)          ; ctrl c check vector
  1674                        
  1675                        ; if there was a key press it gets back here ..
  1676                        
  1677                        LAB_1636
  1678 00:C53B: C9 03              CMP   #$03              ; compare with CTRL-C
  1679                        
  1680                        ; perform STOP
  1681                        
  1682                        LAB_STOP
  1683 00:C53D: B0 01              BCS   LAB_163B          ; branch if token follows STOP
  1684                                                      ; else just END
  1685                        ; END
  1686                        
  1687                        LAB_END
  1688 00:C53F: 18                 CLC                     ; clear the carry, indicate a normal program end
  1689                        LAB_163B
  1690 00:C540: D0 61              BNE   LAB_167A          ; if wasn't CTRL-C or there is a following byte return
  1691                        
  1692 00:C542: A5 C4              LDA   Bpntrh            ; get the BASIC execute pointer high byte
  1693                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1694                        ;      EOR   #>Ibuffs          ; compare with buffer address high byte (Cb unchanged)
  1695                        ;      BEQ   LAB_164F          ; branch if the BASIC pointer is in the input buffer
  1696                        ;                              ; (can't continue in immediate mode)
  1697                        ;                              ; else ..
  1698                        ;      EOR   #>Ibuffs          ; correct the bits
  1699 00:C544: A4 C3              LDY   Bpntrl            ; get BASIC execute pointer low byte
  1700 00:C546: 84 8B              STY   Cpntrl            ; save continue pointer low byte
  1701 00:C548: 85 8C              STA   Cpntrh            ; save continue pointer high byte
  1702                        LAB_1647
  1703 00:C54A: A5 87              LDA   Clinel            ; get current line low byte
  1704 00:C54C: A4 88              LDY   Clineh            ; get current line high byte
  1705 00:C54E: 85 89              STA   Blinel            ; save break line low byte
  1706 00:C550: 84 8A              STY   Blineh            ; save break line high byte
  1707                        LAB_164F
  1708 00:C552: 68                 PLA                     ; pull return address low
  1709 00:C553: 68                 PLA                     ; pull return address high
  1710                        LAB_1651
  1711 00:C554: 90 07              BCC   LAB_165E          ; if was program end just do warm start
  1712                        
  1713                                                      ; else ..
  1714 00:C556: A9 10              LDA   #<LAB_BMSG        ; point to "Break" low byte
  1715 00:C558: A0 E8              LDY   #>LAB_BMSG        ; point to "Break" high byte
  1716 00:C55A: 4C 74 C1           JMP   LAB_1269          ; print "Break" and do warm start
  1717                        
  1718                        LAB_165E
  1719 00:C55D: 4C 7F C1           JMP   LAB_1274          ; go do warm start
  1720                        
  1721                        ; perform RESTORE
  1722                        
  1723                        LAB_RESTORE
  1724 00:C560: D0 0F              BNE   LAB_RESTOREn      ; branch if next character not null (RESTORE n)
  1725                        
  1726                        LAB_161A
  1727 00:C562: 38                 SEC                     ; set carry for subtract
  1728 00:C563: A5 79              LDA   Smeml             ; get start of mem low byte
  1729 00:C565: E9 01              SBC   #$01              ; -1
  1730 00:C567: A4 7A              LDY   Smemh             ; get start of mem high byte
  1731 00:C569: B0 01              BCS   LAB_1624          ; branch if no underflow
  1732                        
  1733                        LAB_uflow
  1734 00:C56B: 88                 DEY                     ; else decrement high byte
  1735                        LAB_1624
  1736 00:C56C: 85 8F              STA   Dptrl             ; save DATA pointer low byte
  1737 00:C56E: 84 90              STY   Dptrh             ; save DATA pointer high byte
  1738                        LAB_1628
  1739 00:C570: 60                 RTS
  1740                        
  1741                                                      ; is RESTORE n
  1742                        LAB_RESTOREn
  1743 00:C571: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1744 00:C574: 20 C0 C6           JSR   LAB_SNBL          ; scan for next BASIC line
  1745 00:C577: A5 88              LDA   Clineh            ; get current line high byte
  1746 00:C579: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1747 00:C57B: B0 0B              BCS   LAB_reset_search  ; branch if >= (start search from beginning)
  1748                        
  1749 00:C57D: 98                 TYA                     ; else copy line index to A
  1750 00:C57E: 38                 SEC                     ; set carry (+1)
  1751 00:C57F: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1752 00:C581: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1753 00:C583: 90 07              BCC   LAB_go_search     ; branch if no overflow to high byte
  1754                        
  1755 00:C585: E8                 INX                     ; increment high byte
  1756 00:C586: B0 04              BCS   LAB_go_search     ; branch always (can never be carry clear)
  1757                        
  1758                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1759                        
  1760                        LAB_reset_search
  1761 00:C588: A5 79              LDA   Smeml             ; get start of mem low byte
  1762 00:C58A: A6 7A              LDX   Smemh             ; get start of mem high byte
  1763                        
  1764                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1765                        
  1766                        LAB_go_search
  1767                        
  1768 00:C58C: 20 4D C3           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1769 00:C58F: B0 03              BCS   LAB_line_found    ; if carry set go set pointer
  1770                        
  1771 00:C591: 4C 92 C6           JMP   LAB_16F7          ; else go do "Undefined statement" error
  1772                        
  1773                        LAB_line_found
  1774                                                      ; carry already set for subtract
  1775 00:C594: A5 AA              LDA   Baslnl            ; get pointer low byte
  1776 00:C596: E9 01              SBC   #$01              ; -1
  1777 00:C598: A4 AB              LDY   Baslnh            ; get pointer high byte
  1778 00:C59A: B0 D0              BCS   LAB_1624          ; branch if no underflow (save DATA pointer and return)
  1779                        
  1780 00:C59C: 90 CD              BCC   LAB_uflow         ; else decrement high byte then save DATA pointer and
  1781                                                      ; return (branch always)
  1782                        
  1783                        ; perform NULL
  1784                        
  1785                        LAB_NULL
  1786 00:C59E: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter
  1787 00:C5A1: 86 0D              STX   Nullct            ; save new NULL count
  1788                        LAB_167A
  1789 00:C5A3: 60                 RTS
  1790                        
  1791                        ; perform CONT
  1792                        
  1793                        LAB_CONT
  1794 00:C5A4: D0 FD              BNE   LAB_167A          ; if following byte exit to do syntax error
  1795                        
  1796 00:C5A6: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  1797 00:C5A8: C0 02              CPY   #>Ibuffs          ; *** fix p2: test direct mode
  1798 00:C5AA: D0 05              BNE   LAB_166C          ; go do continue if we can
  1799                        
  1800 00:C5AC: A2 1E              LDX   #$1E              ; error code $1E ("Can't continue" error)
  1801 00:C5AE: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  1802                        
  1803                                                      ; we can continue so ..
  1804                        LAB_166C
  1805 00:C5B1: A9 93              LDA   #TK_ON            ; set token for ON
  1806 00:C5B3: 20 45 DF           JSR   LAB_IRQ           ; set IRQ flags
  1807 00:C5B6: A9 93              LDA   #TK_ON            ; set token for ON
  1808 00:C5B8: 20 48 DF           JSR   LAB_NMI           ; set NMI flags
  1809                        
  1810 00:C5BB: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  1811 00:C5BD: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  1812 00:C5BF: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1813 00:C5C1: A5 89              LDA   Blinel            ; get break line low byte
  1814 00:C5C3: A4 8A              LDY   Blineh            ; get break line high byte
  1815 00:C5C5: 85 87              STA   Clinel            ; set current line low byte
  1816 00:C5C7: 84 88              STY   Clineh            ; set current line high byte
  1817 00:C5C9: 60                 RTS
  1818                        
  1819                        ; perform RUN
  1820                        
  1821                        LAB_RUN
  1822 00:C5CA: D0 03              BNE   LAB_1696          ; branch if RUN n
  1823 00:C5CC: 4C 8A C3           JMP   LAB_1477          ; reset execution to start, clear variables, flush stack and
  1824                                                      ; return
  1825                        
  1826                        ; does RUN n
  1827                        
  1828                        LAB_1696
  1829 00:C5CF: 20 97 C3           JSR   LAB_147A          ; go do "CLEAR"
  1830 00:C5D2: F0 2E              BEQ   LAB_16B0          ; get n and do GOTO n (branch always as CLEAR sets Z=1)
  1831                        
  1832                        ; perform DO
  1833                        
  1834                        LAB_DO
  1835 00:C5D4: A9 05              LDA   #$05              ; need 5 bytes for DO
  1836 00:C5D6: 20 25 C1           JSR   LAB_1212          ; check room on stack for A bytes
  1837 00:C5D9: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1838 00:C5DB: 48                 PHA                     ; push on stack
  1839 00:C5DC: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1840 00:C5DE: 48                 PHA                     ; push on stack
  1841 00:C5DF: A5 88              LDA   Clineh            ; get current line high byte
  1842 00:C5E1: 48                 PHA                     ; push on stack
  1843 00:C5E2: A5 87              LDA   Clinel            ; get current line low byte
  1844 00:C5E4: 48                 PHA                     ; push on stack
  1845 00:C5E5: A9 9D              LDA   #TK_DO            ; token for DO
  1846 00:C5E7: 48                 PHA                     ; push on stack
  1847 00:C5E8: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1848 00:C5EB: 4C E2 C4           JMP   LAB_15C2          ; go do interpreter inner loop
  1849                        
  1850                        ; perform GOSUB
  1851                        
  1852                        LAB_GOSUB
  1853 00:C5EE: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  1854 00:C5F0: 20 25 C1           JSR   LAB_1212          ; check room on stack for A bytes
  1855 00:C5F3: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1856 00:C5F5: 48                 PHA                     ; push on stack
  1857 00:C5F6: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1858 00:C5F8: 48                 PHA                     ; push on stack
  1859 00:C5F9: A5 88              LDA   Clineh            ; get current line high byte
  1860 00:C5FB: 48                 PHA                     ; push on stack
  1861 00:C5FC: A5 87              LDA   Clinel            ; get current line low byte
  1862 00:C5FE: 48                 PHA                     ; push on stack
  1863 00:C5FF: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  1864 00:C601: 48                 PHA                     ; push on stack
  1865                        LAB_16B0
  1866 00:C602: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1867 00:C605: 20 0B C6           JSR   LAB_GOTO          ; perform GOTO n
  1868 00:C608: 4C E2 C4           JMP   LAB_15C2          ; go do interpreter inner loop
  1869                                                      ; (can't RTS, we used the stack!)
  1870                        
  1871                        ; perform GOTO
  1872                        
  1873                        LAB_GOTO
  1874 00:C60B: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1875 00:C60E: 20 C0 C6           JSR   LAB_SNBL          ; scan for next BASIC line
  1876 00:C611: A5 88              LDA   Clineh            ; get current line high byte
  1877 00:C613: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1878 00:C615: B0 0B              BCS   LAB_16D0          ; branch if >= (start search from beginning)
  1879                        
  1880 00:C617: 98                 TYA                     ; else copy line index to A
  1881 00:C618: 38                 SEC                     ; set carry (+1)
  1882 00:C619: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1883 00:C61B: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1884 00:C61D: 90 07              BCC   LAB_16D4          ; branch if no overflow to high byte
  1885                        
  1886 00:C61F: E8                 INX                     ; increment high byte
  1887 00:C620: B0 04              BCS   LAB_16D4          ; branch always (can never be carry)
  1888                        
  1889                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1890                        
  1891                        LAB_16D0
  1892 00:C622: A5 79              LDA   Smeml             ; get start of mem low byte
  1893 00:C624: A6 7A              LDX   Smemh             ; get start of mem high byte
  1894                        
  1895                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1896                        
  1897                        LAB_16D4
  1898 00:C626: 20 4D C3           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1899 00:C629: 90 67              BCC   LAB_16F7          ; if carry clear go do "Undefined statement" error
  1900                                                      ; (unspecified statement)
  1901                        
  1902                                                      ; carry already set for subtract
  1903 00:C62B: A5 AA              LDA   Baslnl            ; get pointer low byte
  1904 00:C62D: E9 01              SBC   #$01              ; -1
  1905 00:C62F: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1906 00:C631: A5 AB              LDA   Baslnh            ; get pointer high byte
  1907 00:C633: E9 00              SBC   #$00              ; subtract carry
  1908 00:C635: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1909                        LAB_16E5
  1910 00:C637: 60                 RTS
  1911                        
  1912                        LAB_DONOK
  1913 00:C638: A2 22              LDX   #$22              ; error code $22 ("LOOP without DO" error)
  1914 00:C63A: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  1915                        
  1916                        ; perform LOOP
  1917                        
  1918                        LAB_LOOP
  1919 00:C63D: A8                 TAY                     ; save following token
  1920 00:C63E: BA                 TSX                     ; copy stack pointer
  1921 00:C63F: BD 03 01           LDA   LAB_STAK+3,X      ; get token byte from stack
  1922 00:C642: C9 9D              CMP   #TK_DO            ; compare with DO token
  1923 00:C644: D0 F2              BNE   LAB_DONOK         ; branch if no matching DO
  1924                        
  1925 00:C646: E8                 INX                     ; dump calling routine return address
  1926 00:C647: E8                 INX                     ; dump calling routine return address
  1927 00:C648: 9A                 TXS                     ; correct stack
  1928 00:C649: 98                 TYA                     ; get saved following token back
  1929 00:C64A: F0 20              BEQ   LoopAlways        ; if no following token loop forever
  1930                                                      ; (stack pointer in X)
  1931                        
  1932 00:C64C: C9 3A              CMP   #':'              ; could be ':'
  1933 00:C64E: F0 1C              BEQ   LoopAlways        ; if :... loop forever
  1934                        
  1935 00:C650: E9 B3              SBC   #TK_UNTIL         ; subtract token for UNTIL, we know carry is set here
  1936 00:C652: AA                 TAX                     ; copy to X (if it was UNTIL then Y will be correct)
  1937 00:C653: F0 04              BEQ   DoRest            ; branch if was UNTIL
  1938                        
  1939 00:C655: CA                 DEX                     ; decrement result
  1940 00:C656: D0 62              BNE   LAB_16FC          ; if not WHILE go do syntax error and warm start
  1941                                                      ; only if the token was WHILE will this fail
  1942                        
  1943 00:C658: CA                 DEX                     ; set invert result byte
  1944                        DoRest
  1945 00:C659: 86 98              STX   Frnxth            ; save invert result byte
  1946 00:C65B: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1947 00:C65E: 20 03 CB           JSR   LAB_EVEX          ; evaluate expression
  1948 00:C661: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  1949 00:C663: F0 02              BEQ   DoCmp             ; if =0 go do straight compare
  1950                        
  1951 00:C665: A9 FF              LDA   #$FF              ; else set all bits
  1952                        DoCmp
  1953 00:C667: BA                 TSX                     ; copy stack pointer
  1954 00:C668: 45 98              EOR   Frnxth            ; EOR with invert byte
  1955 00:C66A: D0 1A              BNE   LoopDone          ; if <> 0 clear stack and back to interpreter loop
  1956                        
  1957                                                      ; loop condition wasn't met so do it again
  1958                        LoopAlways
  1959 00:C66C: BD 02 01           LDA   LAB_STAK+2,X      ; get current line low byte
  1960 00:C66F: 85 87              STA   Clinel            ; save current line low byte
  1961 00:C671: BD 03 01           LDA   LAB_STAK+3,X      ; get current line high byte
  1962 00:C674: 85 88              STA   Clineh            ; save current line high byte
  1963 00:C676: BD 04 01           LDA   LAB_STAK+4,X      ; get BASIC execute pointer low byte
  1964 00:C679: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1965 00:C67B: BD 05 01           LDA   LAB_STAK+5,X      ; get BASIC execute pointer high byte
  1966 00:C67E: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1967 00:C680: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1968 00:C683: 4C E2 C4           JMP   LAB_15C2          ; go do interpreter inner loop
  1969                        
  1970                                                      ; clear stack and back to interpreter loop
  1971                        LoopDone
  1972 00:C686: E8                 INX                     ; dump DO token
  1973 00:C687: E8                 INX                     ; dump current line low byte
  1974 00:C688: E8                 INX                     ; dump current line high byte
  1975 00:C689: E8                 INX                     ; dump BASIC execute pointer low byte
  1976 00:C68A: E8                 INX                     ; dump BASIC execute pointer high byte
  1977 00:C68B: 9A                 TXS                     ; correct stack
  1978 00:C68C: 4C AC C6           JMP   LAB_DATA          ; go perform DATA (find : or [EOL])
  1979                        
  1980                        ; do the return without gosub error
  1981                        
  1982                        LAB_16F4
  1983 00:C68F: A2 04              LDX   #$04              ; error code $04 ("RETURN without GOSUB" error)
  1984 00:C691: 2C                 .byte $2C               ; makes next line BIT LAB_0EA2
  1985                        
  1986                        LAB_16F7                      ; do undefined statement error
  1987 00:C692: A2 0E              LDX   #$0E              ; error code $0E ("Undefined statement" error)
  1988 00:C694: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  1989                        
  1990                        ; perform RETURN
  1991                        
  1992                        LAB_RETURN
  1993 00:C697: D0 9E              BNE   LAB_16E5          ; exit if following token (to allow syntax error)
  1994                        
  1995                        LAB_16E8
  1996 00:C699: 68                 PLA                     ; dump calling routine return address
  1997 00:C69A: 68                 PLA                     ; dump calling routine return address
  1998 00:C69B: 68                 PLA                     ; pull token
  1999 00:C69C: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  2000 00:C69E: D0 EF              BNE   LAB_16F4          ; branch if no matching GOSUB
  2001                        
  2002                        LAB_16FF
  2003 00:C6A0: 68                 PLA                     ; pull current line low byte
  2004 00:C6A1: 85 87              STA   Clinel            ; save current line low byte
  2005 00:C6A3: 68                 PLA                     ; pull current line high byte
  2006 00:C6A4: 85 88              STA   Clineh            ; save current line high byte
  2007 00:C6A6: 68                 PLA                     ; pull BASIC execute pointer low byte
  2008 00:C6A7: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2009 00:C6A9: 68                 PLA                     ; pull BASIC execute pointer high byte
  2010 00:C6AA: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  2011                        
  2012                                                      ; now do the DATA statement as we could be returning into
  2013                                                      ; the middle of an ON <var> GOSUB n,m,p,q line
  2014                                                      ; (the return address used by the DATA statement is the one
  2015                                                      ; pushed before the GOSUB was executed!)
  2016                        
  2017                        ; perform DATA
  2018                        
  2019                        LAB_DATA
  2020 00:C6AC: 20 BD C6           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  2021                        
  2022                                                      ; set BASIC execute pointer
  2023                        LAB_170F
  2024 00:C6AF: 98                 TYA                     ; copy index to A
  2025 00:C6B0: 18                 CLC                     ; clear carry for add
  2026 00:C6B1: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  2027 00:C6B3: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2028 00:C6B5: 90 02              BCC   LAB_1719          ; skip next if no carry
  2029                        
  2030 00:C6B7: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  2031                        LAB_1719
  2032 00:C6B9: 60                 RTS
  2033                        
  2034                        LAB_16FC
  2035 00:C6BA: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  2036                        
  2037                        ; scan for next BASIC statement ([:] or [EOL])
  2038                        ; returns Y as index to [:] or [EOL]
  2039                        
  2040                        LAB_SNBS
  2041 00:C6BD: A2 3A              LDX   #':'              ; set look for character = ":"
  2042 00:C6BF: 2C                 .byte $2C               ; makes next line BIT $00A2
  2043                        
  2044                        ; scan for next BASIC line
  2045                        ; returns Y as index to [EOL]
  2046                        
  2047                        LAB_SNBL
  2048 00:C6C0: A2 00              LDX   #$00              ; set alt search character = [EOL]
  2049 00:C6C2: A0 00              LDY   #$00              ; set search character = [EOL]
  2050 00:C6C4: 84 5C              STY   Asrch             ; store search character
  2051                        LAB_1725
  2052 00:C6C6: 8A                 TXA                     ; get alt search character
  2053 00:C6C7: 45 5C              EOR   Asrch             ; toggle search character, effectively swap with $00
  2054 00:C6C9: 85 5C              STA   Asrch             ; save swapped search character
  2055                        LAB_172D
  2056 00:C6CB: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  2057 00:C6CD: F0 EA              BEQ   LAB_1719          ; exit if null [EOL]
  2058                        
  2059 00:C6CF: C5 5C              CMP   Asrch             ; compare with search character
  2060 00:C6D1: F0 E6              BEQ   LAB_1719          ; exit if found
  2061                        
  2062 00:C6D3: C8                 INY                     ; increment index
  2063 00:C6D4: C9 22              CMP   #$22              ; compare current character with open quote
  2064 00:C6D6: D0 F3              BNE   LAB_172D          ; if not open quote go get next character
  2065                        
  2066 00:C6D8: F0 EC              BEQ   LAB_1725          ; if found go swap search character for alt search character
  2067                        
  2068                        ; perform IF
  2069                        
  2070                        LAB_IF
  2071 00:C6DA: 20 03 CB           JSR   LAB_EVEX          ; evaluate the expression
  2072 00:C6DD: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2073 00:C6E0: C9 B0              CMP   #TK_THEN          ; compare with THEN token
  2074 00:C6E2: F0 11              BEQ   LAB_174B          ; if it was THEN go do IF
  2075                        
  2076                                                      ; wasn't IF .. THEN so must be IF .. GOTO
  2077 00:C6E4: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2078 00:C6E6: D0 D2              BNE   LAB_16FC          ; if it wasn't GOTO go do syntax error
  2079                        
  2080 00:C6E8: A6 C3              LDX   Bpntrl            ; save the basic pointer low byte
  2081 00:C6EA: A4 C4              LDY   Bpntrh            ; save the basic pointer high byte
  2082 00:C6EC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2083 00:C6EF: B0 C9              BCS   LAB_16FC          ; if not numeric go do syntax error
  2084                        
  2085 00:C6F1: 86 C3              STX   Bpntrl            ; restore the basic pointer low byte
  2086 00:C6F3: 84 C4              STY   Bpntrh            ; restore the basic pointer high byte
  2087                        LAB_174B
  2088 00:C6F5: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  2089 00:C6F7: F0 1E              BEQ   LAB_174E          ; if the result was zero go look for an ELSE
  2090                        
  2091 00:C6F9: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2092 00:C6FC: B0 03              BCS   LAB_174D          ; if not numeric go do var or keyword
  2093                        
  2094                        LAB_174C
  2095 00:C6FE: 4C 0B C6           JMP   LAB_GOTO          ; else was numeric so do GOTO n
  2096                        
  2097                                                      ; is var or keyword
  2098                        LAB_174D
  2099                        ; *** patch       allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2100                        ; *** replace
  2101                        ;      CMP   #TK_RETURN        ; compare the byte with the token for RETURN
  2102                        ;      BNE   LAB_174G          ; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
  2103                        ;                              ; and return to this code to process any following code
  2104                        ;
  2105                        ;      JMP   LAB_1602          ; else it was RETURN so interpret BASIC code from (Bpntrl)
  2106                        ;                              ; but don't return here
  2107                        ;
  2108                        ;LAB_174G
  2109                        ;      JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2110                        ;
  2111                        ;; the IF was executed and there may be a following ELSE so the code needs to return
  2112                        ;; here to check and ignore the ELSE if present
  2113                        ;
  2114                        ;      LDY   #$00              ; clear the index
  2115                        ;      LDA   (Bpntrl),Y        ; get the next BASIC byte
  2116                        ;      CMP   #TK_ELSE          ; compare it with the token for ELSE
  2117                        ;      BEQ   LAB_DATA          ; if ELSE ignore the following statement
  2118                        ;
  2119                        ;; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2120                        ;; following ELSE will, correctly, cause a syntax error
  2121                        ;
  2122                        ;      RTS                     ; else return to the interpreter inner loop
  2123                        ;
  2124                        ; *** with
  2125 00:C701: 68                 PLA                     ; discard interpreter loop return address
  2126 00:C702: 68                 PLA                     ; so data structures are at the correct stack offset
  2127 00:C703: 20 C2 00           JSR   LAB_GBYT          ; restore token or variable
  2128 00:C706: 20 20 C5           JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2129                        
  2130                        ; the IF was executed and there may be a following ELSE so the code needs to return
  2131                        ; here to check and ignore the ELSE if present
  2132                        
  2133 00:C709: A0 00              LDY   #$00              ; clear the index
  2134 00:C70B: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2135 00:C70D: C9 AC              CMP   #TK_ELSE          ; compare it with the token for ELSE
  2136 00:C70F: D0 03              BNE   LAB_no_ELSE       ; no - continue on this line
  2137 00:C711: 20 AC C6           JSR   LAB_DATA          ; yes - skip the rest of the line
  2138                        
  2139                        ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2140                        ; following ELSE will, correctly, cause a syntax error
  2141                        
  2142                        LAB_no_ELSE
  2143 00:C714: 4C E2 C4           JMP LAB_15C2            ; return to the interpreter inner loop
  2144                        ; *** end patch  allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2145                        
  2146                        ; perform ELSE after IF
  2147                        
  2148                        LAB_174E
  2149 00:C717: A0 00              LDY   #$00              ; clear the BASIC byte index
  2150 00:C719: A2 01              LDX   #$01              ; clear the nesting depth
  2151                        LAB_1750
  2152 00:C71B: C8                 INY                     ; increment the BASIC byte index
  2153 00:C71C: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2154 00:C71E: F0 0F              BEQ   LAB_1753          ; if EOL go add the pointer and return
  2155                        
  2156 00:C720: C9 8B              CMP   #TK_IF            ; compare the byte with the token for IF
  2157 00:C722: D0 03              BNE   LAB_1752          ; if not IF token skip the depth increment
  2158                        
  2159 00:C724: E8                 INX                     ; else increment the nesting depth ..
  2160 00:C725: D0 F4              BNE   LAB_1750          ; .. and continue looking
  2161                        
  2162                        LAB_1752
  2163 00:C727: C9 AC              CMP   #TK_ELSE          ; compare the byte with the token for ELSE
  2164 00:C729: D0 F0              BNE   LAB_1750          ; if not ELSE token continue looking
  2165                        
  2166 00:C72B: CA                 DEX                     ; was ELSE so decrement the nesting depth
  2167 00:C72C: D0 ED              BNE   LAB_1750          ; loop if still nested
  2168                        
  2169 00:C72E: C8                 INY                     ; increment the BASIC byte index past the ELSE
  2170                        
  2171                        ; found the matching ELSE, now do <{n|statement}>
  2172                        
  2173                        LAB_1753
  2174 00:C72F: 98                 TYA                     ; else copy line index to A
  2175 00:C730: 18                 CLC                     ; clear carry for add
  2176 00:C731: 65 C3              ADC   Bpntrl            ; add the BASIC execute pointer low byte
  2177 00:C733: 85 C3              STA   Bpntrl            ; save the BASIC execute pointer low byte
  2178 00:C735: 90 02              BCC   LAB_1754          ; branch if no overflow to high byte
  2179                        
  2180 00:C737: E6 C4              INC   Bpntrh            ; else increment the BASIC execute pointer high byte
  2181                        LAB_1754
  2182 00:C739: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2183 00:C73C: 90 C0              BCC   LAB_174C          ; if numeric do GOTO n
  2184                                                      ; the code will return to the interpreter loop at the
  2185                                                      ; tail end of the GOTO <n>
  2186                        
  2187 00:C73E: 4C 20 C5           JMP   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2188                                                      ; the code will return to the interpreter loop at the
  2189                                                      ; tail end of the <statement>
  2190                        
  2191                        ; perform REM, skip (rest of) line
  2192                        
  2193                        LAB_REM
  2194 00:C741: 20 C0 C6           JSR   LAB_SNBL          ; scan for next BASIC line
  2195 00:C744: 4C AF C6           JMP   LAB_170F          ; go set BASIC execute pointer and return, branch always
  2196                        
  2197                        LAB_16FD
  2198 00:C747: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  2199                        
  2200                        ; perform ON
  2201                        
  2202                        LAB_ON
  2203 00:C74A: C9 A9              CMP   #TK_IRQ           ; was it IRQ token ?
  2204 00:C74C: D0 03              BNE   LAB_NOIN          ; if not go check NMI
  2205                        
  2206 00:C74E: 4C 69 DF           JMP   LAB_SIRQ          ; else go set-up IRQ
  2207                        
  2208                        LAB_NOIN
  2209 00:C751: C9 AA              CMP   #TK_NMI           ; was it NMI token ?
  2210 00:C753: D0 03              BNE   LAB_NONM          ; if not go do normal ON command
  2211                        
  2212 00:C755: 4C 6C DF           JMP   LAB_SNMI          ; else go set-up NMI
  2213                        
  2214                        LAB_NONM
  2215 00:C758: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter
  2216 00:C75B: 48                 PHA                     ; push GOTO/GOSUB token
  2217 00:C75C: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  2218 00:C75E: F0 04              BEQ   LAB_176B          ; branch if GOSUB
  2219                        
  2220 00:C760: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2221                        LAB_1767
  2222 00:C762: D0 E3              BNE   LAB_16FD          ; if not GOTO do syntax error then warm start
  2223                        
  2224                        
  2225                        ; next character was GOTO or GOSUB
  2226                        
  2227                        LAB_176B
  2228 00:C764: C6 AF              DEC   FAC1_3            ; decrement index (byte value)
  2229 00:C766: D0 04              BNE   LAB_1773          ; branch if not zero
  2230                        
  2231 00:C768: 68                 PLA                     ; pull GOTO/GOSUB token
  2232 00:C769: 4C 22 C5           JMP   LAB_1602          ; go execute it
  2233                        
  2234                        LAB_1773
  2235 00:C76C: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2236 00:C76F: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer (skip this n)
  2237                                                      ; (we could LDX #',' and JSR LAB_SNBL+2, then we
  2238                                                      ; just BNE LAB_176B for the loop. should be quicker ..
  2239                                                      ; no we can't, what if we meet a colon or [EOL]?)
  2240 00:C772: C9 2C              CMP   #$2C              ; compare next character with ","
  2241 00:C774: F0 EE              BEQ   LAB_176B          ; loop if ","
  2242                        
  2243                        LAB_177E
  2244 00:C776: 68                 PLA                     ; else pull keyword token (run out of options)
  2245                                                      ; also dump +/-1 pointer low byte and exit
  2246                        LAB_177F
  2247 00:C777: 60                 RTS
  2248                        
  2249                        ; takes n * 106 + 11 cycles where n is the number of digits
  2250                        
  2251                        ; get fixed-point number into temp integer
  2252                        
  2253                        LAB_GFPN
  2254 00:C778: A2 00              LDX   #$00              ; clear reg
  2255 00:C77A: 86 11              STX   Itempl            ; clear temporary integer low byte
  2256                        LAB_1785
  2257 00:C77C: 86 12              STX   Itemph            ; save temporary integer high byte
  2258 00:C77E: B0 F7              BCS   LAB_177F          ; return if carry set, end of scan, character was
  2259                                                      ; not 0-9
  2260                        
  2261 00:C780: E0 19              CPX   #$19              ; compare high byte with $19
  2262 00:C782: A8                 TAY                     ; ensure Zb = 0 if the branch is taken
  2263 00:C783: B0 DD              BCS   LAB_1767          ; branch if >=, makes max line # 63999 because next
  2264                                                      ; bit does *$0A, = 64000, compare at target will fail
  2265                                                      ; and do syntax error
  2266                        
  2267 00:C785: E9 2F              SBC   #'0'-1            ; subtract "0", $2F + carry, from byte
  2268 00:C787: A8                 TAY                     ; copy binary digit
  2269 00:C788: A5 11              LDA   Itempl            ; get temporary integer low byte
  2270 00:C78A: 0A                 ASL                     ; *2 low byte
  2271 00:C78B: 26 12              ROL   Itemph            ; *2 high byte
  2272 00:C78D: 0A                 ASL                     ; *2 low byte
  2273 00:C78E: 26 12              ROL   Itemph            ; *2 high byte, *4
  2274 00:C790: 65 11              ADC   Itempl            ; + low byte, *5
  2275 00:C792: 85 11              STA   Itempl            ; save it
  2276 00:C794: 8A                 TXA                     ; get high byte copy to A
  2277 00:C795: 65 12              ADC   Itemph            ; + high byte, *5
  2278 00:C797: 06 11              ASL   Itempl            ; *2 low byte, *10d
  2279 00:C799: 2A                 ROL                     ; *2 high byte, *10d
  2280 00:C79A: AA                 TAX                     ; copy high byte back to X
  2281 00:C79B: 98                 TYA                     ; get binary digit back
  2282 00:C79C: 65 11              ADC   Itempl            ; add number low byte
  2283 00:C79E: 85 11              STA   Itempl            ; save number low byte
  2284 00:C7A0: 90 01              BCC   LAB_17B3          ; if no overflow to high byte get next character
  2285                        
  2286 00:C7A2: E8                 INX                     ; else increment high byte
  2287                        LAB_17B3
  2288 00:C7A3: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2289 00:C7A6: 4C 7C C7           JMP   LAB_1785          ; loop for next character
  2290                        
  2291                        ; perform DEC
  2292                        
  2293                        LAB_DEC
  2294 00:C7A9: A9 16              LDA   #<LAB_2AFD        ; set -1 pointer low byte
  2295 00:C7AB: 2C                 .byte $2C               ; BIT abs to skip the LDA below
  2296                        
  2297                        ; perform INC
  2298                        
  2299                        LAB_INC
  2300 00:C7AC: A9 12              LDA   #<LAB_259C        ; set 1 pointer low byte
  2301                        LAB_17B5
  2302 00:C7AE: 48                 PHA                     ; save +/-1 pointer low byte
  2303                        LAB_17B7
  2304 00:C7AF: 20 DA CD           JSR   LAB_GVAR          ; get var address
  2305 00:C7B2: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2306 00:C7B4: 30 1E              BMI   IncrErr           ; exit if string
  2307                        
  2308 00:C7B6: 85 97              STA   Lvarpl            ; save var address low byte
  2309 00:C7B8: 84 98              STY   Lvarph            ; save var address high byte
  2310 00:C7BA: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  2311 00:C7BD: 68                 PLA                     ; get +/-1 pointer low byte
  2312 00:C7BE: 48                 PHA                     ; save +/-1 pointer low byte
  2313 00:C7BF: A0 E2              LDY   #>LAB_259C        ; set +/-1 pointer high byte (both the same)
  2314 00:C7C1: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1
  2315 00:C7C4: 20 D2 D8           JSR   LAB_PFAC          ; pack FAC1 into variable (Lvarpl)
  2316                        
  2317 00:C7C7: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2318 00:C7CA: C9 2C              CMP   #','              ; compare with ","
  2319 00:C7CC: D0 A8              BNE   LAB_177E          ; exit if not "," (either end or error)
  2320                        
  2321                                                      ; was "," so another INCR variable to do
  2322 00:C7CE: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2323 00:C7D1: 4C AF C7           JMP   LAB_17B7          ; go do next var
  2324                        
  2325                        IncrErr
  2326 00:C7D4: 4C FE CA           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  2327                        
  2328                        ; perform LET
  2329                        
  2330                        LAB_LET
  2331 00:C7D7: 20 DA CD           JSR   LAB_GVAR          ; get var address
  2332 00:C7DA: 85 97              STA   Lvarpl            ; save var address low byte
  2333 00:C7DC: 84 98              STY   Lvarph            ; save var address high byte
  2334 00:C7DE: A9 C1              LDA   #TK_EQUAL         ; get = token
  2335 00:C7E0: 20 13 CC           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2336 00:C7E3: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2337 00:C7E5: 48                 PHA                     ; push data type flag
  2338 00:C7E6: 20 03 CB           JSR   LAB_EVEX          ; evaluate expression
  2339 00:C7E9: 68                 PLA                     ; pop data type flag
  2340 00:C7EA: 2A                 ROL                     ; set carry if type = string
  2341                        ; *** begin patch  result of a string compare stores string pointer to variable
  2342                        ;                  but should store FAC1 (true/false value)
  2343                        ; *** replace
  2344                        ;      JSR   LAB_CKTM          ; type match check, set C for string
  2345                        ;      BNE   LAB_17D5          ; branch if string
  2346                        ; *** with
  2347 00:C7EB: 20 F5 CA           JSR   LAB_CKTM          ; type match check, keep C (expected type)
  2348 00:C7EE: B0 03              BCS   LAB_17D5          ; branch if string
  2349                        ; *** end patch
  2350                        
  2351 00:C7F0: 4C D2 D8           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2352                        
  2353                        ; string LET
  2354                        
  2355                        LAB_17D5
  2356 00:C7F3: A0 02              LDY   #$02              ; set index to pointer high byte
  2357 00:C7F5: B1 AE              LDA   (des_pl),Y        ; get string pointer high byte
  2358 00:C7F7: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  2359 00:C7F9: 90 17              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2360                        
  2361 00:C7FB: D0 07              BNE   LAB_17E6          ; branch if >
  2362                                                      ; else was equal so compare low bytes
  2363 00:C7FD: 88                 DEY                     ; decrement index
  2364 00:C7FE: B1 AE              LDA   (des_pl),Y        ; get pointer low byte
  2365 00:C800: C5 81              CMP   Sstorl            ; compare bottom of string space low byte
  2366 00:C802: 90 0E              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2367                        
  2368                                                      ; pointer was >= to bottom of string space pointer
  2369                        LAB_17E6
  2370 00:C804: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2371 00:C806: C4 7C              CPY   Svarh             ; compare start of vars high byte
  2372 00:C808: 90 08              BCC   LAB_17F4          ; branch if less (descriptor is on stack)
  2373                        
  2374 00:C80A: D0 0D              BNE   LAB_17FB          ; branch if greater (descriptor is not on stack)
  2375                        
  2376                                                      ; else high bytes were equal so ..
  2377 00:C80C: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2378 00:C80E: C5 7B              CMP   Svarl             ; compare start of vars low byte
  2379 00:C810: B0 07              BCS   LAB_17FB          ; branch if >= (descriptor is not on stack)
  2380                        
  2381                        LAB_17F4
  2382 00:C812: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2383 00:C814: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2384 00:C816: 4C 2F C8           JMP   LAB_1811          ; clean stack, copy descriptor to variable and return
  2385                        
  2386                                                      ; make space and copy string
  2387                        LAB_17FB
  2388 00:C819: A0 00              LDY   #$00              ; index to length
  2389 00:C81B: B1 AE              LDA   (des_pl),Y        ; get string length
  2390 00:C81D: 20 62 D1           JSR   LAB_209C          ; copy string
  2391 00:C820: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  2392 00:C822: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  2393 00:C824: 85 B8              STA   ssptr_l           ; save descriptor pointer low byte
  2394 00:C826: 84 B9              STY   ssptr_h           ; save descriptor pointer high byte
  2395 00:C828: 20 47 D3           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  2396 00:C82B: A9 AC              LDA   #<FAC1_e          ; set descriptor pointer low byte
  2397 00:C82D: A0 00              LDY   #>FAC1_e          ; get descriptor pointer high byte
  2398                        
  2399                                                      ; clean stack and assign value to string variable
  2400                        LAB_1811
  2401 00:C82F: 85 9E              STA   des_2l            ; save descriptor_2 pointer low byte
  2402 00:C831: 84 9F              STY   des_2h            ; save descriptor_2 pointer high byte
  2403 00:C833: 20 A9 D3           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  2404 00:C836: A0 00              LDY   #$00              ; index to length
  2405 00:C838: B1 9E              LDA   (des_2l),Y        ; get string length
  2406 00:C83A: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2407 00:C83C: C8                 INY                     ; index to string pointer low byte
  2408 00:C83D: B1 9E              LDA   (des_2l),Y        ; get string pointer low byte
  2409 00:C83F: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2410 00:C841: C8                 INY                     ; index to string pointer high byte
  2411 00:C842: B1 9E              LDA   (des_2l),Y        ; get string pointer high byte
  2412 00:C844: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2413 00:C846: 60                 RTS
  2414                        
  2415                        ; perform GET
  2416                        
  2417                        LAB_GET
  2418 00:C847: 20 DA CD           JSR   LAB_GVAR          ; get var address
  2419 00:C84A: 85 97              STA   Lvarpl            ; save var address low byte
  2420 00:C84C: 84 98              STY   Lvarph            ; save var address high byte
  2421 00:C84E: 20 31 DF           JSR   INGET             ; get input byte
  2422 00:C851: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2423 00:C853: 30 07              BMI   LAB_GETS          ; go get string character
  2424                        
  2425                                                      ; was numeric get
  2426 00:C855: A8                 TAY                     ; copy character to Y
  2427 00:C856: 20 96 D0           JSR   LAB_1FD0          ; convert Y to byte in FAC1
  2428 00:C859: 4C D2 D8           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2429                        
  2430                        LAB_GETS
  2431 00:C85C: 48                 PHA                     ; save character
  2432 00:C85D: A9 01              LDA   #$01              ; string is single byte
  2433 00:C85F: B0 01              BCS   LAB_IsByte        ; branch if byte received
  2434                        
  2435 00:C861: 68                 PLA                     ; string is null
  2436                        LAB_IsByte
  2437 00:C862: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  2438                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  2439 00:C865: F0 05              BEQ   LAB_NoSt          ; skip store if null string
  2440                        
  2441 00:C867: 68                 PLA                     ; get character back
  2442 00:C868: A0 00              LDY   #$00              ; clear index
  2443 00:C86A: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  2444                        LAB_NoSt
  2445 00:C86C: 20 B7 D1           JSR   LAB_RTST          ; check for space on descriptor stack then put address
  2446                                                      ; and length on descriptor stack and update stack pointers
  2447                        
  2448 00:C86F: 4C F3 C7           JMP   LAB_17D5          ; do string LET and return
  2449                        
  2450                        ; perform PRINT
  2451                        
  2452                        LAB_1829
  2453 00:C872: 20 F9 C8           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2454                        LAB_182C
  2455 00:C875: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2456                        
  2457                        ; PRINT
  2458                        
  2459                        LAB_PRINT
  2460 00:C878: F0 3B              BEQ   LAB_CRLF          ; if nothing following just print CR/LF
  2461                        
  2462                        LAB_1831
  2463 00:C87A: C9 AB              CMP   #TK_TAB           ; compare with TAB( token
  2464 00:C87C: F0 56              BEQ   LAB_18A2          ; go do TAB/SPC
  2465                        
  2466 00:C87E: C9 AF              CMP   #TK_SPC           ; compare with SPC( token
  2467 00:C880: F0 52              BEQ   LAB_18A2          ; go do TAB/SPC
  2468                        
  2469 00:C882: C9 2C              CMP   #','              ; compare with ","
  2470 00:C884: F0 38              BEQ   LAB_188B          ; go do move to next TAB mark
  2471                        
  2472 00:C886: C9 3B              CMP   #';'              ; compare with ";"
  2473 00:C888: F0 66              BEQ   LAB_18BD          ; if ";" continue with PRINT processing
  2474                        
  2475 00:C88A: 20 03 CB           JSR   LAB_EVEX          ; evaluate expression
  2476 00:C88D: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2477 00:C88F: 30 E1              BMI   LAB_1829          ; branch if string
  2478                        
  2479 00:C891: 20 C4 DA           JSR   LAB_296E          ; convert FAC1 to string
  2480 00:C894: 20 74 D1           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2481 00:C897: A0 00              LDY   #$00              ; clear index
  2482                        
  2483                        ; don't check fit if terminal width byte is zero
  2484                        
  2485 00:C899: A5 0F              LDA   TWidth            ; get terminal width byte
  2486 00:C89B: F0 0A              BEQ   LAB_185E          ; skip check if zero
  2487                        
  2488 00:C89D: 38                 SEC                     ; set carry for subtract
  2489 00:C89E: E5 0E              SBC   TPos              ; subtract terminal position
  2490 00:C8A0: F1 AE              SBC   (des_pl),Y        ; subtract string length
  2491 00:C8A2: B0 03              BCS   LAB_185E          ; branch if less than terminal width
  2492                        
  2493 00:C8A4: 20 B5 C8           JSR   LAB_CRLF          ; else print CR/LF
  2494                        LAB_185E
  2495 00:C8A7: 20 F9 C8           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2496 00:C8AA: F0 C9              BEQ   LAB_182C          ; always go continue processing line
  2497                        
  2498                        ; CR/LF return to BASIC from BASIC input handler
  2499                        
  2500                        LAB_1866
  2501 00:C8AC: A9 00              LDA   #$00              ; clear byte
  2502 00:C8AE: 9D 21 02           STA   Ibuffs,X          ; null terminate input
  2503 00:C8B1: A2 21              LDX   #<Ibuffs          ; set X to buffer start-1 low byte
  2504 00:C8B3: A0 02              LDY   #>Ibuffs          ; set Y to buffer start-1 high byte
  2505                        
  2506                        ; print CR/LF
  2507                        
  2508                        LAB_CRLF
  2509 00:C8B5: A9 0D              LDA   #$0D              ; load [CR]
  2510 00:C8B7: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  2511 00:C8BA: A9 0A              LDA   #$0A              ; load [LF]
  2512 00:C8BC: D0 52              BNE   LAB_PRNA          ; go print the character and return, branch always
  2513                        
  2514                        LAB_188B
  2515 00:C8BE: A5 0E              LDA   TPos              ; get terminal position
  2516 00:C8C0: C5 10              CMP   Iclim             ; compare with input column limit
  2517 00:C8C2: 90 05              BCC   LAB_1897          ; branch if less
  2518                        
  2519 00:C8C4: 20 B5 C8           JSR   LAB_CRLF          ; else print CR/LF (next line)
  2520 00:C8C7: D0 27              BNE   LAB_18BD          ; continue with PRINT processing (branch always)
  2521                        
  2522                        LAB_1897
  2523 00:C8C9: 38                 SEC                     ; set carry for subtract
  2524                        LAB_1898
  2525 00:C8CA: E5 64              SBC   TabSiz            ; subtract TAB size
  2526 00:C8CC: B0 FC              BCS   LAB_1898          ; loop if result was +ve
  2527                        
  2528 00:C8CE: 49 FF              EOR   #$FF              ; complement it
  2529 00:C8D0: 69 01              ADC   #$01              ; +1 (twos complement)
  2530 00:C8D2: D0 12              BNE   LAB_18B6          ; always print A spaces (result is never $00)
  2531                        
  2532                                                      ; do TAB/SPC
  2533                        LAB_18A2
  2534 00:C8D4: 48                 PHA                     ; save token
  2535 00:C8D5: 20 BF D4           JSR   LAB_SGBY          ; scan and get byte parameter
  2536 00:C8D8: C9 29              CMP   #$29              ; is next character )
  2537 00:C8DA: D0 7B              BNE   LAB_1910          ; if not do syntax error then warm start
  2538                        
  2539 00:C8DC: 68                 PLA                     ; get token back
  2540 00:C8DD: C9 AB              CMP   #TK_TAB           ; was it TAB ?
  2541 00:C8DF: D0 06              BNE   LAB_18B7          ; if not go do SPC
  2542                        
  2543                                                      ; calculate TAB offset
  2544 00:C8E1: 8A                 TXA                     ; copy integer value to A
  2545 00:C8E2: E5 0E              SBC   TPos              ; subtract terminal position
  2546 00:C8E4: 90 0A              BCC   LAB_18BD          ; branch if result was < 0 (can't TAB backwards)
  2547                        
  2548                                                      ; print A spaces
  2549                        LAB_18B6
  2550 00:C8E6: AA                 TAX                     ; copy result to X
  2551                        LAB_18B7
  2552 00:C8E7: 8A                 TXA                     ; set flags on size for SPC
  2553 00:C8E8: F0 06              BEQ   LAB_18BD          ; branch if result was = $0, already here
  2554                        
  2555                                                      ; print X spaces
  2556                        LAB_18BA
  2557 00:C8EA: 20 0B C9           JSR   LAB_18E0          ; print " "
  2558 00:C8ED: CA                 DEX                     ; decrement count
  2559 00:C8EE: D0 FA              BNE   LAB_18BA          ; loop if not all done
  2560                        
  2561                                                      ; continue with PRINT processing
  2562                        LAB_18BD
  2563 00:C8F0: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2564 00:C8F3: D0 85              BNE   LAB_1831          ; if more to print go do it
  2565                        
  2566 00:C8F5: 60                 RTS
  2567                        
  2568                        ; print null terminated string from memory
  2569                        
  2570                        LAB_18C3
  2571 00:C8F6: 20 74 D1           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2572                        
  2573                        ; print string from Sutill/Sutilh
  2574                        
  2575                        LAB_18C6
  2576 00:C8F9: 20 74 D3           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  2577                                                      ; space returns with A = length, X=$71=pointer low byte,
  2578                                                      ; Y=$72=pointer high byte
  2579 00:C8FC: A0 00              LDY   #$00              ; reset index
  2580 00:C8FE: AA                 TAX                     ; copy length to X
  2581 00:C8FF: F0 49              BEQ   LAB_188C          ; exit (RTS) if null string
  2582                        
  2583                        LAB_18CD
  2584                        
  2585 00:C901: B1 71              LDA   (ut1_pl),Y        ; get next byte
  2586 00:C903: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  2587 00:C906: C8                 INY                     ; increment index
  2588 00:C907: CA                 DEX                     ; decrement count
  2589 00:C908: D0 F7              BNE   LAB_18CD          ; loop if not done yet
  2590                        
  2591 00:C90A: 60                 RTS
  2592                        
  2593                                                      ; Print single format character
  2594                        ; print " "
  2595                        
  2596                        LAB_18E0
  2597 00:C90B: A9 20              LDA   #$20              ; load " "
  2598 00:C90D: 2C                 .byte $2C               ; change next line to BIT LAB_3FA9
  2599                        
  2600                        ; print "?" character
  2601                        
  2602                        LAB_18E3
  2603 00:C90E: A9 3F              LDA   #$3F              ; load "?" character
  2604                        
  2605                        ; print character in A
  2606                        ; now includes the null handler
  2607                        ; also includes infinite line length code
  2608                        ; note! some routines expect this one to exit with Zb=0
  2609                        
  2610                        LAB_PRNA
  2611 00:C910: C9 20              CMP   #' '              ; compare with " "
  2612 00:C912: 90 19              BCC   LAB_18F9          ; branch if less (non printing)
  2613                        
  2614                                                      ; else printable character
  2615 00:C914: 48                 PHA                     ; save the character
  2616                        
  2617                        ; don't check fit if terminal width byte is zero
  2618                        
  2619 00:C915: A5 0F              LDA   TWidth            ; get terminal width
  2620 00:C917: D0 0A              BNE   LAB_18F0          ; branch if not zero (not infinite length)
  2621                        
  2622                        ; is "infinite line" so check TAB position
  2623                        
  2624 00:C919: A5 0E              LDA   TPos              ; get position
  2625 00:C91B: E5 64              SBC   TabSiz            ; subtract TAB size, carry set by CMP #$20 above
  2626 00:C91D: D0 0B              BNE   LAB_18F7          ; skip reset if different
  2627                        
  2628 00:C91F: 85 0E              STA   TPos              ; else reset position
  2629 00:C921: F0 07              BEQ   LAB_18F7          ; go print character
  2630                        
  2631                        LAB_18F0
  2632 00:C923: C5 0E              CMP   TPos              ; compare with terminal character position
  2633 00:C925: D0 03              BNE   LAB_18F7          ; branch if not at end of line
  2634                        
  2635 00:C927: 20 B5 C8           JSR   LAB_CRLF          ; else print CR/LF
  2636                        LAB_18F7
  2637 00:C92A: E6 0E              INC   TPos              ; increment terminal position
  2638 00:C92C: 68                 PLA                     ; get character back
  2639                        LAB_18F9
  2640 00:C92D: 20 1D E1           JSR   V_OUTP            ; output byte via output vector
  2641 00:C930: C9 0D              CMP   #$0D              ; compare with [CR]
  2642 00:C932: D0 14              BNE   LAB_188A          ; branch if not [CR]
  2643                        
  2644                                                      ; else print nullct nulls after the [CR]
  2645 00:C934: 86 78              STX   TempB             ; save buffer index
  2646 00:C936: A6 0D              LDX   Nullct            ; get null count
  2647 00:C938: F0 0A              BEQ   LAB_1886          ; branch if no nulls
  2648                        
  2649 00:C93A: A9 00              LDA   #$00              ; load [NULL]
  2650                        LAB_1880
  2651 00:C93C: 20 10 C9           JSR   LAB_PRNA          ; go print the character
  2652 00:C93F: CA                 DEX                     ; decrement count
  2653 00:C940: D0 FA              BNE   LAB_1880          ; loop if not all done
  2654                        
  2655 00:C942: A9 0D              LDA   #$0D              ; restore the character (and set the flags)
  2656                        LAB_1886
  2657 00:C944: 86 0E              STX   TPos              ; clear terminal position (X always = zero when we get here)
  2658 00:C946: A6 78              LDX   TempB             ; restore buffer index
  2659                        LAB_188A
  2660 00:C948: 29 FF              AND   #$FF              ; set the flags
  2661                        LAB_188C
  2662 00:C94A: 60                 RTS
  2663                        
  2664                        ; handle bad input data
  2665                        
  2666                        LAB_1904
  2667 00:C94B: A5 62              LDA   Imode             ; get input mode flag, $00=INPUT, $00=READ
  2668 00:C94D: 10 0B              BPL   LAB_1913          ; branch if INPUT (go do redo)
  2669                        
  2670 00:C94F: A5 8D              LDA   Dlinel            ; get current DATA line low byte
  2671 00:C951: A4 8E              LDY   Dlineh            ; get current DATA line high byte
  2672 00:C953: 85 87              STA   Clinel            ; save current line low byte
  2673 00:C955: 84 88              STY   Clineh            ; save current line high byte
  2674                        LAB_1910
  2675 00:C957: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  2676                        
  2677                                                      ; mode was INPUT
  2678                        LAB_1913
  2679 00:C95A: A9 44              LDA   #<LAB_REDO        ; point to redo message (low addr)
  2680 00:C95C: A0 E8              LDY   #>LAB_REDO        ; point to redo message (high addr)
  2681 00:C95E: 20 F6 C8           JSR   LAB_18C3          ; print null terminated string from memory
  2682 00:C961: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  2683 00:C963: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  2684 00:C965: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2685 00:C967: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  2686 00:C969: 60                 RTS
  2687                        
  2688                        ; perform INPUT
  2689                        
  2690                        LAB_INPUT
  2691 00:C96A: C9 22              CMP   #$22              ; compare next byte with open quote
  2692 00:C96C: D0 0B              BNE   LAB_1934          ; branch if no prompt string
  2693                        
  2694 00:C96E: 20 E0 CB           JSR   LAB_1BC1          ; print "..." string
  2695 00:C971: A9 3B              LDA   #$3B              ; load A with ";"
  2696 00:C973: 20 13 CC           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2697 00:C976: 20 F9 C8           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2698                        
  2699                                                      ; done with prompt, now get data
  2700                        LAB_1934
  2701 00:C979: 20 9A D0           JSR   LAB_CKRN          ; check not Direct, back here if ok
  2702 00:C97C: 20 65 C2           JSR   LAB_INLN          ; print "? " and get BASIC input
  2703 00:C97F: A9 00              LDA   #$00              ; set mode = INPUT
  2704 00:C981: CD 21 02           CMP   Ibuffs            ; test first byte in buffer
  2705 00:C984: D0 09              BNE   LAB_1953          ; branch if not null input
  2706                        
  2707                        ; *** change p2: keep carry set to throw break message
  2708                        ;      CLC                     ; was null input so clear carry to exit program
  2709 00:C986: 4C 4A C5           JMP   LAB_1647          ; go do BREAK exit
  2710                        
  2711                        ; perform READ
  2712                        
  2713                        LAB_READ
  2714 00:C989: A6 8F              LDX   Dptrl             ; get DATA pointer low byte
  2715 00:C98B: A4 90              LDY   Dptrh             ; get DATA pointer high byte
  2716 00:C98D: A9 80              LDA   #$80              ; set mode = READ
  2717                        
  2718                        LAB_1953
  2719 00:C98F: 85 62              STA   Imode             ; set input mode flag, $00=INPUT, $80=READ
  2720 00:C991: 86 91              STX   Rdptrl            ; save READ pointer low byte
  2721 00:C993: 84 92              STY   Rdptrh            ; save READ pointer high byte
  2722                        
  2723                                                      ; READ or INPUT next variable from list
  2724                        LAB_195B
  2725 00:C995: 20 DA CD           JSR   LAB_GVAR          ; get (var) address
  2726 00:C998: 85 97              STA   Lvarpl            ; save address low byte
  2727 00:C99A: 84 98              STY   Lvarph            ; save address high byte
  2728 00:C99C: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2729 00:C99E: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2730 00:C9A0: 85 11              STA   Itempl            ; save as temporary integer low byte
  2731 00:C9A2: 84 12              STY   Itemph            ; save as temporary integer high byte
  2732 00:C9A4: A6 91              LDX   Rdptrl            ; get READ pointer low byte
  2733 00:C9A6: A4 92              LDY   Rdptrh            ; get READ pointer high byte
  2734 00:C9A8: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2735 00:C9AA: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2736 00:C9AC: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2737 00:C9AF: D0 11              BNE   LAB_1988          ; branch if not null
  2738                        
  2739                                                      ; pointer was to null entry
  2740 00:C9B1: 24 62              BIT   Imode             ; test input mode flag, $00=INPUT, $80=READ
  2741 00:C9B3: 30 65              BMI   LAB_19DD          ; branch if READ
  2742                        
  2743                                                      ; mode was INPUT
  2744 00:C9B5: 20 0E C9           JSR   LAB_18E3          ; print "?" character (double ? for extended input)
  2745 00:C9B8: 20 65 C2           JSR   LAB_INLN          ; print "? " and get BASIC input
  2746 00:C9BB: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2747 00:C9BD: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2748                        LAB_1985
  2749 00:C9BF: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2750                        LAB_1988
  2751 00:C9C2: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2752 00:C9C4: 10 24              BPL   LAB_19B0          ; branch if numeric
  2753                        
  2754                                                      ; else get string
  2755 00:C9C6: 85 5B              STA   Srchc             ; save search character
  2756 00:C9C8: C9 22              CMP   #$22              ; was it " ?
  2757 00:C9CA: F0 07              BEQ   LAB_1999          ; branch if so
  2758                        
  2759 00:C9CC: A9 3A              LDA   #':'              ; else search character is ":"
  2760 00:C9CE: 85 5B              STA   Srchc             ; set new search character
  2761 00:C9D0: A9 2C              LDA   #','              ; other search character is ","
  2762 00:C9D2: 18                 CLC                     ; clear carry for add
  2763                        LAB_1999
  2764 00:C9D3: 85 5C              STA   Asrch             ; set second search character
  2765 00:C9D5: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2766 00:C9D7: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2767                        
  2768 00:C9D9: 69 00              ADC   #$00              ; c is =1 if we came via the BEQ LAB_1999, else =0
  2769 00:C9DB: 90 01              BCC   LAB_19A4          ; branch if no execute pointer low byte rollover
  2770                        
  2771 00:C9DD: C8                 INY                     ; else increment high byte
  2772                        LAB_19A4
  2773 00:C9DE: 20 7A D1           JSR   LAB_20B4          ; print Srchc or Asrch terminated string to Sutill/Sutilh
  2774 00:C9E1: 20 FE D4           JSR   LAB_23F3          ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  2775 00:C9E4: 20 F3 C7           JSR   LAB_17D5          ; go do string LET
  2776 00:C9E7: 4C F0 C9           JMP   LAB_19B6          ; go check string terminator
  2777                        
  2778                                                      ; get numeric INPUT
  2779                        LAB_19B0
  2780 00:C9EA: 20 D5 D9           JSR   LAB_2887          ; get FAC1 from string
  2781 00:C9ED: 20 D2 D8           JSR   LAB_PFAC          ; pack FAC1 into (Lvarpl)
  2782                        LAB_19B6
  2783 00:C9F0: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2784 00:C9F3: F0 0A              BEQ   LAB_19C5          ; branch if null (last entry)
  2785                        
  2786 00:C9F5: C9 2C              CMP   #','              ; else compare with ","
  2787 00:C9F7: F0 03              BEQ   LAB_19C2          ; branch if ","
  2788                        
  2789 00:C9F9: 4C 4B C9           JMP   LAB_1904          ; else go handle bad input data
  2790                        
  2791                                                      ; got good input data
  2792                        LAB_19C2
  2793 00:C9FC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2794                        LAB_19C5
  2795 00:C9FF: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
  2796 00:CA01: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
  2797 00:CA03: 85 91              STA   Rdptrl            ; save for now
  2798 00:CA05: 84 92              STY   Rdptrh            ; save for now
  2799 00:CA07: A5 11              LDA   Itempl            ; get temporary integer low byte (temp BASIC execute ptr)
  2800 00:CA09: A4 12              LDY   Itemph            ; get temporary integer high byte (temp BASIC execute ptr)
  2801 00:CA0B: 85 C3              STA   Bpntrl            ; set BASIC execute pointer low byte
  2802 00:CA0D: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2803 00:CA0F: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2804 00:CA12: F0 2C              BEQ   LAB_1A03          ; if null go do extra ignored message
  2805                        
  2806 00:CA14: 20 20 CC           JSR   LAB_1C01          ; else scan for "," , else do syntax error then warm start
  2807 00:CA17: 4C 95 C9           JMP   LAB_195B          ; go INPUT next variable from list
  2808                        
  2809                                                      ; find next DATA statement or do "Out of DATA" error
  2810                        LAB_19DD
  2811 00:CA1A: 20 BD C6           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  2812 00:CA1D: C8                 INY                     ; increment index
  2813 00:CA1E: AA                 TAX                     ; copy character ([:] or [EOL])
  2814 00:CA1F: D0 12              BNE   LAB_19F6          ; branch if [:]
  2815                        
  2816 00:CA21: A2 06              LDX   #$06              ; set for "Out of DATA" error
  2817 00:CA23: C8                 INY                     ; increment index, now points to next line pointer high byte
  2818 00:CA24: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  2819 00:CA26: F0 73              BEQ   LAB_1A54          ; branch if end (eventually does error X)
  2820                        
  2821 00:CA28: C8                 INY                     ; increment index
  2822 00:CA29: B1 C3              LDA   (Bpntrl),Y        ; get next line # low byte
  2823 00:CA2B: 85 8D              STA   Dlinel            ; save current DATA line low byte
  2824 00:CA2D: C8                 INY                     ; increment index
  2825 00:CA2E: B1 C3              LDA   (Bpntrl),Y        ; get next line # high byte
  2826 00:CA30: C8                 INY                     ; increment index
  2827 00:CA31: 85 8E              STA   Dlineh            ; save current DATA line high byte
  2828                        LAB_19F6
  2829 00:CA33: B1 C3              LDA   (Bpntrl),Y        ; get byte
  2830 00:CA35: C8                 INY                     ; increment index
  2831 00:CA36: AA                 TAX                     ; copy to X
  2832 00:CA37: 20 AF C6           JSR   LAB_170F          ; set BASIC execute pointer
  2833 00:CA3A: E0 83              CPX   #TK_DATA          ; compare with "DATA" token
  2834 00:CA3C: F0 81              BEQ   LAB_1985          ; was "DATA" so go do next READ
  2835                        
  2836 00:CA3E: D0 DA              BNE   LAB_19DD          ; go find next statement if not "DATA"
  2837                        
  2838                        ; end of INPUT/READ routine
  2839                        
  2840                        LAB_1A03
  2841 00:CA40: A5 91              LDA   Rdptrl            ; get temp READ pointer low byte
  2842 00:CA42: A4 92              LDY   Rdptrh            ; get temp READ pointer high byte
  2843 00:CA44: A6 62              LDX   Imode             ; get input mode flag, $00=INPUT, $80=READ
  2844 00:CA46: 10 03              BPL   LAB_1A0E          ; branch if INPUT
  2845                        
  2846 00:CA48: 4C 6C C5           JMP   LAB_1624          ; save AY as DATA pointer and return
  2847                        
  2848                                                      ; we were getting INPUT
  2849                        LAB_1A0E
  2850 00:CA4B: A0 00              LDY   #$00              ; clear index
  2851 00:CA4D: B1 91              LDA   (Rdptrl),Y        ; get next byte
  2852 00:CA4F: D0 01              BNE   LAB_1A1B          ; error if not end of INPUT
  2853                        
  2854 00:CA51: 60                 RTS
  2855                        
  2856                                                      ; user typed too much
  2857                        LAB_1A1B
  2858 00:CA52: A9 33              LDA   #<LAB_IMSG        ; point to extra ignored message (low addr)
  2859 00:CA54: A0 E8              LDY   #>LAB_IMSG        ; point to extra ignored message (high addr)
  2860 00:CA56: 4C F6 C8           JMP   LAB_18C3          ; print null terminated string from memory and return
  2861                        
  2862                        ; search the stack for FOR activity
  2863                        ; exit with z=1 if FOR else exit with z=0
  2864                        
  2865                        LAB_11A1
  2866 00:CA59: BA                 TSX                     ; copy stack pointer
  2867 00:CA5A: E8                 INX                     ; +1 pass return address
  2868 00:CA5B: E8                 INX                     ; +2 pass return address
  2869 00:CA5C: E8                 INX                     ; +3 pass calling routine return address
  2870 00:CA5D: E8                 INX                     ; +4 pass calling routine return address
  2871                        LAB_11A6
  2872 00:CA5E: BD 01 01           LDA   LAB_STAK+1,X      ; get token byte from stack
  2873 00:CA61: C9 81              CMP   #TK_FOR           ; is it FOR token
  2874 00:CA63: D0 21              BNE   LAB_11CE          ; exit if not FOR token
  2875                        
  2876                                                      ; was FOR token
  2877 00:CA65: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  2878 00:CA67: D0 0A              BNE   LAB_11BB          ; branch if not null
  2879                        
  2880 00:CA69: BD 02 01           LDA   LAB_STAK+2,X      ; get FOR variable pointer low byte
  2881 00:CA6C: 85 97              STA   Frnxtl            ; save var pointer for FOR/NEXT low byte
  2882 00:CA6E: BD 03 01           LDA   LAB_STAK+3,X      ; get FOR variable pointer high byte
  2883 00:CA71: 85 98              STA   Frnxth            ; save var pointer for FOR/NEXT high byte
  2884                        LAB_11BB
  2885 00:CA73: DD 03 01           CMP   LAB_STAK+3,X      ; compare var pointer with stacked var pointer (high byte)
  2886 00:CA76: D0 07              BNE   LAB_11C7          ; branch if no match
  2887                        
  2888 00:CA78: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  2889 00:CA7A: DD 02 01           CMP   LAB_STAK+2,X      ; compare var pointer with stacked var pointer (low byte)
  2890 00:CA7D: F0 07              BEQ   LAB_11CE          ; exit if match found
  2891                        
  2892                        LAB_11C7
  2893 00:CA7F: 8A                 TXA                     ; copy index
  2894 00:CA80: 18                 CLC                     ; clear carry for add
  2895 00:CA81: 69 10              ADC   #$10              ; add FOR stack use size
  2896 00:CA83: AA                 TAX                     ; copy back to index
  2897 00:CA84: D0 D8              BNE   LAB_11A6          ; loop if not at start of stack
  2898                        
  2899                        LAB_11CE
  2900 00:CA86: 60                 RTS
  2901                        
  2902                        ; perform NEXT
  2903                        
  2904                        LAB_NEXT
  2905 00:CA87: D0 04              BNE   LAB_1A46          ; branch if NEXT var
  2906                        
  2907 00:CA89: A0 00              LDY   #$00              ; else clear Y
  2908 00:CA8B: F0 03              BEQ   LAB_1A49          ; branch always (no variable to search for)
  2909                        
  2910                        ; NEXT var
  2911                        
  2912                        LAB_1A46
  2913 00:CA8D: 20 DA CD           JSR   LAB_GVAR          ; get variable address
  2914                        LAB_1A49
  2915 00:CA90: 85 97              STA   Frnxtl            ; store variable pointer low byte
  2916 00:CA92: 84 98              STY   Frnxth            ; store variable pointer high byte
  2917                                                      ; (both cleared if no variable defined)
  2918 00:CA94: 20 59 CA           JSR   LAB_11A1          ; search the stack for FOR activity
  2919 00:CA97: F0 04              BEQ   LAB_1A56          ; branch if found
  2920                        
  2921 00:CA99: A2 00              LDX   #$00              ; else set error $00 ("NEXT without FOR" error)
  2922                        LAB_1A54
  2923 00:CA9B: F0 63              BEQ   LAB_1ABE          ; do error #X, then warm start
  2924                        
  2925                        LAB_1A56
  2926 00:CA9D: 9A                 TXS                     ; set stack pointer, X set by search, dumps return addresses
  2927                        
  2928 00:CA9E: 8A                 TXA                     ; copy stack pointer
  2929 00:CA9F: 38                 SEC                     ; set carry for subtract
  2930 00:CAA0: E9 F7              SBC   #$F7              ; point to TO var
  2931 00:CAA2: 85 73              STA   ut2_pl            ; save pointer to TO var for compare
  2932 00:CAA4: 69 FB              ADC   #$FB              ; point to STEP var
  2933                        
  2934 00:CAA6: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2935 00:CAA8: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (STEP value) into FAC1
  2936 00:CAAB: BA                 TSX                     ; get stack pointer back
  2937 00:CAAC: BD 08 01           LDA   LAB_STAK+8,X      ; get step sign
  2938 00:CAAF: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  2939 00:CAB1: A5 97              LDA   Frnxtl            ; get FOR variable pointer low byte
  2940 00:CAB3: A4 98              LDY   Frnxth            ; get FOR variable pointer high byte
  2941 00:CAB5: 20 ED D5           JSR   LAB_246C          ; add (FOR variable) to FAC1
  2942 00:CAB8: 20 D2 D8           JSR   LAB_PFAC          ; pack FAC1 into (FOR variable)
  2943 00:CABB: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2944 00:CABD: 20 48 D9           JSR   LAB_27FA          ; compare FAC1 with (Y,ut2_pl) (TO value)
  2945 00:CAC0: BA                 TSX                     ; get stack pointer back
  2946 00:CAC1: DD 08 01           CMP   LAB_STAK+8,X      ; compare step sign
  2947 00:CAC4: F0 17              BEQ   LAB_1A9B          ; branch if = (loop complete)
  2948                        
  2949                                                      ; loop back and do it all again
  2950 00:CAC6: BD 0D 01           LDA   LAB_STAK+$0D,X    ; get FOR line low byte
  2951 00:CAC9: 85 87              STA   Clinel            ; save current line low byte
  2952 00:CACB: BD 0E 01           LDA   LAB_STAK+$0E,X    ; get FOR line high byte
  2953 00:CACE: 85 88              STA   Clineh            ; save current line high byte
  2954 00:CAD0: BD 10 01           LDA   LAB_STAK+$10,X    ; get BASIC execute pointer low byte
  2955 00:CAD3: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2956 00:CAD5: BD 0F 01           LDA   LAB_STAK+$0F,X    ; get BASIC execute pointer high byte
  2957 00:CAD8: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  2958                        LAB_1A98
  2959 00:CADA: 4C E2 C4           JMP   LAB_15C2          ; go do interpreter inner loop
  2960                        
  2961                                                      ; loop complete so carry on
  2962                        LAB_1A9B
  2963 00:CADD: 8A                 TXA                     ; stack copy to A
  2964 00:CADE: 69 0F              ADC   #$0F              ; add $10 ($0F+carry) to dump FOR structure
  2965 00:CAE0: AA                 TAX                     ; copy back to index
  2966 00:CAE1: 9A                 TXS                     ; copy to stack pointer
  2967 00:CAE2: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2968 00:CAE5: C9 2C              CMP   #','              ; compare with ","
  2969 00:CAE7: D0 F1              BNE   LAB_1A98          ; branch if not "," (go do interpreter inner loop)
  2970                        
  2971                                                      ; was "," so another NEXT variable to do
  2972 00:CAE9: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2973 00:CAEC: 20 8D CA           JSR   LAB_1A46          ; do NEXT (var)
  2974                        
  2975                        ; evaluate expression and check is numeric, else do type mismatch
  2976                        
  2977                        LAB_EVNM
  2978 00:CAEF: 20 03 CB           JSR   LAB_EVEX          ; evaluate expression
  2979                        
  2980                        ; check if source is numeric, else do type mismatch
  2981                        
  2982                        LAB_CTNM
  2983 00:CAF2: 18                 CLC                     ; destination is numeric
  2984 00:CAF3: 24                 .byte $24               ; makes next line BIT $38
  2985                        
  2986                        ; check if source is string, else do type mismatch
  2987                        
  2988                        LAB_CTST
  2989 00:CAF4: 38                 SEC                     ; required type is string
  2990                        
  2991                        ; type match check, set C for string, clear C for numeric
  2992                        
  2993                        LAB_CKTM
  2994 00:CAF5: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2995 00:CAF7: 30 03              BMI   LAB_1ABA          ; branch if data type is string
  2996                        
  2997                                                      ; else data type was numeric
  2998 00:CAF9: B0 03              BCS   LAB_1ABC          ; if required type is string do type mismatch error
  2999                        LAB_1AB9
  3000 00:CAFB: 60                 RTS
  3001                        
  3002                                                      ; data type was string, now check required type
  3003                        LAB_1ABA
  3004 00:CAFC: B0 FD              BCS   LAB_1AB9          ; exit if required type is string
  3005                        
  3006                                                      ; else do type mismatch error
  3007                        LAB_1ABC
  3008 00:CAFE: A2 18              LDX   #$18              ; error code $18 ("Type mismatch" error)
  3009                        LAB_1ABE
  3010 00:CB00: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  3011                        
  3012                        ; evaluate expression
  3013                        
  3014                        LAB_EVEX
  3015 00:CB03: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  3016 00:CB05: D0 02              BNE   LAB_1AC7          ; skip next if not zero
  3017                        
  3018 00:CB07: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  3019                        LAB_1AC7
  3020 00:CB09: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  3021                        
  3022                        LAB_EVEZ
  3023 00:CB0B: A9 00              LDA   #$00              ; set null precedence (flag done)
  3024                        LAB_1ACC
  3025 00:CB0D: 48                 PHA                     ; push precedence byte
  3026 00:CB0E: A9 02              LDA   #$02              ; 2 bytes
  3027 00:CB10: 20 25 C1           JSR   LAB_1212          ; check room on stack for A bytes
  3028 00:CB13: 20 EF CB           JSR   LAB_GVAL          ; get value from line
  3029 00:CB16: A9 00              LDA   #$00              ; clear A
  3030 00:CB18: 85 9B              STA   comp_f            ; clear compare function flag
  3031                        LAB_1ADB
  3032 00:CB1A: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3033                        LAB_1ADE
  3034 00:CB1D: 38                 SEC                     ; set carry for subtract
  3035 00:CB1E: E9 C0              SBC   #TK_GT            ; subtract token for > (lowest comparison function)
  3036 00:CB20: 90 17              BCC   LAB_1AFA          ; branch if < TK_GT
  3037                        
  3038 00:CB22: C9 03              CMP   #$03              ; compare with ">" to "<" tokens
  3039 00:CB24: B0 13              BCS   LAB_1AFA          ; branch if >= TK_SGN (highest evaluation function +1)
  3040                        
  3041                                                      ; was token for > = or < (A = 0, 1 or 2)
  3042 00:CB26: C9 01              CMP   #$01              ; compare with token for =
  3043 00:CB28: 2A                 ROL                     ; *2, b0 = carry (=1 if token was = or <)
  3044                                                      ; (A = 0, 3 or 5)
  3045 00:CB29: 49 01              EOR   #$01              ; toggle b0
  3046                                                      ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
  3047 00:CB2B: 45 9B              EOR   comp_f            ; EOR with compare function flag bits
  3048 00:CB2D: C5 9B              CMP   comp_f            ; compare with compare function flag
  3049 00:CB2F: 90 67              BCC   LAB_1B53          ; if <(comp_f) do syntax error then warm start
  3050                                                      ; was more than one <, = or >)
  3051                        
  3052 00:CB31: 85 9B              STA   comp_f            ; save new compare function flag
  3053 00:CB33: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3054 00:CB36: 4C 1D CB           JMP   LAB_1ADE          ; go do next character
  3055                        
  3056                                                      ; token is < ">" or > "<" tokens
  3057                        LAB_1AFA
  3058 00:CB39: A6 9B              LDX   comp_f            ; get compare function flag
  3059 00:CB3B: D0 2C              BNE   LAB_1B2A          ; branch if compare function
  3060                        
  3061 00:CB3D: B0 79              BCS   LAB_1B78          ; go do functions
  3062                        
  3063                                                      ; else was <  TK_GT so is operator or lower
  3064 00:CB3F: 69 0A              ADC   #TK_GT-TK_PLUS    ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
  3065 00:CB41: 90 75              BCC   LAB_1B78          ; branch if < + operator
  3066                        
  3067                                                      ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
  3068 00:CB43: D0 07              BNE   LAB_1B0B          ; branch if not + token
  3069                        
  3070 00:CB45: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  3071 00:CB47: 10 03              BPL   LAB_1B0B          ; branch if not string
  3072                        
  3073                                                      ; will only be $00 if type is string and token was +
  3074 00:CB49: 4C 0A D3           JMP   LAB_224D          ; add strings, string 1 is in descriptor des_pl, string 2
  3075                                                      ; is in line, and return
  3076                        
  3077                        LAB_1B0B
  3078 00:CB4C: 85 71              STA   ut1_pl            ; save it
  3079 00:CB4E: 0A                 ASL                     ; *2
  3080 00:CB4F: 65 71              ADC   ut1_pl            ; *3
  3081 00:CB51: A8                 TAY                     ; copy to index
  3082                        LAB_1B13
  3083 00:CB52: 68                 PLA                     ; pull previous precedence
  3084 00:CB53: D9 1B E3           CMP   LAB_OPPT,Y        ; compare with precedence byte
  3085 00:CB56: B0 65              BCS   LAB_1B7D          ; branch if A >=
  3086                        
  3087 00:CB58: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3088                        LAB_1B1C
  3089 00:CB5B: 48                 PHA                     ; save precedence
  3090                        LAB_1B1D
  3091 00:CB5C: 20 84 CB           JSR   LAB_1B43          ; get vector, execute function then continue evaluation
  3092 00:CB5F: 68                 PLA                     ; restore precedence
  3093 00:CB60: A4 99              LDY   prstk             ; get precedence stacked flag
  3094 00:CB62: 10 19              BPL   LAB_1B3C          ; branch if stacked values
  3095                        
  3096 00:CB64: AA                 TAX                     ; copy precedence (set flags)
  3097 00:CB65: F0 76              BEQ   LAB_1B9D          ; exit if done
  3098                        
  3099 00:CB67: D0 5D              BNE   LAB_1B86          ; else pop FAC2 and return, branch always
  3100                        
  3101                        LAB_1B2A
  3102 00:CB69: 26 5F              ROL   Dtypef            ; shift data type flag into Cb
  3103 00:CB6B: 8A                 TXA                     ; copy compare function flag
  3104 00:CB6C: 85 5F              STA   Dtypef            ; clear data type flag, X is 0xxx xxxx
  3105 00:CB6E: 2A                 ROL                     ; shift data type into compare function byte b0
  3106 00:CB6F: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  3107 00:CB71: D0 02              BNE   LAB_1B34          ; branch if no underflow
  3108                        
  3109 00:CB73: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  3110                        LAB_1B34
  3111 00:CB75: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  3112             0000000C   TK_LT_PLUS  equ TK_LT-TK_PLUS
  3113 00:CB77: A0 24              LDY   #TK_LT_PLUS*3     ; set offset to last operator entry
  3114 00:CB79: 85 9B              STA   comp_f            ; save new compare function flag
  3115 00:CB7B: D0 D5              BNE   LAB_1B13          ; branch always
  3116                        
  3117                        LAB_1B3C
  3118 00:CB7D: D9 1B E3           CMP   LAB_OPPT,Y        ;.compare with stacked function precedence
  3119 00:CB80: B0 44              BCS   LAB_1B86          ; branch if A >=, pop FAC2 and return
  3120                        
  3121 00:CB82: 90 D7              BCC   LAB_1B1C          ; branch always
  3122                        
  3123                        ;.get vector, execute function then continue evaluation
  3124                        
  3125                        LAB_1B43
  3126 00:CB84: B9 1D E3           LDA   LAB_OPPT+2,Y      ; get function vector high byte
  3127 00:CB87: 48                 PHA                     ; onto stack
  3128 00:CB88: B9 1C E3           LDA   LAB_OPPT+1,Y      ; get function vector low byte
  3129 00:CB8B: 48                 PHA                     ; onto stack
  3130                                                      ; now push sign, round FAC1 and put on stack
  3131                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3132                        ; *** add
  3133                           .IF $&$FF=$FD
  3134                              NOP                     ; return address of JSR +1 (on  next page)
  3135                           .ENDIF  
  3136                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3137 00:CB8C: 20 9B CB           JSR   LAB_1B5B          ; function will return here, then the next RTS will call
  3138                                                      ; the function
  3139 00:CB8F: A5 9B              LDA   comp_f            ; get compare function flag
  3140 00:CB91: 48                 PHA                     ; push compare evaluation byte
  3141 00:CB92: B9 1B E3           LDA   LAB_OPPT,Y        ; get precedence byte
  3142 00:CB95: 4C 0D CB           JMP   LAB_1ACC          ; continue evaluating expression
  3143                        
  3144                        LAB_1B53
  3145 00:CB98: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  3146                        
  3147                        ; push sign, round FAC1 and put on stack
  3148                        
  3149                        LAB_1B5B
  3150 00:CB9B: 68                 PLA                     ; get return addr low byte
  3151 00:CB9C: 85 71              STA   ut1_pl            ; save it
  3152 00:CB9E: E6 71              INC   ut1_pl            ; increment it (was ret-1 pushed? yes!)
  3153                                                      ; note! no check is made on the high byte! if the calling
  3154                                                      ; routine assembles to a page edge then this all goes
  3155                                                      ; horribly wrong !!!
  3156 00:CBA0: 68                 PLA                     ; get return addr high byte
  3157 00:CBA1: 85 72              STA   ut1_ph            ; save it
  3158 00:CBA3: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3159 00:CBA5: 48                 PHA                     ; push sign
  3160                        
  3161                        ; round FAC1 and put on stack
  3162                        
  3163                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  3164                        ; *** replace
  3165                        ;LAB_1B66
  3166                        ;      JSR   LAB_27BA          ; round FAC1
  3167                        ; *** with
  3168 00:CBA6: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  3169                        LAB_1B66
  3170                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  3171 00:CBA9: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3172 00:CBAB: 48                 PHA                     ; push on stack
  3173 00:CBAC: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3174 00:CBAE: 48                 PHA                     ; push on stack
  3175 00:CBAF: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  3176 00:CBB1: 48                 PHA                     ; push on stack
  3177 00:CBB2: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3178 00:CBB4: 48                 PHA                     ; push on stack
  3179 00:CBB5: 6C 71 00           JMP   (ut1_pl)          ; return, sort of
  3180                        
  3181                        ; do functions
  3182                        
  3183                        LAB_1B78
  3184 00:CBB8: A0 FF              LDY   #$FF              ; flag function
  3185 00:CBBA: 68                 PLA                     ; pull precedence byte
  3186                        LAB_1B7B
  3187 00:CBBB: F0 20              BEQ   LAB_1B9D          ; exit if done
  3188                        
  3189                        LAB_1B7D
  3190 00:CBBD: C9 64              CMP   #$64              ; compare previous precedence with $64
  3191 00:CBBF: F0 03              BEQ   LAB_1B84          ; branch if was $64 (< function)
  3192                        
  3193 00:CBC1: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3194                        LAB_1B84
  3195 00:CBC4: 84 99              STY   prstk             ; save precedence stacked flag
  3196                        
  3197                                                      ; pop FAC2 and return
  3198                        LAB_1B86
  3199 00:CBC6: 68                 PLA                     ; pop byte
  3200 00:CBC7: 4A                 LSR                     ; shift out comparison evaluation lowest bit
  3201 00:CBC8: 85 63              STA   Cflag             ; save comparison evaluation flag
  3202 00:CBCA: 68                 PLA                     ; pop exponent
  3203 00:CBCB: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  3204 00:CBCD: 68                 PLA                     ; pop mantissa1
  3205 00:CBCE: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3206 00:CBD0: 68                 PLA                     ; pop mantissa2
  3207 00:CBD1: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  3208 00:CBD3: 68                 PLA                     ; pop mantissa3
  3209 00:CBD4: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  3210 00:CBD6: 68                 PLA                     ; pop sign
  3211 00:CBD7: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  3212 00:CBD9: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  3213 00:CBDB: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  3214                        LAB_1B9D
  3215 00:CBDD: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3216 00:CBDF: 60                 RTS
  3217                        
  3218                        ; print "..." string to string util area
  3219                        
  3220                        LAB_1BC1
  3221 00:CBE0: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  3222 00:CBE2: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  3223 00:CBE4: 69 00              ADC   #$00              ; add carry to low byte
  3224 00:CBE6: 90 01              BCC   LAB_1BCA          ; branch if no overflow
  3225                        
  3226 00:CBE8: C8                 INY                     ; increment high byte
  3227                        LAB_1BCA
  3228 00:CBE9: 20 74 D1           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  3229 00:CBEC: 4C FE D4           JMP   LAB_23F3          ; restore BASIC execute pointer from temp and return
  3230                        
  3231                        ; get value from line
  3232                        
  3233                        LAB_GVAL
  3234 00:CBEF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3235 00:CBF2: B0 03              BCS   LAB_1BAC          ; branch if not numeric character
  3236                        
  3237                                                      ; else numeric string found (e.g. 123)
  3238                        LAB_1BA9
  3239 00:CBF4: 4C D5 D9           JMP   LAB_2887          ; get FAC1 from string and return
  3240                        
  3241                        ; get value from line .. continued
  3242                        
  3243                                                      ; wasn't a number so ..
  3244                        LAB_1BAC
  3245 00:CBF7: AA                 TAX                     ; set the flags
  3246 00:CBF8: 30 2F              BMI   LAB_1BD0          ; if -ve go test token values
  3247                        
  3248                                                      ; else it is either a string, number, variable or (<expr>)
  3249 00:CBFA: C9 24              CMP   #'$'              ; compare with "$"
  3250 00:CBFC: F0 F6              BEQ   LAB_1BA9          ; branch if "$", hex number
  3251                        
  3252 00:CBFE: C9 25              CMP   #'%'              ; else compare with "%"
  3253 00:CC00: F0 F2              BEQ   LAB_1BA9          ; branch if "%", binary number
  3254                        
  3255 00:CC02: C9 2E              CMP   #'.'              ; compare with "."
  3256 00:CC04: F0 EE              BEQ   LAB_1BA9          ; if so get FAC1 from string and return (e.g. was .123)
  3257                        
  3258                                                      ; it wasn't any sort of number so ..
  3259 00:CC06: C9 22              CMP   #$22              ; compare with "
  3260 00:CC08: F0 D6              BEQ   LAB_1BC1          ; branch if open quote
  3261                        
  3262                                                      ; wasn't any sort of number so ..
  3263                        
  3264                        ; evaluate expression within parentheses
  3265                        
  3266 00:CC0A: C9 28              CMP   #'('              ; compare with "("
  3267 00:CC0C: D0 5B              BNE   LAB_1C18          ; if not "(" get (var), return value in FAC1 and $ flag
  3268                        
  3269                        LAB_1BF7
  3270 00:CC0E: 20 0B CB           JSR   LAB_EVEZ          ; evaluate expression, no decrement
  3271                        
  3272                        ; all the 'scan for' routines return the character after the sought character
  3273                        
  3274                        ; scan for ")" , else do syntax error then warm start
  3275                        
  3276                        LAB_1BFB
  3277 00:CC11: A9 29              LDA   #$29              ; load A with ")"
  3278                        
  3279                        ; scan for CHR$(A) , else do syntax error then warm start
  3280                        
  3281                        LAB_SCCA
  3282 00:CC13: A0 00              LDY   #$00              ; clear index
  3283 00:CC15: D1 C3              CMP   (Bpntrl),Y        ; check next byte is = A
  3284 00:CC17: D0 0B              BNE   LAB_SNER          ; if not do syntax error then warm start
  3285                        
  3286 00:CC19: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then return
  3287                        
  3288                        ; scan for "(" , else do syntax error then warm start
  3289                        
  3290                        LAB_1BFE
  3291 00:CC1C: A9 28              LDA   #$28              ; load A with "("
  3292 00:CC1E: D0 F3              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3293                                                      ; (branch always)
  3294                        
  3295                        ; scan for "," , else do syntax error then warm start
  3296                        
  3297                        LAB_1C01
  3298 00:CC20: A9 2C              LDA   #$2C              ; load A with ","
  3299 00:CC22: D0 EF              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3300                                                      ; (branch always)
  3301                        
  3302                        ; syntax error then warm start
  3303                        
  3304                        LAB_SNER
  3305 00:CC24: A2 02              LDX   #$02              ; error code $02 ("Syntax" error)
  3306 00:CC26: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  3307                        
  3308                        ; get value from line .. continued
  3309                        ; do tokens
  3310                        
  3311                        LAB_1BD0
  3312 00:CC29: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  3313 00:CC2B: F0 29              BEQ   LAB_1C11          ; branch if - token (do set-up for functions)
  3314                        
  3315                                                      ; wasn't -n so ..
  3316 00:CC2D: C9 B6              CMP   #TK_PLUS          ; compare with token for +
  3317 00:CC2F: F0 BE              BEQ   LAB_GVAL          ; branch if + token (+n = n so ignore leading +)
  3318                        
  3319 00:CC31: C9 B1              CMP   #TK_NOT           ; compare with token for NOT
  3320 00:CC33: D0 13              BNE   LAB_1BE7          ; branch if not token for NOT
  3321                        
  3322                                                      ; was NOT token
  3323             0000000B   TK_EQUAL_PLUS   equ TK_EQUAL-TK_PLUS
  3324 00:CC35: A0 21              LDY   #TK_EQUAL_PLUS*3  ; offset to NOT function
  3325 00:CC37: D0 1F              BNE   LAB_1C13          ; do set-up for function then execute (branch always)
  3326                        
  3327                        ; do = compare
  3328                        
  3329                        LAB_EQUAL
  3330 00:CC39: 20 D6 CE           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3331 00:CC3C: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3332 00:CC3E: 49 FF              EOR   #$FF              ; invert it
  3333 00:CC40: A8                 TAY                     ; copy it
  3334 00:CC41: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3335 00:CC43: 49 FF              EOR   #$FF              ; invert it
  3336 00:CC45: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3337                        
  3338                        ; get value from line .. continued
  3339                        
  3340                                                      ; wasn't +, -, or NOT so ..
  3341                        LAB_1BE7
  3342 00:CC48: C9 AE              CMP   #TK_FN            ; compare with token for FN
  3343 00:CC4A: D0 03              BNE   LAB_1BEE          ; branch if not token for FN
  3344                        
  3345 00:CC4C: 4C E4 D0           JMP   LAB_201E          ; go evaluate FNx
  3346                        
  3347                        ; get value from line .. continued
  3348                        
  3349                                                      ; wasn't +, -, NOT or FN so ..
  3350                        LAB_1BEE
  3351 00:CC4F: E9 C3              SBC   #TK_SGN           ; subtract with token for SGN
  3352 00:CC51: B0 27              BCS   LAB_1C27          ; if a function token go do it
  3353                        
  3354 00:CC53: 4C 24 CC           JMP   LAB_SNER          ; else do syntax error
  3355                        
  3356                        ; set-up for functions
  3357                        
  3358                        LAB_1C11
  3359             0000000A   TK_GT_PLUS  equ TK_GT-TK_PLUS
  3360 00:CC56: A0 1E              LDY   #TK_GT_PLUS*3     ; set offset from base to > operator
  3361                        LAB_1C13
  3362 00:CC58: 68                 PLA                     ; dump return address low byte
  3363                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3364                        ; *** replace
  3365                        ;      PLA                     ; dump return address high byte
  3366                        ;      JMP   LAB_1B1D          ; execute function then continue evaluation
  3367                        ; *** with
  3368 00:CC59: AA                 TAX                     ; save to trap concatenate
  3369 00:CC5A: 68                 PLA                     ; dump return address high byte
  3370 00:CC5B: E0 12              CPX   #<(LAB_224Da+2)   ; from concatenate low return address?
  3371 00:CC5D: D0 04              BNE   LAB_1C13b         ; No - continue!
  3372 00:CC5F: C9 D3              CMP   #>(LAB_224Da+2)   ; from concatenate high return address?
  3373 00:CC61: F0 03              BEQ   LAB_1C13a         ; Yes - error!
  3374                        LAB_1C13b
  3375 00:CC63: 4C 5C CB           JMP   LAB_1B1D          ; execute function then continue evaluation
  3376                        LAB_1C13a
  3377 00:CC66: 4C FE CA           JMP   LAB_1ABC          ; throw "type mismatch error" then warm start      
  3378                        ; *** end   patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3379                        
  3380                        ; variable name set-up
  3381                        ; get (var), return value in FAC_1 and $ flag
  3382                        
  3383                        LAB_1C18
  3384 00:CC69: 20 DA CD           JSR   LAB_GVAR          ; get (var) address
  3385 00:CC6C: 85 AE              STA   FAC1_2            ; save address low byte in FAC1 mantissa2
  3386 00:CC6E: 84 AF              STY   FAC1_3            ; save address high byte in FAC1 mantissa3
  3387 00:CC70: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3388 00:CC72: 30 03              BMI   LAB_1C25          ; if string then return (does RTS)
  3389                        
  3390                        LAB_1C24
  3391 00:CC74: 4C AC D8           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1
  3392                        
  3393                        LAB_1C25
  3394                        ; *** begin patch  string pointer high byte trashed when moved to stack
  3395                        ; *** add
  3396 00:CC77: 46 B9              LSR   FAC1_r            ; clear bit 7 (<$80) = do not round up
  3397                        ; *** end patch 
  3398 00:CC79: 60                 RTS
  3399                        
  3400                        ; get value from line .. continued
  3401                        ; only functions left so ..
  3402                        
  3403                        ; set up function references
  3404                        
  3405                        ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
  3406                        ; to process function calls. now the function vector is computed and pushed on the stack
  3407                        ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
  3408                        ; is calculated and the routine called, if not this routine just does RTS. whichever
  3409                        ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
  3410                        ; the function code
  3411                        
  3412                        ; this also removes some less than elegant code that was used to bypass type checking
  3413                        ; for functions that returned strings
  3414                        
  3415                        LAB_1C27
  3416 00:CC7A: 0A                 ASL                     ; *2 (2 bytes per function address)
  3417 00:CC7B: A8                 TAY                     ; copy to index
  3418                        
  3419 00:CC7C: B9 D6 E2           LDA   LAB_FTBM,Y        ; get function jump vector high byte
  3420 00:CC7F: 48                 PHA                     ; push functions jump vector high byte
  3421 00:CC80: B9 D5 E2           LDA   LAB_FTBL,Y        ; get function jump vector low byte
  3422 00:CC83: 48                 PHA                     ; push functions jump vector low byte
  3423                        
  3424 00:CC84: B9 90 E2           LDA   LAB_FTPM,Y        ; get function pre process vector high byte
  3425 00:CC87: F0 05              BEQ   LAB_1C56          ; skip pre process if null vector
  3426                        
  3427 00:CC89: 48                 PHA                     ; push functions pre process vector high byte
  3428 00:CC8A: B9 8F E2           LDA   LAB_FTPL,Y        ; get function pre process vector low byte
  3429 00:CC8D: 48                 PHA                     ; push functions pre process vector low byte
  3430                        
  3431                        LAB_1C56
  3432 00:CC8E: 60                 RTS                     ; do function, or pre process, call
  3433                        
  3434                        ; process string expression in parenthesis
  3435                        
  3436                        LAB_PPFS
  3437 00:CC8F: 20 0E CC           JSR   LAB_1BF7          ; process expression in parenthesis
  3438 00:CC92: 4C F4 CA           JMP   LAB_CTST          ; check if source is string then do function,
  3439                                                      ; else do type mismatch
  3440                        
  3441                        ; process numeric expression in parenthesis
  3442                        
  3443                        LAB_PPFN
  3444 00:CC95: 20 0E CC           JSR   LAB_1BF7          ; process expression in parenthesis
  3445 00:CC98: 4C F2 CA           JMP   LAB_CTNM          ; check if source is numeric then do function,
  3446                                                      ; else do type mismatch
  3447                        
  3448                        ; set numeric data type and increment BASIC execute pointer
  3449                        
  3450                        LAB_PPBI
  3451 00:CC9B: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3452 00:CC9D: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then do function
  3453                        
  3454                        ; process string for LEFT$, RIGHT$ or MID$
  3455                        
  3456                        LAB_LRMS
  3457 00:CCA0: 20 0B CB           JSR   LAB_EVEZ          ; evaluate (should be string) expression
  3458 00:CCA3: 20 20 CC           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3459 00:CCA6: 20 F4 CA           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  3460                        
  3461 00:CCA9: 68                 PLA                     ; get function jump vector low byte
  3462 00:CCAA: AA                 TAX                     ; save functions jump vector low byte
  3463 00:CCAB: 68                 PLA                     ; get function jump vector high byte
  3464 00:CCAC: A8                 TAY                     ; save functions jump vector high byte
  3465 00:CCAD: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  3466 00:CCAF: 48                 PHA                     ; push string pointer high byte
  3467 00:CCB0: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  3468 00:CCB2: 48                 PHA                     ; push string pointer low byte
  3469 00:CCB3: 98                 TYA                     ; get function jump vector high byte back
  3470 00:CCB4: 48                 PHA                     ; save functions jump vector high byte
  3471 00:CCB5: 8A                 TXA                     ; get function jump vector low byte back
  3472 00:CCB6: 48                 PHA                     ; save functions jump vector low byte
  3473 00:CCB7: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter
  3474 00:CCBA: 8A                 TXA                     ; copy byte parameter to A
  3475 00:CCBB: 60                 RTS                     ; go do function
  3476                        
  3477                        ; process numeric expression(s) for BIN$ or HEX$
  3478                        
  3479                        LAB_BHSS
  3480 00:CCBC: 20 0B CB           JSR   LAB_EVEZ          ; process expression
  3481 00:CCBF: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3482 00:CCC2: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3483 00:CCC4: C9 98              CMP   #$98              ; compare with exponent = 2^24
  3484 00:CCC6: B0 20              BCS   LAB_BHER          ; branch if n>=2^24 (is too big)
  3485                        
  3486 00:CCC8: 20 7F D9           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  3487 00:CCCB: A2 02              LDX   #$02              ; 3 bytes to do
  3488                        LAB_CFAC
  3489 00:CCCD: B5 AD              LDA   FAC1_1,X          ; get byte from FAC1
  3490 00:CCCF: 95 11              STA   nums_1,X          ; save byte to temp
  3491 00:CCD1: CA                 DEX                     ; decrement index
  3492 00:CCD2: 10 F9              BPL   LAB_CFAC          ; copy FAC1 mantissa to temp
  3493                        
  3494 00:CCD4: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  3495 00:CCD7: A2 00              LDX   #$00              ; set default to no leading "0"s
  3496 00:CCD9: C9 29              CMP   #')'              ; compare with close bracket
  3497 00:CCDB: F0 0A              BEQ   LAB_1C54          ; if ")" go do rest of function
  3498                        
  3499 00:CCDD: 20 0D D5           JSR   LAB_SCGB          ; scan for "," and get byte
  3500 00:CCE0: 20 C2 00           JSR   LAB_GBYT          ; get last byte back
  3501 00:CCE3: C9 29              CMP   #')'              ; is next character )
  3502 00:CCE5: D0 01              BNE   LAB_BHER          ; if not ")" go do error
  3503                        
  3504                        LAB_1C54
  3505 00:CCE7: 60                 RTS                     ; else do function
  3506                        
  3507                        LAB_BHER
  3508 00:CCE8: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start
  3509                        
  3510                        ; perform EOR
  3511                        
  3512                        ; added operator format is the same as AND or OR, precedence is the same as OR
  3513                        
  3514                        ; this bit worked first time but it took a while to sort out the operator table
  3515                        ; pointers and offsets afterwards!
  3516                        
  3517                        LAB_EOR
  3518 00:CCEB: 20 12 CD           JSR   GetFirst          ; get first integer expression (no sign check)
  3519 00:CCEE: 45 5B              EOR   XOAw_l            ; EOR with expression 1 low byte
  3520 00:CCF0: A8                 TAY                     ; save in Y
  3521 00:CCF1: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3522 00:CCF3: 45 5C              EOR   XOAw_h            ; EOR with expression 1 high byte
  3523 00:CCF5: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3524                        
  3525                        ; perform OR
  3526                        
  3527                        LAB_OR
  3528 00:CCF8: 20 12 CD           JSR   GetFirst          ; get first integer expression (no sign check)
  3529 00:CCFB: 05 5B              ORA   XOAw_l            ; OR with expression 1 low byte
  3530 00:CCFD: A8                 TAY                     ; save in Y
  3531 00:CCFE: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3532 00:CD00: 05 5C              ORA   XOAw_h            ; OR with expression 1 high byte
  3533 00:CD02: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3534                        
  3535                        ; perform AND
  3536                        
  3537                        LAB_AND
  3538 00:CD05: 20 12 CD           JSR   GetFirst          ; get first integer expression (no sign check)
  3539 00:CD08: 25 5B              AND   XOAw_l            ; AND with expression 1 low byte
  3540 00:CD0A: A8                 TAY                     ; save in Y
  3541 00:CD0B: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3542 00:CD0D: 25 5C              AND   XOAw_h            ; AND with expression 1 high byte
  3543 00:CD0F: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3544                        
  3545                        ; get first value for OR, AND or EOR
  3546                        
  3547                        GetFirst
  3548 00:CD12: 20 D6 CE           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3549 00:CD15: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3550 00:CD17: 85 5C              STA   XOAw_h            ; save it
  3551 00:CD19: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3552 00:CD1B: 85 5B              STA   XOAw_l            ; save it
  3553 00:CD1D: 20 F2 D5           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3554 00:CD20: 20 D6 CE           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3555 00:CD23: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3556                        LAB_1C95
  3557 00:CD25: 60                 RTS
  3558                        
  3559                        ; perform comparisons
  3560                        
  3561                        ; do < compare
  3562                        
  3563                        LAB_LTHAN
  3564 00:CD26: 20 F5 CA           JSR   LAB_CKTM          ; type match check, set C for string
  3565 00:CD29: B0 13              BCS   LAB_1CAE          ; branch if string
  3566                        
  3567                                                      ; do numeric < compare
  3568 00:CD2B: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  3569 00:CD2D: 09 7F              ORA   #$7F              ; set all non sign bits
  3570 00:CD2F: 25 B4              AND   FAC2_1            ; and FAC2 mantissa1 (AND in sign bit)
  3571 00:CD31: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3572 00:CD33: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  3573 00:CD35: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  3574 00:CD37: 20 46 D9           JSR   LAB_27F8          ; compare FAC1 with FAC2 (AY)
  3575 00:CD3A: AA                 TAX                     ; copy result
  3576 00:CD3B: 4C 6F CD           JMP   LAB_1CE1          ; go evaluate result
  3577                        
  3578                                                      ; do string < compare
  3579                        LAB_1CAE
  3580 00:CD3E: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3581 00:CD40: C6 9B              DEC   comp_f            ; clear < bit in compare function flag
  3582 00:CD42: 20 74 D3           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  3583                                                      ; space returns with A = length, X=pointer low byte,
  3584                                                      ; Y=pointer high byte
  3585 00:CD45: 85 AC              STA   str_ln            ; save length
  3586 00:CD47: 86 AD              STX   str_pl            ; save string pointer low byte
  3587 00:CD49: 84 AE              STY   str_ph            ; save string pointer high byte
  3588 00:CD4B: A5 B5              LDA   FAC2_2            ; get descriptor pointer low byte
  3589 00:CD4D: A4 B6              LDY   FAC2_3            ; get descriptor pointer high byte
  3590 00:CD4F: 20 78 D3           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  3591                                                      ; returns with A = length, X=pointer low byte,
  3592                                                      ; Y=pointer high byte
  3593 00:CD52: 86 B5              STX   FAC2_2            ; save string pointer low byte
  3594 00:CD54: 84 B6              STY   FAC2_3            ; save string pointer high byte
  3595 00:CD56: AA                 TAX                     ; copy length
  3596 00:CD57: 38                 SEC                     ; set carry for subtract
  3597 00:CD58: E5 AC              SBC   str_ln            ; subtract string 1 length
  3598 00:CD5A: F0 08              BEQ   LAB_1CD6          ; branch if str 1 length = string 2 length
  3599                        
  3600 00:CD5C: A9 01              LDA   #$01              ; set str 1 length > string 2 length
  3601 00:CD5E: 90 04              BCC   LAB_1CD6          ; branch if so
  3602                        
  3603 00:CD60: A6 AC              LDX   str_ln            ; get string 1 length
  3604 00:CD62: A9 FF              LDA   #$FF              ; set str 1 length < string 2 length
  3605                        LAB_1CD6
  3606 00:CD64: 85 B0              STA   FAC1_s            ; save length compare
  3607 00:CD66: A0 FF              LDY   #$FF              ; set index
  3608 00:CD68: E8                 INX                     ; adjust for loop
  3609                        LAB_1CDB
  3610 00:CD69: C8                 INY                     ; increment index
  3611 00:CD6A: CA                 DEX                     ; decrement count
  3612 00:CD6B: D0 07              BNE   LAB_1CE6          ; branch if still bytes to do
  3613                        
  3614 00:CD6D: A6 B0              LDX   FAC1_s            ; get length compare back
  3615                        LAB_1CE1
  3616 00:CD6F: 30 0F              BMI   LAB_1CF2          ; branch if str 1 < str 2
  3617                        
  3618 00:CD71: 18                 CLC                     ; flag str 1 <= str 2
  3619 00:CD72: 90 0C              BCC   LAB_1CF2          ; go evaluate result
  3620                        
  3621                        LAB_1CE6
  3622 00:CD74: B1 B5              LDA   (FAC2_2),Y        ; get string 2 byte
  3623 00:CD76: D1 AD              CMP   (FAC1_1),Y        ; compare with string 1 byte
  3624 00:CD78: F0 EF              BEQ   LAB_1CDB          ; loop if bytes =
  3625                        
  3626 00:CD7A: A2 FF              LDX   #$FF              ; set str 1 < string 2
  3627 00:CD7C: B0 02              BCS   LAB_1CF2          ; branch if so
  3628                        
  3629 00:CD7E: A2 01              LDX   #$01              ;  set str 1 > string 2
  3630                        LAB_1CF2
  3631 00:CD80: E8                 INX                     ; x = 0, 1 or 2
  3632 00:CD81: 8A                 TXA                     ; copy to A
  3633 00:CD82: 2A                 ROL                     ; *2 (1, 2 or 4)
  3634 00:CD83: 25 63              AND   Cflag             ; AND with comparison evaluation flag
  3635 00:CD85: F0 02              BEQ   LAB_1CFB          ; branch if 0 (compare is false)
  3636                        
  3637 00:CD87: A9 FF              LDA   #$FF              ; else set result true
  3638                        LAB_1CFB
  3639 00:CD89: 4C 29 D9           JMP   LAB_27DB          ; save A as integer byte and return
  3640                        
  3641                        LAB_1CFE
  3642 00:CD8C: 20 20 CC           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3643                        
  3644                        ; perform DIM
  3645                        
  3646                        LAB_DIM
  3647 00:CD8F: AA                 TAX                     ; copy "DIM" flag to X
  3648 00:CD90: 20 DF CD           JSR   LAB_1D10          ; search for variable
  3649 00:CD93: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3650 00:CD96: D0 F4              BNE   LAB_1CFE          ; scan for "," and loop if not null
  3651                        
  3652 00:CD98: 60                 RTS
  3653                        
  3654                        ; perform << (left shift)
  3655                        
  3656                        LAB_LSHIFT
  3657 00:CD99: 20 CF CD           JSR   GetPair           ; get integer expression and byte (no sign check)
  3658 00:CD9C: A5 AE              LDA   FAC1_2            ; get expression high byte
  3659 00:CD9E: A6 78              LDX   TempB             ; get shift count
  3660 00:CDA0: F0 22              BEQ   NoShift           ; branch if zero
  3661                        
  3662 00:CDA2: E0 10              CPX   #$10              ; compare bit count with 16d
  3663 00:CDA4: B0 23              BCS   TooBig            ; branch if >=
  3664                        
  3665                        Ls_loop
  3666 00:CDA6: 06 AF              ASL   FAC1_3            ; shift low byte
  3667 00:CDA8: 2A                 ROL                     ; shift high byte
  3668 00:CDA9: CA                 DEX                     ; decrement bit count
  3669 00:CDAA: D0 FA              BNE   Ls_loop           ; loop if shift not complete
  3670                        
  3671 00:CDAC: A4 AF              LDY   FAC1_3            ; get expression low byte
  3672 00:CDAE: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3673                        
  3674                        ; perform >> (right shift)
  3675                        
  3676                        LAB_RSHIFT
  3677 00:CDB1: 20 CF CD           JSR   GetPair           ; get integer expression and byte (no sign check)
  3678 00:CDB4: A5 AE              LDA   FAC1_2            ; get expression high byte
  3679 00:CDB6: A6 78              LDX   TempB             ; get shift count
  3680 00:CDB8: F0 0A              BEQ   NoShift           ; branch if zero
  3681                        
  3682 00:CDBA: E0 10              CPX   #$10              ; compare bit count with 16d
  3683 00:CDBC: B0 0B              BCS   TooBig            ; branch if >=
  3684                        
  3685                        Rs_loop
  3686 00:CDBE: 4A                 LSR                     ; shift high byte
  3687 00:CDBF: 66 AF              ROR   FAC1_3            ; shift low byte
  3688 00:CDC1: CA                 DEX                     ; decrement bit count
  3689 00:CDC2: D0 FA              BNE   Rs_loop           ; loop if shift not complete
  3690                        
  3691                        NoShift
  3692 00:CDC4: A4 AF              LDY   FAC1_3            ; get expression low byte
  3693 00:CDC6: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3694                        
  3695                        TooBig
  3696 00:CDC9: A9 00              LDA   #$00              ; clear high byte
  3697 00:CDCB: A8                 TAY                     ; copy to low byte
  3698 00:CDCC: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3699                        
  3700                        GetPair
  3701 00:CDCF: 20 C5 D4           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  3702 00:CDD2: 86 78              STX   TempB             ; save it
  3703 00:CDD4: 20 F2 D5           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3704 00:CDD7: 4C D6 CE           JMP   LAB_EVIR          ; evaluate integer expression (no sign check)
  3705                        
  3706                        ; search for variable
  3707                        
  3708                        ; return pointer to variable in Cvaral/Cvarah
  3709                        
  3710                        LAB_GVAR
  3711 00:CDDA: A2 00              LDX   #$00              ; set DIM flag = $00
  3712 00:CDDC: 20 C2 00           JSR   LAB_GBYT          ; scan memory (1st character)
  3713                        LAB_1D10
  3714 00:CDDF: 86 5E              STX   Defdim            ; save DIM flag
  3715                        LAB_1D12
  3716 00:CDE1: 85 93              STA   Varnm1            ; save 1st character
  3717 00:CDE3: 29 7F              AND   #$7F              ; clear FN flag bit
  3718 00:CDE5: 20 4E CE           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3719 00:CDE8: B0 03              BCS   LAB_1D1F          ; branch if ok
  3720                        
  3721 00:CDEA: 4C 24 CC           JMP   LAB_SNER          ; else syntax error then warm start
  3722                        
  3723                                                      ; was variable name so ..
  3724                        LAB_1D1F
  3725 00:CDED: A2 00              LDX   #$00              ; clear 2nd character temp
  3726 00:CDEF: 86 5F              STX   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3727 00:CDF1: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (2nd character)
  3728 00:CDF4: 90 05              BCC   LAB_1D2D          ; branch if character = "0"-"9" (ok)
  3729                        
  3730                                                      ; 2nd character wasn't "0" to "9" so ..
  3731 00:CDF6: 20 4E CE           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3732 00:CDF9: 90 0B              BCC   LAB_1D38          ; branch if <"A" or >"Z" (go check if string)
  3733                        
  3734                        LAB_1D2D
  3735 00:CDFB: AA                 TAX                     ; copy 2nd character
  3736                        
  3737                                                      ; ignore further (valid) characters in the variable name
  3738                        LAB_1D2E
  3739 00:CDFC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (3rd character)
  3740 00:CDFF: 90 FB              BCC   LAB_1D2E          ; loop if character = "0"-"9" (ignore)
  3741                        
  3742 00:CE01: 20 4E CE           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3743 00:CE04: B0 F6              BCS   LAB_1D2E          ; loop if character = "A"-"Z" (ignore)
  3744                        
  3745                                                      ; check if string variable
  3746                        LAB_1D38
  3747 00:CE06: C9 24              CMP   #'$'              ; compare with "$"
  3748 00:CE08: D0 0B              BNE   LAB_1D47          ; branch if not string
  3749                        
  3750                        ; to introduce a new variable type (% suffix for integers say) then this branch
  3751                        ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
  3752                        
  3753                                                      ; type is string
  3754 00:CE0A: A9 FF              LDA   #$FF              ; set data type = string
  3755 00:CE0C: 85 5F              STA   Dtypef            ; set data type flag, $FF=string, $00=numeric
  3756 00:CE0E: 8A                 TXA                     ; get 2nd character back
  3757 00:CE0F: 09 80              ORA   #$80              ; set top bit (indicate string var)
  3758 00:CE11: AA                 TAX                     ; copy back to 2nd character temp
  3759 00:CE12: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3760                        
  3761                        ; after we have determined the variable type we need to come back here to determine
  3762                        ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
  3763                        
  3764                        
  3765                        LAB_1D47                      ; gets here with character after var name in A
  3766 00:CE15: 86 94              STX   Varnm2            ; save 2nd character
  3767 00:CE17: 05 61              ORA   Sufnxf            ; or with subscript/FNX flag (or FN name)
  3768 00:CE19: C9 28              CMP   #'('              ; compare with "("
  3769 00:CE1B: D0 03              BNE   LAB_1D53          ; branch if not "("
  3770                        
  3771 00:CE1D: 4C E8 CE           JMP   LAB_1E17          ; go find, or make, array
  3772                        
  3773                        ; either find or create var
  3774                        ; var name (1st two characters only!) is in Varnm1,Varnm2
  3775                        
  3776                                                      ; variable name wasn't var(... so look for plain var
  3777                        LAB_1D53
  3778 00:CE20: A9 00              LDA   #$00              ; clear A
  3779 00:CE22: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  3780 00:CE24: A5 7B              LDA   Svarl             ; get start of vars low byte
  3781 00:CE26: A6 7C              LDX   Svarh             ; get start of vars high byte
  3782 00:CE28: A0 00              LDY   #$00              ; clear index
  3783                        LAB_1D5D
  3784 00:CE2A: 86 AB              STX   Vrschh            ; save search address high byte
  3785                        LAB_1D5F
  3786 00:CE2C: 85 AA              STA   Vrschl            ; save search address low byte
  3787 00:CE2E: E4 7E              CPX   Sarryh            ; compare high address with var space end
  3788 00:CE30: D0 04              BNE   LAB_1D69          ; skip next compare if <>
  3789                        
  3790                                                      ; high addresses were = so compare low addresses
  3791 00:CE32: C5 7D              CMP   Sarryl            ; compare low address with var space end
  3792 00:CE34: F0 2C              BEQ   LAB_1D8B          ; if not found go make new var
  3793                        
  3794                        LAB_1D69
  3795 00:CE36: A5 93              LDA   Varnm1            ; get 1st character of var to find
  3796 00:CE38: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 1st character
  3797 00:CE3A: D0 08              BNE   LAB_1D77          ; branch if no match
  3798                        
  3799                                                      ; 1st characters match so compare 2nd characters
  3800 00:CE3C: A5 94              LDA   Varnm2            ; get 2nd character of var to find
  3801 00:CE3E: C8                 INY                     ; index to point to variable name 2nd character
  3802 00:CE3F: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 2nd character
  3803 00:CE41: F0 69              BEQ   LAB_1DD7          ; branch if match (found var)
  3804                        
  3805 00:CE43: 88                 DEY                     ; else decrement index (now = $00)
  3806                        LAB_1D77
  3807 00:CE44: 18                 CLC                     ; clear carry for add
  3808 00:CE45: A5 AA              LDA   Vrschl            ; get search address low byte
  3809 00:CE47: 69 06              ADC   #$06              ; +6 (offset to next var name)
  3810 00:CE49: 90 E1              BCC   LAB_1D5F          ; loop if no overflow to high byte
  3811                        
  3812 00:CE4B: E8                 INX                     ; else increment high byte
  3813 00:CE4C: D0 DC              BNE   LAB_1D5D          ; loop always (RAM doesn't extend to $FFFF !)
  3814                        
  3815                        ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
  3816                        
  3817                        LAB_CASC
  3818 00:CE4E: C9 61              CMP   #'a'              ; compare with "a"
  3819 00:CE50: B0 0A              BCS   LAB_1D83          ; go check <"z"+1
  3820                        
  3821                        ; check byte, return C=0 if<"A" or >"Z"
  3822                        
  3823                        LAB_1D82
  3824 00:CE52: C9 41              CMP   #'A'              ; compare with "A"
  3825 00:CE54: 90 05              BCC   LAB_1D8A          ; exit if less
  3826                        
  3827                                                      ; carry is set
  3828 00:CE56: E9 5B              SBC   #$5B              ; subtract "Z"+1
  3829 00:CE58: 38                 SEC                     ; set carry
  3830 00:CE59: E9 A5              SBC   #$A5              ; subtract $A5 (restore byte)
  3831                                                      ; carry clear if byte>$5A
  3832                        LAB_1D8A
  3833 00:CE5B: 60                 RTS
  3834                        
  3835                        LAB_1D83
  3836 00:CE5C: E9 7B              SBC   #$7B              ; subtract "z"+1
  3837 00:CE5E: 38                 SEC                     ; set carry
  3838 00:CE5F: E9 85              SBC   #$85              ; subtract $85 (restore byte)
  3839                                                      ; carry clear if byte>$7A
  3840 00:CE61: 60                 RTS
  3841                        
  3842                                                      ; reached end of variable mem without match
  3843                                                      ; .. so create new variable
  3844                        LAB_1D8B
  3845 00:CE62: 68                 PLA                     ; pop return address low byte
  3846 00:CE63: 48                 PHA                     ; push return address low byte
  3847             0000CC6B   LAB_1C18p2  equ LAB_1C18+2
  3848 00:CE64: C9 6B              CMP   #<LAB_1C18p2      ; compare with expected calling routine return low byte
  3849 00:CE66: D0 05              BNE   LAB_1D98          ; if not get (var) go create new var
  3850                        
  3851                        ; This will only drop through if the call was from LAB_1C18 and is only called
  3852                        ; from there if it is searching for a variable from the RHS of a LET a=b statement
  3853                        ; it prevents the creation of variables not assigned a value.
  3854                        
  3855                        ; value returned by this is either numeric zero (exponent byte is $00) or null string
  3856                        ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
  3857                        
  3858                        ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
  3859                        
  3860                        ; this is where you would put the undefined variable error call e.g.
  3861                        
  3862                        ;                             ; variable doesn't exist so flag error
  3863                        ;     LDX   #$24              ; error code $24 ("undefined variable" error)
  3864                        ;     JMP   LAB_XERR          ; do error #X then warm start
  3865                        
  3866                        ; the above code has been tested and works a treat! (it replaces the three code lines
  3867                        ; below)
  3868                        
  3869                                                      ; else return dummy null value
  3870 00:CE68: A9 13              LDA   #<LAB_1D96        ; low byte point to $00,$00
  3871                                                      ; (uses part of misc constants table)
  3872 00:CE6A: A0 E2              LDY   #>LAB_1D96        ; high byte point to $00,$00
  3873 00:CE6C: 60                 RTS
  3874                        
  3875                                                      ; create new numeric variable
  3876                        LAB_1D98
  3877 00:CE6D: A5 7D              LDA   Sarryl            ; get var mem end low byte
  3878 00:CE6F: A4 7E              LDY   Sarryh            ; get var mem end high byte
  3879 00:CE71: 85 AA              STA   Ostrtl            ; save old block start low byte
  3880 00:CE73: 84 AB              STY   Ostrth            ; save old block start high byte
  3881 00:CE75: A5 7F              LDA   Earryl            ; get array mem end low byte
  3882 00:CE77: A4 80              LDY   Earryh            ; get array mem end high byte
  3883 00:CE79: 85 A6              STA   Obendl            ; save old block end low byte
  3884 00:CE7B: 84 A7              STY   Obendh            ; save old block end high byte
  3885 00:CE7D: 18                 CLC                     ; clear carry for add
  3886 00:CE7E: 69 06              ADC   #$06              ; +6 (space for one var)
  3887 00:CE80: 90 01              BCC   LAB_1DAE          ; branch if no overflow to high byte
  3888                        
  3889 00:CE82: C8                 INY                     ; else increment high byte
  3890                        LAB_1DAE
  3891 00:CE83: 85 A4              STA   Nbendl            ; set new block end low byte
  3892 00:CE85: 84 A5              STY   Nbendh            ; set new block end high byte
  3893 00:CE87: 20 E3 C0           JSR   LAB_11CF          ; open up space in memory
  3894 00:CE8A: A5 A4              LDA   Nbendl            ; get new start low byte
  3895 00:CE8C: A4 A5              LDY   Nbendh            ; get new start high byte (-$100)
  3896 00:CE8E: C8                 INY                     ; correct high byte
  3897 00:CE8F: 85 7D              STA   Sarryl            ; save new var mem end low byte
  3898 00:CE91: 84 7E              STY   Sarryh            ; save new var mem end high byte
  3899 00:CE93: A0 00              LDY   #$00              ; clear index
  3900 00:CE95: A5 93              LDA   Varnm1            ; get var name 1st character
  3901 00:CE97: 91 AA              STA   (Vrschl),Y        ; save var name 1st character
  3902 00:CE99: C8                 INY                     ; increment index
  3903 00:CE9A: A5 94              LDA   Varnm2            ; get var name 2nd character
  3904 00:CE9C: 91 AA              STA   (Vrschl),Y        ; save var name 2nd character
  3905 00:CE9E: A9 00              LDA   #$00              ; clear A
  3906 00:CEA0: C8                 INY                     ; increment index
  3907 00:CEA1: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3908 00:CEA3: C8                 INY                     ; increment index
  3909 00:CEA4: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3910 00:CEA6: C8                 INY                     ; increment index
  3911 00:CEA7: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3912 00:CEA9: C8                 INY                     ; increment index
  3913 00:CEAA: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3914                        
  3915                                                      ; found a match for var ((Vrschl) = ptr)
  3916                        LAB_1DD7
  3917 00:CEAC: A5 AA              LDA   Vrschl            ; get var address low byte
  3918 00:CEAE: 18                 CLC                     ; clear carry for add
  3919 00:CEAF: 69 02              ADC   #$02              ; +2 (offset past var name bytes)
  3920 00:CEB1: A4 AB              LDY   Vrschh            ; get var address high byte
  3921 00:CEB3: 90 01              BCC   LAB_1DE1          ; branch if no overflow from add
  3922                        
  3923 00:CEB5: C8                 INY                     ; else increment high byte
  3924                        LAB_1DE1
  3925 00:CEB6: 85 95              STA   Cvaral            ; save current var address low byte
  3926 00:CEB8: 84 96              STY   Cvarah            ; save current var address high byte
  3927 00:CEBA: 60                 RTS
  3928                        
  3929                        ; set-up array pointer (Adatal/h) to first element in array
  3930                        ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
  3931                        
  3932                        LAB_1DE6
  3933 00:CEBB: A5 5D              LDA   Dimcnt            ; get # of dimensions (1, 2 or 3)
  3934 00:CEBD: 0A                 ASL                     ; *2 (also clears the carry !)
  3935 00:CEBE: 69 05              ADC   #$05              ; +5 (result is 7, 9 or 11 here)
  3936 00:CEC0: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  3937 00:CEC2: A4 AB              LDY   Astrth            ; get array pointer high byte
  3938 00:CEC4: 90 01              BCC   LAB_1DF2          ; branch if no overflow
  3939                        
  3940 00:CEC6: C8                 INY                     ; else increment high byte
  3941                        LAB_1DF2
  3942 00:CEC7: 85 A4              STA   Adatal            ; save array data pointer low byte
  3943 00:CEC9: 84 A5              STY   Adatah            ; save array data pointer high byte
  3944 00:CECB: 60                 RTS
  3945                        
  3946                        ; evaluate integer expression
  3947                        
  3948                        LAB_EVIN
  3949 00:CECC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3950 00:CECF: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  3951                                                      ; else do type mismatch
  3952                        
  3953                        ; evaluate integer expression (no check)
  3954                        
  3955                        LAB_EVPI
  3956 00:CED2: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3957 00:CED4: 30 0D              BMI   LAB_1E12          ; do function call error if -ve
  3958                        
  3959                        ; evaluate integer expression (no sign check)
  3960                        
  3961                        LAB_EVIR
  3962 00:CED6: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3963 00:CED8: C9 90              CMP   #$90              ; compare with exponent = 2^16 (n>2^15)
  3964 00:CEDA: 90 09              BCC   LAB_1E14          ; branch if n<2^16 (is ok)
  3965                        
  3966 00:CEDC: A9 1A              LDA   #<LAB_1DF7        ; set pointer low byte to -32768
  3967 00:CEDE: A0 E2              LDY   #>LAB_1DF7        ; set pointer high byte to -32768
  3968 00:CEE0: 20 46 D9           JSR   LAB_27F8          ; compare FAC1 with (AY)
  3969                        LAB_1E12
  3970 00:CEE3: D0 74              BNE   LAB_FCER          ; if <> do function call error then warm start
  3971                        
  3972                        LAB_1E14
  3973 00:CEE5: 4C 7F D9           JMP   LAB_2831          ; convert FAC1 floating-to-fixed and return
  3974                        
  3975                        ; find or make array
  3976                        
  3977                        LAB_1E17
  3978 00:CEE8: A5 5E              LDA   Defdim            ; get DIM flag
  3979 00:CEEA: 48                 PHA                     ; push it
  3980 00:CEEB: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3981 00:CEED: 48                 PHA                     ; push it
  3982 00:CEEE: A0 00              LDY   #$00              ; clear dimensions count
  3983                        
  3984                        ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
  3985                        
  3986                        LAB_1E1F
  3987 00:CEF0: 98                 TYA                     ; copy dimensions count
  3988 00:CEF1: 48                 PHA                     ; save it
  3989 00:CEF2: A5 94              LDA   Varnm2            ; get array name 2nd byte
  3990 00:CEF4: 48                 PHA                     ; save it
  3991 00:CEF5: A5 93              LDA   Varnm1            ; get array name 1st byte
  3992 00:CEF7: 48                 PHA                     ; save it
  3993 00:CEF8: 20 CC CE           JSR   LAB_EVIN          ; evaluate integer expression
  3994 00:CEFB: 68                 PLA                     ; pull array name 1st byte
  3995 00:CEFC: 85 93              STA   Varnm1            ; restore array name 1st byte
  3996 00:CEFE: 68                 PLA                     ; pull array name 2nd byte
  3997 00:CEFF: 85 94              STA   Varnm2            ; restore array name 2nd byte
  3998 00:CF01: 68                 PLA                     ; pull dimensions count
  3999 00:CF02: A8                 TAY                     ; restore it
  4000 00:CF03: BA                 TSX                     ; copy stack pointer
  4001 00:CF04: BD 02 01           LDA   LAB_STAK+2,X      ; get DIM flag
  4002 00:CF07: 48                 PHA                     ; push it
  4003 00:CF08: BD 01 01           LDA   LAB_STAK+1,X      ; get data type flag
  4004 00:CF0B: 48                 PHA                     ; push it
  4005 00:CF0C: A5 AE              LDA   FAC1_2            ; get this dimension size high byte
  4006 00:CF0E: 9D 02 01           STA   LAB_STAK+2,X      ; stack before flag bytes
  4007 00:CF11: A5 AF              LDA   FAC1_3            ; get this dimension size low byte
  4008 00:CF13: 9D 01 01           STA   LAB_STAK+1,X      ; stack before flag bytes
  4009 00:CF16: C8                 INY                     ; increment dimensions count
  4010 00:CF17: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  4011 00:CF1A: C9 2C              CMP   #','              ; compare with ","
  4012 00:CF1C: F0 D2              BEQ   LAB_1E1F          ; if found go do next dimension
  4013                        
  4014 00:CF1E: 84 5D              STY   Dimcnt            ; store dimensions count
  4015 00:CF20: 20 11 CC           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  4016 00:CF23: 68                 PLA                     ; pull data type flag
  4017 00:CF24: 85 5F              STA   Dtypef            ; restore data type flag, $FF=string, $00=numeric
  4018 00:CF26: 68                 PLA                     ; pull DIM flag
  4019 00:CF27: 85 5E              STA   Defdim            ; restore DIM flag
  4020 00:CF29: A6 7D              LDX   Sarryl            ; get array mem start low byte
  4021 00:CF2B: A5 7E              LDA   Sarryh            ; get array mem start high byte
  4022                        
  4023                        ; now check to see if we are at the end of array memory (we would be if there were
  4024                        ; no arrays).
  4025                        
  4026                        LAB_1E5C
  4027 00:CF2D: 86 AA              STX   Astrtl            ; save as array start pointer low byte
  4028 00:CF2F: 85 AB              STA   Astrth            ; save as array start pointer high byte
  4029 00:CF31: C5 80              CMP   Earryh            ; compare with array mem end high byte
  4030 00:CF33: D0 04              BNE   LAB_1E68          ; branch if not reached array mem end
  4031                        
  4032 00:CF35: E4 7F              CPX   Earryl            ; else compare with array mem end low byte
  4033 00:CF37: F0 39              BEQ   LAB_1EA1          ; go build array if not found
  4034                        
  4035                                                      ; search for array
  4036                        LAB_1E68
  4037 00:CF39: A0 00              LDY   #$00              ; clear index
  4038 00:CF3B: B1 AA              LDA   (Astrtl),Y        ; get array name first byte
  4039 00:CF3D: C8                 INY                     ; increment index to second name byte
  4040 00:CF3E: C5 93              CMP   Varnm1            ; compare with this array name first byte
  4041 00:CF40: D0 06              BNE   LAB_1E77          ; branch if no match
  4042                        
  4043 00:CF42: A5 94              LDA   Varnm2            ; else get this array name second byte
  4044 00:CF44: D1 AA              CMP   (Astrtl),Y        ; compare with array name second byte
  4045 00:CF46: F0 16              BEQ   LAB_1E8D          ; array found so branch
  4046                        
  4047                                                      ; no match
  4048                        LAB_1E77
  4049 00:CF48: C8                 INY                     ; increment index
  4050 00:CF49: B1 AA              LDA   (Astrtl),Y        ; get array size low byte
  4051 00:CF4B: 18                 CLC                     ; clear carry for add
  4052 00:CF4C: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  4053 00:CF4E: AA                 TAX                     ; copy low byte to X
  4054 00:CF4F: C8                 INY                     ; increment index
  4055 00:CF50: B1 AA              LDA   (Astrtl),Y        ; get array size high byte
  4056 00:CF52: 65 AB              ADC   Astrth            ; add array mem pointer high byte
  4057 00:CF54: 90 D7              BCC   LAB_1E5C          ; if no overflow go check next array
  4058                        
  4059                        ; do array bounds error
  4060                        
  4061                        LAB_1E85
  4062 00:CF56: A2 10              LDX   #$10              ; error code $10 ("Array bounds" error)
  4063 00:CF58: 2C                 .byte $2C               ; makes next bit BIT LAB_08A2
  4064                        
  4065                        ; do function call error
  4066                        
  4067                        LAB_FCER
  4068 00:CF59: A2 08              LDX   #$08              ; error code $08 ("Function call" error)
  4069                        LAB_1E8A
  4070 00:CF5B: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  4071                        
  4072                                                      ; found array, are we trying to dimension it?
  4073                        LAB_1E8D
  4074 00:CF5E: A2 12              LDX   #$12              ; set error $12 ("Double dimension" error)
  4075 00:CF60: A5 5E              LDA   Defdim            ; get DIM flag
  4076 00:CF62: D0 F7              BNE   LAB_1E8A          ; if we are trying to dimension it do error #X, then warm
  4077                                                      ; start
  4078                        
  4079                        ; found the array and we're not dimensioning it so we must find an element in it
  4080                        
  4081 00:CF64: 20 BB CE           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4082                                                      ; (Astrtl,Astrth points to start of array)
  4083 00:CF67: A5 5D              LDA   Dimcnt            ; get dimensions count
  4084 00:CF69: A0 04              LDY   #$04              ; set index to array's # of dimensions
  4085 00:CF6B: D1 AA              CMP   (Astrtl),Y        ; compare with no of dimensions
  4086 00:CF6D: D0 E7              BNE   LAB_1E85          ; if wrong do array bounds error, could do "Wrong
  4087                                                      ; dimensions" error here .. if we want a different
  4088                                                      ; error message
  4089                        
  4090 00:CF6F: 4C F5 CF           JMP   LAB_1F28          ; found array so go get element
  4091                                                      ; (could jump to LAB_1F28 as all LAB_1F24 does is take
  4092                                                      ; Dimcnt and save it at (Astrtl),Y which is already the
  4093                                                      ; same or we would have taken the BNE)
  4094                        
  4095                                                      ; array not found, so build it
  4096                        LAB_1EA1
  4097 00:CF72: 20 BB CE           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4098                                                      ; (Astrtl,Astrth points to start of array)
  4099 00:CF75: 20 30 C1           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4100                                                      ; addr to check is in AY (low/high)
  4101 00:CF78: A0 00              LDY   #$00              ; clear Y (don't need to clear A)
  4102 00:CF7A: 84 BB              STY   Aspth             ; clear array data size high byte
  4103 00:CF7C: A5 93              LDA   Varnm1            ; get variable name 1st byte
  4104 00:CF7E: 91 AA              STA   (Astrtl),Y        ; save array name 1st byte
  4105 00:CF80: C8                 INY                     ; increment index
  4106 00:CF81: A5 94              LDA   Varnm2            ; get variable name 2nd byte
  4107 00:CF83: 91 AA              STA   (Astrtl),Y        ; save array name 2nd byte
  4108 00:CF85: A5 5D              LDA   Dimcnt            ; get dimensions count
  4109 00:CF87: A0 04              LDY   #$04              ; index to dimension count
  4110 00:CF89: 84 BA              STY   Asptl             ; set array data size low byte (four bytes per element)
  4111 00:CF8B: 91 AA              STA   (Astrtl),Y        ; set array's dimensions count
  4112                        
  4113                                                      ; now calculate the size of the data space for the array
  4114 00:CF8D: 18                 CLC                     ; clear carry for add (clear on subsequent loops)
  4115                        LAB_1EC0
  4116 00:CF8E: A2 0B              LDX   #$0B              ; set default dimension value low byte
  4117 00:CF90: A9 00              LDA   #$00              ; set default dimension value high byte
  4118 00:CF92: 24 5E              BIT   Defdim            ; test default DIM flag
  4119 00:CF94: 50 07              BVC   LAB_1ED0          ; branch if b6 of Defdim is clear
  4120                        
  4121 00:CF96: 68                 PLA                     ; else pull dimension value low byte
  4122 00:CF97: 69 01              ADC   #$01              ; +1 (allow for zeroeth element)
  4123 00:CF99: AA                 TAX                     ; copy low byte to X
  4124 00:CF9A: 68                 PLA                     ; pull dimension value high byte
  4125 00:CF9B: 69 00              ADC   #$00              ; add carry from low byte
  4126                        
  4127                        LAB_1ED0
  4128 00:CF9D: C8                 INY                     ; index to dimension value high byte
  4129 00:CF9E: 91 AA              STA   (Astrtl),Y        ; save dimension value high byte
  4130 00:CFA0: C8                 INY                     ; index to dimension value high byte
  4131 00:CFA1: 8A                 TXA                     ; get dimension value low byte
  4132 00:CFA2: 91 AA              STA   (Astrtl),Y        ; save dimension value low byte
  4133 00:CFA4: 20 44 D0           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4134 00:CFA7: 86 BA              STX   Asptl             ; save array data size low byte
  4135 00:CFA9: 85 BB              STA   Aspth             ; save array data size high byte
  4136 00:CFAB: A4 71              LDY   ut1_pl            ; restore index (saved by subroutine)
  4137 00:CFAD: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4138 00:CFAF: D0 DD              BNE   LAB_1EC0          ; loop while not = 0
  4139                        
  4140 00:CFB1: 65 A5              ADC   Adatah            ; add size high byte to first element high byte
  4141                                                      ; (carry is always clear here)
  4142 00:CFB3: B0 5D              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4143                        
  4144 00:CFB5: 85 A5              STA   Adatah            ; save end of array high byte
  4145 00:CFB7: A8                 TAY                     ; copy end high byte to Y
  4146 00:CFB8: 8A                 TXA                     ; get array size low byte
  4147 00:CFB9: 65 A4              ADC   Adatal            ; add array start low byte
  4148 00:CFBB: 90 03              BCC   LAB_1EF3          ; branch if no carry
  4149                        
  4150 00:CFBD: C8                 INY                     ; else increment end of array high byte
  4151 00:CFBE: F0 52              BEQ   LAB_1F45          ; if overflow go do "Out of memory" error
  4152                        
  4153                                                      ; set-up mostly complete, now zero the array
  4154                        LAB_1EF3
  4155 00:CFC0: 20 30 C1           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4156                                                      ; addr to check is in AY (low/high)
  4157 00:CFC3: 85 7F              STA   Earryl            ; save array mem end low byte
  4158 00:CFC5: 84 80              STY   Earryh            ; save array mem end high byte
  4159 00:CFC7: A9 00              LDA   #$00              ; clear byte for array clear
  4160 00:CFC9: E6 BB              INC   Aspth             ; increment array size high byte (now block count)
  4161 00:CFCB: A4 BA              LDY   Asptl             ; get array size low byte (now index to block)
  4162 00:CFCD: F0 05              BEQ   LAB_1F07          ; branch if low byte = $00
  4163                        
  4164                        LAB_1F02
  4165 00:CFCF: 88                 DEY                     ; decrement index (do 0 to n-1)
  4166 00:CFD0: 91 A4              STA   (Adatal),Y        ; zero byte
  4167 00:CFD2: D0 FB              BNE   LAB_1F02          ; loop until this block done
  4168                        
  4169                        LAB_1F07
  4170 00:CFD4: C6 A5              DEC   Adatah            ; decrement array pointer high byte
  4171 00:CFD6: C6 BB              DEC   Aspth             ; decrement block count high byte
  4172 00:CFD8: D0 F5              BNE   LAB_1F02          ; loop until all blocks done
  4173                        
  4174 00:CFDA: E6 A5              INC   Adatah            ; correct for last loop
  4175 00:CFDC: 38                 SEC                     ; set carry for subtract
  4176 00:CFDD: A0 02              LDY   #$02              ; index to array size low byte
  4177 00:CFDF: A5 7F              LDA   Earryl            ; get array mem end low byte
  4178 00:CFE1: E5 AA              SBC   Astrtl            ; subtract array start low byte
  4179 00:CFE3: 91 AA              STA   (Astrtl),Y        ; save array size low byte
  4180 00:CFE5: C8                 INY                     ; index to array size high byte
  4181 00:CFE6: A5 80              LDA   Earryh            ; get array mem end high byte
  4182 00:CFE8: E5 AB              SBC   Astrth            ; subtract array start high byte
  4183 00:CFEA: 91 AA              STA   (Astrtl),Y        ; save array size high byte
  4184 00:CFEC: A5 5E              LDA   Defdim            ; get default DIM flag
  4185 00:CFEE: D0 53              BNE   LAB_1F7B          ; exit (RET) if this was a DIM command
  4186                        
  4187                                                      ; else, find element
  4188 00:CFF0: C8                 INY                     ; index to # of dimensions
  4189                        
  4190                        LAB_1F24
  4191 00:CFF1: B1 AA              LDA   (Astrtl),Y        ; get array's dimension count
  4192 00:CFF3: 85 5D              STA   Dimcnt            ; save it
  4193                        
  4194                        ; we have found, or built, the array. now we need to find the element
  4195                        
  4196                        LAB_1F28
  4197 00:CFF5: A9 00              LDA   #$00              ; clear byte
  4198 00:CFF7: 85 BA              STA   Asptl             ; clear array data pointer low byte
  4199                        LAB_1F2C
  4200 00:CFF9: 85 BB              STA   Aspth             ; save array data pointer high byte
  4201 00:CFFB: C8                 INY                     ; increment index (point to array bound high byte)
  4202 00:CFFC: 68                 PLA                     ; pull array index low byte
  4203 00:CFFD: AA                 TAX                     ; copy to X
  4204 00:CFFE: 85 AE              STA   FAC1_2            ; save index low byte to FAC1 mantissa2
  4205 00:D000: 68                 PLA                     ; pull array index high byte
  4206 00:D001: 85 AF              STA   FAC1_3            ; save index high byte to FAC1 mantissa3
  4207 00:D003: D1 AA              CMP   (Astrtl),Y        ; compare with array bound high byte
  4208 00:D005: 90 0E              BCC   LAB_1F48          ; branch if within bounds
  4209                        
  4210 00:D007: D0 06              BNE   LAB_1F42          ; if outside bounds do array bounds error
  4211                        
  4212                                                      ; else high byte was = so test low bytes
  4213 00:D009: C8                 INY                     ; index to array bound low byte
  4214 00:D00A: 8A                 TXA                     ; get array index low byte
  4215 00:D00B: D1 AA              CMP   (Astrtl),Y        ; compare with array bound low byte
  4216 00:D00D: 90 07              BCC   LAB_1F49          ; branch if within bounds
  4217                        
  4218                        LAB_1F42
  4219 00:D00F: 4C 56 CF           JMP   LAB_1E85          ; else do array bounds error
  4220                        
  4221                        LAB_1F45
  4222 00:D012: 4C 5F C1           JMP   LAB_OMER          ; do "Out of memory" error then warm start
  4223                        
  4224                        LAB_1F48
  4225 00:D015: C8                 INY                     ; index to array bound low byte
  4226                        LAB_1F49
  4227 00:D016: A5 BB              LDA   Aspth             ; get array data pointer high byte
  4228 00:D018: 05 BA              ORA   Asptl             ; OR with array data pointer low byte
  4229 00:D01A: F0 0A              BEQ   LAB_1F5A          ; branch if array data pointer = null (skip multiply)
  4230                        
  4231 00:D01C: 20 44 D0           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4232 00:D01F: 8A                 TXA                     ; get result low byte
  4233 00:D020: 65 AE              ADC   FAC1_2            ; add index low byte from FAC1 mantissa2
  4234 00:D022: AA                 TAX                     ; save result low byte
  4235 00:D023: 98                 TYA                     ; get result high byte
  4236 00:D024: A4 71              LDY   ut1_pl            ; restore index
  4237                        LAB_1F5A
  4238 00:D026: 65 AF              ADC   FAC1_3            ; add index high byte from FAC1 mantissa3
  4239 00:D028: 86 BA              STX   Asptl             ; save array data pointer low byte
  4240 00:D02A: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4241 00:D02C: D0 CB              BNE   LAB_1F2C          ; loop if dimensions still to do
  4242                        
  4243 00:D02E: 06 BA              ASL   Asptl             ; array data pointer low byte * 2
  4244 00:D030: 2A                 ROL                     ; array data pointer high byte * 2
  4245 00:D031: 06 BA              ASL   Asptl             ; array data pointer low byte * 4
  4246 00:D033: 2A                 ROL                     ; array data pointer high byte * 4
  4247 00:D034: A8                 TAY                     ; copy high byte
  4248 00:D035: A5 BA              LDA   Asptl             ; get low byte
  4249 00:D037: 65 A4              ADC   Adatal            ; add array data start pointer low byte
  4250 00:D039: 85 95              STA   Cvaral            ; save as current var address low byte
  4251 00:D03B: 98                 TYA                     ; get high byte back
  4252 00:D03C: 65 A5              ADC   Adatah            ; add array data start pointer high byte
  4253 00:D03E: 85 96              STA   Cvarah            ; save as current var address high byte
  4254 00:D040: A8                 TAY                     ; copy high byte to Y
  4255 00:D041: A5 95              LDA   Cvaral            ; get current var address low byte
  4256                        LAB_1F7B
  4257 00:D043: 60                 RTS
  4258                        
  4259                        ; does XY = (Astrtl),Y * (Asptl)
  4260                        
  4261                        LAB_1F7C
  4262 00:D044: 84 71              STY   ut1_pl            ; save index
  4263 00:D046: B1 AA              LDA   (Astrtl),Y        ; get dimension size low byte
  4264 00:D048: 85 76              STA   dims_l            ; save dimension size low byte
  4265 00:D04A: 88                 DEY                     ; decrement index
  4266 00:D04B: B1 AA              LDA   (Astrtl),Y        ; get dimension size high byte
  4267 00:D04D: 85 77              STA   dims_h            ; save dimension size high byte
  4268                        
  4269 00:D04F: A9 10              LDA   #$10              ; count = $10 (16 bit multiply)
  4270 00:D051: 85 A8              STA   numbit            ; save bit count
  4271 00:D053: A2 00              LDX   #$00              ; clear result low byte
  4272 00:D055: A0 00              LDY   #$00              ; clear result high byte
  4273                        LAB_1F8F
  4274 00:D057: 8A                 TXA                     ; get result low byte
  4275 00:D058: 0A                 ASL                     ; *2
  4276 00:D059: AA                 TAX                     ; save result low byte
  4277 00:D05A: 98                 TYA                     ; get result high byte
  4278 00:D05B: 2A                 ROL                     ; *2
  4279 00:D05C: A8                 TAY                     ; save result high byte
  4280 00:D05D: B0 B3              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4281                        
  4282 00:D05F: 06 BA              ASL   Asptl             ; shift multiplier low byte
  4283 00:D061: 26 BB              ROL   Aspth             ; shift multiplier high byte
  4284 00:D063: 90 0B              BCC   LAB_1FA8          ; skip add if no carry
  4285                        
  4286 00:D065: 18                 CLC                     ; else clear carry for add
  4287 00:D066: 8A                 TXA                     ; get result low byte
  4288 00:D067: 65 76              ADC   dims_l            ; add dimension size low byte
  4289 00:D069: AA                 TAX                     ; save result low byte
  4290 00:D06A: 98                 TYA                     ; get result high byte
  4291 00:D06B: 65 77              ADC   dims_h            ; add dimension size high byte
  4292 00:D06D: A8                 TAY                     ; save result high byte
  4293 00:D06E: B0 A2              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4294                        
  4295                        LAB_1FA8
  4296 00:D070: C6 A8              DEC   numbit            ; decrement bit count
  4297 00:D072: D0 E3              BNE   LAB_1F8F          ; loop until all done
  4298                        
  4299 00:D074: 60                 RTS
  4300                        
  4301                        ; perform FRE()
  4302                        
  4303                        LAB_FRE
  4304 00:D075: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  4305 00:D077: 10 03              BPL   LAB_1FB4          ; branch if numeric
  4306                        
  4307 00:D079: 20 74 D3           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  4308                                                      ; space returns with A = length, X=$71=pointer low byte,
  4309                                                      ; Y=$72=pointer high byte
  4310                        
  4311                                                      ; FRE(n) was numeric so do this
  4312                        LAB_1FB4
  4313 00:D07C: 20 11 D2           JSR   LAB_GARB          ; go do garbage collection
  4314 00:D07F: 38                 SEC                     ; set carry for subtract
  4315 00:D080: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4316 00:D082: E5 7F              SBC   Earryl            ; subtract array mem end low byte
  4317 00:D084: A8                 TAY                     ; copy result to Y
  4318 00:D085: A5 82              LDA   Sstorh            ; get bottom of string space high byte
  4319 00:D087: E5 80              SBC   Earryh            ; subtract array mem end high byte
  4320                        
  4321                        ; save and convert integer AY to FAC1
  4322                        
  4323                        LAB_AYFC
  4324 00:D089: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  4325 00:D08B: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  4326 00:D08D: 84 AE              STY   FAC1_2            ; save FAC1 mantissa2
  4327 00:D08F: A2 90              LDX   #$90              ; set exponent=2^16 (integer)
  4328 00:D091: 4C 31 D9           JMP   LAB_27E3          ; set exp=X, clear FAC1_3, normalise and return
  4329                        
  4330                        ; perform POS()
  4331                        
  4332                        LAB_POS
  4333 00:D094: A4 0E              LDY   TPos              ; get terminal position
  4334                        
  4335                        ; convert Y to byte in FAC1
  4336                        
  4337                        LAB_1FD0
  4338 00:D096: A9 00              LDA   #$00              ; clear high byte
  4339 00:D098: F0 EF              BEQ   LAB_AYFC          ; always save and convert integer AY to FAC1 and return
  4340                        
  4341                        ; check not Direct (used by DEF and INPUT)
  4342                        
  4343                        LAB_CKRN
  4344 00:D09A: A6 88              LDX   Clineh            ; get current line high byte
  4345 00:D09C: E8                 INX                     ; increment it
  4346 00:D09D: D0 A4              BNE   LAB_1F7B          ; return if can continue not direct mode
  4347                        
  4348                                                      ; else do illegal direct error
  4349                        LAB_1FD9
  4350 00:D09F: A2 16              LDX   #$16              ; error code $16 ("Illegal direct" error)
  4351                        LAB_1FDB
  4352 00:D0A1: 4C 61 C1           JMP   LAB_XERR          ; go do error #X, then warm start
  4353                        
  4354                        ; perform DEF
  4355                        
  4356                        LAB_DEF
  4357 00:D0A4: 20 D5 D0           JSR   LAB_200B          ; check FNx syntax
  4358 00:D0A7: 85 9C              STA   func_l            ; save function pointer low byte
  4359 00:D0A9: 84 9D              STY   func_h            ; save function pointer high byte
  4360 00:D0AB: 20 9A D0           JSR   LAB_CKRN          ; check not Direct (back here if ok)
  4361 00:D0AE: 20 1C CC           JSR   LAB_1BFE          ; scan for "(" , else do syntax error then warm start
  4362 00:D0B1: A9 80              LDA   #$80              ; set flag for FNx
  4363 00:D0B3: 85 61              STA   Sufnxf            ; save subscript/FNx flag
  4364 00:D0B5: 20 DA CD           JSR   LAB_GVAR          ; get (var) address
  4365 00:D0B8: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4366 00:D0BB: 20 11 CC           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  4367 00:D0BE: A9 C1              LDA   #TK_EQUAL         ; get = token
  4368 00:D0C0: 20 13 CC           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  4369 00:D0C3: A5 96              LDA   Cvarah            ; get current var address high byte
  4370 00:D0C5: 48                 PHA                     ; push it
  4371 00:D0C6: A5 95              LDA   Cvaral            ; get current var address low byte
  4372 00:D0C8: 48                 PHA                     ; push it
  4373 00:D0C9: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4374 00:D0CB: 48                 PHA                     ; push it
  4375 00:D0CC: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4376 00:D0CE: 48                 PHA                     ; push it
  4377 00:D0CF: 20 AC C6           JSR   LAB_DATA          ; go perform DATA
  4378 00:D0D2: 4C 44 D1           JMP   LAB_207A          ; put execute pointer and variable pointer into function
  4379                                                      ; and return
  4380                        
  4381                        ; check FNx syntax
  4382                        
  4383                        LAB_200B
  4384 00:D0D5: A9 AE              LDA   #TK_FN            ; get FN" token
  4385 00:D0D7: 20 13 CC           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  4386                                                      ; return character after A
  4387 00:D0DA: 09 80              ORA   #$80              ; set FN flag bit
  4388 00:D0DC: 85 61              STA   Sufnxf            ; save FN flag so array variable test fails
  4389 00:D0DE: 20 E1 CD           JSR   LAB_1D12          ; search for FN variable
  4390 00:D0E1: 4C F2 CA           JMP   LAB_CTNM          ; check if source is numeric and return, else do type
  4391                                                      ; mismatch
  4392                        
  4393                                                      ; Evaluate FNx
  4394                        LAB_201E
  4395 00:D0E4: 20 D5 D0           JSR   LAB_200B          ; check FNx syntax
  4396 00:D0E7: 48                 PHA                     ; push function pointer low byte
  4397 00:D0E8: 98                 TYA                     ; copy function pointer high byte
  4398 00:D0E9: 48                 PHA                     ; push function pointer high byte
  4399 00:D0EA: 20 1C CC           JSR   LAB_1BFE          ; scan for "(", else do syntax error then warm start
  4400 00:D0ED: 20 03 CB           JSR   LAB_EVEX          ; evaluate expression
  4401 00:D0F0: 20 11 CC           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  4402 00:D0F3: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4403 00:D0F6: 68                 PLA                     ; pop function pointer high byte
  4404 00:D0F7: 85 9D              STA   func_h            ; restore it
  4405 00:D0F9: 68                 PLA                     ; pop function pointer low byte
  4406 00:D0FA: 85 9C              STA   func_l            ; restore it
  4407 00:D0FC: A2 20              LDX   #$20              ; error code $20 ("Undefined function" error)
  4408 00:D0FE: A0 03              LDY   #$03              ; index to variable pointer high byte
  4409 00:D100: B1 9C              LDA   (func_l),Y        ; get variable pointer high byte
  4410 00:D102: F0 9D              BEQ   LAB_1FDB          ; if zero go do undefined function error
  4411                        
  4412 00:D104: 85 96              STA   Cvarah            ; save variable address high byte
  4413 00:D106: 88                 DEY                     ; index to variable address low byte
  4414 00:D107: B1 9C              LDA   (func_l),Y        ; get variable address low byte
  4415 00:D109: 85 95              STA   Cvaral            ; save variable address low byte
  4416 00:D10B: AA                 TAX                     ; copy address low byte
  4417                        
  4418                                                      ; now stack the function variable value before use
  4419 00:D10C: C8                 INY                     ; index to mantissa_3
  4420                        LAB_2043
  4421 00:D10D: B1 95              LDA   (Cvaral),Y        ; get byte from variable
  4422 00:D10F: 48                 PHA                     ; stack it
  4423 00:D110: 88                 DEY                     ; decrement index
  4424 00:D111: 10 FA              BPL   LAB_2043          ; loop until variable stacked
  4425                        
  4426 00:D113: A4 96              LDY   Cvarah            ; get variable address high byte
  4427 00:D115: 20 D6 D8           JSR   LAB_2778          ; pack FAC1 (function expression value) into (XY)
  4428                                                      ; (function variable), return Y=0, always
  4429 00:D118: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4430 00:D11A: 48                 PHA                     ; push it
  4431 00:D11B: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4432 00:D11D: 48                 PHA                     ; push it
  4433 00:D11E: B1 9C              LDA   (func_l),Y        ; get function execute pointer low byte
  4434 00:D120: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  4435 00:D122: C8                 INY                     ; index to high byte
  4436 00:D123: B1 9C              LDA   (func_l),Y        ; get function execute pointer high byte
  4437 00:D125: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  4438 00:D127: A5 96              LDA   Cvarah            ; get variable address high byte
  4439 00:D129: 48                 PHA                     ; push it
  4440 00:D12A: A5 95              LDA   Cvaral            ; get variable address low byte
  4441 00:D12C: 48                 PHA                     ; push it
  4442 00:D12D: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  4443                                                      ; else do type mismatch
  4444 00:D130: 68                 PLA                     ; pull variable address low byte
  4445 00:D131: 85 9C              STA   func_l            ; save variable address low byte
  4446 00:D133: 68                 PLA                     ; pull variable address high byte
  4447 00:D134: 85 9D              STA   func_h            ; save variable address high byte
  4448 00:D136: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  4449 00:D139: F0 03              BEQ   LAB_2074          ; branch if null (should be [EOL] marker)
  4450                        
  4451 00:D13B: 4C 24 CC           JMP   LAB_SNER          ; else syntax error then warm start
  4452                        
  4453                        ; restore Bpntrl,Bpntrh and function variable from stack
  4454                        
  4455                        LAB_2074
  4456 00:D13E: 68                 PLA                     ; pull BASIC execute pointer low byte
  4457 00:D13F: 85 C3              STA   Bpntrl            ; restore BASIC execute pointer low byte
  4458 00:D141: 68                 PLA                     ; pull BASIC execute pointer high byte
  4459 00:D142: 85 C4              STA   Bpntrh            ; restore BASIC execute pointer high byte
  4460                        
  4461                        ; put execute pointer and variable pointer into function
  4462                        
  4463                        LAB_207A
  4464 00:D144: A0 00              LDY   #$00              ; clear index
  4465 00:D146: 68                 PLA                     ; pull BASIC execute pointer low byte
  4466 00:D147: 91 9C              STA   (func_l),Y        ; save to function
  4467 00:D149: C8                 INY                     ; increment index
  4468 00:D14A: 68                 PLA                     ; pull BASIC execute pointer high byte
  4469 00:D14B: 91 9C              STA   (func_l),Y        ; save to function
  4470 00:D14D: C8                 INY                     ; increment index
  4471 00:D14E: 68                 PLA                     ; pull current var address low byte
  4472 00:D14F: 91 9C              STA   (func_l),Y        ; save to function
  4473 00:D151: C8                 INY                     ; increment index
  4474 00:D152: 68                 PLA                     ; pull current var address high byte
  4475 00:D153: 91 9C              STA   (func_l),Y        ; save to function
  4476 00:D155: 60                 RTS
  4477                        
  4478                        ; perform STR$()
  4479                        
  4480                        LAB_STRS
  4481 00:D156: 20 F2 CA           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4482 00:D159: 20 C4 DA           JSR   LAB_296E          ; convert FAC1 to string
  4483 00:D15C: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  4484 00:D15E: A0 00              LDY   #>Decssp1         ; set result string high pointer
  4485 00:D160: F0 12              BEQ   LAB_20AE          ; print null terminated string to Sutill/Sutilh
  4486                        
  4487                        ; Do string vector
  4488                        ; copy des_pl/h to des_2l/h and make string space A bytes long
  4489                        
  4490                        LAB_209C
  4491 00:D162: A6 AE              LDX   des_pl            ; get descriptor pointer low byte
  4492 00:D164: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4493 00:D166: 86 9E              STX   des_2l            ; save descriptor pointer low byte
  4494 00:D168: 84 9F              STY   des_2h            ; save descriptor pointer high byte
  4495                        
  4496                        ; make string space A bytes long
  4497                        ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4498                        
  4499                        LAB_MSSP
  4500 00:D16A: 20 DF D1           JSR   LAB_2115          ; make space in string memory for string A long
  4501                                                      ; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4502 00:D16D: 86 AD              STX   str_pl            ; save string pointer low byte
  4503 00:D16F: 84 AE              STY   str_ph            ; save string pointer high byte
  4504 00:D171: 85 AC              STA   str_ln            ; save length
  4505 00:D173: 60                 RTS
  4506                        
  4507                        ; Scan, set up string
  4508                        ; print " terminated string to Sutill/Sutilh
  4509                        
  4510                        LAB_20AE
  4511 00:D174: A2 22              LDX   #$22              ; set terminator to "
  4512 00:D176: 86 5B              STX   Srchc             ; set search character (terminator 1)
  4513 00:D178: 86 5C              STX   Asrch             ; set terminator 2
  4514                        
  4515                        ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
  4516                        ; source is AY
  4517                        
  4518                        LAB_20B4
  4519 00:D17A: 85 B8              STA   ssptr_l           ; store string start low byte
  4520 00:D17C: 84 B9              STY   ssptr_h           ; store string start high byte
  4521 00:D17E: 85 AD              STA   str_pl            ; save string pointer low byte
  4522 00:D180: 84 AE              STY   str_ph            ; save string pointer high byte
  4523 00:D182: A0 FF              LDY   #$FF              ; set length to -1
  4524                        LAB_20BE
  4525 00:D184: C8                 INY                     ; increment length
  4526 00:D185: B1 B8              LDA   (ssptr_l),Y       ; get byte from string
  4527 00:D187: F0 0C              BEQ   LAB_20CF          ; exit loop if null byte [EOS]
  4528                        
  4529 00:D189: C5 5B              CMP   Srchc             ; compare with search character (terminator 1)
  4530 00:D18B: F0 04              BEQ   LAB_20CB          ; branch if terminator
  4531                        
  4532 00:D18D: C5 5C              CMP   Asrch             ; compare with terminator 2
  4533 00:D18F: D0 F3              BNE   LAB_20BE          ; loop if not terminator 2
  4534                        
  4535                        LAB_20CB
  4536 00:D191: C9 22              CMP   #$22              ; compare with "
  4537 00:D193: F0 01              BEQ   LAB_20D0          ; branch if " (carry set if = !)
  4538                        
  4539                        LAB_20CF
  4540 00:D195: 18                 CLC                     ; clear carry for add (only if [EOL] terminated string)
  4541                        LAB_20D0
  4542 00:D196: 84 AC              STY   str_ln            ; save length in FAC1 exponent
  4543 00:D198: 98                 TYA                     ; copy length to A
  4544 00:D199: 65 B8              ADC   ssptr_l           ; add string start low byte
  4545 00:D19B: 85 BA              STA   Sendl             ; save string end low byte
  4546 00:D19D: A6 B9              LDX   ssptr_h           ; get string start high byte
  4547 00:D19F: 90 01              BCC   LAB_20DC          ; branch if no low byte overflow
  4548                        
  4549 00:D1A1: E8                 INX                     ; else increment high byte
  4550                        LAB_20DC
  4551 00:D1A2: 86 BB              STX   Sendh             ; save string end high byte
  4552 00:D1A4: A5 B9              LDA   ssptr_h           ; get string start high byte
  4553                        ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
  4554                        ; *** replace
  4555                        ;      CMP   #>Ram_base        ; compare with start of program memory
  4556                        ;      BCS   LAB_RTST          ; branch if not in utility area
  4557                        ; *** with
  4558 00:D1A6: F0 04              BEQ   LAB_MVST          ; fix STR$() using page zero via LAB_296E
  4559 00:D1A8: C9 02              CMP   #>Ibuffs          ; compare with location of input buffer page
  4560 00:D1AA: D0 0B              BNE   LAB_RTST          ; branch if not in utility area
  4561                        LAB_MVST      
  4562                        ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
  4563                        
  4564                                                      ; string in utility area, move to string memory
  4565 00:D1AC: 98                 TYA                     ; copy length to A
  4566 00:D1AD: 20 62 D1           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4567                                                      ; long
  4568 00:D1B0: A6 B8              LDX   ssptr_l           ; get string start low byte
  4569 00:D1B2: A4 B9              LDY   ssptr_h           ; get string start high byte
  4570 00:D1B4: 20 55 D3           JSR   LAB_2298          ; store string A bytes long from XY to (Sutill)
  4571                        
  4572                        ; check for space on descriptor stack then ..
  4573                        ; put string address and length on descriptor stack and update stack pointers
  4574                        
  4575                        LAB_RTST
  4576 00:D1B7: A6 65              LDX   next_s            ; get string stack pointer
  4577 00:D1B9: E0 71              CPX   #des_sk+$09       ; compare with max+1
  4578 00:D1BB: D0 05              BNE   LAB_20F8          ; branch if space on string stack
  4579                        
  4580                                                      ; else do string too complex error
  4581 00:D1BD: A2 1C              LDX   #$1C              ; error code $1C ("String too complex" error)
  4582                        LAB_20F5
  4583 00:D1BF: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  4584                        
  4585                        ; put string address and length on descriptor stack and update stack pointers
  4586                        
  4587                        LAB_20F8
  4588 00:D1C2: A5 AC              LDA   str_ln            ; get string length
  4589 00:D1C4: 95 00              STA   PLUS_0,X          ; put on string stack
  4590 00:D1C6: A5 AD              LDA   str_pl            ; get string pointer low byte
  4591 00:D1C8: 95 01              STA   PLUS_1,X          ; put on string stack
  4592 00:D1CA: A5 AE              LDA   str_ph            ; get string pointer high byte
  4593 00:D1CC: 95 02              STA   PLUS_2,X          ; put on string stack
  4594 00:D1CE: A0 00              LDY   #$00              ; clear Y
  4595 00:D1D0: 86 AE              STX   des_pl            ; save string descriptor pointer low byte
  4596 00:D1D2: 84 AF              STY   des_ph            ; save string descriptor pointer high byte (always $00)
  4597 00:D1D4: 88                 DEY                     ; Y = $FF
  4598 00:D1D5: 84 5F              STY   Dtypef            ; save data type flag, $FF=string
  4599 00:D1D7: 86 66              STX   last_sl           ; save old stack pointer (current top item)
  4600 00:D1D9: E8                 INX                     ; update stack pointer
  4601 00:D1DA: E8                 INX                     ; update stack pointer
  4602 00:D1DB: E8                 INX                     ; update stack pointer
  4603 00:D1DC: 86 65              STX   next_s            ; save new top item value
  4604 00:D1DE: 60                 RTS
  4605                        
  4606                        ; Build descriptor
  4607                        ; make space in string memory for string A long
  4608                        ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
  4609                        
  4610                        LAB_2115
  4611 00:D1DF: 46 60              LSR   Gclctd            ; clear garbage collected flag (b7)
  4612                        
  4613                                                      ; make space for string A long
  4614                        LAB_2117
  4615 00:D1E1: 48                 PHA                     ; save string length
  4616 00:D1E2: 49 FF              EOR   #$FF              ; complement it
  4617 00:D1E4: 38                 SEC                     ; set carry for subtract (twos comp add)
  4618 00:D1E5: 65 81              ADC   Sstorl            ; add bottom of string space low byte (subtract length)
  4619 00:D1E7: A4 82              LDY   Sstorh            ; get bottom of string space high byte
  4620 00:D1E9: B0 01              BCS   LAB_2122          ; skip decrement if no underflow
  4621                        
  4622 00:D1EB: 88                 DEY                     ; decrement bottom of string space high byte
  4623                        LAB_2122
  4624 00:D1EC: C4 80              CPY   Earryh            ; compare with array mem end high byte
  4625 00:D1EE: 90 11              BCC   LAB_2137          ; do out of memory error if less
  4626                        
  4627 00:D1F0: D0 04              BNE   LAB_212C          ; if not = skip next test
  4628                        
  4629 00:D1F2: C5 7F              CMP   Earryl            ; compare with array mem end low byte
  4630 00:D1F4: 90 0B              BCC   LAB_2137          ; do out of memory error if less
  4631                        
  4632                        LAB_212C
  4633 00:D1F6: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4634 00:D1F8: 84 82              STY   Sstorh            ; save bottom of string space high byte
  4635 00:D1FA: 85 83              STA   Sutill            ; save string utility ptr low byte
  4636 00:D1FC: 84 84              STY   Sutilh            ; save string utility ptr high byte
  4637 00:D1FE: AA                 TAX                     ; copy low byte to X
  4638 00:D1FF: 68                 PLA                     ; get string length back
  4639 00:D200: 60                 RTS
  4640                        
  4641                        LAB_2137
  4642 00:D201: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
  4643 00:D203: A5 60              LDA   Gclctd            ; get garbage collected flag
  4644 00:D205: 30 B8              BMI   LAB_20F5          ; if set then do error code X
  4645                        
  4646 00:D207: 20 11 D2           JSR   LAB_GARB          ; else go do garbage collection
  4647 00:D20A: A9 80              LDA   #$80              ; flag for garbage collected
  4648 00:D20C: 85 60              STA   Gclctd            ; set garbage collected flag
  4649 00:D20E: 68                 PLA                     ; pull length
  4650 00:D20F: D0 D0              BNE   LAB_2117          ; go try again (loop always, length should never be = $00)
  4651                        
  4652                        ; garbage collection routine
  4653                        
  4654                        LAB_GARB
  4655 00:D211: A6 85              LDX   Ememl             ; get end of mem low byte
  4656 00:D213: A5 86              LDA   Ememh             ; get end of mem high byte
  4657                        
  4658                        ; re-run routine from last ending
  4659                        
  4660                        LAB_214B
  4661 00:D215: 86 81              STX   Sstorl            ; set string storage low byte
  4662 00:D217: 85 82              STA   Sstorh            ; set string storage high byte
  4663 00:D219: A0 00              LDY   #$00              ; clear index
  4664 00:D21B: 84 9D              STY   garb_h            ; clear working pointer high byte (flag no strings to move)
  4665                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4666                        ; *** add
  4667 00:D21D: 84 9C              STY   garb_l            ; clear working pointer low byte (flag no strings to move)
  4668                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4669 00:D21F: A5 7F              LDA   Earryl            ; get array mem end low byte
  4670 00:D221: A6 80              LDX   Earryh            ; get array mem end high byte
  4671 00:D223: 85 AA              STA   Histrl            ; save as highest string low byte
  4672 00:D225: 86 AB              STX   Histrh            ; save as highest string high byte
  4673 00:D227: A9 68              LDA   #des_sk           ; set descriptor stack pointer
  4674 00:D229: 85 71              STA   ut1_pl            ; save descriptor stack pointer low byte
  4675 00:D22B: 84 72              STY   ut1_ph            ; save descriptor stack pointer high byte ($00)
  4676                        LAB_2161
  4677 00:D22D: C5 65              CMP   next_s            ; compare with descriptor stack pointer
  4678 00:D22F: F0 05              BEQ   LAB_216A          ; branch if =
  4679                        
  4680 00:D231: 20 97 D2           JSR   LAB_21D7          ; go garbage collect descriptor stack
  4681 00:D234: F0 F7              BEQ   LAB_2161          ; loop always
  4682                        
  4683                                                      ; done stacked strings, now do string vars
  4684                        LAB_216A
  4685 00:D236: 06 A0              ASL   g_step            ; set step size = $06
  4686 00:D238: A5 7B              LDA   Svarl             ; get start of vars low byte
  4687 00:D23A: A6 7C              LDX   Svarh             ; get start of vars high byte
  4688 00:D23C: 85 71              STA   ut1_pl            ; save as pointer low byte
  4689 00:D23E: 86 72              STX   ut1_ph            ; save as pointer high byte
  4690                        LAB_2176
  4691 00:D240: E4 7E              CPX   Sarryh            ; compare start of arrays high byte
  4692 00:D242: D0 04              BNE   LAB_217E          ; branch if no high byte match
  4693                        
  4694 00:D244: C5 7D              CMP   Sarryl            ; else compare start of arrays low byte
  4695 00:D246: F0 05              BEQ   LAB_2183          ; branch if = var mem end
  4696                        
  4697                        LAB_217E
  4698 00:D248: 20 91 D2           JSR   LAB_21D1          ; go garbage collect strings
  4699 00:D24B: F0 F3              BEQ   LAB_2176          ; loop always
  4700                        
  4701                                                      ; done string vars, now do string arrays
  4702                        LAB_2183
  4703 00:D24D: 85 A4              STA   Nbendl            ; save start of arrays low byte as working pointer
  4704 00:D24F: 86 A5              STX   Nbendh            ; save start of arrays high byte as working pointer
  4705 00:D251: A9 04              LDA   #$04              ; set step size
  4706 00:D253: 85 A0              STA   g_step            ; save step size
  4707                        LAB_218B
  4708 00:D255: A5 A4              LDA   Nbendl            ; get pointer low byte
  4709 00:D257: A6 A5              LDX   Nbendh            ; get pointer high byte
  4710                        LAB_218F
  4711 00:D259: E4 80              CPX   Earryh            ; compare with array mem end high byte
  4712 00:D25B: D0 04              BNE   LAB_219A          ; branch if not at end
  4713                        
  4714 00:D25D: C5 7F              CMP   Earryl            ; else compare with array mem end low byte
  4715 00:D25F: F0 75              BEQ   LAB_2216          ; tidy up and exit if at end
  4716                        
  4717                        LAB_219A
  4718 00:D261: 85 71              STA   ut1_pl            ; save pointer low byte
  4719 00:D263: 86 72              STX   ut1_ph            ; save pointer high byte
  4720 00:D265: A0 02              LDY   #$02              ; set index
  4721 00:D267: B1 71              LDA   (ut1_pl),Y        ; get array size low byte
  4722 00:D269: 65 A4              ADC   Nbendl            ; add start of this array low byte
  4723 00:D26B: 85 A4              STA   Nbendl            ; save start of next array low byte
  4724 00:D26D: C8                 INY                     ; increment index
  4725 00:D26E: B1 71              LDA   (ut1_pl),Y        ; get array size high byte
  4726 00:D270: 65 A5              ADC   Nbendh            ; add start of this array high byte
  4727 00:D272: 85 A5              STA   Nbendh            ; save start of next array high byte
  4728 00:D274: A0 01              LDY   #$01              ; set index
  4729 00:D276: B1 71              LDA   (ut1_pl),Y        ; get name second byte
  4730 00:D278: 10 DB              BPL   LAB_218B          ; skip if not string array
  4731                        
  4732                        ; was string array so ..
  4733                        
  4734 00:D27A: A0 04              LDY   #$04              ; set index
  4735 00:D27C: B1 71              LDA   (ut1_pl),Y        ; get # of dimensions
  4736 00:D27E: 0A                 ASL                     ; *2
  4737 00:D27F: 69 05              ADC   #$05              ; +5 (array header size)
  4738 00:D281: 20 C9 D2           JSR   LAB_2208          ; go set up for first element
  4739                        LAB_21C4
  4740 00:D284: E4 A5              CPX   Nbendh            ; compare with start of next array high byte
  4741 00:D286: D0 04              BNE   LAB_21CC          ; branch if <> (go do this array)
  4742                        
  4743 00:D288: C5 A4              CMP   Nbendl            ; else compare element pointer low byte with next array
  4744                                                      ; low byte
  4745 00:D28A: F0 CD              BEQ   LAB_218F          ; if equal then go do next array
  4746                        
  4747                        LAB_21CC
  4748 00:D28C: 20 97 D2           JSR   LAB_21D7          ; go defrag array strings
  4749 00:D28F: F0 F3              BEQ   LAB_21C4          ; go do next array string (loop always)
  4750                        
  4751                        ; defrag string variables
  4752                        ; enter with XA = variable pointer
  4753                        ; return with XA = next variable pointer
  4754                        
  4755                        LAB_21D1
  4756 00:D291: C8                 INY                     ; increment index (Y was $00)
  4757 00:D292: B1 71              LDA   (ut1_pl),Y        ; get var name byte 2
  4758 00:D294: 10 30              BPL   LAB_2206          ; if not string, step pointer to next var and return
  4759                        
  4760 00:D296: C8                 INY                     ; else increment index
  4761                        LAB_21D7
  4762 00:D297: B1 71              LDA   (ut1_pl),Y        ; get string length
  4763 00:D299: F0 2B              BEQ   LAB_2206          ; if null, step pointer to next string and return
  4764                        
  4765 00:D29B: C8                 INY                     ; else increment index
  4766 00:D29C: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte
  4767 00:D29E: AA                 TAX                     ; copy to X
  4768 00:D29F: C8                 INY                     ; increment index
  4769 00:D2A0: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte
  4770 00:D2A2: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  4771 00:D2A4: 90 06              BCC   LAB_21EC          ; branch if less
  4772                        
  4773 00:D2A6: D0 1E              BNE   LAB_2206          ; if greater, step pointer to next string and return
  4774                        
  4775                                                      ; high bytes were = so compare low bytes
  4776 00:D2A8: E4 81              CPX   Sstorl            ; compare bottom of string space low byte
  4777 00:D2AA: B0 1A              BCS   LAB_2206          ; if >=, step pointer to next string and return
  4778                        
  4779                                                      ; string pointer is < string storage pointer (pos in mem)
  4780                        LAB_21EC
  4781 00:D2AC: C5 AB              CMP   Histrh            ; compare to highest string high byte
  4782 00:D2AE: 90 17              BCC   LAB_2207          ; if <, step pointer to next string and return
  4783                        
  4784 00:D2B0: D0 04              BNE   LAB_21F6          ; if > update pointers, step to next and return
  4785                        
  4786                                                      ; high bytes were = so compare low bytes
  4787 00:D2B2: E4 AA              CPX   Histrl            ; compare to highest string low byte
  4788 00:D2B4: 90 11              BCC   LAB_2207          ; if <, step pointer to next string and return
  4789                        
  4790                                                      ; string is in string memory space
  4791                        LAB_21F6
  4792 00:D2B6: 86 AA              STX   Histrl            ; save as new highest string low byte
  4793 00:D2B8: 85 AB              STA   Histrh            ; save as new highest string high byte
  4794 00:D2BA: A5 71              LDA   ut1_pl            ; get start of vars(descriptors) low byte
  4795 00:D2BC: A6 72              LDX   ut1_ph            ; get start of vars(descriptors) high byte
  4796 00:D2BE: 85 9C              STA   garb_l            ; save as working pointer low byte
  4797 00:D2C0: 86 9D              STX   garb_h            ; save as working pointer high byte
  4798 00:D2C2: 88                 DEY                     ; decrement index DIFFERS
  4799 00:D2C3: 88                 DEY                     ; decrement index (should point to descriptor start)
  4800 00:D2C4: 84 A2              STY   g_indx            ; save index pointer
  4801                        
  4802                                                      ; step pointer to next string
  4803                        LAB_2206
  4804 00:D2C6: 18                 CLC                     ; clear carry for add
  4805                        LAB_2207
  4806 00:D2C7: A5 A0              LDA   g_step            ; get step size
  4807                        LAB_2208
  4808 00:D2C9: 65 71              ADC   ut1_pl            ; add pointer low byte
  4809 00:D2CB: 85 71              STA   ut1_pl            ; save pointer low byte
  4810 00:D2CD: 90 02              BCC   LAB_2211          ; branch if no overflow
  4811                        
  4812 00:D2CF: E6 72              INC   ut1_ph            ; else increment high byte
  4813                        LAB_2211
  4814 00:D2D1: A6 72              LDX   ut1_ph            ; get pointer high byte
  4815 00:D2D3: A0 00              LDY   #$00              ; clear Y
  4816 00:D2D5: 60                 RTS
  4817                        
  4818                        ; search complete, now either exit or set-up and move string
  4819                        
  4820                        LAB_2216
  4821 00:D2D6: C6 A0              DEC   g_step            ; decrement step size (now $03 for descriptor stack)
  4822                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4823                        ; *** replace
  4824                        ;      LDX   garb_h            ; get string to move high byte
  4825                        ; *** with
  4826 00:D2D8: A5 9D              LDA   garb_h            ; any string to move?
  4827 00:D2DA: 05 9C              ORA   garb_l
  4828                        ; *** end   patch  2.22p5.5  garbage collection may overlap temporary strings
  4829 00:D2DC: F0 F3              BEQ   LAB_2211          ; exit if nothing to move
  4830                        
  4831 00:D2DE: A4 A2              LDY   g_indx            ; get index byte back (points to descriptor)
  4832 00:D2E0: 18                 CLC                     ; clear carry for add
  4833 00:D2E1: B1 9C              LDA   (garb_l),Y        ; get string length
  4834 00:D2E3: 65 AA              ADC   Histrl            ; add highest string low byte
  4835 00:D2E5: 85 A6              STA   Obendl            ; save old block end low pointer
  4836 00:D2E7: A5 AB              LDA   Histrh            ; get highest string high byte
  4837 00:D2E9: 69 00              ADC   #$00              ; add any carry
  4838 00:D2EB: 85 A7              STA   Obendh            ; save old block end high byte
  4839 00:D2ED: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4840 00:D2EF: A6 82              LDX   Sstorh            ; get bottom of string space high byte
  4841 00:D2F1: 85 A4              STA   Nbendl            ; save new block end low byte
  4842 00:D2F3: 86 A5              STX   Nbendh            ; save new block end high byte
  4843 00:D2F5: 20 EA C0           JSR   LAB_11D6          ; open up space in memory, don't set array end
  4844 00:D2F8: A4 A2              LDY   g_indx            ; get index byte
  4845 00:D2FA: C8                 INY                     ; point to descriptor low byte
  4846 00:D2FB: A5 A4              LDA   Nbendl            ; get string pointer low byte
  4847 00:D2FD: 91 9C              STA   (garb_l),Y        ; save new string pointer low byte
  4848 00:D2FF: AA                 TAX                     ; copy string pointer low byte
  4849 00:D300: E6 A5              INC   Nbendh            ; correct high byte (move sets high byte -1)
  4850 00:D302: A5 A5              LDA   Nbendh            ; get new string pointer high byte
  4851 00:D304: C8                 INY                     ; point to descriptor high byte
  4852 00:D305: 91 9C              STA   (garb_l),Y        ; save new string pointer high byte
  4853 00:D307: 4C 15 D2           JMP   LAB_214B          ; re-run routine from last ending
  4854                                                      ; (but don't collect this string)
  4855                        
  4856                        ; concatenate
  4857                        ; add strings, string 1 is in descriptor des_pl, string 2 is in line
  4858                        
  4859                        LAB_224D
  4860 00:D30A: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  4861 00:D30C: 48                 PHA                     ; put on stack
  4862 00:D30D: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4863 00:D30F: 48                 PHA                     ; put on stack
  4864                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4865                        ; *** add extra label to verify originating function
  4866                        LAB_224Da
  4867                        ; *** end patch    2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4868 00:D310: 20 EF CB           JSR   LAB_GVAL          ; get value from line
  4869 00:D313: 20 F4 CA           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4870 00:D316: 68                 PLA                     ; get descriptor pointer low byte back
  4871 00:D317: 85 B8              STA   ssptr_l           ; set pointer low byte
  4872 00:D319: 68                 PLA                     ; get descriptor pointer high byte back
  4873 00:D31A: 85 B9              STA   ssptr_h           ; set pointer high byte
  4874 00:D31C: A0 00              LDY   #$00              ; clear index
  4875 00:D31E: B1 B8              LDA   (ssptr_l),Y       ; get length_1 from descriptor
  4876 00:D320: 18                 CLC                     ; clear carry for add
  4877 00:D321: 71 AE              ADC   (des_pl),Y        ; add length_2
  4878 00:D323: 90 05              BCC   LAB_226D          ; branch if no overflow
  4879                        
  4880 00:D325: A2 1A              LDX   #$1A              ; else set error code $1A ("String too long" error)
  4881 00:D327: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  4882                        
  4883                        LAB_226D
  4884 00:D32A: 20 62 D1           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4885                                                      ; long
  4886 00:D32D: 20 47 D3           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  4887 00:D330: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  4888 00:D332: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  4889 00:D334: 20 78 D3           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4890                                                      ; returns with A = length, ut1_pl = pointer low byte,
  4891                                                      ; ut1_ph = pointer high byte
  4892 00:D337: 20 59 D3           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  4893 00:D33A: A5 B8              LDA   ssptr_l           ;.set descriptor pointer low byte
  4894 00:D33C: A4 B9              LDY   ssptr_h           ;.set descriptor pointer high byte
  4895 00:D33E: 20 78 D3           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4896                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  4897                                                      ; Y=ut1_ph=pointer high byte
  4898 00:D341: 20 B7 D1           JSR   LAB_RTST          ; check for space on descriptor stack then put string
  4899                                                      ; address and length on descriptor stack and update stack
  4900                                                      ; pointers
  4901 00:D344: 4C 1A CB           JMP   LAB_1ADB          ;.continue evaluation
  4902                        
  4903                        ; copy string from descriptor (sdescr) to (Sutill)
  4904                        
  4905                        LAB_228A
  4906 00:D347: A0 00              LDY   #$00              ; clear index
  4907 00:D349: B1 B8              LDA   (sdescr),Y        ; get string length
  4908 00:D34B: 48                 PHA                     ; save on stack
  4909 00:D34C: C8                 INY                     ; increment index
  4910 00:D34D: B1 B8              LDA   (sdescr),Y        ; get source string pointer low byte
  4911 00:D34F: AA                 TAX                     ; copy to X
  4912 00:D350: C8                 INY                     ; increment index
  4913 00:D351: B1 B8              LDA   (sdescr),Y        ; get source string pointer high byte
  4914 00:D353: A8                 TAY                     ; copy to Y
  4915 00:D354: 68                 PLA                     ; get length back
  4916                        
  4917                        ; store string A bytes long from YX to (Sutill)
  4918                        
  4919                        LAB_2298
  4920 00:D355: 86 71              STX   ut1_pl            ; save source string pointer low byte
  4921 00:D357: 84 72              STY   ut1_ph            ; save source string pointer high byte
  4922                        
  4923                        ; store string A bytes long from (ut1_pl) to (Sutill)
  4924                        
  4925                        LAB_229C
  4926 00:D359: AA                 TAX                     ; copy length to index (don't count with Y)
  4927 00:D35A: F0 14              BEQ   LAB_22B2          ; branch if = $0 (null string) no need to add zero length
  4928                        
  4929 00:D35C: A0 00              LDY   #$00              ; zero pointer (copy forward)
  4930                        LAB_22A0
  4931 00:D35E: B1 71              LDA   (ut1_pl),Y        ; get source byte
  4932 00:D360: 91 83              STA   (Sutill),Y        ; save destination byte
  4933                        
  4934 00:D362: C8                 INY                     ; increment index
  4935 00:D363: CA                 DEX                     ; decrement counter
  4936 00:D364: D0 F8              BNE   LAB_22A0          ; loop while <> 0
  4937                        
  4938 00:D366: 98                 TYA                     ; restore length from Y
  4939                        LAB_22A9
  4940 00:D367: 18                 CLC                     ; clear carry for add
  4941 00:D368: 65 83              ADC   Sutill            ; add string utility ptr low byte
  4942 00:D36A: 85 83              STA   Sutill            ; save string utility ptr low byte
  4943 00:D36C: 90 02              BCC   LAB_22B2          ; branch if no carry
  4944                        
  4945 00:D36E: E6 84              INC   Sutilh            ; else increment string utility ptr high byte
  4946                        LAB_22B2
  4947 00:D370: 60                 RTS
  4948                        
  4949                        ; evaluate string
  4950                        
  4951                        LAB_EVST
  4952 00:D371: 20 F4 CA           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4953                        
  4954                        ; pop string off descriptor stack, or from top of string space
  4955                        ; returns with A = length, X=pointer low byte, Y=pointer high byte
  4956                        
  4957                        LAB_22B6
  4958 00:D374: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4959 00:D376: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4960                        
  4961                        ; pop (YA) descriptor off stack or from top of string space
  4962                        ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
  4963                        
  4964                        LAB_22BA
  4965 00:D378: 85 71              STA   ut1_pl            ; save descriptor pointer low byte
  4966 00:D37A: 84 72              STY   ut1_ph            ; save descriptor pointer high byte
  4967 00:D37C: 20 A9 D3           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  4968 00:D37F: 08                 PHP                     ; save status flags
  4969 00:D380: A0 00              LDY   #$00              ; clear index
  4970 00:D382: B1 71              LDA   (ut1_pl),Y        ; get length from string descriptor
  4971 00:D384: 48                 PHA                     ; put on stack
  4972 00:D385: C8                 INY                     ; increment index
  4973 00:D386: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte from descriptor
  4974 00:D388: AA                 TAX                     ; copy to X
  4975 00:D389: C8                 INY                     ; increment index
  4976 00:D38A: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte from descriptor
  4977 00:D38C: A8                 TAY                     ; copy to Y
  4978 00:D38D: 68                 PLA                     ; get string length back
  4979 00:D38E: 28                 PLP                     ; restore status
  4980 00:D38F: D0 13              BNE   LAB_22E6          ; branch if pointer <> last_sl,last_sh
  4981                        
  4982 00:D391: C4 82              CPY   Sstorh            ; compare bottom of string space high byte
  4983 00:D393: D0 0F              BNE   LAB_22E6          ; branch if <>
  4984                        
  4985 00:D395: E4 81              CPX   Sstorl            ; else compare bottom of string space low byte
  4986 00:D397: D0 0B              BNE   LAB_22E6          ; branch if <>
  4987                        
  4988 00:D399: 48                 PHA                     ; save string length
  4989 00:D39A: 18                 CLC                     ; clear carry for add
  4990 00:D39B: 65 81              ADC   Sstorl            ; add bottom of string space low byte
  4991 00:D39D: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4992 00:D39F: 90 02              BCC   LAB_22E5          ; skip increment if no overflow
  4993                        
  4994 00:D3A1: E6 82              INC   Sstorh            ; increment bottom of string space high byte
  4995                        LAB_22E5
  4996 00:D3A3: 68                 PLA                     ; restore string length
  4997                        LAB_22E6
  4998 00:D3A4: 86 71              STX   ut1_pl            ; save string pointer low byte
  4999 00:D3A6: 84 72              STY   ut1_ph            ; save string pointer high byte
  5000 00:D3A8: 60                 RTS
  5001                        
  5002                        ; clean descriptor stack, YA = pointer
  5003                        ; checks if AY is on the descriptor stack, if so does a stack discard
  5004                        
  5005                        LAB_22EB
  5006 00:D3A9: C4 67              CPY   last_sh           ; compare pointer high byte
  5007 00:D3AB: D0 0C              BNE   LAB_22FB          ; exit if <>
  5008                        
  5009 00:D3AD: C5 66              CMP   last_sl           ; compare pointer low byte
  5010 00:D3AF: D0 08              BNE   LAB_22FB          ; exit if <>
  5011                        
  5012 00:D3B1: 85 65              STA   next_s            ; save descriptor stack pointer
  5013 00:D3B3: E9 03              SBC   #$03              ; -3
  5014 00:D3B5: 85 66              STA   last_sl           ; save low byte -3
  5015 00:D3B7: A0 00              LDY   #$00              ; clear high byte
  5016                        LAB_22FB
  5017 00:D3B9: 60                 RTS
  5018                        
  5019                        ; perform CHR$()
  5020                        
  5021                        LAB_CHRS
  5022 00:D3BA: 20 C5 D4           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  5023 00:D3BD: 8A                 TXA                     ; copy to A
  5024 00:D3BE: 48                 PHA                     ; save character
  5025 00:D3BF: A9 01              LDA   #$01              ; string is single byte
  5026 00:D3C1: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  5027                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5028 00:D3C4: 68                 PLA                     ; get character back
  5029 00:D3C5: A0 00              LDY   #$00              ; clear index
  5030 00:D3C7: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  5031 00:D3C9: 4C B7 D1           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5032                                                      ; address and length on descriptor stack and update stack
  5033                                                      ; pointers
  5034                        
  5035                        ; perform LEFT$()
  5036                        
  5037                        LAB_LEFT
  5038 00:D3CC: 48                 PHA                     ; push byte parameter
  5039 00:D3CD: 20 2D D4           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5040                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5041 00:D3D0: D1 9E              CMP   (des_2l),Y        ; compare byte parameter with string length
  5042 00:D3D2: 98                 TYA                     ; clear A
  5043 00:D3D3: F0 09              BEQ   LAB_2316          ; go do string copy (branch always)
  5044                        
  5045                        ; perform RIGHT$()
  5046                        
  5047                        LAB_RIGHT
  5048 00:D3D5: 48                 PHA                     ; push byte parameter
  5049 00:D3D6: 20 2D D4           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5050                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5051 00:D3D9: 18                 CLC                     ; clear carry for add-1
  5052 00:D3DA: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5053 00:D3DC: 49 FF              EOR   #$FF              ; invert it (A=LEN(expression$)-l)
  5054                        
  5055                        LAB_2316
  5056 00:D3DE: 90 04              BCC   LAB_231C          ; branch if string length > byte parameter
  5057                        
  5058 00:D3E0: B1 9E              LDA   (des_2l),Y        ; else make parameter = length
  5059 00:D3E2: AA                 TAX                     ; copy to byte parameter copy
  5060 00:D3E3: 98                 TYA                     ; clear string start offset
  5061                        LAB_231C
  5062 00:D3E4: 48                 PHA                     ; save string start offset
  5063                        LAB_231D
  5064 00:D3E5: 8A                 TXA                     ; copy byte parameter (or string length if <)
  5065                        LAB_231E
  5066 00:D3E6: 48                 PHA                     ; save string length
  5067 00:D3E7: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  5068                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5069 00:D3EA: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  5070 00:D3EC: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  5071 00:D3EE: 20 78 D3           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  5072                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  5073                                                      ; Y=ut1_ph=pointer high byte
  5074 00:D3F1: 68                 PLA                     ; get string length back
  5075 00:D3F2: A8                 TAY                     ; copy length to Y
  5076 00:D3F3: 68                 PLA                     ; get string start offset back
  5077 00:D3F4: 18                 CLC                     ; clear carry for add
  5078 00:D3F5: 65 71              ADC   ut1_pl            ; add start offset to string start pointer low byte
  5079 00:D3F7: 85 71              STA   ut1_pl            ; save string start pointer low byte
  5080 00:D3F9: 90 02              BCC   LAB_2335          ; branch if no overflow
  5081                        
  5082 00:D3FB: E6 72              INC   ut1_ph            ; else increment string start pointer high byte
  5083                        LAB_2335
  5084 00:D3FD: 98                 TYA                     ; copy length to A
  5085 00:D3FE: 20 59 D3           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  5086 00:D401: 4C B7 D1           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5087                                                      ; address and length on descriptor stack and update stack
  5088                                                      ; pointers
  5089                        
  5090                        ; perform MID$()
  5091                        
  5092                        LAB_MIDS
  5093 00:D404: 48                 PHA                     ; push byte parameter
  5094 00:D405: A9 FF              LDA   #$FF              ; set default length = 255
  5095 00:D407: 85 AF              STA   mids_l            ; save default length
  5096 00:D409: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5097 00:D40C: C9 29              CMP   #')'              ; compare with ")"
  5098 00:D40E: F0 06              BEQ   LAB_2358          ; branch if = ")" (skip second byte get)
  5099                        
  5100 00:D410: 20 20 CC           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5101 00:D413: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter (use copy in mids_l)
  5102                        LAB_2358
  5103 00:D416: 20 2D D4           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5104                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5105 00:D419: CA                 DEX                     ; decrement start index
  5106 00:D41A: 8A                 TXA                     ; copy to A
  5107 00:D41B: 48                 PHA                     ; save string start offset
  5108 00:D41C: 18                 CLC                     ; clear carry for sub-1
  5109 00:D41D: A2 00              LDX   #$00              ; clear output string length
  5110 00:D41F: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5111 00:D421: B0 C2              BCS   LAB_231D          ; if start>string length go do null string
  5112                        
  5113 00:D423: 49 FF              EOR   #$FF              ; complement -length
  5114 00:D425: C5 AF              CMP   mids_l            ; compare byte parameter
  5115 00:D427: 90 BD              BCC   LAB_231E          ; if length>remaining string go do RIGHT$
  5116                        
  5117 00:D429: A5 AF              LDA   mids_l            ; get length byte
  5118 00:D42B: B0 B9              BCS   LAB_231E          ; go do string copy (branch always)
  5119                        
  5120                        ; pull string data and byte parameter from stack
  5121                        ; return pointer in des_2l/h, byte in A (and X), Y=0
  5122                        
  5123                        LAB_236F
  5124 00:D42D: 20 11 CC           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  5125 00:D430: 68                 PLA                     ; pull return address low byte (return address)
  5126 00:D431: 85 A2              STA   Fnxjpl            ; save functions jump vector low byte
  5127 00:D433: 68                 PLA                     ; pull return address high byte (return address)
  5128 00:D434: 85 A3              STA   Fnxjph            ; save functions jump vector high byte
  5129 00:D436: 68                 PLA                     ; pull byte parameter
  5130 00:D437: AA                 TAX                     ; copy byte parameter to X
  5131 00:D438: 68                 PLA                     ; pull string pointer low byte
  5132 00:D439: 85 9E              STA   des_2l            ; save it
  5133 00:D43B: 68                 PLA                     ; pull string pointer high byte
  5134 00:D43C: 85 9F              STA   des_2h            ; save it
  5135 00:D43E: A0 00              LDY   #$00              ; clear index
  5136 00:D440: 8A                 TXA                     ; copy byte parameter
  5137 00:D441: F0 79              BEQ   LAB_23A8          ; if null do function call error then warm start
  5138                        
  5139 00:D443: E6 A2              INC   Fnxjpl            ; increment function jump vector low byte
  5140                                                      ; (JSR pushes return addr-1. this is all very nice
  5141                                                      ; but will go tits up if either call is on a page
  5142                                                      ; boundary!)
  5143 00:D445: 6C A2 00           JMP   (Fnxjpl)          ; in effect, RTS
  5144                        
  5145                        ; perform LCASE$()
  5146                        
  5147                        LAB_LCASE
  5148 00:D448: 20 71 D3           JSR   LAB_EVST          ; evaluate string
  5149 00:D44B: 85 AC              STA   str_ln            ; set string length
  5150 00:D44D: A8                 TAY                     ; copy length to Y
  5151 00:D44E: F0 38              BEQ   NoString          ; branch if null string
  5152                        
  5153 00:D450: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5154                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5155 00:D453: 86 AD              STX   str_pl            ; save string pointer low byte
  5156 00:D455: 84 AE              STY   str_ph            ; save string pointer high byte
  5157 00:D457: A8                 TAY                     ; get string length back
  5158                        
  5159                        LC_loop
  5160 00:D458: 88                 DEY                     ; decrement index
  5161 00:D459: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5162 00:D45B: 20 52 CE           JSR   LAB_1D82          ; is character "A" to "Z"
  5163 00:D45E: 90 02              BCC   NoUcase           ; branch if not upper case alpha
  5164                        
  5165 00:D460: 09 20              ORA   #$20              ; convert upper to lower case
  5166                        NoUcase
  5167 00:D462: 91 83              STA   (Sutill),Y        ; save byte back to string
  5168 00:D464: 98                 TYA                     ; test index
  5169 00:D465: D0 F1              BNE   LC_loop           ; loop if not all done
  5170                        
  5171 00:D467: F0 1F              BEQ   NoString          ; tidy up and exit, branch always
  5172                        
  5173                        ; perform UCASE$()
  5174                        
  5175                        LAB_UCASE
  5176 00:D469: 20 71 D3           JSR   LAB_EVST          ; evaluate string
  5177 00:D46C: 85 AC              STA   str_ln            ; set string length
  5178 00:D46E: A8                 TAY                     ; copy length to Y
  5179 00:D46F: F0 17              BEQ   NoString          ; branch if null string
  5180                        
  5181 00:D471: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5182                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5183 00:D474: 86 AD              STX   str_pl            ; save string pointer low byte
  5184 00:D476: 84 AE              STY   str_ph            ; save string pointer high byte
  5185 00:D478: A8                 TAY                     ; get string length back
  5186                        
  5187                        UC_loop
  5188 00:D479: 88                 DEY                     ; decrement index
  5189 00:D47A: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5190 00:D47C: 20 4E CE           JSR   LAB_CASC          ; is character "a" to "z" (or "A" to "Z")
  5191 00:D47F: 90 02              BCC   NoLcase           ; branch if not alpha
  5192                        
  5193 00:D481: 29 DF              AND   #$DF              ; convert lower to upper case
  5194                        NoLcase
  5195 00:D483: 91 83              STA   (Sutill),Y        ; save byte back to string
  5196 00:D485: 98                 TYA                     ; test index
  5197 00:D486: D0 F1              BNE   UC_loop           ; loop if not all done
  5198                        
  5199                        NoString
  5200 00:D488: 4C B7 D1           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5201                                                      ; address and length on descriptor stack and update stack
  5202                                                      ; pointers
  5203                        
  5204                        ; perform SADD()
  5205                        
  5206                        LAB_SADD
  5207 00:D48B: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5208 00:D48E: 20 DA CD           JSR   LAB_GVAR          ; get var address
  5209                        
  5210 00:D491: 20 11 CC           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  5211 00:D494: 20 F4 CA           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  5212                        
  5213 00:D497: A0 02              LDY   #$02              ; index to string pointer high byte
  5214 00:D499: B1 95              LDA   (Cvaral),Y        ; get string pointer high byte
  5215 00:D49B: AA                 TAX                     ; copy string pointer high byte to X
  5216 00:D49C: 88                 DEY                     ; index to string pointer low byte
  5217 00:D49D: B1 95              LDA   (Cvaral),Y        ; get string pointer low byte
  5218 00:D49F: A8                 TAY                     ; copy string pointer low byte to Y
  5219 00:D4A0: 8A                 TXA                     ; copy string pointer high byte to A
  5220 00:D4A1: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5221                        
  5222                        ; perform LEN()
  5223                        
  5224                        LAB_LENS
  5225 00:D4A4: 20 AA D4           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5226 00:D4A7: 4C 96 D0           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5227                        
  5228                        ; evaluate string, get length in Y
  5229                        
  5230                        LAB_ESGL
  5231 00:D4AA: 20 71 D3           JSR   LAB_EVST          ; evaluate string
  5232 00:D4AD: A8                 TAY                     ; copy length to Y
  5233 00:D4AE: 60                 RTS
  5234                        
  5235                        ; perform ASC()
  5236                        
  5237                        LAB_ASC
  5238 00:D4AF: 20 AA D4           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5239 00:D4B2: F0 08              BEQ   LAB_23A8          ; if null do function call error then warm start
  5240                        
  5241 00:D4B4: A0 00              LDY   #$00              ; set index to first character
  5242 00:D4B6: B1 71              LDA   (ut1_pl),Y        ; get byte
  5243 00:D4B8: A8                 TAY                     ; copy to Y
  5244 00:D4B9: 4C 96 D0           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5245                        
  5246                        ; do function call error then warm start
  5247                        
  5248                        LAB_23A8
  5249 00:D4BC: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start
  5250                        
  5251                        ; scan and get byte parameter
  5252                        
  5253                        LAB_SGBY
  5254 00:D4BF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5255                        
  5256                        ; get byte parameter
  5257                        
  5258                        LAB_GTBY
  5259 00:D4C2: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5260                                                      ; else do type mismatch
  5261                        
  5262                        ; evaluate byte expression, result in X
  5263                        
  5264                        LAB_EVBY
  5265 00:D4C5: 20 D2 CE           JSR   LAB_EVPI          ; evaluate integer expression (no check)
  5266                        
  5267 00:D4C8: A4 AE              LDY   FAC1_2            ; get FAC1 mantissa2
  5268 00:D4CA: D0 F0              BNE   LAB_23A8          ; if top byte <> 0 do function call error then warm start
  5269                        
  5270 00:D4CC: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5271 00:D4CE: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5272                        
  5273                        ; perform VAL()
  5274                        
  5275                        LAB_VAL
  5276 00:D4D1: 20 AA D4           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5277 00:D4D4: D0 03              BNE   LAB_23C5          ; branch if not null string
  5278                        
  5279                                                      ; string was null so set result = $00
  5280 00:D4D6: 4C 7F D6           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5281                        
  5282                        LAB_23C5
  5283                        ; *** begin patch  2.22p5.7  VAL() may cause string variables to be trashed
  5284                        ; *** replace     
  5285                        ;      LDX   Bpntrl            ; get BASIC execute pointer low byte
  5286                        ;      LDY   Bpntrh            ; get BASIC execute pointer high byte
  5287                        ;      STX   Btmpl             ; save BASIC execute pointer low byte
  5288                        ;      STY   Btmph             ; save BASIC execute pointer high byte
  5289                        ;      LDX   ut1_pl            ; get string pointer low byte
  5290                        ;      STX   Bpntrl            ; save as BASIC execute pointer low byte
  5291                        ;      CLC                     ; clear carry
  5292                        ;      ADC   ut1_pl            ; add string length
  5293                        ;      STA   ut2_pl            ; save string end low byte
  5294                        ;      LDA   ut1_ph            ; get string pointer high byte
  5295                        ;      STA   Bpntrh            ; save as BASIC execute pointer high byte
  5296                        ;      ADC   #$00              ; add carry to high byte
  5297                        ;      STA   ut2_ph            ; save string end high byte
  5298                        ;      LDY   #$00              ; set index to $00
  5299                        ;      LDA   (ut2_pl),Y        ; get string end +1 byte
  5300                        ;      PHA                     ; push it
  5301                        ;      TYA                     ; clear A
  5302                        ;      STA   (ut2_pl),Y        ; terminate string with $00
  5303                        ;      JSR   LAB_GBYT          ; scan memory
  5304                        ;      JSR   LAB_2887          ; get FAC1 from string
  5305                        ;      PLA                     ; restore string end +1 byte
  5306                        ;      LDY   #$00              ; set index to zero
  5307                        ;      STA   (ut2_pl),Y        ; put string end byte back
  5308                        ; *** with
  5309 00:D4D9: 48                 PHA                     ; save length
  5310 00:D4DA: C8                 INY                     ; string length +1
  5311 00:D4DB: 98                 TYA
  5312 00:D4DC: 20 6A D1           JSR   LAB_MSSP          ; allocate temp string +1 bytes long
  5313 00:D4DF: 68                 PLA                     ; get length back
  5314 00:D4E0: 20 59 D3           JSR   LAB_229C          ; copy string (ut1_pl) -> (Sutill) for A bytes
  5315 00:D4E3: A9 00              LDA   #0                ; add delimiter to end of string
  5316 00:D4E5: A8                 TAY
  5317 00:D4E6: 91 83              STA   (Sutill),Y
  5318 00:D4E8: A6 C3              LDX   Bpntrl            ; save BASIC execute pointer low byte
  5319 00:D4EA: A4 C4              LDY   Bpntrh
  5320 00:D4EC: 86 BA              STX   Btmpl
  5321 00:D4EE: 84 BB              STY   Btmph
  5322 00:D4F0: A6 AD              LDX   str_pl            ; point to temporary string
  5323 00:D4F2: A4 AE              LDY   str_ph
  5324 00:D4F4: 86 C3              STX   Bpntrl
  5325 00:D4F6: 84 C4              STY   Bpntrh
  5326 00:D4F8: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5327 00:D4FB: 20 D5 D9           JSR   LAB_2887          ; get FAC1 from string
  5328                        ; *** end patch    2.22p5.7  VAL() may cause string variables to be trashed
  5329                        
  5330                        ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  5331                        
  5332                        LAB_23F3
  5333 00:D4FE: A6 BA              LDX   Btmpl             ; get BASIC execute pointer low byte back
  5334 00:D500: A4 BB              LDY   Btmph             ; get BASIC execute pointer high byte back
  5335 00:D502: 86 C3              STX   Bpntrl            ; save BASIC execute pointer low byte
  5336 00:D504: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  5337 00:D506: 60                 RTS
  5338                        
  5339                        ; get two parameters for POKE or WAIT
  5340                        
  5341                        LAB_GADB
  5342 00:D507: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5343                                                      ; else do type mismatch
  5344 00:D50A: 20 20 D5           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5345                        
  5346                        ; scan for "," and get byte, else do Syntax error then warm start
  5347                        
  5348                        LAB_SCGB
  5349 00:D50D: 20 20 CC           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5350 00:D510: A5 12              LDA   Itemph            ; save temporary integer high byte
  5351 00:D512: 48                 PHA                     ; on stack
  5352 00:D513: A5 11              LDA   Itempl            ; save temporary integer low byte
  5353 00:D515: 48                 PHA                     ; on stack
  5354 00:D516: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter
  5355 00:D519: 68                 PLA                     ; pull low byte
  5356 00:D51A: 85 11              STA   Itempl            ; restore temporary integer low byte
  5357 00:D51C: 68                 PLA                     ; pull high byte
  5358 00:D51D: 85 12              STA   Itemph            ; restore temporary integer high byte
  5359 00:D51F: 60                 RTS
  5360                        
  5361                        ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
  5362                        ; -ve and converts it into a right truncated integer in Itempl and Itemph
  5363                        
  5364                        ; save unsigned 16 bit integer part of FAC1 in temporary integer
  5365                        
  5366                        LAB_F2FX
  5367 00:D520: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5368 00:D522: C9 98              CMP   #$98              ; compare with exponent = 2^24
  5369 00:D524: B0 96              BCS   LAB_23A8          ; if >= do function call error then warm start
  5370                        
  5371                        LAB_F2FU
  5372 00:D526: 20 7F D9           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  5373 00:D529: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5374 00:D52B: A4 AF              LDY   FAC1_3            ; get FAC1 mantissa3
  5375 00:D52D: 84 11              STY   Itempl            ; save temporary integer low byte
  5376 00:D52F: 85 12              STA   Itemph            ; save temporary integer high byte
  5377 00:D531: 60                 RTS
  5378                        
  5379                        ; perform PEEK()
  5380                        
  5381                        LAB_PEEK
  5382 00:D532: 20 20 D5           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5383 00:D535: A2 00              LDX   #$00              ; clear index
  5384 00:D537: A1 11              LDA   (Itempl,X)        ; get byte via temporary integer (addr)
  5385 00:D539: A8                 TAY                     ; copy byte to Y
  5386 00:D53A: 4C 96 D0           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5387                        
  5388                        ; perform POKE
  5389                        
  5390                        LAB_POKE
  5391 00:D53D: 20 07 D5           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5392 00:D540: 8A                 TXA                     ; copy byte argument to A
  5393 00:D541: A2 00              LDX   #$00              ; clear index
  5394 00:D543: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  5395 00:D545: 60                 RTS
  5396                        
  5397                        ; perform DEEK()
  5398                        
  5399                        LAB_DEEK
  5400 00:D546: 20 20 D5           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5401 00:D549: A2 00              LDX   #$00              ; clear index
  5402 00:D54B: A1 11              LDA   (Itempl,X)        ; PEEK low byte
  5403 00:D54D: A8                 TAY                     ; copy to Y
  5404 00:D54E: E6 11              INC   Itempl            ; increment pointer low byte
  5405 00:D550: D0 02              BNE   Deekh             ; skip high increment if no rollover
  5406                        
  5407 00:D552: E6 12              INC   Itemph            ; increment pointer high byte
  5408                        Deekh
  5409 00:D554: A1 11              LDA   (Itempl,X)        ; PEEK high byte
  5410 00:D556: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5411                        
  5412                        ; perform DOKE
  5413                        
  5414                        LAB_DOKE
  5415 00:D559: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5416                                                      ; else do type mismatch
  5417 00:D55C: 20 20 D5           JSR   LAB_F2FX          ; convert floating-to-fixed
  5418                        
  5419 00:D55F: 84 97              STY   Frnxtl            ; save pointer low byte (float to fixed returns word in AY)
  5420 00:D561: 85 98              STA   Frnxth            ; save pointer high byte
  5421                        
  5422 00:D563: 20 20 CC           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5423 00:D566: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5424                                                      ; else do type mismatch
  5425 00:D569: 20 20 D5           JSR   LAB_F2FX          ; convert floating-to-fixed
  5426                        
  5427 00:D56C: 98                 TYA                     ; copy value low byte (float to fixed returns word in AY)
  5428 00:D56D: A2 00              LDX   #$00              ; clear index
  5429 00:D56F: 81 97              STA   (Frnxtl,X)        ; POKE low byte
  5430 00:D571: E6 97              INC   Frnxtl            ; increment pointer low byte
  5431 00:D573: D0 02              BNE   Dokeh             ; skip high increment if no rollover
  5432                        
  5433 00:D575: E6 98              INC   Frnxth            ; increment pointer high byte
  5434                        Dokeh
  5435 00:D577: A5 12              LDA   Itemph            ; get value high byte
  5436 00:D579: 81 97              STA   (Frnxtl,X)        ; POKE high byte
  5437 00:D57B: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5438                        
  5439                        ; perform SWAP
  5440                        
  5441                        LAB_SWAP
  5442 00:D57E: 20 DA CD           JSR   LAB_GVAR          ; get var1 address
  5443 00:D581: 85 97              STA   Lvarpl            ; save var1 address low byte
  5444 00:D583: 84 98              STY   Lvarph            ; save var1 address high byte
  5445 00:D585: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  5446 00:D587: 48                 PHA                     ; save data type flag
  5447                        
  5448 00:D588: 20 20 CC           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5449 00:D58B: 20 DA CD           JSR   LAB_GVAR          ; get var2 address (pointer in Cvaral/h)
  5450 00:D58E: 68                 PLA                     ; pull var1 data type flag
  5451 00:D58F: 45 5F              EOR   Dtypef            ; compare with var2 data type
  5452 00:D591: 10 10              BPL   SwapErr           ; exit if not both the same type
  5453                        
  5454 00:D593: A0 03              LDY   #$03              ; four bytes to swap (either value or descriptor+1)
  5455                        SwapLp
  5456 00:D595: B1 97              LDA   (Lvarpl),Y        ; get byte from var1
  5457 00:D597: AA                 TAX                     ; save var1 byte
  5458 00:D598: B1 95              LDA   (Cvaral),Y        ; get byte from var2
  5459 00:D59A: 91 97              STA   (Lvarpl),Y        ; save byte to var1
  5460 00:D59C: 8A                 TXA                     ; restore var1 byte
  5461 00:D59D: 91 95              STA   (Cvaral),Y        ; save byte to var2
  5462 00:D59F: 88                 DEY                     ; decrement index
  5463 00:D5A0: 10 F3              BPL   SwapLp            ; loop until done
  5464                        
  5465 00:D5A2: 60                 RTS
  5466                        
  5467                        SwapErr
  5468 00:D5A3: 4C FE CA           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  5469                        
  5470                        ; perform CALL
  5471                        
  5472                        LAB_CALL
  5473 00:D5A6: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5474                                                      ; else do type mismatch
  5475 00:D5A9: 20 20 D5           JSR   LAB_F2FX          ; convert floating-to-fixed
  5476 00:D5AC: A9 D5              LDA   #>CallExit        ; set return address high byte
  5477 00:D5AE: 48                 PHA                     ; put on stack
  5478 00:D5AF: A9 B4              LDA   #<CallExit-1      ; set return address low byte
  5479 00:D5B1: 48                 PHA                     ; put on stack
  5480 00:D5B2: 6C 11 00           JMP   (Itempl)          ; do indirect jump to user routine
  5481                        
  5482                        ; if the called routine exits correctly then it will return to here. this will then get
  5483                        ; the next byte for the interpreter and return
  5484                        
  5485                        CallExit
  5486 00:D5B5: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5487                        
  5488                        ; perform WAIT
  5489                        
  5490                        LAB_WAIT
  5491 00:D5B8: 20 07 D5           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5492 00:D5BB: 86 97              STX   Frnxtl            ; save byte
  5493 00:D5BD: A2 00              LDX   #$00              ; clear mask
  5494 00:D5BF: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5495 00:D5C2: F0 03              BEQ   LAB_2441          ; skip if no third argument
  5496                        
  5497 00:D5C4: 20 0D D5           JSR   LAB_SCGB          ; scan for "," and get byte, else SN error then warm start
  5498                        LAB_2441
  5499 00:D5C7: 86 98              STX   Frnxth            ; save EOR argument
  5500                        LAB_2445
  5501 00:D5C9: B1 11              LDA   (Itempl),Y        ; get byte via temporary integer (addr)
  5502 00:D5CB: 45 98              EOR   Frnxth            ; EOR with second argument (mask)
  5503 00:D5CD: 25 97              AND   Frnxtl            ; AND with first argument (byte)
  5504 00:D5CF: F0 F8              BEQ   LAB_2445          ; loop if result is zero
  5505                        
  5506                        LAB_244D
  5507 00:D5D1: 60                 RTS
  5508                        
  5509                        ; perform subtraction, FAC1 from (AY)
  5510                        
  5511                        LAB_2455
  5512 00:D5D2: 20 BA D7           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5513                        
  5514                        ; perform subtraction, FAC1 from FAC2
  5515                        
  5516                        LAB_SUBTRACT
  5517 00:D5D5: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5518 00:D5D7: 49 FF              EOR   #$FF              ; complement it
  5519 00:D5D9: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5520 00:D5DB: 45 B7              EOR   FAC2_s            ; EOR with FAC2 sign (b7)
  5521 00:D5DD: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5522 00:D5DF: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5523 00:D5E1: 4C F0 D5           JMP   LAB_ADD           ; go add FAC2 to FAC1
  5524                        
  5525                        ; perform addition
  5526                        
  5527                        LAB_2467
  5528 00:D5E4: 20 09 D7           JSR   LAB_257B          ; shift FACX A times right (>8 shifts)
  5529 00:D5E7: 90 4D              BCC   LAB_24A8          ;.go subtract mantissas
  5530                        
  5531                        ; add 0.5 to FAC1
  5532                        
  5533                        LAB_244E
  5534 00:D5E9: A9 1B              LDA   #<LAB_2A96        ; set 0.5 pointer low byte
  5535 00:D5EB: A0 E2              LDY   #>LAB_2A96        ; set 0.5 pointer high byte
  5536                        
  5537                        ; add (AY) to FAC1
  5538                        
  5539                        LAB_246C
  5540 00:D5ED: 20 BA D7           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5541                        
  5542                        ; add FAC2 to FAC1
  5543                        
  5544                        LAB_ADD
  5545 00:D5F0: D0 10              BNE   LAB_2474          ; branch if FAC1 was not zero
  5546                        
  5547                        ; copy FAC2 to FAC1
  5548                        
  5549                        LAB_279B
  5550 00:D5F2: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  5551                        
  5552                        ; save FAC1 sign and copy ABS(FAC2) to FAC1
  5553                        
  5554                        LAB_279D
  5555 00:D5F4: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5556 00:D5F6: A2 04              LDX   #$04              ; 4 bytes to copy
  5557                        LAB_27A1
  5558 00:D5F8: B5 B2              LDA   FAC1_o,X          ; get byte from FAC2,X
  5559 00:D5FA: 95 AB              STA   FAC1_e-1,X        ; save byte at FAC1,X
  5560 00:D5FC: CA                 DEX                     ; decrement count
  5561 00:D5FD: D0 F9              BNE   LAB_27A1          ; loop if not all done
  5562                        
  5563 00:D5FF: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  5564 00:D601: 60                 RTS
  5565                        
  5566                                                      ; FAC1 is non zero
  5567                        LAB_2474
  5568 00:D602: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5569 00:D604: 86 A3              STX   FAC2_r            ; save as FAC2 rounding byte
  5570 00:D606: A2 B3              LDX   #FAC2_e           ; set index to FAC2 exponent addr
  5571 00:D608: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5572                        LAB_247C
  5573 00:D60A: A8                 TAY                     ; copy exponent
  5574 00:D60B: F0 C4              BEQ   LAB_244D          ; exit if zero
  5575                        
  5576 00:D60D: 38                 SEC                     ; set carry for subtract
  5577 00:D60E: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5578 00:D610: F0 24              BEQ   LAB_24A8          ; branch if = (go add mantissa)
  5579                        
  5580 00:D612: 90 12              BCC   LAB_2498          ; branch if <
  5581                        
  5582                                                      ; FAC2>FAC1
  5583 00:D614: 84 AC              STY   FAC1_e            ; save FAC1 exponent
  5584 00:D616: A4 B7              LDY   FAC2_s            ; get FAC2 sign (b7)
  5585 00:D618: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  5586 00:D61A: 49 FF              EOR   #$FF              ; complement A
  5587 00:D61C: 69 00              ADC   #$00              ; +1 (twos complement, carry is set)
  5588 00:D61E: A0 00              LDY   #$00              ; clear Y
  5589 00:D620: 84 A3              STY   FAC2_r            ; clear FAC2 rounding byte
  5590 00:D622: A2 AC              LDX   #FAC1_e           ; set index to FAC1 exponent addr
  5591 00:D624: D0 04              BNE   LAB_249C          ; branch always
  5592                        
  5593                        LAB_2498
  5594 00:D626: A0 00              LDY   #$00              ; clear Y
  5595 00:D628: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5596                        LAB_249C
  5597 00:D62A: C9 F9              CMP   #$F9              ; compare exponent diff with $F9
  5598 00:D62C: 30 B6              BMI   LAB_2467          ; branch if range $79-$F8
  5599                        
  5600 00:D62E: A8                 TAY                     ; copy exponent difference to Y
  5601 00:D62F: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5602 00:D631: 56 01              LSR   PLUS_1,X          ; shift FAC? mantissa1
  5603 00:D633: 20 20 D7           JSR   LAB_2592          ; shift FACX Y times right
  5604                        
  5605                                                      ; exponents are equal now do mantissa subtract
  5606                        LAB_24A8
  5607 00:D636: 24 B8              BIT   FAC_sc            ; test sign compare (FAC1 EOR FAC2)
  5608 00:D638: 10 4C              BPL   LAB_24F8          ; if = add FAC2 mantissa to FAC1 mantissa and return
  5609                        
  5610 00:D63A: A0 AC              LDY   #FAC1_e           ; set index to FAC1 exponent addr
  5611 00:D63C: E0 B3              CPX   #FAC2_e           ; compare X to FAC2 exponent addr
  5612 00:D63E: F0 02              BEQ   LAB_24B4          ; branch if =
  5613                        
  5614 00:D640: A0 B3              LDY   #FAC2_e           ; else set index to FAC2 exponent addr
  5615                        
  5616                                                      ; subtract smaller from bigger (take sign of bigger)
  5617                        LAB_24B4
  5618 00:D642: 38                 SEC                     ; set carry for subtract
  5619 00:D643: 49 FF              EOR   #$FF              ; ones complement A
  5620 00:D645: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5621 00:D647: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5622 00:D649: B9 03 00           LDA   PLUS_3,Y          ; get FACY mantissa3
  5623 00:D64C: F5 03              SBC   PLUS_3,X          ; subtract FACX mantissa3
  5624 00:D64E: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5625 00:D650: B9 02 00           LDA   PLUS_2,Y          ; get FACY mantissa2
  5626 00:D653: F5 02              SBC   PLUS_2,X          ; subtract FACX mantissa2
  5627 00:D655: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5628 00:D657: B9 01 00           LDA   PLUS_1,Y          ; get FACY mantissa1
  5629 00:D65A: F5 01              SBC   PLUS_1,X          ; subtract FACX mantissa1
  5630 00:D65C: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5631                        
  5632                        ; do ABS and normalise FAC1
  5633                        
  5634                        LAB_24D0
  5635 00:D65E: B0 03              BCS   LAB_24D5          ; branch if number is +ve
  5636                        
  5637 00:D660: 20 C5 D6           JSR   LAB_2537          ; negate FAC1
  5638                        
  5639                        ; normalise FAC1
  5640                        
  5641                        LAB_24D5
  5642 00:D663: A0 00              LDY   #$00              ; clear Y
  5643 00:D665: 98                 TYA                     ; clear A
  5644 00:D666: 18                 CLC                     ; clear carry for add
  5645                        LAB_24D9
  5646 00:D667: A6 AD              LDX   FAC1_1            ; get FAC1 mantissa1
  5647 00:D669: D0 3E              BNE   LAB_251B          ; if not zero normalise FAC1
  5648                        
  5649 00:D66B: A6 AE              LDX   FAC1_2            ; get FAC1 mantissa2
  5650 00:D66D: 86 AD              STX   FAC1_1            ; save FAC1 mantissa1
  5651 00:D66F: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5652 00:D671: 86 AE              STX   FAC1_2            ; save FAC1 mantissa2
  5653 00:D673: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5654 00:D675: 86 AF              STX   FAC1_3            ; save FAC1 mantissa3
  5655 00:D677: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5656 00:D679: 69 08              ADC   #$08              ; add x to exponent offset
  5657 00:D67B: C9 18              CMP   #$18              ; compare with $18 (max offset, all bits would be =0)
  5658 00:D67D: D0 E8              BNE   LAB_24D9          ; loop if not max
  5659                        
  5660                        ; clear FAC1 exponent and sign
  5661                        
  5662                        LAB_24F1
  5663 00:D67F: A9 00              LDA   #$00              ; clear A
  5664                        LAB_24F3
  5665 00:D681: 85 AC              STA   FAC1_e            ; set FAC1 exponent
  5666                        
  5667                        ; save FAC1 sign
  5668                        
  5669                        LAB_24F5
  5670 00:D683: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5671 00:D685: 60                 RTS
  5672                        
  5673                        ; add FAC2 mantissa to FAC1 mantissa
  5674                        
  5675                        LAB_24F8
  5676 00:D686: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5677 00:D688: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5678 00:D68A: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5679 00:D68C: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5680 00:D68E: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5681 00:D690: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5682 00:D692: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5683 00:D694: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5684 00:D696: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5685 00:D698: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5686 00:D69A: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5687 00:D69C: B0 1A              BCS   LAB_252A          ; if carry then normalise FAC1 for C=1
  5688                        
  5689 00:D69E: 60                 RTS                     ; else just exit
  5690                        
  5691                        LAB_2511
  5692 00:D69F: 69 01              ADC   #$01              ; add 1 to exponent offset
  5693 00:D6A1: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  5694 00:D6A3: 26 AF              ROL   FAC1_3            ; shift FAC1 mantissa3
  5695 00:D6A5: 26 AE              ROL   FAC1_2            ; shift FAC1 mantissa2
  5696 00:D6A7: 26 AD              ROL   FAC1_1            ; shift FAC1 mantissa1
  5697                        
  5698                        ; normalise FAC1
  5699                        
  5700                        LAB_251B
  5701 00:D6A9: 10 F4              BPL   LAB_2511          ; loop if not normalised
  5702                        
  5703 00:D6AB: 38                 SEC                     ; set carry for subtract
  5704 00:D6AC: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5705 00:D6AE: B0 CF              BCS   LAB_24F1          ; branch if underflow (set result = $0)
  5706                        
  5707 00:D6B0: 49 FF              EOR   #$FF              ; complement exponent
  5708 00:D6B2: 69 01              ADC   #$01              ; +1 (twos complement)
  5709 00:D6B4: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5710                        
  5711                        ; test and normalise FAC1 for C=0/1
  5712                        
  5713                        LAB_2528
  5714 00:D6B6: 90 0C              BCC   LAB_2536          ; exit if no overflow
  5715                        
  5716                        ; normalise FAC1 for C=1
  5717                        
  5718                        LAB_252A
  5719 00:D6B8: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  5720 00:D6BA: F0 36              BEQ   LAB_2564          ; if zero do overflow error and warm start
  5721                        
  5722 00:D6BC: 66 AD              ROR   FAC1_1            ; shift FAC1 mantissa1
  5723 00:D6BE: 66 AE              ROR   FAC1_2            ; shift FAC1 mantissa2
  5724 00:D6C0: 66 AF              ROR   FAC1_3            ; shift FAC1 mantissa3
  5725 00:D6C2: 66 B9              ROR   FAC1_r            ; shift FAC1 rounding byte
  5726                        LAB_2536
  5727 00:D6C4: 60                 RTS
  5728                        
  5729                        ; negate FAC1
  5730                        
  5731                        LAB_2537
  5732 00:D6C5: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5733 00:D6C7: 49 FF              EOR   #$FF              ; complement it
  5734 00:D6C9: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5735                        
  5736                        ; twos complement FAC1 mantissa
  5737                        
  5738                        LAB_253D
  5739 00:D6CB: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5740 00:D6CD: 49 FF              EOR   #$FF              ; complement it
  5741 00:D6CF: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5742 00:D6D1: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5743 00:D6D3: 49 FF              EOR   #$FF              ; complement it
  5744 00:D6D5: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5745 00:D6D7: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5746 00:D6D9: 49 FF              EOR   #$FF              ; complement it
  5747 00:D6DB: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5748 00:D6DD: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5749 00:D6DF: 49 FF              EOR   #$FF              ; complement it
  5750 00:D6E1: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5751 00:D6E3: E6 B9              INC   FAC1_r            ; increment FAC1 rounding byte
  5752 00:D6E5: D0 0A              BNE   LAB_2563          ; exit if no overflow
  5753                        
  5754                        ; increment FAC1 mantissa
  5755                        
  5756                        LAB_2559
  5757 00:D6E7: E6 AF              INC   FAC1_3            ; increment FAC1 mantissa3
  5758 00:D6E9: D0 06              BNE   LAB_2563          ; finished if no rollover
  5759                        
  5760 00:D6EB: E6 AE              INC   FAC1_2            ; increment FAC1 mantissa2
  5761 00:D6ED: D0 02              BNE   LAB_2563          ; finished if no rollover
  5762                        
  5763 00:D6EF: E6 AD              INC   FAC1_1            ; increment FAC1 mantissa1
  5764                        LAB_2563
  5765 00:D6F1: 60                 RTS
  5766                        
  5767                        ; do overflow error (overflow exit)
  5768                        
  5769                        LAB_2564
  5770 00:D6F2: A2 0A              LDX   #$0A              ; error code $0A ("Overflow" error)
  5771 00:D6F4: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  5772                        
  5773                        ; shift FCAtemp << A+8 times
  5774                        
  5775                        LAB_2569
  5776 00:D6F7: A2 74              LDX   #FACt_1-1         ; set offset to FACtemp
  5777                        LAB_256B
  5778 00:D6F9: B4 03              LDY   PLUS_3,X          ; get FACX mantissa3
  5779 00:D6FB: 84 B9              STY   FAC1_r            ; save as FAC1 rounding byte
  5780 00:D6FD: B4 02              LDY   PLUS_2,X          ; get FACX mantissa2
  5781 00:D6FF: 94 03              STY   PLUS_3,X          ; save FACX mantissa3
  5782 00:D701: B4 01              LDY   PLUS_1,X          ; get FACX mantissa1
  5783 00:D703: 94 02              STY   PLUS_2,X          ; save FACX mantissa2
  5784 00:D705: A4 B2              LDY   FAC1_o            ; get FAC1 overflow byte
  5785 00:D707: 94 01              STY   PLUS_1,X          ; save FACX mantissa1
  5786                        
  5787                        ; shift FACX -A times right (> 8 shifts)
  5788                        
  5789                        LAB_257B
  5790 00:D709: 69 08              ADC   #$08              ; add 8 to shift count
  5791 00:D70B: 30 EC              BMI   LAB_256B          ; go do 8 shift if still -ve
  5792                        
  5793 00:D70D: F0 EA              BEQ   LAB_256B          ; go do 8 shift if zero
  5794                        
  5795 00:D70F: E9 08              SBC   #$08              ; else subtract 8 again
  5796 00:D711: A8                 TAY                     ; save count to Y
  5797 00:D712: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5798 00:D714: B0 12              BCS   LAB_259A          ;.
  5799                        
  5800                        LAB_2588
  5801 00:D716: 16 01              ASL   PLUS_1,X          ; shift FACX mantissa1
  5802 00:D718: 90 02              BCC   LAB_258E          ; branch if +ve
  5803                        
  5804 00:D71A: F6 01              INC   PLUS_1,X          ; this sets b7 eventually
  5805                        LAB_258E
  5806 00:D71C: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (correct for ASL)
  5807 00:D71E: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (put carry in b7)
  5808                        
  5809                        ; shift FACX Y times right
  5810                        
  5811                        LAB_2592
  5812 00:D720: 76 02              ROR   PLUS_2,X          ; shift FACX mantissa2
  5813 00:D722: 76 03              ROR   PLUS_3,X          ; shift FACX mantissa3
  5814 00:D724: 6A                 ROR                     ; shift FACX rounding byte
  5815 00:D725: C8                 INY                     ; increment exponent diff
  5816 00:D726: D0 EE              BNE   LAB_2588          ; branch if range adjust not complete
  5817                        
  5818                        LAB_259A
  5819 00:D728: 18                 CLC                     ; just clear it
  5820 00:D729: 60                 RTS
  5821                        
  5822                        ; perform LOG()
  5823                        
  5824                        LAB_LOG
  5825 00:D72A: 20 18 D9           JSR   LAB_27CA          ; test sign and zero
  5826 00:D72D: F0 02              BEQ   LAB_25C4          ; if zero do function call error then warm start
  5827                        
  5828 00:D72F: 10 03              BPL   LAB_25C7          ; skip error if +ve
  5829                        
  5830                        LAB_25C4
  5831 00:D731: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start (-ve)
  5832                        
  5833                        LAB_25C7
  5834 00:D734: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5835 00:D736: E9 7F              SBC   #$7F              ; normalise it
  5836 00:D738: 48                 PHA                     ; save it
  5837 00:D739: A9 80              LDA   #$80              ; set exponent to zero
  5838 00:D73B: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5839 00:D73D: A9 9B              LDA   #<LAB_25AD        ; set 1/root2 pointer low byte
  5840 00:D73F: A0 E1              LDY   #>LAB_25AD        ; set 1/root2 pointer high byte
  5841 00:D741: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1 (1/root2)
  5842 00:D744: A9 9F              LDA   #<LAB_25B1        ; set root2 pointer low byte
  5843 00:D746: A0 E1              LDY   #>LAB_25B1        ; set root2 pointer high byte
  5844 00:D748: 20 30 D8           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
  5845 00:D74B: A9 12              LDA   #<LAB_259C        ; set 1 pointer low byte
  5846 00:D74D: A0 E2              LDY   #>LAB_259C        ; set 1 pointer high byte
  5847 00:D74F: 20 D2 D5           JSR   LAB_2455          ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
  5848 00:D752: A9 8E              LDA   #<LAB_25A0        ; set pointer low byte to counter
  5849 00:D754: A0 E1              LDY   #>LAB_25A0        ; set pointer high byte to counter
  5850 00:D756: 20 80 DC           JSR   LAB_2B6E          ; ^2 then series evaluation
  5851 00:D759: A9 A3              LDA   #<LAB_25B5        ; set -0.5 pointer low byte
  5852 00:D75B: A0 E1              LDY   #>LAB_25B5        ; set -0.5 pointer high byte
  5853 00:D75D: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1
  5854 00:D760: 68                 PLA                     ; restore FAC1 exponent
  5855 00:D761: 20 74 DA           JSR   LAB_2912          ; evaluate new ASCII digit
  5856 00:D764: A9 A7              LDA   #<LAB_25B9        ; set LOG(2) pointer low byte
  5857 00:D766: A0 E1              LDY   #>LAB_25B9        ; set LOG(2) pointer high byte
  5858                        
  5859                        ; do convert AY, FCA1*(AY)
  5860                        
  5861                        LAB_25FB
  5862 00:D768: 20 BA D7           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5863                        LAB_MULTIPLY
  5864 00:D76B: F0 4C              BEQ   LAB_264C          ; exit if zero
  5865                        
  5866 00:D76D: 20 E0 D7           JSR   LAB_2673          ; test and adjust accumulators
  5867 00:D770: A9 00              LDA   #$00              ; clear A
  5868 00:D772: 85 75              STA   FACt_1            ; clear temp mantissa1
  5869 00:D774: 85 76              STA   FACt_2            ; clear temp mantissa2
  5870 00:D776: 85 77              STA   FACt_3            ; clear temp mantissa3
  5871 00:D778: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5872 00:D77A: 20 8F D7           JSR   LAB_2622          ; go do shift/add FAC2
  5873 00:D77D: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5874 00:D77F: 20 8F D7           JSR   LAB_2622          ; go do shift/add FAC2
  5875 00:D782: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5876 00:D784: 20 8F D7           JSR   LAB_2622          ; go do shift/add FAC2
  5877 00:D787: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5878 00:D789: 20 95 D7           JSR   LAB_2627          ; go do shift/add FAC2
  5879 00:D78C: 4C 9D D8           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  5880                        
  5881                        LAB_2622
  5882 00:D78F: D0 04              BNE   LAB_2627          ; branch if byte <> zero
  5883                        ; *** begin patch  2.22p5.6  floating point multiply rounding bug
  5884                        ; *** replace
  5885                        ;      JMP   LAB_2569          ; shift FCAtemp << A+8 times
  5886                        ;
  5887                        ;                              ; else do shift and add
  5888                        ;LAB_2627
  5889                        ;      LSR                     ; shift byte
  5890                        ;      ORA   #$80              ; set top bit (mark for 8 times)
  5891                        ; *** with
  5892 00:D791: 38                 SEC
  5893 00:D792: 4C F7 D6           JMP   LAB_2569          ; shift FACtemp << A+8 times
  5894                        
  5895                                                      ; else do shift and add
  5896                        LAB_2627
  5897 00:D795: 38                 SEC                     ; set top bit (mark for 8 times)
  5898 00:D796: 6A                 ROR
  5899                        ; *** end patch    2.22p5.6  floating point multiply rounding bug
  5900                        LAB_262A
  5901 00:D797: A8                 TAY                     ; copy result
  5902 00:D798: 90 13              BCC   LAB_2640          ; skip next if bit was zero
  5903                        
  5904 00:D79A: 18                 CLC                     ; clear carry for add
  5905 00:D79B: A5 77              LDA   FACt_3            ; get temp mantissa3
  5906 00:D79D: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5907 00:D79F: 85 77              STA   FACt_3            ; save temp mantissa3
  5908 00:D7A1: A5 76              LDA   FACt_2            ; get temp mantissa2
  5909 00:D7A3: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5910 00:D7A5: 85 76              STA   FACt_2            ; save temp mantissa2
  5911 00:D7A7: A5 75              LDA   FACt_1            ; get temp mantissa1
  5912 00:D7A9: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5913 00:D7AB: 85 75              STA   FACt_1            ; save temp mantissa1
  5914                        LAB_2640
  5915 00:D7AD: 66 75              ROR   FACt_1            ; shift temp mantissa1
  5916 00:D7AF: 66 76              ROR   FACt_2            ; shift temp mantissa2
  5917 00:D7B1: 66 77              ROR   FACt_3            ; shift temp mantissa3
  5918 00:D7B3: 66 B9              ROR   FAC1_r            ; shift temp rounding byte
  5919 00:D7B5: 98                 TYA                     ; get byte back
  5920 00:D7B6: 4A                 LSR                     ; shift byte
  5921 00:D7B7: D0 DE              BNE   LAB_262A          ; loop if all bits not done
  5922                        
  5923                        LAB_264C
  5924 00:D7B9: 60                 RTS
  5925                        
  5926                        ; unpack memory (AY) into FAC2
  5927                        
  5928                        LAB_264D
  5929 00:D7BA: 85 71              STA   ut1_pl            ; save pointer low byte
  5930 00:D7BC: 84 72              STY   ut1_ph            ; save pointer high byte
  5931 00:D7BE: A0 03              LDY   #$03              ; 4 bytes to get (0-3)
  5932 00:D7C0: B1 71              LDA   (ut1_pl),Y        ; get mantissa3
  5933 00:D7C2: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  5934 00:D7C4: 88                 DEY                     ; decrement index
  5935 00:D7C5: B1 71              LDA   (ut1_pl),Y        ; get mantissa2
  5936 00:D7C7: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  5937 00:D7C9: 88                 DEY                     ; decrement index
  5938 00:D7CA: B1 71              LDA   (ut1_pl),Y        ; get mantissa1+sign
  5939 00:D7CC: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  5940 00:D7CE: 45 B0              EOR   FAC1_s            ; EOR with FAC1 sign (b7)
  5941 00:D7D0: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5942 00:D7D2: A5 B7              LDA   FAC2_s            ; recover FAC2 sign (b7)
  5943 00:D7D4: 09 80              ORA   #$80              ; set 1xxx xxx (set normal bit)
  5944 00:D7D6: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  5945 00:D7D8: 88                 DEY                     ; decrement index
  5946 00:D7D9: B1 71              LDA   (ut1_pl),Y        ; get exponent byte
  5947 00:D7DB: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  5948 00:D7DD: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5949 00:D7DF: 60                 RTS
  5950                        
  5951                        ; test and adjust accumulators
  5952                        
  5953                        LAB_2673
  5954 00:D7E0: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5955                        LAB_2675
  5956 00:D7E2: F0 1D              BEQ   LAB_2696          ; branch if FAC2 = $00 (handle underflow)
  5957                        
  5958 00:D7E4: 18                 CLC                     ; clear carry for add
  5959 00:D7E5: 65 AC              ADC   FAC1_e            ; add FAC1 exponent
  5960 00:D7E7: 90 04              BCC   LAB_2680          ; branch if sum of exponents <$0100
  5961                        
  5962 00:D7E9: 30 31              BMI   LAB_269B          ; do overflow error
  5963                        
  5964 00:D7EB: 18                 CLC                     ; clear carry for the add
  5965 00:D7EC: 2C                 .byte $2C               ; makes next line BIT $1410
  5966                        LAB_2680
  5967 00:D7ED: 10 12              BPL   LAB_2696          ; if +ve go handle underflow
  5968                        
  5969 00:D7EF: 69 80              ADC   #$80              ; adjust exponent
  5970 00:D7F1: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5971 00:D7F3: D0 03              BNE   LAB_268B          ; branch if not zero
  5972                        
  5973 00:D7F5: 4C 83 D6           JMP   LAB_24F5          ; save FAC1 sign and return
  5974                        
  5975                        LAB_268B
  5976 00:D7F8: A5 B8              LDA   FAC_sc            ; get sign compare (FAC1 EOR FAC2)
  5977 00:D7FA: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5978                        LAB_268F
  5979 00:D7FC: 60                 RTS
  5980                        
  5981                        ; handle overflow and underflow
  5982                        
  5983                        LAB_2690
  5984 00:D7FD: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5985 00:D7FF: 10 1B              BPL   LAB_269B          ; do overflow error
  5986                        
  5987                                                      ; handle underflow
  5988                        LAB_2696
  5989 00:D801: 68                 PLA                     ; pop return address low byte
  5990 00:D802: 68                 PLA                     ; pop return address high byte
  5991 00:D803: 4C 7F D6           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5992                        
  5993                        ; multiply by 10
  5994                        
  5995                        LAB_269E
  5996 00:D806: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  5997 00:D809: AA                 TAX                     ; copy exponent (set the flags)
  5998 00:D80A: F0 F0              BEQ   LAB_268F          ; exit if zero
  5999                        
  6000 00:D80C: 18                 CLC                     ; clear carry for add
  6001 00:D80D: 69 02              ADC   #$02              ; add two to exponent (*4)
  6002 00:D80F: B0 0B              BCS   LAB_269B          ; do overflow error if > $FF
  6003                        
  6004 00:D811: A2 00              LDX   #$00              ; clear byte
  6005 00:D813: 86 B8              STX   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  6006 00:D815: 20 0A D6           JSR   LAB_247C          ; add FAC2 to FAC1 (*5)
  6007 00:D818: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*10)
  6008 00:D81A: D0 E0              BNE   LAB_268F          ; if non zero just do RTS
  6009                        
  6010                        LAB_269B
  6011 00:D81C: 4C F2 D6           JMP   LAB_2564          ; do overflow error and warm start
  6012                        
  6013                        ; divide by 10
  6014                        
  6015                        LAB_26B9
  6016 00:D81F: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6017 00:D822: A9 23              LDA   #<LAB_26B5        ; set pointer to 10d low addr
  6018 00:D824: A0 E2              LDY   #>LAB_26B5        ; set pointer to 10d high addr
  6019 00:D826: A2 00              LDX   #$00              ; clear sign
  6020                        
  6021                        ; divide by (AY) (X=sign)
  6022                        
  6023                        LAB_26C2
  6024 00:D828: 86 B8              STX   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  6025 00:D82A: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  6026 00:D82D: 4C 33 D8           JMP   LAB_DIVIDE        ; do FAC2/FAC1
  6027                        
  6028                                                      ; Perform divide-by
  6029                        ; convert AY and do (AY)/FAC1
  6030                        
  6031                        LAB_26CA
  6032 00:D830: 20 BA D7           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  6033                        
  6034                                                      ; Perform divide-into
  6035                        LAB_DIVIDE
  6036 00:D833: F0 63              BEQ   LAB_2737          ; if zero go do /0 error
  6037                        
  6038 00:D835: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  6039 00:D838: A9 00              LDA   #$00              ; clear A
  6040 00:D83A: 38                 SEC                     ; set carry for subtract
  6041 00:D83B: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent (2s complement)
  6042 00:D83D: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6043 00:D83F: 20 E0 D7           JSR   LAB_2673          ; test and adjust accumulators
  6044 00:D842: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  6045 00:D844: F0 D6              BEQ   LAB_269B          ; if zero do overflow error
  6046                        
  6047 00:D846: A2 FF              LDX   #$FF              ; set index for pre increment
  6048 00:D848: A9 01              LDA   #$01              ; set bit to flag byte save
  6049                        LAB_26E4
  6050 00:D84A: A4 B4              LDY   FAC2_1            ; get FAC2 mantissa1
  6051 00:D84C: C4 AD              CPY   FAC1_1            ; compare FAC1 mantissa1
  6052 00:D84E: D0 0A              BNE   LAB_26F4          ; branch if <>
  6053                        
  6054 00:D850: A4 B5              LDY   FAC2_2            ; get FAC2 mantissa2
  6055 00:D852: C4 AE              CPY   FAC1_2            ; compare FAC1 mantissa2
  6056 00:D854: D0 04              BNE   LAB_26F4          ; branch if <>
  6057                        
  6058 00:D856: A4 B6              LDY   FAC2_3            ; get FAC2 mantissa3
  6059 00:D858: C4 AF              CPY   FAC1_3            ; compare FAC1 mantissa3
  6060                        LAB_26F4
  6061 00:D85A: 08                 PHP                     ; save FAC2-FAC1 compare status
  6062 00:D85B: 2A                 ROL                     ; shift the result byte
  6063 00:D85C: 90 0E              BCC   LAB_2702          ; if no carry skip the byte save
  6064                        
  6065 00:D85E: A0 01              LDY   #$01              ; set bit to flag byte save
  6066 00:D860: E8                 INX                     ; else increment the index to FACt
  6067 00:D861: E0 02              CPX   #$02              ; compare with the index to FACt_3
  6068 00:D863: 30 04              BMI   LAB_2701          ; if not last byte just go save it
  6069                        
  6070 00:D865: D0 28              BNE   LAB_272B          ; if all done go save FAC1 rounding byte, normalise and
  6071                                                      ; return
  6072                        
  6073 00:D867: A0 40              LDY   #$40              ; set bit to flag byte save for the rounding byte
  6074                        LAB_2701
  6075 00:D869: 95 75              STA   FACt_1,X          ; write result byte to FACt_1 + index
  6076 00:D86B: 98                 TYA                     ; copy the next save byte flag
  6077                        LAB_2702
  6078 00:D86C: 28                 PLP                     ; restore FAC2-FAC1 compare status
  6079 00:D86D: 90 14              BCC   LAB_2704          ; if FAC2 < FAC1 then skip the subtract
  6080                        
  6081 00:D86F: A8                 TAY                     ; save FAC2-FAC1 compare status
  6082 00:D870: A5 B6              LDA   FAC2_3            ; get FAC2 mantissa3
  6083 00:D872: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6084 00:D874: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  6085 00:D876: A5 B5              LDA   FAC2_2            ; get FAC2 mantissa2
  6086 00:D878: E5 AE              SBC   FAC1_2            ; subtract FAC1 mantissa2
  6087 00:D87A: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  6088 00:D87C: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  6089 00:D87E: E5 AD              SBC   FAC1_1            ; subtract FAC1 mantissa1
  6090 00:D880: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  6091 00:D882: 98                 TYA                     ; restore FAC2-FAC1 compare status
  6092                        
  6093                                                      ; FAC2 = FAC2*2
  6094                        LAB_2704
  6095 00:D883: 06 B6              ASL   FAC2_3            ; shift FAC2 mantissa3
  6096 00:D885: 26 B5              ROL   FAC2_2            ; shift FAC2 mantissa2
  6097 00:D887: 26 B4              ROL   FAC2_1            ; shift FAC2 mantissa1
  6098 00:D889: B0 CF              BCS   LAB_26F4          ; loop with no compare
  6099                        
  6100 00:D88B: 30 BD              BMI   LAB_26E4          ; loop with compare
  6101                        
  6102 00:D88D: 10 CB              BPL   LAB_26F4          ; loop always with no compare
  6103                        
  6104                        ; do A<<6, save as FAC1 rounding byte, normalise and return
  6105                        
  6106                        LAB_272B
  6107 00:D88F: 4A                 LSR                     ; shift b1 - b0 ..
  6108 00:D890: 6A                 ROR                     ; ..
  6109 00:D891: 6A                 ROR                     ; .. to b7 - b6
  6110 00:D892: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  6111 00:D894: 28                 PLP                     ; dump FAC2-FAC1 compare status
  6112 00:D895: 4C 9D D8           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  6113                        
  6114                        ; do "Divide by zero" error
  6115                        
  6116                        LAB_2737
  6117 00:D898: A2 14              LDX   #$14              ; error code $14 ("Divide by zero" error)
  6118 00:D89A: 4C 61 C1           JMP   LAB_XERR          ; do error #X, then warm start
  6119                        
  6120                        ; copy temp to FAC1 and normalise
  6121                        
  6122                        LAB_273C
  6123 00:D89D: A5 75              LDA   FACt_1            ; get temp mantissa1
  6124 00:D89F: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6125 00:D8A1: A5 76              LDA   FACt_2            ; get temp mantissa2
  6126 00:D8A3: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6127 00:D8A5: A5 77              LDA   FACt_3            ; get temp mantissa3
  6128 00:D8A7: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6129 00:D8A9: 4C 63 D6           JMP   LAB_24D5          ; normalise FAC1 and return
  6130                        
  6131                        ; unpack memory (AY) into FAC1
  6132                        
  6133                        LAB_UFAC
  6134 00:D8AC: 85 71              STA   ut1_pl            ; save pointer low byte
  6135 00:D8AE: 84 72              STY   ut1_ph            ; save pointer high byte
  6136 00:D8B0: A0 03              LDY   #$03              ; 4 bytes to do
  6137 00:D8B2: B1 71              LDA   (ut1_pl),Y        ; get last byte
  6138 00:D8B4: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6139 00:D8B6: 88                 DEY                     ; decrement index
  6140 00:D8B7: B1 71              LDA   (ut1_pl),Y        ; get last-1 byte
  6141 00:D8B9: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6142 00:D8BB: 88                 DEY                     ; decrement index
  6143 00:D8BC: B1 71              LDA   (ut1_pl),Y        ; get second byte
  6144 00:D8BE: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6145 00:D8C0: 09 80              ORA   #$80              ; set 1xxx xxxx (add normal bit)
  6146 00:D8C2: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6147 00:D8C4: 88                 DEY                     ; decrement index
  6148 00:D8C5: B1 71              LDA   (ut1_pl),Y        ; get first byte (exponent)
  6149 00:D8C7: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6150 00:D8C9: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6151 00:D8CB: 60                 RTS
  6152                        
  6153                        ; pack FAC1 into Adatal
  6154                        
  6155                        LAB_276E
  6156 00:D8CC: A2 A4              LDX   #<Adatal          ; set pointer low byte
  6157                        LAB_2770
  6158 00:D8CE: A0 00              LDY   #>Adatal          ; set pointer high byte
  6159 00:D8D0: F0 04              BEQ   LAB_2778          ; pack FAC1 into (XY) and return
  6160                        
  6161                        ; pack FAC1 into (Lvarpl)
  6162                        
  6163                        LAB_PFAC
  6164 00:D8D2: A6 97              LDX   Lvarpl            ; get destination pointer low byte
  6165 00:D8D4: A4 98              LDY   Lvarph            ; get destination pointer high byte
  6166                        
  6167                        ; pack FAC1 into (XY)
  6168                        
  6169                        LAB_2778
  6170 00:D8D6: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  6171 00:D8D9: 86 71              STX   ut1_pl            ; save pointer low byte
  6172 00:D8DB: 84 72              STY   ut1_ph            ; save pointer high byte
  6173 00:D8DD: A0 03              LDY   #$03              ; set index
  6174 00:D8DF: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6175 00:D8E1: 91 71              STA   (ut1_pl),Y        ; store in destination
  6176 00:D8E3: 88                 DEY                     ; decrement index
  6177 00:D8E4: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6178 00:D8E6: 91 71              STA   (ut1_pl),Y        ; store in destination
  6179 00:D8E8: 88                 DEY                     ; decrement index
  6180 00:D8E9: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6181 00:D8EB: 09 7F              ORA   #$7F              ; set bits x111 1111
  6182 00:D8ED: 25 AD              AND   FAC1_1            ; AND in FAC1 mantissa1
  6183 00:D8EF: 91 71              STA   (ut1_pl),Y        ; store in destination
  6184 00:D8F1: 88                 DEY                     ; decrement index
  6185 00:D8F2: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6186 00:D8F4: 91 71              STA   (ut1_pl),Y        ; store in destination
  6187 00:D8F6: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6188 00:D8F8: 60                 RTS
  6189                        
  6190                        ; round and copy FAC1 to FAC2
  6191                        
  6192                        LAB_27AB
  6193 00:D8F9: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  6194                        
  6195                        ; copy FAC1 to FAC2
  6196                        
  6197                        LAB_27AE
  6198 00:D8FC: A2 05              LDX   #$05              ; 5 bytes to copy
  6199                        LAB_27B0
  6200 00:D8FE: B5 AB              LDA   FAC1_e-1,X        ; get byte from FAC1,X
  6201 00:D900: 95 B2              STA   FAC1_o,X          ; save byte at FAC2,X
  6202 00:D902: CA                 DEX                     ; decrement count
  6203 00:D903: D0 F9              BNE   LAB_27B0          ; loop if not all done
  6204                        
  6205 00:D905: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  6206                        LAB_27B9
  6207 00:D907: 60                 RTS
  6208                        
  6209                        ; round FAC1
  6210                        
  6211                        LAB_27BA
  6212 00:D908: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6213 00:D90A: F0 FB              BEQ   LAB_27B9          ; exit if zero
  6214                        
  6215 00:D90C: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  6216 00:D90E: 90 F7              BCC   LAB_27B9          ; exit if no overflow
  6217                        
  6218                        ; round FAC1 (no check)
  6219                        
  6220                        LAB_27C2
  6221 00:D910: 20 E7 D6           JSR   LAB_2559          ; increment FAC1 mantissa
  6222 00:D913: D0 F2              BNE   LAB_27B9          ; branch if no overflow
  6223                        
  6224 00:D915: 4C B8 D6           JMP   LAB_252A          ; normalise FAC1 for C=1 and return
  6225                        
  6226                        ; get FAC1 sign
  6227                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6228                        
  6229                        LAB_27CA
  6230 00:D918: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6231 00:D91A: F0 09              BEQ   LAB_27D7          ; exit if zero (already correct SGN(0)=0)
  6232                        
  6233                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6234                        ; no = 0 check
  6235                        
  6236                        LAB_27CE
  6237 00:D91C: A5 B0              LDA   FAC1_s            ; else get FAC1 sign (b7)
  6238                        
  6239                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6240                        ; no = 0 check, sign in A
  6241                        
  6242                        LAB_27D0
  6243 00:D91E: 2A                 ROL                     ; move sign bit to carry
  6244 00:D91F: A9 FF              LDA   #$FF              ; set byte for -ve result
  6245 00:D921: B0 02              BCS   LAB_27D7          ; return if sign was set (-ve)
  6246                        
  6247 00:D923: A9 01              LDA   #$01              ; else set byte for +ve result
  6248                        LAB_27D7
  6249 00:D925: 60                 RTS
  6250                        
  6251                        ; perform SGN()
  6252                        
  6253                        LAB_SGN
  6254 00:D926: 20 18 D9           JSR   LAB_27CA          ; get FAC1 sign
  6255                                                      ; return A=$FF/-ve A=$01/+ve
  6256                        ; save A as integer byte
  6257                        
  6258                        LAB_27DB
  6259 00:D929: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6260 00:D92B: A9 00              LDA   #$00              ; clear A
  6261 00:D92D: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6262 00:D92F: A2 88              LDX   #$88              ; set exponent
  6263                        
  6264                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6265                        
  6266                        LAB_27E3
  6267 00:D931: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6268 00:D933: 49 FF              EOR   #$FF              ; complement it
  6269 00:D935: 2A                 ROL                     ; sign bit into carry
  6270                        
  6271                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6272                        
  6273                        LAB_STFA
  6274 00:D936: A9 00              LDA   #$00              ; clear A
  6275 00:D938: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6276 00:D93A: 86 AC              STX   FAC1_e            ; set FAC1 exponent
  6277 00:D93C: 85 B9              STA   FAC1_r            ; clear FAC1 rounding byte
  6278 00:D93E: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6279 00:D940: 4C 5E D6           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6280                        
  6281                        ; perform ABS()
  6282                        
  6283                        LAB_ABS
  6284 00:D943: 46 B0              LSR   FAC1_s            ; clear FAC1 sign (put zero in b7)
  6285 00:D945: 60                 RTS
  6286                        
  6287                        ; compare FAC1 with (AY)
  6288                        ; returns A=$00 if FAC1 = (AY)
  6289                        ; returns A=$01 if FAC1 > (AY)
  6290                        ; returns A=$FF if FAC1 < (AY)
  6291                        
  6292                        LAB_27F8
  6293 00:D946: 85 73              STA   ut2_pl            ; save pointer low byte
  6294                        LAB_27FA
  6295 00:D948: 84 74              STY   ut2_ph            ; save pointer high byte
  6296 00:D94A: A0 00              LDY   #$00              ; clear index
  6297 00:D94C: B1 73              LDA   (ut2_pl),Y        ; get exponent
  6298 00:D94E: C8                 INY                     ; increment index
  6299 00:D94F: AA                 TAX                     ; copy (AY) exponent to X
  6300 00:D950: F0 C6              BEQ   LAB_27CA          ; branch if (AY) exponent=0 and get FAC1 sign
  6301                                                      ; A=FF,C=1/-ve A=01,C=0/+ve
  6302                        
  6303 00:D952: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6304 00:D954: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  6305 00:D956: 30 C4              BMI   LAB_27CE          ; if signs <> do return A=FF,C=1/-ve
  6306                                                      ; A=01,C=0/+ve and return
  6307                        
  6308 00:D958: E4 AC              CPX   FAC1_e            ; compare (AY) exponent with FAC1 exponent
  6309 00:D95A: D0 1A              BNE   LAB_2828          ; branch if different
  6310                        
  6311 00:D95C: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6312 00:D95E: 09 80              ORA   #$80              ; normalise top bit
  6313 00:D960: C5 AD              CMP   FAC1_1            ; compare with FAC1 mantissa1
  6314 00:D962: D0 12              BNE   LAB_2828          ; branch if different
  6315                        
  6316 00:D964: C8                 INY                     ; increment index
  6317 00:D965: B1 73              LDA   (ut2_pl),Y        ; get mantissa2
  6318 00:D967: C5 AE              CMP   FAC1_2            ; compare with FAC1 mantissa2
  6319 00:D969: D0 0B              BNE   LAB_2828          ; branch if different
  6320                        
  6321 00:D96B: C8                 INY                     ; increment index
  6322 00:D96C: A9 7F              LDA   #$7F              ; set for 1/2 value rounding byte
  6323 00:D96E: C5 B9              CMP   FAC1_r            ; compare with FAC1 rounding byte (set carry)
  6324 00:D970: B1 73              LDA   (ut2_pl),Y        ; get mantissa3
  6325 00:D972: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6326 00:D974: F0 28              BEQ   LAB_2850          ; exit if mantissa3 equal
  6327                        
  6328                        ; gets here if number <> FAC1
  6329                        
  6330                        LAB_2828
  6331 00:D976: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6332 00:D978: 90 02              BCC   LAB_282E          ; branch if FAC1 > (AY)
  6333                        
  6334 00:D97A: 49 FF              EOR   #$FF              ; else toggle FAC1 sign
  6335                        LAB_282E
  6336 00:D97C: 4C 1E D9           JMP   LAB_27D0          ; return A=FF,C=1/-ve A=01,C=0/+ve
  6337                        
  6338                        ; convert FAC1 floating-to-fixed
  6339                        
  6340                        LAB_2831
  6341 00:D97F: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6342 00:D981: F0 4A              BEQ   LAB_287F          ; if zero go clear FAC1 and return
  6343                        
  6344 00:D983: 38                 SEC                     ; set carry for subtract
  6345 00:D984: E9 98              SBC   #$98              ; subtract maximum integer range exponent
  6346 00:D986: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6347 00:D988: 10 09              BPL   LAB_2845          ; branch if FAC1 +ve
  6348                        
  6349                                                      ; FAC1 was -ve
  6350 00:D98A: AA                 TAX                     ; copy subtracted exponent
  6351 00:D98B: A9 FF              LDA   #$FF              ; overflow for -ve number
  6352 00:D98D: 85 B2              STA   FAC1_o            ; set FAC1 overflow byte
  6353 00:D98F: 20 CB D6           JSR   LAB_253D          ; twos complement FAC1 mantissa
  6354 00:D992: 8A                 TXA                     ; restore subtracted exponent
  6355                        LAB_2845
  6356 00:D993: A2 AC              LDX   #FAC1_e           ; set index to FAC1
  6357 00:D995: C9 F9              CMP   #$F9              ; compare exponent result
  6358 00:D997: 10 06              BPL   LAB_2851          ; if < 8 shifts shift FAC1 A times right and return
  6359                        
  6360 00:D999: 20 09 D7           JSR   LAB_257B          ; shift FAC1 A times right (> 8 shifts)
  6361 00:D99C: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6362                        LAB_2850
  6363 00:D99E: 60                 RTS
  6364                        
  6365                        ; shift FAC1 A times right
  6366                        
  6367                        LAB_2851
  6368 00:D99F: A8                 TAY                     ; copy shift count
  6369 00:D9A0: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6370 00:D9A2: 29 80              AND   #$80              ; mask sign bit only (x000 0000)
  6371 00:D9A4: 46 AD              LSR   FAC1_1            ; shift FAC1 mantissa1
  6372 00:D9A6: 05 AD              ORA   FAC1_1            ; OR sign in b7 FAC1 mantissa1
  6373 00:D9A8: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6374 00:D9AA: 20 20 D7           JSR   LAB_2592          ; shift FAC1 Y times right
  6375 00:D9AD: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6376 00:D9AF: 60                 RTS
  6377                        
  6378                        ; perform INT()
  6379                        
  6380                        LAB_INT
  6381 00:D9B0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6382 00:D9B2: C9 98              CMP   #$98              ; compare with max int
  6383 00:D9B4: B0 1E              BCS   LAB_2886          ; exit if >= (already int, too big for fractional part!)
  6384                        
  6385 00:D9B6: 20 7F D9           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6386 00:D9B9: 84 B9              STY   FAC1_r            ; save FAC1 rounding byte
  6387 00:D9BB: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6388 00:D9BD: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  6389 00:D9BF: 49 80              EOR   #$80              ; toggle FAC1 sign
  6390 00:D9C1: 2A                 ROL                     ; shift into carry
  6391 00:D9C2: A9 98              LDA   #$98              ; set new exponent
  6392 00:D9C4: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6393 00:D9C6: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6394 00:D9C8: 85 5B              STA   Temp3             ; save for EXP() function
  6395 00:D9CA: 4C 5E D6           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6396                        
  6397                        ; clear FAC1 and return
  6398                        
  6399                        LAB_287F
  6400 00:D9CD: 85 AD              STA   FAC1_1            ; clear FAC1 mantissa1
  6401 00:D9CF: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6402 00:D9D1: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6403 00:D9D3: A8                 TAY                     ; clear Y
  6404                        LAB_2886
  6405 00:D9D4: 60                 RTS
  6406                        
  6407                        ; get FAC1 from string
  6408                        ; this routine now handles hex and binary values from strings
  6409                        ; starting with "$" and "%" respectively
  6410                        
  6411                        LAB_2887
  6412 00:D9D5: A0 00              LDY   #$00              ; clear Y
  6413 00:D9D7: 84 5F              STY   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  6414 00:D9D9: A2 09              LDX   #$09              ; set index
  6415                        LAB_288B
  6416 00:D9DB: 94 A8              STY   numexp,X          ; clear byte
  6417 00:D9DD: CA                 DEX                     ; decrement index
  6418 00:D9DE: 10 FB              BPL   LAB_288B          ; loop until numexp to negnum (and FAC1) = $00
  6419                        
  6420 00:D9E0: 90 7F              BCC   LAB_28FE          ; branch if 1st character numeric
  6421                        
  6422                        ; get FAC1 from string .. first character wasn't numeric
  6423                        
  6424 00:D9E2: C9 2D              CMP   #'-'              ; else compare with "-"
  6425 00:D9E4: D0 04              BNE   LAB_289A          ; branch if not "-"
  6426                        
  6427 00:D9E6: 86 B1              STX   negnum            ; set flag for -ve number (X = $FF)
  6428 00:D9E8: F0 04              BEQ   LAB_289C          ; branch always (go scan and check for hex/bin)
  6429                        
  6430                        ; get FAC1 from string .. first character wasn't numeric or -
  6431                        
  6432                        LAB_289A
  6433 00:D9EA: C9 2B              CMP   #'+'              ; else compare with "+"
  6434 00:D9EC: D0 05              BNE   LAB_289D          ; branch if not "+" (go check for hex/bin)
  6435                        
  6436                        ; was "+" or "-" to start, so get next character
  6437                        
  6438                        LAB_289C
  6439 00:D9EE: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6440 00:D9F1: 90 6E              BCC   LAB_28FE          ; branch if numeric character
  6441                        
  6442                        ; code here for hex and binary numbers
  6443                        
  6444                        LAB_289D
  6445 00:D9F3: C9 24              CMP   #'$'              ; else compare with "$"
  6446 00:D9F5: D0 03              BNE   LAB_NHEX          ; branch if not "$"
  6447                        
  6448 00:D9F7: 4C 9F DE           JMP   LAB_CHEX          ; branch if "$"
  6449                        
  6450                        LAB_NHEX
  6451 00:D9FA: C9 25              CMP   #'%'              ; else compare with "%"
  6452 00:D9FC: D0 08              BNE   LAB_28A3          ; branch if not "%" (continue original code)
  6453                        
  6454 00:D9FE: 4C CD DE           JMP   LAB_CBIN          ; branch if "%"
  6455                        
  6456                        LAB_289E
  6457 00:DA01: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (ignore + or get next number)
  6458                        LAB_28A1
  6459 00:DA04: 90 5B              BCC   LAB_28FE          ; branch if numeric character
  6460                        
  6461                        ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
  6462                        
  6463                        LAB_28A3
  6464 00:DA06: C9 2E              CMP   #'.'              ; else compare with "."
  6465 00:DA08: F0 2E              BEQ   LAB_28D5          ; branch if "."
  6466                        
  6467                        ; get FAC1 from string .. character wasn't numeric, -, + or .
  6468                        
  6469 00:DA0A: C9 45              CMP   #'E'              ; else compare with "E"
  6470 00:DA0C: D0 30              BNE   LAB_28DB          ; branch if not "E"
  6471                        
  6472                                                      ; was "E" so evaluate exponential part
  6473 00:DA0E: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6474 00:DA11: 90 17              BCC   LAB_28C7          ; branch if numeric character
  6475                        
  6476 00:DA13: C9 B7              CMP   #TK_MINUS         ; else compare with token for -
  6477 00:DA15: F0 0E              BEQ   LAB_28C2          ; branch if token for -
  6478                        
  6479 00:DA17: C9 2D              CMP   #'-'              ; else compare with "-"
  6480 00:DA19: F0 0A              BEQ   LAB_28C2          ; branch if "-"
  6481                        
  6482 00:DA1B: C9 B6              CMP   #TK_PLUS          ; else compare with token for +
  6483 00:DA1D: F0 08              BEQ   LAB_28C4          ; branch if token for +
  6484                        
  6485 00:DA1F: C9 2B              CMP   #'+'              ; else compare with "+"
  6486 00:DA21: F0 04              BEQ   LAB_28C4          ; branch if "+"
  6487                        
  6488 00:DA23: D0 07              BNE   LAB_28C9          ; branch always
  6489                        
  6490                        LAB_28C2
  6491 00:DA25: 66 AB              ROR   expneg            ; set exponent -ve flag (C, which=1, into b7)
  6492                        LAB_28C4
  6493 00:DA27: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6494                        LAB_28C7
  6495 00:DA2A: 90 5B              BCC   LAB_2925          ; branch if numeric character
  6496                        
  6497                        LAB_28C9
  6498 00:DA2C: 24 AB              BIT   expneg            ; test exponent -ve flag
  6499 00:DA2E: 10 0E              BPL   LAB_28DB          ; if +ve go evaluate exponent
  6500                        
  6501                                                      ; else do exponent = -exponent 
  6502 00:DA30: A9 00              LDA   #$00              ; clear result
  6503 00:DA32: 38                 SEC                     ; set carry for subtract
  6504 00:DA33: E5 A9              SBC   expcnt            ; subtract exponent byte
  6505 00:DA35: 4C 40 DA           JMP   LAB_28DD          ; go evaluate exponent
  6506                        
  6507                        LAB_28D5
  6508 00:DA38: 66 AA              ROR   numdpf            ; set decimal point flag
  6509 00:DA3A: 24 AA              BIT   numdpf            ; test decimal point flag
  6510 00:DA3C: 50 C3              BVC   LAB_289E          ; branch if only one decimal point so far
  6511                        
  6512                                                      ; evaluate exponent
  6513                        LAB_28DB
  6514 00:DA3E: A5 A9              LDA   expcnt            ; get exponent count byte
  6515                        LAB_28DD
  6516 00:DA40: 38                 SEC                     ; set carry for subtract
  6517 00:DA41: E5 A8              SBC   numexp            ; subtract numerator exponent
  6518 00:DA43: 85 A9              STA   expcnt            ; save exponent count byte
  6519 00:DA45: F0 12              BEQ   LAB_28F6          ; branch if no adjustment
  6520                        
  6521 00:DA47: 10 09              BPL   LAB_28EF          ; else if +ve go do FAC1*10^expcnt
  6522                        
  6523                                                      ; else go do FAC1/10^(0-expcnt)
  6524                        LAB_28E6
  6525 00:DA49: 20 1F D8           JSR   LAB_26B9          ; divide by 10
  6526 00:DA4C: E6 A9              INC   expcnt            ; increment exponent count byte
  6527 00:DA4E: D0 F9              BNE   LAB_28E6          ; loop until all done
  6528                        
  6529 00:DA50: F0 07              BEQ   LAB_28F6          ; branch always
  6530                        
  6531                        LAB_28EF
  6532 00:DA52: 20 06 D8           JSR   LAB_269E          ; multiply by 10
  6533 00:DA55: C6 A9              DEC   expcnt            ; decrement exponent count byte
  6534 00:DA57: D0 F9              BNE   LAB_28EF          ; loop until all done
  6535                        
  6536                        LAB_28F6
  6537 00:DA59: A5 B1              LDA   negnum            ; get -ve flag
  6538 00:DA5B: 30 01              BMI   LAB_28FB          ; if -ve do - FAC1 and return
  6539                        
  6540 00:DA5D: 60                 RTS
  6541                        
  6542                        ; do - FAC1 and return
  6543                        
  6544                        LAB_28FB
  6545 00:DA5E: 4C 23 DC           JMP   LAB_GTHAN         ; do - FAC1 and return
  6546                        
  6547                        ; do unsigned FAC1*10+number
  6548                        
  6549                        LAB_28FE
  6550 00:DA61: 48                 PHA                     ; save character
  6551 00:DA62: 24 AA              BIT   numdpf            ; test decimal point flag
  6552 00:DA64: 10 02              BPL   LAB_2905          ; skip exponent increment if not set
  6553                        
  6554 00:DA66: E6 A8              INC   numexp            ; else increment number exponent
  6555                        LAB_2905
  6556 00:DA68: 20 06 D8           JSR   LAB_269E          ; multiply FAC1 by 10
  6557 00:DA6B: 68                 PLA                     ; restore character
  6558 00:DA6C: 29 0F              AND   #$0F              ; convert to binary
  6559 00:DA6E: 20 74 DA           JSR   LAB_2912          ; evaluate new ASCII digit
  6560 00:DA71: 4C 01 DA           JMP   LAB_289E          ; go do next character
  6561                        
  6562                        ; evaluate new ASCII digit
  6563                        
  6564                        LAB_2912
  6565 00:DA74: 48                 PHA                     ; save digit
  6566 00:DA75: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6567 00:DA78: 68                 PLA                     ; restore digit
  6568 00:DA79: 20 29 D9           JSR   LAB_27DB          ; save A as integer byte
  6569 00:DA7C: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6570 00:DA7E: 45 B0              EOR   FAC1_s            ; toggle with FAC1 sign (b7)
  6571 00:DA80: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  6572 00:DA82: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6573 00:DA84: 4C F0 D5           JMP   LAB_ADD           ; add FAC2 to FAC1 and return
  6574                        
  6575                        ; evaluate next character of exponential part of number
  6576                        
  6577                        LAB_2925
  6578 00:DA87: A5 A9              LDA   expcnt            ; get exponent count byte
  6579 00:DA89: C9 0A              CMP   #$0A              ; compare with 10 decimal
  6580 00:DA8B: 90 09              BCC   LAB_2934          ; branch if less
  6581                        
  6582 00:DA8D: A9 64              LDA   #$64              ; make all -ve exponents = -100 decimal (causes underflow)
  6583 00:DA8F: 24 AB              BIT   expneg            ; test exponent -ve flag
  6584 00:DA91: 30 0E              BMI   LAB_2942          ; branch if -ve
  6585                        
  6586 00:DA93: 4C F2 D6           JMP   LAB_2564          ; else do overflow error
  6587                        
  6588                        LAB_2934
  6589 00:DA96: 0A                 ASL                     ; * 2
  6590 00:DA97: 0A                 ASL                     ; * 4
  6591 00:DA98: 65 A9              ADC   expcnt            ; * 5
  6592 00:DA9A: 0A                 ASL                     ; * 10
  6593 00:DA9B: A0 00              LDY   #$00              ; set index
  6594 00:DA9D: 71 C3              ADC   (Bpntrl),Y        ; add character (will be $30 too much!)
  6595 00:DA9F: E9 2F              SBC   #'0'-1            ; convert character to binary
  6596                        LAB_2942
  6597 00:DAA1: 85 A9              STA   expcnt            ; save exponent count byte
  6598 00:DAA3: 4C 27 DA           JMP   LAB_28C4          ; go get next character
  6599                        
  6600                        ; print " in line [LINE #]"
  6601                        
  6602                        LAB_2953
  6603 00:DAA6: A9 1F              LDA   #<LAB_LMSG        ; point to " in line " message low byte
  6604 00:DAA8: A0 E8              LDY   #>LAB_LMSG        ; point to " in line " message high byte
  6605 00:DAAA: 20 F6 C8           JSR   LAB_18C3          ; print null terminated string from memory
  6606                        
  6607                                                      ; print Basic line #
  6608 00:DAAD: A5 88              LDA   Clineh            ; get current line high byte
  6609 00:DAAF: A6 87              LDX   Clinel            ; get current line low byte
  6610                        
  6611                        ; print XA as unsigned integer
  6612                        
  6613                        LAB_295E
  6614 00:DAB1: 85 AD              STA   FAC1_1            ; save low byte as FAC1 mantissa1
  6615 00:DAB3: 86 AE              STX   FAC1_2            ; save high byte as FAC1 mantissa2
  6616 00:DAB5: A2 90              LDX   #$90              ; set exponent to 16d bits
  6617 00:DAB7: 38                 SEC                     ; set integer is +ve flag
  6618 00:DAB8: 20 36 D9           JSR   LAB_STFA          ; set exp=X, clearFAC1 mantissa3 and normalise
  6619 00:DABB: A0 00              LDY   #$00              ; clear index
  6620 00:DABD: 98                 TYA                     ; clear A
  6621 00:DABE: 20 D1 DA           JSR   LAB_297B          ; convert FAC1 to string, skip sign character save
  6622 00:DAC1: 4C F6 C8           JMP   LAB_18C3          ; print null terminated string from memory and return
  6623                        
  6624                        ; convert FAC1 to ASCII string result in (AY)
  6625                        ; not any more, moved scratchpad to page 0
  6626                        
  6627                        LAB_296E
  6628 00:DAC4: A0 01              LDY   #$01              ; set index = 1
  6629 00:DAC6: A9 20              LDA   #$20              ; character = " " (assume +ve)
  6630 00:DAC8: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6631 00:DACA: 10 02              BPL   LAB_2978          ; branch if +ve
  6632                        
  6633 00:DACC: A9 2D              LDA   #$2D              ; else character = "-"
  6634                        LAB_2978
  6635 00:DACE: 99 EF 00           STA   Decss,Y           ; save leading character (" " or "-")
  6636                        LAB_297B
  6637 00:DAD1: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6638 00:DAD3: 84 BA              STY   Sendl             ; save index
  6639 00:DAD5: C8                 INY                     ; increment index
  6640 00:DAD6: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6641 00:DAD8: D0 05              BNE   LAB_2989          ; branch if FAC1<>0
  6642                        
  6643                                                      ; exponent was $00 so FAC1 is 0
  6644 00:DADA: A9 30              LDA   #'0'              ; set character = "0"
  6645 00:DADC: 4C DD DB           JMP   LAB_2A89          ; save last character, [EOT] and exit
  6646                        
  6647                                                      ; FAC1 is some non zero value
  6648                        LAB_2989
  6649 00:DADF: A9 00              LDA   #$00              ; clear (number exponent count)
  6650 00:DAE1: E0 81              CPX   #$81              ; compare FAC1 exponent with $81 (>1.00000)
  6651                        
  6652 00:DAE3: B0 09              BCS   LAB_299A          ; branch if FAC1=>1
  6653                        
  6654                                                      ; FAC1<1
  6655 00:DAE5: A9 B3              LDA   #<LAB_294F        ; set pointer low byte to 1,000,000
  6656 00:DAE7: A0 E1              LDY   #>LAB_294F        ; set pointer high byte to 1,000,000
  6657 00:DAE9: 20 68 D7           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6658 00:DAEC: A9 FA              LDA   #$FA              ; set number exponent count (-6)
  6659                        LAB_299A
  6660 00:DAEE: 85 A8              STA   numexp            ; save number exponent count
  6661                        LAB_299C
  6662 00:DAF0: A9 AF              LDA   #<LAB_294B        ; set pointer low byte to 999999.4375 (max before sci note)
  6663 00:DAF2: A0 E1              LDY   #>LAB_294B        ; set pointer high byte to 999999.4375
  6664 00:DAF4: 20 46 D9           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6665 00:DAF7: F0 1E              BEQ   LAB_29C3          ; exit if FAC1 = (AY)
  6666                        
  6667 00:DAF9: 10 12              BPL   LAB_29B9          ; go do /10 if FAC1 > (AY)
  6668                        
  6669                                                      ; FAC1 < (AY)
  6670                        LAB_29A7
  6671 00:DAFB: A9 AB              LDA   #<LAB_2947        ; set pointer low byte to 99999.9375
  6672 00:DAFD: A0 E1              LDY   #>LAB_2947        ; set pointer high byte to 99999.9375
  6673 00:DAFF: 20 46 D9           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6674 00:DB02: F0 02              BEQ   LAB_29B2          ; branch if FAC1 = (AY) (allow decimal places)
  6675                        
  6676 00:DB04: 10 0E              BPL   LAB_29C0          ; branch if FAC1 > (AY) (no decimal places)
  6677                        
  6678                                                      ; FAC1 <= (AY)
  6679                        LAB_29B2
  6680 00:DB06: 20 06 D8           JSR   LAB_269E          ; multiply by 10
  6681 00:DB09: C6 A8              DEC   numexp            ; decrement number exponent count
  6682 00:DB0B: D0 EE              BNE   LAB_29A7          ; go test again (branch always)
  6683                        
  6684                        LAB_29B9
  6685 00:DB0D: 20 1F D8           JSR   LAB_26B9          ; divide by 10
  6686 00:DB10: E6 A8              INC   numexp            ; increment number exponent count
  6687 00:DB12: D0 DC              BNE   LAB_299C          ; go test again (branch always)
  6688                        
  6689                        ; now we have just the digits to do
  6690                        
  6691                        LAB_29C0
  6692 00:DB14: 20 E9 D5           JSR   LAB_244E          ; add 0.5 to FAC1 (round FAC1)
  6693                        LAB_29C3
  6694 00:DB17: 20 7F D9           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6695 00:DB1A: A2 01              LDX   #$01              ; set default digits before dp = 1
  6696 00:DB1C: A5 A8              LDA   numexp            ; get number exponent count
  6697 00:DB1E: 18                 CLC                     ; clear carry for add
  6698 00:DB1F: 69 07              ADC   #$07              ; up to 6 digits before point
  6699 00:DB21: 30 09              BMI   LAB_29D8          ; if -ve then 1 digit before dp
  6700                        
  6701 00:DB23: C9 08              CMP   #$08              ; A>=8 if n>=1E6
  6702 00:DB25: B0 06              BCS   LAB_29D9          ; branch if >= $08
  6703                        
  6704                                                      ; carry is clear
  6705 00:DB27: 69 FF              ADC   #$FF              ; take 1 from digit count
  6706 00:DB29: AA                 TAX                     ; copy to A
  6707 00:DB2A: A9 02              LDA   #$02              ;.set exponent adjust
  6708                        LAB_29D8
  6709 00:DB2C: 38                 SEC                     ; set carry for subtract
  6710                        LAB_29D9
  6711 00:DB2D: E9 02              SBC   #$02              ; -2
  6712 00:DB2F: 85 A9              STA   expcnt            ;.save exponent adjust
  6713 00:DB31: 86 A8              STX   numexp            ; save digits before dp count
  6714 00:DB33: 8A                 TXA                     ; copy to A
  6715 00:DB34: F0 02              BEQ   LAB_29E4          ; branch if no digits before dp
  6716                        
  6717 00:DB36: 10 13              BPL   LAB_29F7          ; branch if digits before dp
  6718                        
  6719                        LAB_29E4
  6720 00:DB38: A4 BA              LDY   Sendl             ; get output string index
  6721 00:DB3A: A9 2E              LDA   #$2E              ; character "."
  6722 00:DB3C: C8                 INY                     ; increment index
  6723 00:DB3D: 99 EF 00           STA   Decss,Y           ; save to output string
  6724 00:DB40: 8A                 TXA                     ;.
  6725 00:DB41: F0 06              BEQ   LAB_29F5          ;.
  6726                        
  6727 00:DB43: A9 30              LDA   #'0'              ; character "0"
  6728 00:DB45: C8                 INY                     ; increment index
  6729 00:DB46: 99 EF 00           STA   Decss,Y           ; save to output string
  6730                        LAB_29F5
  6731 00:DB49: 84 BA              STY   Sendl             ; save output string index
  6732                        LAB_29F7
  6733 00:DB4B: A0 00              LDY   #$00              ; clear index (point to 100,000)
  6734 00:DB4D: A2 80              LDX   #$80              ; 
  6735                        LAB_29FB
  6736 00:DB4F: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6737 00:DB51: 18                 CLC                     ; clear carry for add
  6738 00:DB52: 79 29 E2           ADC   LAB_2A9C,Y        ; add -ve LSB
  6739 00:DB55: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6740 00:DB57: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6741 00:DB59: 79 28 E2           ADC   LAB_2A9B,Y        ; add -ve NMSB
  6742 00:DB5C: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6743 00:DB5E: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6744 00:DB60: 79 27 E2           ADC   LAB_2A9A,Y        ; add -ve MSB
  6745 00:DB63: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6746 00:DB65: E8                 INX                     ; 
  6747 00:DB66: B0 04              BCS   LAB_2A18          ; 
  6748                        
  6749 00:DB68: 10 E5              BPL   LAB_29FB          ; not -ve so try again
  6750                        
  6751 00:DB6A: 30 02              BMI   LAB_2A1A          ; 
  6752                        
  6753                        LAB_2A18
  6754 00:DB6C: 30 E1              BMI   LAB_29FB          ; 
  6755                        
  6756                        LAB_2A1A
  6757 00:DB6E: 8A                 TXA                     ; 
  6758 00:DB6F: 90 04              BCC   LAB_2A21          ; 
  6759                        
  6760 00:DB71: 49 FF              EOR   #$FF              ; 
  6761 00:DB73: 69 0A              ADC   #$0A              ; 
  6762                        LAB_2A21
  6763 00:DB75: 69 2F              ADC   #'0'-1            ; add "0"-1 to result
  6764 00:DB77: C8                 INY                     ; increment index ..
  6765 00:DB78: C8                 INY                     ; .. to next less ..
  6766 00:DB79: C8                 INY                     ; .. power of ten
  6767 00:DB7A: 84 95              STY   Cvaral            ; save as current var address low byte
  6768 00:DB7C: A4 BA              LDY   Sendl             ; get output string index
  6769 00:DB7E: C8                 INY                     ; increment output string index
  6770 00:DB7F: AA                 TAX                     ; copy character to X
  6771 00:DB80: 29 7F              AND   #$7F              ; mask out top bit
  6772 00:DB82: 99 EF 00           STA   Decss,Y           ; save to output string
  6773 00:DB85: C6 A8              DEC   numexp            ; decrement # of characters before the dp
  6774 00:DB87: D0 06              BNE   LAB_2A3B          ; branch if still characters to do
  6775                        
  6776                                                      ; else output the point
  6777 00:DB89: A9 2E              LDA   #$2E              ; character "."
  6778 00:DB8B: C8                 INY                     ; increment output string index
  6779 00:DB8C: 99 EF 00           STA   Decss,Y           ; save to output string
  6780                        LAB_2A3B
  6781 00:DB8F: 84 BA              STY   Sendl             ; save output string index
  6782 00:DB91: A4 95              LDY   Cvaral            ; get current var address low byte
  6783 00:DB93: 8A                 TXA                     ; get character back
  6784 00:DB94: 49 FF              EOR   #$FF              ; 
  6785 00:DB96: 29 80              AND   #$80              ; 
  6786 00:DB98: AA                 TAX                     ; 
  6787 00:DB99: C0 12              CPY   #$12              ; compare index with max
  6788 00:DB9B: D0 B2              BNE   LAB_29FB          ; loop if not max
  6789                        
  6790                                                      ; now remove trailing zeroes
  6791 00:DB9D: A4 BA              LDY   Sendl             ; get output string index
  6792                        LAB_2A4B
  6793 00:DB9F: B9 EF 00           LDA   Decss,Y           ; get character from output string
  6794 00:DBA2: 88                 DEY                     ; decrement output string index
  6795 00:DBA3: C9 30              CMP   #'0'              ; compare with "0"
  6796 00:DBA5: F0 F8              BEQ   LAB_2A4B          ; loop until non "0" character found
  6797                        
  6798 00:DBA7: C9 2E              CMP   #'.'              ; compare with "."
  6799 00:DBA9: F0 01              BEQ   LAB_2A58          ; branch if was dp
  6800                        
  6801                                                      ; restore last character
  6802 00:DBAB: C8                 INY                     ; increment output string index
  6803                        LAB_2A58
  6804 00:DBAC: A9 2B              LDA   #$2B              ; character "+"
  6805 00:DBAE: A6 A9              LDX   expcnt            ; get exponent count
  6806 00:DBB0: F0 2E              BEQ   LAB_2A8C          ; if zero go set null terminator and exit
  6807                        
  6808                                                      ; exponent isn't zero so write exponent
  6809 00:DBB2: 10 08              BPL   LAB_2A68          ; branch if exponent count +ve
  6810                        
  6811 00:DBB4: A9 00              LDA   #$00              ; clear A
  6812 00:DBB6: 38                 SEC                     ; set carry for subtract
  6813 00:DBB7: E5 A9              SBC   expcnt            ; subtract exponent count adjust (convert -ve to +ve)
  6814 00:DBB9: AA                 TAX                     ; copy exponent count to X
  6815 00:DBBA: A9 2D              LDA   #'-'              ; character "-"
  6816                        LAB_2A68
  6817 00:DBBC: 99 F1 00           STA   Decss+2,Y         ; save to output string
  6818 00:DBBF: A9 45              LDA   #$45              ; character "E"
  6819 00:DBC1: 99 F0 00           STA   Decss+1,Y         ; save exponent sign to output string
  6820 00:DBC4: 8A                 TXA                     ; get exponent count back
  6821 00:DBC5: A2 2F              LDX   #'0'-1            ; one less than "0" character
  6822 00:DBC7: 38                 SEC                     ; set carry for subtract
  6823                        LAB_2A74
  6824 00:DBC8: E8                 INX                     ; increment 10's character
  6825 00:DBC9: E9 0A              SBC   #$0A              ;.subtract 10 from exponent count
  6826 00:DBCB: B0 FB              BCS   LAB_2A74          ; loop while still >= 0
  6827                        
  6828 00:DBCD: 69 3A              ADC   #':'              ; add character ":" ($30+$0A, result is 10 less that value)
  6829 00:DBCF: 99 F3 00           STA   Decss+4,Y         ; save to output string
  6830 00:DBD2: 8A                 TXA                     ; copy 10's character
  6831 00:DBD3: 99 F2 00           STA   Decss+3,Y         ; save to output string
  6832 00:DBD6: A9 00              LDA   #$00              ; set null terminator
  6833 00:DBD8: 99 F4 00           STA   Decss+5,Y         ; save to output string
  6834 00:DBDB: F0 08              BEQ   LAB_2A91          ; go set string pointer (AY) and exit (branch always)
  6835                        
  6836                                                      ; save last character, [EOT] and exit
  6837                        LAB_2A89
  6838 00:DBDD: 99 EF 00           STA   Decss,Y           ; save last character to output string
  6839                        
  6840                                                      ; set null terminator and exit
  6841                        LAB_2A8C
  6842 00:DBE0: A9 00              LDA   #$00              ; set null terminator
  6843 00:DBE2: 99 F0 00           STA   Decss+1,Y         ; save after last character
  6844                        
  6845                                                      ; set string pointer (AY) and exit
  6846                        LAB_2A91
  6847 00:DBE5: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  6848 00:DBE7: A0 00              LDY   #>Decssp1         ; set result string high pointer
  6849 00:DBE9: 60                 RTS
  6850                        
  6851                        ; perform power function
  6852                        
  6853                        LAB_POWER
  6854 00:DBEA: F0 42              BEQ   LAB_EXP           ; go do  EXP()
  6855                        
  6856 00:DBEC: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  6857 00:DBEE: D0 03              BNE   LAB_2ABF          ; branch if FAC2<>0
  6858                        
  6859 00:DBF0: 4C 81 D6           JMP   LAB_24F3          ; clear FAC1 exponent and sign and return
  6860                        
  6861                        LAB_2ABF
  6862 00:DBF3: A2 9C              LDX   #<func_l          ; set destination pointer low byte
  6863 00:DBF5: A0 00              LDY   #>func_l          ; set destination pointer high byte
  6864 00:DBF7: 20 D6 D8           JSR   LAB_2778          ; pack FAC1 into (XY)
  6865 00:DBFA: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6866 00:DBFC: 10 0F              BPL   LAB_2AD9          ; branch if FAC2>0
  6867                        
  6868                                                      ; else FAC2 is -ve and can only be raised to an
  6869                                                      ; integer power which gives an x +j0 result
  6870 00:DBFE: 20 B0 D9           JSR   LAB_INT           ; perform INT
  6871 00:DC01: A9 9C              LDA   #<func_l          ; set source pointer low byte
  6872 00:DC03: A0 00              LDY   #>func_l          ; set source pointer high byte
  6873 00:DC05: 20 46 D9           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6874 00:DC08: D0 03              BNE   LAB_2AD9          ; branch if FAC1 <> (AY) to allow Function Call error
  6875                                                      ; this will leave FAC1 -ve and cause a Function Call
  6876                                                      ; error when LOG() is called
  6877                        
  6878 00:DC0A: 98                 TYA                     ; clear sign b7
  6879 00:DC0B: A4 5B              LDY   Temp3             ; save mantissa 3 from INT() function as sign in Y
  6880                                                      ; for possible later negation, b0
  6881                        LAB_2AD9
  6882 00:DC0D: 20 F4 D5           JSR   LAB_279D          ; save FAC1 sign and copy ABS(FAC2) to FAC1
  6883 00:DC10: 98                 TYA                     ; copy sign back ..
  6884 00:DC11: 48                 PHA                     ; .. and save it
  6885 00:DC12: 20 2A D7           JSR   LAB_LOG           ; do LOG(n)
  6886 00:DC15: A9 9C              LDA   #<garb_l          ; set pointer low byte
  6887 00:DC17: A0 00              LDY   #>garb_l          ; set pointer high byte
  6888 00:DC19: 20 68 D7           JSR   LAB_25FB          ; do convert AY, FCA1*(AY) (square the value)
  6889 00:DC1C: 20 2E DC           JSR   LAB_EXP           ; go do EXP(n)
  6890 00:DC1F: 68                 PLA                     ; pull sign from stack
  6891 00:DC20: 4A                 LSR                     ; b0 is to be tested, shift to Cb
  6892 00:DC21: 90 0A              BCC   LAB_2AF9          ; if no bit then exit
  6893                        
  6894                                                      ; Perform negation
  6895                        ; do - FAC1
  6896                        
  6897                        LAB_GTHAN
  6898 00:DC23: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6899 00:DC25: F0 06              BEQ   LAB_2AF9          ; exit if FAC1_e = $00
  6900                        
  6901 00:DC27: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6902 00:DC29: 49 FF              EOR   #$FF              ; complement it
  6903 00:DC2B: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6904                        LAB_2AF9
  6905 00:DC2D: 60                 RTS
  6906                        
  6907                        ; perform EXP()   (x^e)
  6908                        
  6909                        LAB_EXP
  6910 00:DC2E: A9 B7              LDA   #<LAB_2AFA        ; set 1.443 pointer low byte
  6911 00:DC30: A0 E1              LDY   #>LAB_2AFA        ; set 1.443 pointer high byte
  6912 00:DC32: 20 68 D7           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6913 00:DC35: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  6914 00:DC37: 69 50              ADC   #$50              ; +$50/$100
  6915 00:DC39: 90 03              BCC   LAB_2B2B          ; skip rounding if no carry
  6916                        
  6917 00:DC3B: 20 10 D9           JSR   LAB_27C2          ; round FAC1 (no check)
  6918                        LAB_2B2B
  6919 00:DC3E: 85 A3              STA   FAC2_r            ; save FAC2 rounding byte
  6920 00:DC40: 20 FC D8           JSR   LAB_27AE          ; copy FAC1 to FAC2
  6921 00:DC43: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6922 00:DC45: C9 88              CMP   #$88              ; compare with EXP limit (256d)
  6923 00:DC47: 90 03              BCC   LAB_2B39          ; branch if less
  6924                        
  6925                        LAB_2B36
  6926 00:DC49: 20 FD D7           JSR   LAB_2690          ; handle overflow and underflow
  6927                        LAB_2B39
  6928 00:DC4C: 20 B0 D9           JSR   LAB_INT           ; perform INT
  6929 00:DC4F: A5 5B              LDA   Temp3             ; get mantissa 3 from INT() function
  6930 00:DC51: 18                 CLC                     ; clear carry for add
  6931 00:DC52: 69 81              ADC   #$81              ; normalise +1
  6932 00:DC54: F0 F3              BEQ   LAB_2B36          ; if $00 go handle overflow
  6933                        
  6934 00:DC56: 38                 SEC                     ; set carry for subtract
  6935 00:DC57: E9 01              SBC   #$01              ; now correct for exponent
  6936 00:DC59: 48                 PHA                     ; save FAC2 exponent
  6937                        
  6938                                                      ; swap FAC1 and FAC2
  6939 00:DC5A: A2 04              LDX   #$04              ; 4 bytes to do
  6940                        LAB_2B49
  6941 00:DC5C: B5 B3              LDA   FAC2_e,X          ; get FAC2,X
  6942 00:DC5E: B4 AC              LDY   FAC1_e,X          ; get FAC1,X
  6943 00:DC60: 95 AC              STA   FAC1_e,X          ; save FAC1,X
  6944 00:DC62: 94 B3              STY   FAC2_e,X          ; save FAC2,X
  6945 00:DC64: CA                 DEX                     ; decrement count/index
  6946 00:DC65: 10 F5              BPL   LAB_2B49          ; loop if not all done
  6947                        
  6948 00:DC67: A5 A3              LDA   FAC2_r            ; get FAC2 rounding byte
  6949 00:DC69: 85 B9              STA   FAC1_r            ; save as FAC1 rounding byte
  6950 00:DC6B: 20 D5 D5           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  6951 00:DC6E: 20 23 DC           JSR   LAB_GTHAN         ; do - FAC1
  6952 00:DC71: A9 BB              LDA   #<LAB_2AFE        ; set counter pointer low byte
  6953 00:DC73: A0 E1              LDY   #>LAB_2AFE        ; set counter pointer high byte
  6954 00:DC75: 20 96 DC           JSR   LAB_2B84          ; go do series evaluation
  6955 00:DC78: A9 00              LDA   #$00              ; clear A
  6956 00:DC7A: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  6957 00:DC7C: 68                 PLA                     ;.get saved FAC2 exponent
  6958 00:DC7D: 4C E2 D7           JMP   LAB_2675          ; test and adjust accumulators and return
  6959                        
  6960                        ; ^2 then series evaluation
  6961                        
  6962                        LAB_2B6E
  6963 00:DC80: 85 BA              STA   Cptrl             ; save count pointer low byte
  6964 00:DC82: 84 BB              STY   Cptrh             ; save count pointer high byte
  6965 00:DC84: 20 CC D8           JSR   LAB_276E          ; pack FAC1 into Adatal
  6966 00:DC87: A9 A4              LDA   #<Adatal          ; set pointer low byte (Y already $00)
  6967 00:DC89: 20 68 D7           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6968 00:DC8C: 20 9A DC           JSR   LAB_2B88          ; go do series evaluation
  6969 00:DC8F: A9 A4              LDA   #<Adatal          ; pointer to original # low byte
  6970 00:DC91: A0 00              LDY   #>Adatal          ; pointer to original # high byte
  6971 00:DC93: 4C 68 D7           JMP   LAB_25FB          ; do convert AY, FCA1*(AY) and return
  6972                        
  6973                        ; series evaluation
  6974                        
  6975                        LAB_2B84
  6976 00:DC96: 85 BA              STA   Cptrl             ; save count pointer low byte
  6977 00:DC98: 84 BB              STY   Cptrh             ; save count pointer high byte
  6978                        LAB_2B88
  6979 00:DC9A: A2 A8              LDX   #<numexp          ; set pointer low byte
  6980 00:DC9C: 20 CE D8           JSR   LAB_2770          ; set pointer high byte and pack FAC1 into numexp
  6981 00:DC9F: B1 BA              LDA   (Cptrl),Y         ; get constants count
  6982 00:DCA1: 85 B1              STA   numcon            ; save constants count
  6983 00:DCA3: A4 BA              LDY   Cptrl             ; get count pointer low byte
  6984 00:DCA5: C8                 INY                     ; increment it (now constants pointer)
  6985 00:DCA6: 98                 TYA                     ; copy it
  6986 00:DCA7: D0 02              BNE   LAB_2B97          ; skip next if no overflow
  6987                        
  6988 00:DCA9: E6 BB              INC   Cptrh             ; else increment high byte
  6989                        LAB_2B97
  6990 00:DCAB: 85 BA              STA   Cptrl             ; save low byte
  6991 00:DCAD: A4 BB              LDY   Cptrh             ; get high byte
  6992                        LAB_2B9B
  6993 00:DCAF: 20 68 D7           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6994 00:DCB2: A5 BA              LDA   Cptrl             ; get constants pointer low byte
  6995 00:DCB4: A4 BB              LDY   Cptrh             ; get constants pointer high byte
  6996 00:DCB6: 18                 CLC                     ; clear carry for add
  6997 00:DCB7: 69 04              ADC   #$04              ; +4 to  low pointer (4 bytes per constant)
  6998 00:DCB9: 90 01              BCC   LAB_2BA8          ; skip next if no overflow
  6999                        
  7000 00:DCBB: C8                 INY                     ; increment high byte
  7001                        LAB_2BA8
  7002 00:DCBC: 85 BA              STA   Cptrl             ; save pointer low byte
  7003 00:DCBE: 84 BB              STY   Cptrh             ; save pointer high byte
  7004 00:DCC0: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1
  7005 00:DCC3: A9 A8              LDA   #<numexp          ; set pointer low byte to partial @ numexp
  7006 00:DCC5: A0 00              LDY   #>numexp          ; set pointer high byte to partial @ numexp
  7007 00:DCC7: C6 B1              DEC   numcon            ; decrement constants count
  7008 00:DCC9: D0 E4              BNE   LAB_2B9B          ; loop until all done
  7009                        
  7010 00:DCCB: 60                 RTS
  7011                        
  7012                        ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
  7013                        ; to get 19th next number in sequence after seed n. This version of the PRNG uses
  7014                        ; the Galois method and a sample of 65536 bytes produced gives the following values.
  7015                        
  7016                        ; Entropy = 7.997442 bits per byte
  7017                        ; Optimum compression would reduce these 65536 bytes by 0 percent
  7018                        
  7019                        ; Chi square distribution for 65536 samples is 232.01, and
  7020                        ; randomly would exceed this value 75.00 percent of the time
  7021                        
  7022                        ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
  7023                        ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
  7024                        ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
  7025                        
  7026                        LAB_RND
  7027 00:DCCC: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7028 00:DCCE: F0 07              BEQ   NextPRN           ; do next random # if zero
  7029                        
  7030                                                      ; else get seed into random number store
  7031 00:DCD0: A2 D8              LDX   #Rbyte4           ; set PRNG pointer low byte
  7032 00:DCD2: A0 00              LDY   #$00              ; set PRNG pointer high byte
  7033 00:DCD4: 20 D6 D8           JSR   LAB_2778          ; pack FAC1 into (XY)
  7034                        NextPRN
  7035 00:DCD7: A2 AF              LDX   #$AF              ; set EOR byte
  7036 00:DCD9: A0 13              LDY   #$13              ; do this nineteen times
  7037                        LoopPRN
  7038 00:DCDB: 06 D9              ASL   Rbyte1            ; shift PRNG most significant byte
  7039 00:DCDD: 26 DA              ROL   Rbyte2            ; shift PRNG middle byte
  7040 00:DCDF: 26 DB              ROL   Rbyte3            ; shift PRNG least significant byte
  7041 00:DCE1: 26 D8              ROL   Rbyte4            ; shift PRNG extra byte
  7042 00:DCE3: 90 05              BCC   Ninc1             ; branch if bit 32 clear
  7043                        
  7044 00:DCE5: 8A                 TXA                     ; set EOR byte
  7045 00:DCE6: 45 D9              EOR   Rbyte1            ; EOR PRNG extra byte
  7046 00:DCE8: 85 D9              STA   Rbyte1            ; save new PRNG extra byte
  7047                        Ninc1
  7048 00:DCEA: 88                 DEY                     ; decrement loop count
  7049 00:DCEB: D0 EE              BNE   LoopPRN           ; loop if not all done
  7050                        
  7051 00:DCED: A2 02              LDX   #$02              ; three bytes to copy
  7052                        CopyPRNG
  7053 00:DCEF: B5 D9              LDA   Rbyte1,X          ; get PRNG byte
  7054 00:DCF1: 95 AD              STA   FAC1_1,X          ; save FAC1 byte
  7055 00:DCF3: CA                 DEX
  7056 00:DCF4: 10 F9              BPL   CopyPRNG          ; loop if not complete
  7057                        
  7058 00:DCF6: A9 80              LDA   #$80              ; set the exponent
  7059 00:DCF8: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7060                        
  7061 00:DCFA: 0A                 ASL                     ; clear A
  7062 00:DCFB: 85 B0              STA   FAC1_s            ; save FAC1 sign
  7063                        
  7064 00:DCFD: 4C 63 D6           JMP   LAB_24D5          ; normalise FAC1 and return
  7065                        
  7066                        ; perform COS()
  7067                        
  7068                        LAB_COS
  7069 00:DD00: A9 D8              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7070 00:DD02: A0 E1              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7071 00:DD04: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1
  7072                        
  7073                        ; perform SIN()
  7074                        
  7075                        LAB_SIN
  7076 00:DD07: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7077 00:DD0A: A9 ED              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7078 00:DD0C: A0 E1              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7079 00:DD0E: A6 B7              LDX   FAC2_s            ; get FAC2 sign (b7)
  7080 00:DD10: 20 28 D8           JSR   LAB_26C2          ; divide by (AY) (X=sign)
  7081 00:DD13: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7082 00:DD16: 20 B0 D9           JSR   LAB_INT           ; perform INT
  7083 00:DD19: A9 00              LDA   #$00              ; clear byte
  7084 00:DD1B: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  7085 00:DD1D: 20 D5 D5           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  7086 00:DD20: A9 1F              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7087 00:DD22: A0 E2              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7088 00:DD24: 20 D2 D5           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7089 00:DD27: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7090 00:DD29: 48                 PHA                     ; save FAC1 sign
  7091 00:DD2A: 10 0D              BPL   LAB_2C35          ; branch if +ve
  7092                        
  7093                                                      ; FAC1 sign was -ve
  7094 00:DD2C: 20 E9 D5           JSR   LAB_244E          ; add 0.5 to FAC1
  7095 00:DD2F: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7096 00:DD31: 30 09              BMI   LAB_2C38          ; branch if -ve
  7097                        
  7098 00:DD33: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7099 00:DD35: 49 FF              EOR   #$FF              ; toggle flag
  7100 00:DD37: 85 63              STA   Cflag             ; save comparison evaluation flag
  7101                        LAB_2C35
  7102 00:DD39: 20 23 DC           JSR   LAB_GTHAN         ; do - FAC1
  7103                        LAB_2C38
  7104 00:DD3C: A9 1F              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7105 00:DD3E: A0 E2              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7106 00:DD40: 20 ED D5           JSR   LAB_246C          ; add (AY) to FAC1
  7107 00:DD43: 68                 PLA                     ; restore FAC1 sign
  7108 00:DD44: 10 03              BPL   LAB_2C45          ; branch if was +ve
  7109                        
  7110                                                      ; else correct FAC1
  7111 00:DD46: 20 23 DC           JSR   LAB_GTHAN         ; do - FAC1
  7112                        LAB_2C45
  7113 00:DD49: A9 DC              LDA   #<LAB_2C84        ; set pointer low byte to counter
  7114 00:DD4B: A0 E1              LDY   #>LAB_2C84        ; set pointer high byte to counter
  7115 00:DD4D: 4C 80 DC           JMP   LAB_2B6E          ; ^2 then series evaluation and return
  7116                        
  7117                        ; perform TAN()
  7118                        
  7119                        LAB_TAN
  7120 00:DD50: 20 CC D8           JSR   LAB_276E          ; pack FAC1 into Adatal
  7121 00:DD53: A9 00              LDA   #$00              ; clear byte
  7122 00:DD55: 85 63              STA   Cflag             ; clear comparison evaluation flag
  7123 00:DD57: 20 07 DD           JSR   LAB_SIN           ; go do SIN(n)
  7124 00:DD5A: A2 9C              LDX   #<func_l          ; set sin(n) pointer low byte
  7125 00:DD5C: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7126 00:DD5E: 20 D6 D8           JSR   LAB_2778          ; pack FAC1 into (XY)
  7127 00:DD61: A9 A4              LDA   #<Adatal          ; set n pointer low addr
  7128 00:DD63: A0 00              LDY   #>Adatal          ; set n pointer high addr
  7129 00:DD65: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7130 00:DD68: A9 00              LDA   #$00              ; clear byte
  7131 00:DD6A: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  7132 00:DD6C: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7133 00:DD6E: 20 78 DD           JSR   LAB_2C74          ; save flag and go do series evaluation
  7134                        
  7135 00:DD71: A9 9C              LDA   #<func_l          ; set sin(n) pointer low byte
  7136 00:DD73: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7137 00:DD75: 4C 30 D8           JMP   LAB_26CA          ; convert AY and do (AY)/FAC1
  7138                        
  7139                        LAB_2C74
  7140 00:DD78: 48                 PHA                     ; save comparison evaluation flag
  7141 00:DD79: 4C 39 DD           JMP   LAB_2C35          ; go do series evaluation
  7142                        
  7143                        ; perform USR()
  7144                        
  7145                        LAB_USR
  7146 00:DD7C: 20 0A 00           JSR   Usrjmp            ; call user code
  7147 00:DD7F: 4C 11 CC           JMP   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  7148                        
  7149                        ; perform ATN()
  7150                        
  7151                        LAB_ATN
  7152 00:DD82: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7153 00:DD84: 48                 PHA                     ; save sign
  7154 00:DD85: 10 03              BPL   LAB_2CA1          ; branch if +ve
  7155                        
  7156 00:DD87: 20 23 DC           JSR   LAB_GTHAN         ; else do - FAC1
  7157                        LAB_2CA1
  7158 00:DD8A: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7159 00:DD8C: 48                 PHA                     ; push exponent
  7160 00:DD8D: C9 81              CMP   #$81              ; compare with 1
  7161 00:DD8F: 90 07              BCC   LAB_2CAF          ; branch if FAC1<1
  7162                        
  7163 00:DD91: A9 12              LDA   #<LAB_259C        ; set 1 pointer low byte
  7164 00:DD93: A0 E2              LDY   #>LAB_259C        ; set 1 pointer high byte
  7165 00:DD95: 20 30 D8           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1
  7166                        LAB_2CAF
  7167 00:DD98: A9 F1              LDA   #<LAB_2CC9        ; set pointer low byte to counter
  7168 00:DD9A: A0 E1              LDY   #>LAB_2CC9        ; set pointer high byte to counter
  7169 00:DD9C: 20 80 DC           JSR   LAB_2B6E          ; ^2 then series evaluation
  7170 00:DD9F: 68                 PLA                     ; restore old FAC1 exponent
  7171 00:DDA0: C9 81              CMP   #$81              ; compare with 1
  7172 00:DDA2: 90 07              BCC   LAB_2CC2          ; branch if FAC1<1
  7173                        
  7174 00:DDA4: A9 D8              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7175 00:DDA6: A0 E1              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7176 00:DDA8: 20 D2 D5           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7177                        LAB_2CC2
  7178 00:DDAB: 68                 PLA                     ; restore FAC1 sign
  7179 00:DDAC: 10 16              BPL   LAB_2D04          ; exit if was +ve
  7180                        
  7181 00:DDAE: 4C 23 DC           JMP   LAB_GTHAN         ; else do - FAC1 and return
  7182                        
  7183                        ; perform BITSET
  7184                        
  7185                        LAB_BITSET
  7186 00:DDB1: 20 07 D5           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7187 00:DDB4: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7188 00:DDB6: B0 20              BCS   FCError           ; branch if > 7
  7189                        
  7190 00:DDB8: A9 00              LDA   #$00              ; clear A
  7191 00:DDBA: 38                 SEC                     ; set the carry
  7192                        S_Bits
  7193 00:DDBB: 2A                 ROL                     ; shift bit
  7194 00:DDBC: CA                 DEX                     ; decrement bit number
  7195 00:DDBD: 10 FC              BPL   S_Bits            ; loop if still +ve
  7196                        
  7197 00:DDBF: E8                 INX                     ; make X = $00
  7198 00:DDC0: 01 11              ORA   (Itempl,X)        ; or with byte via temporary integer (addr)
  7199 00:DDC2: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7200                        LAB_2D04
  7201 00:DDC4: 60                 RTS
  7202                        
  7203                        ; perform BITCLR
  7204                        
  7205                        LAB_BITCLR
  7206 00:DDC5: 20 07 D5           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7207 00:DDC8: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7208 00:DDCA: B0 0C              BCS   FCError           ; branch if > 7
  7209                        
  7210 00:DDCC: A9 FF              LDA   #$FF              ; set A
  7211                        S_Bitc
  7212 00:DDCE: 2A                 ROL                     ; shift bit
  7213 00:DDCF: CA                 DEX                     ; decrement bit number
  7214 00:DDD0: 10 FC              BPL   S_Bitc            ; loop if still +ve
  7215                        
  7216 00:DDD2: E8                 INX                     ; make X = $00
  7217 00:DDD3: 21 11              AND   (Itempl,X)        ; and with byte via temporary integer (addr)
  7218 00:DDD5: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7219 00:DDD7: 60                 RTS
  7220                        
  7221                        FCError
  7222 00:DDD8: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start
  7223                        
  7224                        ; perform BITTST()
  7225                        
  7226                        LAB_BTST
  7227 00:DDDB: 20 BC 00           JSR   LAB_IGBY          ; increment BASIC pointer
  7228 00:DDDE: 20 07 D5           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7229 00:DDE1: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7230 00:DDE3: B0 F3              BCS   FCError           ; branch if > 7
  7231                        
  7232 00:DDE5: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7233 00:DDE8: C9 29              CMP   #')'              ; is next character ")"
  7234 00:DDEA: F0 03              BEQ   TST_OK            ; if ")" go do rest of function
  7235                        
  7236 00:DDEC: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  7237                        
  7238                        TST_OK
  7239 00:DDEF: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7240 00:DDF2: A9 00              LDA   #$00              ; clear A
  7241 00:DDF4: 38                 SEC                     ; set the carry
  7242                        T_Bits
  7243 00:DDF5: 2A                 ROL                     ; shift bit
  7244 00:DDF6: CA                 DEX                     ; decrement bit number
  7245 00:DDF7: 10 FC              BPL   T_Bits            ; loop if still +ve
  7246                        
  7247 00:DDF9: E8                 INX                     ; make X = $00
  7248 00:DDFA: 21 11              AND   (Itempl,X)        ; AND with byte via temporary integer (addr)
  7249 00:DDFC: F0 02              BEQ   LAB_NOTT          ; branch if zero (already correct)
  7250                        
  7251 00:DDFE: A9 FF              LDA   #$FF              ; set for -1 result
  7252                        LAB_NOTT
  7253 00:DE00: 4C 29 D9           JMP   LAB_27DB          ; go do SGN tail
  7254                        
  7255                        ; perform BIN$()
  7256                        
  7257                        LAB_BINS
  7258 00:DE03: E0 19              CPX   #$19              ; max + 1
  7259 00:DE05: B0 48              BCS   BinFErr           ; exit if too big ( > or = )
  7260                        
  7261 00:DE07: 86 78              STX   TempB             ; save # of characters ($00 = leading zero remove)
  7262 00:DE09: A9 18              LDA   #$18              ; need A byte long space
  7263 00:DE0B: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long
  7264 00:DE0E: A0 17              LDY   #$17              ; set index
  7265 00:DE10: A2 18              LDX   #$18              ; character count
  7266                        NextB1
  7267 00:DE12: 46 11              LSR   nums_1            ; shift highest byte
  7268 00:DE14: 66 12              ROR   nums_2            ; shift middle byte
  7269 00:DE16: 66 13              ROR   nums_3            ; shift lowest byte bit 0 to carry
  7270 00:DE18: 8A                 TXA                     ; load with "0"/2
  7271 00:DE19: 2A                 ROL                     ; shift in carry
  7272 00:DE1A: 91 AD              STA   (str_pl),Y        ; save to temp string + index
  7273 00:DE1C: 88                 DEY                     ; decrement index
  7274 00:DE1D: 10 F3              BPL   NextB1            ; loop if not done
  7275                        
  7276 00:DE1F: A5 78              LDA   TempB             ; get # of characters
  7277 00:DE21: F0 0A              BEQ   EndBHS            ; branch if truncate
  7278                        
  7279 00:DE23: AA                 TAX                     ; copy length to X
  7280 00:DE24: 38                 SEC                     ; set carry for add !
  7281 00:DE25: 49 FF              EOR   #$FF              ; 1's complement
  7282 00:DE27: 69 18              ADC   #$18              ; add 24d
  7283 00:DE29: F0 1C              BEQ   GoPr2             ; if zero print whole string
  7284                        
  7285 00:DE2B: D0 0F              BNE   GoPr1             ; else go make output string
  7286                              
  7287                        ; this is the exit code and is also used by HEX$()
  7288                        ; truncate string to remove leading "0"s
  7289                        
  7290                        EndBHS
  7291 00:DE2D: A8                 TAY                     ; clear index (A=0, X=length here)
  7292                        NextB2
  7293 00:DE2E: B1 AD              LDA   (str_pl),Y        ; get character from string
  7294 00:DE30: C9 30              CMP   #'0'              ; compare with "0"
  7295 00:DE32: D0 07              BNE   GoPr              ; if not "0" then go print string from here
  7296                        
  7297 00:DE34: CA                 DEX                     ; decrement character count
  7298 00:DE35: F0 03              BEQ   GoPr3             ; if zero then end of string so go print it
  7299                        
  7300 00:DE37: C8                 INY                     ; else increment index
  7301 00:DE38: 10 F4              BPL   NextB2            ; loop always
  7302                        
  7303                        ; make fixed length output string - ignore overflows!
  7304                        
  7305                        GoPr3
  7306 00:DE3A: E8                 INX                     ; need at least 1 character
  7307                        GoPr
  7308 00:DE3B: 98                 TYA                     ; copy result
  7309                        GoPr1
  7310 00:DE3C: 18                 CLC                     ; clear carry for add
  7311 00:DE3D: 65 AD              ADC   str_pl            ; add low address
  7312 00:DE3F: 85 AD              STA   str_pl            ; save low address
  7313 00:DE41: A9 00              LDA   #$00              ; do high byte
  7314 00:DE43: 65 AE              ADC   str_ph            ; add high address
  7315 00:DE45: 85 AE              STA   str_ph            ; save high address
  7316                        GoPr2
  7317 00:DE47: 86 AC              STX   str_ln            ; X holds string length
  7318 00:DE49: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7319 00:DE4C: 4C B7 D1           JMP   LAB_RTST          ; check for space on descriptor stack then put address
  7320                                                      ; and length on descriptor stack and update stack pointers
  7321                        
  7322                        BinFErr
  7323 00:DE4F: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start
  7324                        
  7325                        ; perform HEX$()
  7326                        
  7327                        LAB_HEXS
  7328 00:DE52: E0 07              CPX   #$07              ; max + 1
  7329 00:DE54: B0 F9              BCS   BinFErr           ; exit if too big ( > or = )
  7330                        
  7331 00:DE56: 86 78              STX   TempB             ; save # of characters
  7332                        
  7333 00:DE58: A9 06              LDA   #$06              ; need 6 bytes for string
  7334 00:DE5A: 20 6A D1           JSR   LAB_MSSP          ; make string space A bytes long
  7335 00:DE5D: A0 05              LDY   #$05              ; set string index
  7336                        
  7337                        ; *** disable decimal mode patch - comment next line ***
  7338                        ;      SED                     ; need decimal mode for nibble convert
  7339 00:DE5F: A5 13              LDA   nums_3            ; get lowest byte
  7340 00:DE61: 20 7E DE           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7341 00:DE64: A5 12              LDA   nums_2            ; get middle byte
  7342 00:DE66: 20 7E DE           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7343 00:DE69: A5 11              LDA   nums_1            ; get highest byte
  7344 00:DE6B: 20 7E DE           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7345                        ; *** disable decimal mode patch - comment next line ***
  7346                        ;      CLD                     ; back to binary
  7347                        
  7348 00:DE6E: A2 06              LDX   #$06              ; character count
  7349 00:DE70: A5 78              LDA   TempB             ; get # of characters
  7350 00:DE72: F0 B9              BEQ   EndBHS            ; branch if truncate
  7351                        
  7352 00:DE74: AA                 TAX                     ; copy length to X
  7353 00:DE75: 38                 SEC                     ; set carry for add !
  7354 00:DE76: 49 FF              EOR   #$FF              ; 1's complement
  7355 00:DE78: 69 06              ADC   #$06              ; add 6d
  7356 00:DE7A: F0 CB              BEQ   GoPr2             ; if zero print whole string
  7357                        
  7358 00:DE7C: D0 BE              BNE   GoPr1             ; else go make output string (branch always)
  7359                        
  7360                        ; convert A to ASCII hex byte and output .. note set decimal mode before calling
  7361                        
  7362                        LAB_A2HX
  7363 00:DE7E: AA                 TAX                     ; save byte
  7364 00:DE7F: 29 0F              AND   #$0F              ; mask off top bits
  7365 00:DE81: 20 89 DE           JSR   LAB_AL2X          ; convert low nibble to ASCII and output
  7366 00:DE84: 8A                 TXA                     ; get byte back
  7367 00:DE85: 4A                 LSR                     ; /2  shift high nibble to low nibble
  7368 00:DE86: 4A                 LSR                     ; /4
  7369 00:DE87: 4A                 LSR                     ; /8
  7370 00:DE88: 4A                 LSR                     ; /16
  7371                        LAB_AL2X
  7372 00:DE89: C9 0A              CMP   #$0A              ; set carry for +1 if >9
  7373                        ; *** begin disable decimal mode patch ***
  7374                        ; *** insert
  7375 00:DE8B: 90 02              BCC   LAB_AL20          ; skip adjust if <= 9
  7376 00:DE8D: 69 06              ADC   #$06              ; adjust for A to F
  7377                        LAB_AL20
  7378                        ; *** end   disable decimal mode patch ***
  7379 00:DE8F: 69 30              ADC   #'0'              ; add ASCII "0"
  7380 00:DE91: 91 AD              STA   (str_pl),Y        ; save to temp string
  7381 00:DE93: 88                 DEY                     ; decrement counter
  7382 00:DE94: 60                 RTS
  7383                        
  7384                        LAB_NLTO
  7385 00:DE95: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7386 00:DE97: A9 00              LDA   #$00              ; clear sign compare
  7387                        LAB_MLTE
  7388 00:DE99: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7389 00:DE9B: 8A                 TXA                     ; restore character
  7390 00:DE9C: 20 74 DA           JSR   LAB_2912          ; evaluate new ASCII digit
  7391                        
  7392                        ; gets here if the first character was "$" for hex
  7393                        ; get hex number
  7394                        
  7395                        LAB_CHEX
  7396 00:DE9F: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7397 00:DEA2: 90 0A              BCC   LAB_ISHN          ; branch if numeric character
  7398                        
  7399 00:DEA4: 09 20              ORA   #$20              ; case convert, allow "A" to "F" and "a" to "f"
  7400 00:DEA6: E9 61              SBC   #'a'              ; subtract "a" (carry set here)
  7401 00:DEA8: C9 06              CMP   #$06              ; compare normalised with $06 (max+1)
  7402 00:DEAA: B0 2A              BCS   LAB_EXCH          ; exit if >"f" or <"0"
  7403                        
  7404 00:DEAC: 69 0A              ADC   #$0A              ; convert to nibble
  7405                        LAB_ISHN
  7406 00:DEAE: 29 0F              AND   #$0F              ; convert to binary
  7407 00:DEB0: AA                 TAX                     ; save nibble
  7408 00:DEB1: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7409 00:DEB3: F0 E4              BEQ   LAB_MLTE          ; skip multiply if zero
  7410                        
  7411 00:DEB5: 69 04              ADC   #$04              ; add four to exponent (*16 - carry clear here)
  7412 00:DEB7: 90 DC              BCC   LAB_NLTO          ; if no overflow do evaluate digit
  7413                        
  7414                        LAB_MLTO
  7415 00:DEB9: 4C F2 D6           JMP   LAB_2564          ; do overflow error and warm start
  7416                        
  7417                        LAB_NXCH
  7418 00:DEBC: AA                 TAX                     ; save bit
  7419 00:DEBD: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7420 00:DEBF: F0 06              BEQ   LAB_MLBT          ; skip multiply if zero
  7421                        
  7422 00:DEC1: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*2)
  7423 00:DEC3: F0 F4              BEQ   LAB_MLTO          ; do overflow error if = $00
  7424                        
  7425 00:DEC5: A9 00              LDA   #$00              ; clear sign compare
  7426                        LAB_MLBT
  7427 00:DEC7: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7428 00:DEC9: 8A                 TXA                     ; restore bit
  7429 00:DECA: 20 74 DA           JSR   LAB_2912          ; evaluate new ASCII digit
  7430                        
  7431                        ; gets here if the first character was  "%" for binary
  7432                        ; get binary number
  7433                        
  7434                        LAB_CBIN
  7435 00:DECD: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7436 00:DED0: 49 30              EOR   #'0'              ; convert "0" to 0 etc.
  7437 00:DED2: C9 02              CMP   #$02              ; compare with max+1
  7438 00:DED4: 90 E6              BCC   LAB_NXCH          ; branch exit if < 2
  7439                        
  7440                        LAB_EXCH
  7441 00:DED6: 4C 59 DA           JMP   LAB_28F6          ; evaluate -ve flag and return
  7442                        
  7443                        ; ctrl-c check routine. includes limited "life" byte save for INGET routine
  7444                        ; now also the code that checks to see if an interrupt has occurred
  7445                        
  7446                        CTRLC
  7447 00:DED9: AD 00 02           LDA   ccflag            ; get [CTRL-C] check flag
  7448 00:DEDC: D0 18              BNE   LAB_FBA2          ; exit if inhibited
  7449                        
  7450 00:DEDE: 20 1A E1           JSR   V_INPT            ; scan input device
  7451 00:DEE1: 90 0B              BCC   LAB_FBA0          ; exit if buffer empty
  7452                        
  7453 00:DEE3: 8D 01 02           STA   ccbyte            ; save received byte
  7454 00:DEE6: A2 20              LDX   #$20              ; "life" timer for bytes
  7455 00:DEE8: 8E 02 02           STX   ccnull            ; set countdown
  7456 00:DEEB: 4C 3B C5           JMP   LAB_1636          ; return to BASIC
  7457                        
  7458                        LAB_FBA0
  7459 00:DEEE: AE 02 02           LDX   ccnull            ; get countdown byte
  7460 00:DEF1: F0 03              BEQ   LAB_FBA2          ; exit if finished
  7461                        
  7462 00:DEF3: CE 02 02           DEC   ccnull            ; else decrement countdown
  7463                        LAB_FBA2
  7464 00:DEF6: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7465 00:DEF8: 20 01 DF           JSR   LAB_CKIN          ; go check interrupt
  7466 00:DEFB: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7467 00:DEFD: 20 01 DF           JSR   LAB_CKIN          ; go check interrupt
  7468                        LAB_CRTS
  7469 00:DF00: 60                 RTS
  7470                        
  7471                        ; check whichever interrupt is indexed by X
  7472                        
  7473                        LAB_CKIN
  7474 00:DF01: B5 00              LDA   PLUS_0,X          ; get interrupt flag byte
  7475 00:DF03: 10 FB              BPL   LAB_CRTS          ; branch if interrupt not enabled
  7476                        
  7477                        ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
  7478                        ; automatically enable the interrupt when we exit
  7479                        
  7480 00:DF05: 0A                 ASL                     ; move happened bit to setup bit
  7481 00:DF06: 29 40              AND   #$40              ; mask happened bits
  7482 00:DF08: F0 F6              BEQ   LAB_CRTS          ; if no interrupt then exit
  7483                        
  7484 00:DF0A: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7485                        
  7486 00:DF0C: 8A                 TXA                     ; copy index ..
  7487 00:DF0D: A8                 TAY                     ; .. to Y
  7488                        
  7489 00:DF0E: 68                 PLA                     ; dump return address low byte, call from CTRL-C
  7490 00:DF0F: 68                 PLA                     ; dump return address high byte
  7491                        
  7492 00:DF10: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  7493 00:DF12: 20 25 C1           JSR   LAB_1212          ; check room on stack for A bytes
  7494 00:DF15: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  7495 00:DF17: 48                 PHA                     ; push on stack
  7496 00:DF18: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  7497 00:DF1A: 48                 PHA                     ; push on stack
  7498 00:DF1B: A5 88              LDA   Clineh            ; get current line high byte
  7499 00:DF1D: 48                 PHA                     ; push on stack
  7500 00:DF1E: A5 87              LDA   Clinel            ; get current line low byte
  7501 00:DF20: 48                 PHA                     ; push on stack
  7502 00:DF21: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  7503 00:DF23: 48                 PHA                     ; push on stack
  7504                        
  7505 00:DF24: B9 01 00           LDA   PLUS_1,Y          ; get interrupt code pointer low byte
  7506 00:DF27: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  7507 00:DF29: B9 02 00           LDA   PLUS_2,Y          ; get interrupt code pointer high byte
  7508 00:DF2C: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  7509                        
  7510 00:DF2E: 4C E2 C4           JMP   LAB_15C2          ; go do interpreter inner loop
  7511                                                      ; can't RTS, we used the stack! the RTS from the ctrl-c
  7512                                                      ; check will be taken when the RETIRQ/RETNMI/RETURN is
  7513                                                      ; executed at the end of the subroutine
  7514                        
  7515                        ; get byte from input device, no waiting
  7516                        ; returns with carry set if byte in A
  7517                        
  7518                        INGET
  7519 00:DF31: 20 1A E1           JSR   V_INPT            ; call scan input device
  7520 00:DF34: B0 09              BCS   LAB_FB95          ; if byte go reset timer
  7521                        
  7522 00:DF36: AD 02 02           LDA   ccnull            ; get countdown
  7523 00:DF39: F0 09              BEQ   LAB_FB96          ; exit if empty
  7524                        
  7525 00:DF3B: AD 01 02           LDA   ccbyte            ; get last received byte
  7526 00:DF3E: 38                 SEC                     ; flag we got a byte
  7527                        LAB_FB95
  7528 00:DF3F: A2 00              LDX   #$00              ; clear X
  7529 00:DF41: 8E 02 02           STX   ccnull            ; clear timer because we got a byte
  7530                        LAB_FB96
  7531 00:DF44: 60                 RTS
  7532                        
  7533                        ; these routines only enable the interrupts if the set-up flag is set
  7534                        ; if not they have no effect
  7535                        
  7536                        ; perform IRQ {ON|OFF|CLEAR}
  7537                        
  7538                        LAB_IRQ
  7539 00:DF45: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7540 00:DF47: 2C                 .byte $2C               ; make next line BIT abs.
  7541                        
  7542                        ; perform NMI {ON|OFF|CLEAR}
  7543                        
  7544                        LAB_NMI
  7545 00:DF48: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7546 00:DF4A: C9 93              CMP   #TK_ON            ; compare with token for ON
  7547 00:DF4C: F0 11              BEQ   LAB_INON          ; go turn on interrupt
  7548                        
  7549 00:DF4E: C9 B5              CMP   #TK_OFF           ; compare with token for OFF
  7550 00:DF50: F0 07              BEQ   LAB_IOFF          ; go turn off interrupt
  7551                        
  7552 00:DF52: 49 A2              EOR   #TK_CLEAR         ; compare with token for CLEAR, A = $00 if = TK_CLEAR
  7553 00:DF54: F0 0E              BEQ   LAB_INEX          ; go clear interrupt flags and return
  7554                        
  7555 00:DF56: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  7556                        
  7557                        LAB_IOFF
  7558 00:DF59: A9 7F              LDA   #$7F              ; clear A
  7559 00:DF5B: 35 00              AND   PLUS_0,X          ; AND with interrupt setup flag
  7560 00:DF5D: 10 05              BPL   LAB_INEX          ; go clear interrupt enabled flag and return
  7561                        
  7562                        LAB_INON
  7563 00:DF5F: B5 00              LDA   PLUS_0,X          ; get interrupt setup flag
  7564 00:DF61: 0A                 ASL                     ; Shift bit to enabled flag
  7565 00:DF62: 15 00              ORA   PLUS_0,X          ; OR with flag byte
  7566                        LAB_INEX
  7567 00:DF64: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7568 00:DF66: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer and return
  7569                        
  7570                        ; these routines set up the pointers and flags for the interrupt routines
  7571                        ; note that the interrupts are also enabled by these commands
  7572                        
  7573                        ; perform ON IRQ
  7574                        
  7575                        LAB_SIRQ
  7576                        ;      CLI                     ; enable interrupts
  7577 00:DF69: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7578 00:DF6B: 2C                 .byte $2C               ; make next line BIT abs.
  7579                        
  7580                        ; perform ON NMI
  7581                        
  7582                        LAB_SNMI
  7583 00:DF6C: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7584                        
  7585 00:DF6E: 86 78              STX   TempB             ; save interrupt pointer
  7586 00:DF70: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (past token)
  7587 00:DF73: 20 78 C7           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  7588 00:DF76: A5 79              LDA   Smeml             ; get start of mem low byte
  7589 00:DF78: A6 7A              LDX   Smemh             ; get start of mem high byte
  7590 00:DF7A: 20 4D C3           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  7591 00:DF7D: B0 03              BCS   LAB_LFND          ; if carry set go set-up interrupt
  7592                        
  7593 00:DF7F: 4C 92 C6           JMP   LAB_16F7          ; else go do "Undefined statement" error and warm start
  7594                        
  7595                        LAB_LFND
  7596 00:DF82: A6 78              LDX   TempB             ; get interrupt pointer
  7597 00:DF84: A5 AA              LDA   Baslnl            ; get pointer low byte
  7598 00:DF86: E9 01              SBC   #$01              ; -1 (carry already set for subtract)
  7599 00:DF88: 95 01              STA   PLUS_1,X          ; save as interrupt pointer low byte
  7600 00:DF8A: A5 AB              LDA   Baslnh            ; get pointer high byte
  7601 00:DF8C: E9 00              SBC   #$00              ; subtract carry
  7602 00:DF8E: 95 02              STA   PLUS_2,X          ; save as interrupt pointer high byte
  7603                        
  7604 00:DF90: A9 C0              LDA   #$C0              ; set interrupt enabled/setup bits
  7605 00:DF92: 95 00              STA   PLUS_0,X          ; set interrupt flags
  7606                        LAB_IRTS
  7607 00:DF94: 60                 RTS
  7608                        
  7609                        ; return from IRQ service, restores the enabled flag.
  7610                        
  7611                        ; perform RETIRQ
  7612                        
  7613                        LAB_RETIRQ
  7614 00:DF95: D0 FD              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7615                        
  7616 00:DF97: A5 DF              LDA   IrqBase           ; get interrupt flags
  7617 00:DF99: 0A                 ASL                     ; copy setup to enabled (b7)
  7618 00:DF9A: 05 DF              ORA   IrqBase           ; OR in setup flag
  7619 00:DF9C: 85 DF              STA   IrqBase           ; save enabled flag
  7620 00:DF9E: 4C 99 C6           JMP   LAB_16E8          ; go do rest of RETURN
  7621                        
  7622                        ; return from NMI service, restores the enabled flag.
  7623                        
  7624                        ; perform RETNMI
  7625                        
  7626                        LAB_RETNMI
  7627 00:DFA1: D0 F1              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7628                        
  7629 00:DFA3: A5 DC              LDA   NmiBase           ; get set-up flag
  7630 00:DFA5: 0A                 ASL                     ; copy setup to enabled (b7)
  7631 00:DFA6: 05 DC              ORA   NmiBase           ; OR in setup flag
  7632 00:DFA8: 85 DC              STA   NmiBase           ; save enabled flag
  7633 00:DFAA: 4C 99 C6           JMP   LAB_16E8          ; go do rest of RETURN
  7634                        
  7635                        ; MAX() MIN() pre process
  7636                        
  7637                        LAB_MMPP
  7638 00:DFAD: 20 0B CB           JSR   LAB_EVEZ          ; process expression
  7639 00:DFB0: 4C F2 CA           JMP   LAB_CTNM          ; check if source is numeric, else do type mismatch
  7640                        
  7641                        ; perform MAX()
  7642                        
  7643                        LAB_MAX
  7644 00:DFB3: 20 E1 DF           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7645                                                      ; pull FAC2 and compare with FAC1
  7646 00:DFB6: 10 FB              BPL   LAB_MAX           ; branch if no swap to do
  7647                        
  7648 00:DFB8: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7649 00:DFBA: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7650 00:DFBC: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7651 00:DFBE: 20 F2 D5           JSR   LAB_279B          ; copy FAC2 to FAC1
  7652 00:DFC1: F0 F0              BEQ   LAB_MAX           ; go do next (branch always)
  7653                        
  7654                        ; perform MIN()
  7655                        
  7656                        LAB_MIN
  7657 00:DFC3: 20 E1 DF           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7658                                                      ; pull FAC2 and compare with FAC1
  7659 00:DFC6: 30 FB              BMI   LAB_MIN           ; branch if no swap to do
  7660                        
  7661 00:DFC8: F0 F9              BEQ   LAB_MIN           ; branch if no swap to do
  7662                        
  7663 00:DFCA: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7664 00:DFCC: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7665 00:DFCE: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7666 00:DFD0: 20 F2 D5           JSR   LAB_279B          ; copy FAC2 to FAC1
  7667 00:DFD3: F0 EE              BEQ   LAB_MIN           ; go do next (branch always)
  7668                        
  7669                        ; exit routine. don't bother returning to the loop code
  7670                        ; check for correct exit, else so syntax error
  7671                        
  7672                        LAB_MMEC
  7673 00:DFD5: C9 29              CMP   #')'              ; is it end of function?
  7674 00:DFD7: D0 05              BNE   LAB_MMSE          ; if not do MAX MIN syntax error
  7675                        
  7676 00:DFD9: 68                 PLA                     ; dump return address low byte
  7677 00:DFDA: 68                 PLA                     ; dump return address high byte
  7678 00:DFDB: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer (to chr past ")")
  7679                        
  7680                        LAB_MMSE
  7681 00:DFDE: 4C 24 CC           JMP   LAB_SNER          ; do syntax error then warm start
  7682                        
  7683                        ; check for next, evaluate and return or exit
  7684                        ; this is the routine that does most of the work
  7685                        
  7686                        LAB_PHFA
  7687 00:DFE1: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7688 00:DFE4: C9 2C              CMP   #','              ; is there more ?
  7689 00:DFE6: D0 ED              BNE   LAB_MMEC          ; if not go do end check
  7690                        
  7691                                                      ; push FAC1
  7692 00:DFE8: 20 08 D9           JSR   LAB_27BA          ; round FAC1
  7693 00:DFEB: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7694 00:DFED: 09 7F              ORA   #$7F              ; set all non sign bits
  7695 00:DFEF: 25 AD              AND   FAC1_1            ; AND FAC1 mantissa1 (AND in sign bit)
  7696 00:DFF1: 48                 PHA                     ; push on stack
  7697 00:DFF2: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  7698 00:DFF4: 48                 PHA                     ; push on stack
  7699 00:DFF5: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  7700 00:DFF7: 48                 PHA                     ; push on stack
  7701 00:DFF8: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7702 00:DFFA: 48                 PHA                     ; push on stack
  7703                        
  7704 00:DFFB: 20 BC 00           JSR   LAB_IGBY          ; scan and get next BASIC byte (after ",")
  7705 00:DFFE: 20 EF CA           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  7706                                                      ; else do type mismatch
  7707                        
  7708                                                      ; pop FAC2 (MAX/MIN expression so far)
  7709 00:E001: 68                 PLA                     ; pop exponent
  7710 00:E002: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  7711 00:E004: 68                 PLA                     ; pop mantissa3
  7712 00:E005: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  7713 00:E007: 68                 PLA                     ; pop mantissa1
  7714 00:E008: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  7715 00:E00A: 68                 PLA                     ; pop sign/mantissa1
  7716 00:E00B: 85 B4              STA   FAC2_1            ; save FAC2 sign/mantissa1
  7717 00:E00D: 85 B7              STA   FAC2_s            ; save FAC2 sign
  7718                        
  7719                                                      ; compare FAC1 with (packed) FAC2
  7720 00:E00F: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  7721 00:E011: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  7722 00:E013: 4C 46 D9           JMP   LAB_27F8          ; compare FAC1 with FAC2 (AY) and return
  7723                                                      ; returns A=$00 if FAC1 = (AY)
  7724                                                      ; returns A=$01 if FAC1 > (AY)
  7725                                                      ; returns A=$FF if FAC1 < (AY)
  7726                        
  7727                        ; perform WIDTH
  7728                        
  7729                        LAB_WDTH
  7730 00:E016: C9 2C              CMP   #','              ; is next byte ","
  7731 00:E018: F0 1B              BEQ   LAB_TBSZ          ; if so do tab size
  7732                        
  7733 00:E01A: 20 C2 D4           JSR   LAB_GTBY          ; get byte parameter
  7734 00:E01D: 8A                 TXA                     ; copy width to A
  7735 00:E01E: F0 0A              BEQ   LAB_NSTT          ; branch if set for infinite line
  7736                        
  7737 00:E020: E0 10              CPX   #$10              ; else make min width = 16d
  7738 00:E022: 90 45              BCC   TabErr            ; if less do function call error and exit
  7739                        
  7740                        ; this next compare ensures that we can't exit WIDTH via an error leaving the
  7741                        ; tab size greater than the line length.
  7742                        
  7743 00:E024: E4 64              CPX   TabSiz            ; compare with tab size
  7744 00:E026: B0 02              BCS   LAB_NSTT          ; branch if >= tab size
  7745                        
  7746 00:E028: 86 64              STX   TabSiz            ; else make tab size = terminal width
  7747                        LAB_NSTT
  7748 00:E02A: 86 0F              STX   TWidth            ; set the terminal width
  7749 00:E02C: 20 C2 00           JSR   LAB_GBYT          ; get BASIC byte back
  7750 00:E02F: F0 1A              BEQ   WExit             ; exit if no following
  7751                        
  7752 00:E031: C9 2C              CMP   #','              ; else is it ","
  7753 00:E033: D0 A9              BNE   LAB_MMSE          ; if not do syntax error
  7754                        
  7755                        LAB_TBSZ
  7756 00:E035: 20 BF D4           JSR   LAB_SGBY          ; scan and get byte parameter
  7757 00:E038: 8A                 TXA                     ; copy TAB size
  7758 00:E039: 30 2E              BMI   TabErr            ; if >127 do function call error and exit
  7759                        
  7760 00:E03B: E0 01              CPX   #$01              ; compare with min-1
  7761 00:E03D: 90 2A              BCC   TabErr            ; if <=1 do function call error and exit
  7762                        
  7763 00:E03F: A5 0F              LDA   TWidth            ; set flags for width
  7764 00:E041: F0 06              BEQ   LAB_SVTB          ; skip check if infinite line
  7765                        
  7766 00:E043: E4 0F              CPX   TWidth            ; compare TAB with width
  7767 00:E045: F0 02              BEQ   LAB_SVTB          ; ok if =
  7768                        
  7769 00:E047: B0 20              BCS   TabErr            ; branch if too big
  7770                        
  7771                        LAB_SVTB
  7772 00:E049: 86 64              STX   TabSiz            ; save TAB size
  7773                        
  7774                        ; calculate tab column limit from TAB size. The Iclim is set to the last tab
  7775                        ; position on a line that still has at least one whole tab width between it
  7776                        ; and the end of the line.
  7777                        
  7778                        WExit
  7779 00:E04B: A5 0F              LDA   TWidth            ; get width
  7780 00:E04D: F0 06              BEQ   LAB_SULP          ; branch if infinite line
  7781                        
  7782 00:E04F: C5 64              CMP   TabSiz            ; compare with tab size
  7783 00:E051: B0 03              BCS   LAB_WDLP          ; branch if >= tab size
  7784                        
  7785 00:E053: 85 64              STA   TabSiz            ; else make tab size = terminal width
  7786                        LAB_SULP
  7787 00:E055: 38                 SEC                     ; set carry for subtract
  7788                        LAB_WDLP
  7789 00:E056: E5 64              SBC   TabSiz            ; subtract tab size
  7790 00:E058: B0 FC              BCS   LAB_WDLP          ; loop while no borrow
  7791                        
  7792 00:E05A: 65 64              ADC   TabSiz            ; add tab size back
  7793 00:E05C: 18                 CLC                     ; clear carry for add
  7794 00:E05D: 65 64              ADC   TabSiz            ; add tab size back again
  7795 00:E05F: 85 10              STA   Iclim             ; save for now
  7796 00:E061: A5 0F              LDA   TWidth            ; get width back
  7797 00:E063: 38                 SEC                     ; set carry for subtract
  7798 00:E064: E5 10              SBC   Iclim             ; subtract remainder
  7799 00:E066: 85 10              STA   Iclim             ; save tab column limit
  7800                        LAB_NOSQ
  7801 00:E068: 60                 RTS
  7802                        
  7803                        TabErr
  7804 00:E069: 4C 59 CF           JMP   LAB_FCER          ; do function call error then warm start
  7805                        
  7806                        ; perform SQR()
  7807                        
  7808                        LAB_SQR
  7809 00:E06C: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7810 00:E06E: 30 F9              BMI   TabErr            ; if -ve do function call error
  7811                        
  7812 00:E070: A5 AC              LDA   FAC1_e            ; get exponent
  7813 00:E072: F0 F4              BEQ   LAB_NOSQ          ; if zero just return
  7814                        
  7815                                                      ; else do root
  7816 00:E074: 20 F9 D8           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7817 00:E077: A9 00              LDA   #$00              ; clear A
  7818                        
  7819 00:E079: 85 77              STA   FACt_3            ; clear remainder
  7820 00:E07B: 85 76              STA   FACt_2            ; ..
  7821 00:E07D: 85 75              STA   FACt_1            ; ..
  7822 00:E07F: 85 78              STA   TempB             ; ..
  7823                        
  7824 00:E081: 85 AF              STA   FAC1_3            ; clear root
  7825 00:E083: 85 AE              STA   FAC1_2            ; ..
  7826 00:E085: 85 AD              STA   FAC1_1            ; ..
  7827                        
  7828 00:E087: A2 18              LDX   #$18              ; 24 pairs of bits to do
  7829 00:E089: A5 B3              LDA   FAC2_e            ; get exponent
  7830 00:E08B: 4A                 LSR                     ; check odd/even
  7831 00:E08C: B0 0E              BCS   LAB_SQE2          ; if odd only 1 shift first time
  7832                        
  7833                        LAB_SQE1
  7834 00:E08E: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7835 00:E090: 26 B5              ROL   FAC2_2            ; ..
  7836 00:E092: 26 B4              ROL   FAC2_1            ; ..
  7837 00:E094: 26 77              ROL   FACt_3            ; .. into remainder
  7838 00:E096: 26 76              ROL   FACt_2            ; ..
  7839 00:E098: 26 75              ROL   FACt_1            ; ..
  7840 00:E09A: 26 78              ROL   TempB             ; .. never overflows
  7841                        LAB_SQE2
  7842 00:E09C: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7843 00:E09E: 26 B5              ROL   FAC2_2            ; ..
  7844 00:E0A0: 26 B4              ROL   FAC2_1            ; ..
  7845 00:E0A2: 26 77              ROL   FACt_3            ; .. into remainder
  7846 00:E0A4: 26 76              ROL   FACt_2            ; ..
  7847 00:E0A6: 26 75              ROL   FACt_1            ; ..
  7848 00:E0A8: 26 78              ROL   TempB             ; .. never overflows
  7849                        
  7850 00:E0AA: 06 AF              ASL   FAC1_3            ; root = root * 2
  7851 00:E0AC: 26 AE              ROL   FAC1_2            ; ..
  7852 00:E0AE: 26 AD              ROL   FAC1_1            ; .. never overflows
  7853                        
  7854 00:E0B0: A5 AF              LDA   FAC1_3            ; get root low byte
  7855 00:E0B2: 2A                 ROL                     ; *2
  7856 00:E0B3: 85 5B              STA   Temp3             ; save partial low byte
  7857 00:E0B5: A5 AE              LDA   FAC1_2            ; get root low mid byte
  7858 00:E0B7: 2A                 ROL                     ; *2
  7859 00:E0B8: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7860 00:E0BA: A5 AD              LDA   FAC1_1            ; get root high mid byte
  7861 00:E0BC: 2A                 ROL                     ; *2
  7862 00:E0BD: 85 5D              STA   Temp3+2           ; save partial high mid byte
  7863 00:E0BF: A9 00              LDA   #$00              ; get root high byte (always $00)
  7864 00:E0C1: 2A                 ROL                     ; *2
  7865 00:E0C2: 85 5E              STA   Temp3+3           ; save partial high byte
  7866                        
  7867                                                      ; carry clear for subtract +1
  7868 00:E0C4: A5 77              LDA   FACt_3            ; get remainder low byte
  7869 00:E0C6: E5 5B              SBC   Temp3             ; subtract partial low byte
  7870 00:E0C8: 85 5B              STA   Temp3             ; save partial low byte
  7871                        
  7872 00:E0CA: A5 76              LDA   FACt_2            ; get remainder low mid byte
  7873 00:E0CC: E5 5C              SBC   Temp3+1           ; subtract partial low mid byte
  7874 00:E0CE: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7875                        
  7876 00:E0D0: A5 75              LDA   FACt_1            ; get remainder high mid byte
  7877 00:E0D2: E5 5D              SBC   Temp3+2           ; subtract partial high mid byte
  7878 00:E0D4: A8                 TAY                     ; copy partial high mid byte
  7879                        
  7880 00:E0D5: A5 78              LDA   TempB             ; get remainder high byte
  7881 00:E0D7: E5 5E              SBC   Temp3+3           ; subtract partial high byte
  7882 00:E0D9: 90 0E              BCC   LAB_SQNS          ; skip sub if remainder smaller
  7883                        
  7884 00:E0DB: 85 78              STA   TempB             ; save remainder high byte
  7885                        
  7886 00:E0DD: 84 75              STY   FACt_1            ; save remainder high mid byte
  7887                        
  7888 00:E0DF: A5 5C              LDA   Temp3+1           ; get remainder low mid byte
  7889 00:E0E1: 85 76              STA   FACt_2            ; save remainder low mid byte
  7890                        
  7891 00:E0E3: A5 5B              LDA   Temp3             ; get partial low byte
  7892 00:E0E5: 85 77              STA   FACt_3            ; save remainder low byte
  7893                        
  7894 00:E0E7: E6 AF              INC   FAC1_3            ; increment root low byte (never any rollover)
  7895                        LAB_SQNS
  7896 00:E0E9: CA                 DEX                     ; decrement bit pair count
  7897 00:E0EA: D0 A2              BNE   LAB_SQE1          ; loop if not all done
  7898                        
  7899 00:E0EC: 38                 SEC                     ; set carry for subtract
  7900 00:E0ED: A5 B3              LDA   FAC2_e            ; get exponent
  7901 00:E0EF: E9 80              SBC   #$80              ; normalise
  7902 00:E0F1: 6A                 ROR                     ; /2 and re-bias to $80
  7903 00:E0F2: 69 00              ADC   #$00              ; add bit zero back in (allow for half shift)
  7904 00:E0F4: 85 AC              STA   FAC1_e            ; save it
  7905 00:E0F6: 4C 63 D6           JMP   LAB_24D5          ; normalise FAC1 and return
  7906                        
  7907                        ; perform VARPTR()
  7908                        
  7909                        LAB_VARPTR
  7910 00:E0F9: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7911 00:E0FC: 20 DA CD           JSR   LAB_GVAR          ; get var address
  7912 00:E0FF: 20 11 CC           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  7913 00:E102: A4 95              LDY   Cvaral            ; get var address low byte
  7914 00:E104: A5 96              LDA   Cvarah            ; get var address high byte
  7915 00:E106: 4C 89 D0           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  7916                        
  7917                        ; perform PI
  7918                        
  7919                        LAB_PI
  7920 00:E109: A9 ED              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7921 00:E10B: A0 E1              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7922 00:E10D: 20 AC D8           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7923 00:E110: C6 AC              DEC   FAC1_e            ; make result = PI
  7924 00:E112: 60                 RTS
  7925                        
  7926                        ; perform TWOPI
  7927                        
  7928                        LAB_TWOPI
  7929 00:E113: A9 ED              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7930 00:E115: A0 E1              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7931 00:E117: 4C AC D8           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1 and return
  7932                        
  7933                        ; system dependant i/o vectors
  7934                        ; these are in RAM and are set by the monitor at start-up
  7935                        
  7936                        V_INPT
  7937 00:E11A: 6C 05 02           JMP   (VEC_IN)          ; non halting scan input device
  7938                        V_OUTP
  7939 00:E11D: 6C 07 02           JMP   (VEC_OUT)         ; send byte to output device
  7940                        V_LOAD
  7941 00:E120: 6C 09 02           JMP   (VEC_LD)          ; load BASIC program
  7942                        V_SAVE
  7943 00:E123: 6C 0B 02           JMP   (VEC_SV)          ; save BASIC program
  7944                        
  7945                        ; The rest are tables messages and code for RAM
  7946                        
  7947                        ; the rest of the code is tables and BASIC start-up code
  7948                        
  7949                        PG2_TABS
  7950 00:E126: 00                 .byte $00               ; ctrl-c flag           -     $00 = enabled
  7951 00:E127: 00                 .byte $00               ; ctrl-c byte           -     GET needs this
  7952 00:E128: 00                 .byte $00               ; ctrl-c byte timeout   -     GET needs this
  7953 00:E129: D9 DE              .word CTRLC             ; ctrl c check vector
  7954                        ;     .word xxxx              ; non halting key input -     monitor to set this
  7955                        ;     .word xxxx              ; output vector         -     monitor to set this
  7956                        ;     .word xxxx              ; load vector           -     monitor to set this
  7957                        ;     .word xxxx              ; save vector           -     monitor to set this
  7958                        PG2_TABE
  7959                        
  7960                        ; character get subroutine for zero page
  7961                        
  7962                        ; For a 1.8432MHz 6502 including the JSR and RTS
  7963                        ; fastest (>=":") =  29 cycles =  15.7uS
  7964                        ; slowest (<":")  =  40 cycles =  21.7uS
  7965                        ; space skip      = +21 cycles = +11.4uS
  7966                        ; inc across page =  +4 cycles =  +2.2uS
  7967                        
  7968                        ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
  7969                        ; block is copied to it's destination, any non zero page address will do at assembly
  7970                        ; time, to assemble a three byte instruction.
  7971                        
  7972                        ; page 0 initialisation table from $BC
  7973                        ; increment and scan memory
  7974                        
  7975                        LAB_2CEE
  7976 00:E12B: E6 C3              INC   Bpntrl            ; increment BASIC execute pointer low byte
  7977 00:E12D: D0 02              BNE   LAB_2CF4          ; branch if no carry
  7978                                                      ; else
  7979 00:E12F: E6 C4              INC   Bpntrh            ; increment BASIC execute pointer high byte
  7980                        
  7981                        ; page 0 initialisation table from $C2
  7982                        ; scan memory
  7983                        
  7984                        LAB_2CF4
  7985 00:E131: AD FF FF           LDA   $FFFF             ; get byte to scan (addr set by call routine)
  7986 00:E134: C9 AC              CMP   #TK_ELSE          ; compare with the token for ELSE
  7987 00:E136: F0 0E              BEQ   LAB_2D05          ; exit if ELSE, not numeric, carry set
  7988                        
  7989 00:E138: C9 3A              CMP   #':'              ; compare with ":"
  7990 00:E13A: B0 0A              BCS   LAB_2D05          ; exit if >= ":", not numeric, carry set
  7991                        
  7992 00:E13C: C9 20              CMP   #' '              ; compare with " "
  7993 00:E13E: F0 EB              BEQ   LAB_2CEE          ; if " " go do next
  7994                        
  7995 00:E140: 38                 SEC                     ; set carry for SBC
  7996 00:E141: E9 30              SBC   #'0'              ; subtract "0"
  7997 00:E143: 38                 SEC                     ; set carry for SBC
  7998 00:E144: E9 D0              SBC   #$D0              ; subtract -"0"
  7999                                                      ; clear carry if byte = "0"-"9"
  8000                        LAB_2D05
  8001 00:E146: 60                 RTS
  8002                        
  8003                        ; page zero initialisation table $00-$12 inclusive
  8004                        
  8005                        StrTab
  8006 00:E147: 4C                 .byte $4C               ; JMP opcode
  8007 00:E148: 20 C0              .word LAB_COLD          ; initial warm start vector (cold start)
  8008                        
  8009 00:E14A: 00                 .byte $00               ; these bytes are not used by BASIC
  8010 00:E14B: 00 00              .word $0000             ; 
  8011 00:E14D: 00 00              .word $0000             ; 
  8012 00:E14F: 00 00              .word $0000             ; 
  8013                        
  8014 00:E151: 4C                 .byte $4C               ; JMP opcode
  8015 00:E152: 59 CF              .word LAB_FCER          ; initial user function vector ("Function call" error)
  8016 00:E154: 00                 .byte $00               ; default NULL count
  8017 00:E155: 00                 .byte $00               ; clear terminal position
  8018 00:E156: 00                 .byte $00               ; default terminal width byte
  8019 00:E157: F2                 .byte $F2               ; default limit for TAB = 14
  8020 00:E158: 00 03              .word Ram_base          ; start of user RAM
  8021                        EndTab
  8022                        
  8023                        LAB_MSZM
  8024 00:E15A: 0D 0A 4D 65        .byte $0D,$0A,"Memory size ",$00
       00:E15E: 6D 6F 72 79 
       00:E162: 20 73 69 7A 
       00:E166: 65 20 00 
  8025                        
  8026                        LAB_SMSG
  8027 00:E169: 20 42 79 74        .byte " Bytes free",$0D,$0A,$0A
       00:E16D: 65 73 20 66 
       00:E171: 72 65 65 0D 
       00:E175: 0A 0A 
  8028 00:E177: 45 6E 68 61        .byte "Enhanced BASIC 2.22p5",$0A,$00
       00:E17B: 6E 63 65 64 
       00:E17F: 20 42 41 53 
       00:E183: 49 43 20 32 
       00:E187: 2E 32 32 70 
       00:E18B: 35 0A 00 
  8029                        
  8030                        ; numeric constants and series
  8031                        
  8032                                                      ; constants and series for LOG(n)
  8033                        LAB_25A0
  8034 00:E18E: 02                 .byte $02               ; counter
  8035 00:E18F: 80 19 56 62        .byte $80,$19,$56,$62   ; 0.59898
  8036 00:E193: 80 76 22 F3        .byte $80,$76,$22,$F3   ; 0.96147
  8037                        ;##   .byte $80,$76,$22,$F1   ; 0.96147
  8038 00:E197: 82 38 AA 40        .byte $82,$38,$AA,$40   ; 2.88539
  8039                        ;##   .byte $82,$38,$AA,$45   ; 2.88539
  8040                        
  8041                        LAB_25AD
  8042 00:E19B: 80 35 04 F3        .byte $80,$35,$04,$F3   ; 0.70711   1/root 2
  8043                        LAB_25B1
  8044 00:E19F: 81 35 04 F3        .byte $81,$35,$04,$F3   ; 1.41421   root 2
  8045                        LAB_25B5
  8046 00:E1A3: 80 80 00 00        .byte $80,$80,$00,$00   ; -0.5
  8047                        LAB_25B9
  8048 00:E1A7: 80 31 72 18        .byte $80,$31,$72,$18   ; 0.69315   LOG(2)
  8049                        
  8050                                                      ; numeric PRINT constants
  8051                        LAB_2947
  8052 00:E1AB: 91 43 4F F8        .byte $91,$43,$4F,$F8   ; 99999.9375 (max value with at least one decimal)
  8053                        LAB_294B
  8054 00:E1AF: 94 74 23 F7        .byte $94,$74,$23,$F7   ; 999999.4375 (max value before scientific notation)
  8055                        LAB_294F
  8056 00:E1B3: 94 74 24 00        .byte $94,$74,$24,$00   ; 1000000
  8057                        
  8058                                                      ; EXP(n) constants and series
  8059                        LAB_2AFA
  8060 00:E1B7: 81 38 AA 3B        .byte $81,$38,$AA,$3B   ; 1.4427    (1/LOG base 2 e)
  8061                        LAB_2AFE
  8062 00:E1BB: 06                 .byte $06               ; counter
  8063 00:E1BC: 74 63 90 8C        .byte $74,$63,$90,$8C   ; 2.17023e-4
  8064 00:E1C0: 77 23 0C AB        .byte $77,$23,$0C,$AB   ; 0.00124
  8065 00:E1C4: 7A 1E 94 00        .byte $7A,$1E,$94,$00   ; 0.00968
  8066 00:E1C8: 7C 63 42 80        .byte $7C,$63,$42,$80   ; 0.05548
  8067 00:E1CC: 7E 75 FE D0        .byte $7E,$75,$FE,$D0   ; 0.24023
  8068 00:E1D0: 80 31 72 15        .byte $80,$31,$72,$15   ; 0.69315
  8069 00:E1D4: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.00000
  8070                        
  8071                        ;##   .byte $07               ; counter
  8072                        ;##   .byte $74,$94,$2E,$40   ; -1/7! (-1/5040)
  8073                        ;##   .byte $77,$2E,$4F,$70   ;  1/6! ( 1/720)
  8074                        ;##   .byte $7A,$88,$02,$6E   ; -1/5! (-1/120)
  8075                        ;##   .byte $7C,$2A,$A0,$E6   ;  1/4! ( 1/24)
  8076                        ;##   .byte $7E,$AA,$AA,$50   ; -1/3! (-1/6)
  8077                        ;##   .byte $7F,$7F,$FF,$FF   ;  1/2! ( 1/2)
  8078                        ;##   .byte $81,$80,$00,$00   ; -1/1! (-1/1)
  8079                        ;##   .byte $81,$00,$00,$00   ;  1/0! ( 1/1)
  8080                        
  8081                                                      ; trigonometric constants and series
  8082                        LAB_2C78
  8083 00:E1D8: 81 49 0F DB        .byte $81,$49,$0F,$DB   ; 1.570796371 (pi/2) as floating #
  8084                        LAB_2C84
  8085 00:E1DC: 04                 .byte $04               ; counter
  8086 00:E1DD: 86 1E D7 FB        .byte $86,$1E,$D7,$FB   ; 39.7109
  8087                        ;##   .byte $86,$1E,$D7,$BA   ; 39.7109
  8088 00:E1E1: 87 99 26 65        .byte $87,$99,$26,$65   ;-76.575
  8089                        ;##   .byte $87,$99,$26,$64   ;-76.575
  8090 00:E1E5: 87 23 34 58        .byte $87,$23,$34,$58   ; 81.6022
  8091 00:E1E9: 86 A5 5D E1        .byte $86,$A5,$5D,$E1   ;-41.3417
  8092                        ;##   .byte $86,$A5,$5D,$E0   ;-41.3417
  8093                        LAB_2C7C
  8094 00:E1ED: 83 49 0F DB        .byte $83,$49,$0F,$DB   ; 6.28319 (2*pi) as floating #
  8095                        ;##   .byte $83,$49,$0F,$DA   ; 6.28319 (2*pi) as floating #
  8096                        
  8097                        LAB_2CC9
  8098 00:E1F1: 08                 .byte $08               ; counter
  8099 00:E1F2: 78 3A C5 37        .byte $78,$3A,$C5,$37   ; 0.00285
  8100 00:E1F6: 7B 83 A2 5C        .byte $7B,$83,$A2,$5C   ;-0.0160686
  8101 00:E1FA: 7C 2E DD 4D        .byte $7C,$2E,$DD,$4D   ; 0.0426915
  8102 00:E1FE: 7D 99 B0 1E        .byte $7D,$99,$B0,$1E   ;-0.0750429
  8103 00:E202: 7D 59 ED 24        .byte $7D,$59,$ED,$24   ; 0.106409
  8104 00:E206: 7E 91 72 00        .byte $7E,$91,$72,$00   ;-0.142036
  8105 00:E20A: 7E 4C B9 73        .byte $7E,$4C,$B9,$73   ; 0.199926
  8106 00:E20E: 7F AA AA 53        .byte $7F,$AA,$AA,$53   ;-0.333331
  8107                        
  8108                        ;##   .byte $08               ; counter
  8109                        ;##   .byte $78,$3B,$D7,$4A   ; 1/17
  8110                        ;##   .byte $7B,$84,$6E,$02   ;-1/15
  8111                        ;##   .byte $7C,$2F,$C1,$FE   ; 1/13
  8112                        ;##   .byte $7D,$9A,$31,$74   ;-1/11
  8113                        ;##   .byte $7D,$5A,$3D,$84   ; 1/9
  8114                        ;##   .byte $7E,$91,$7F,$C8   ;-1/7
  8115                        ;##   .byte $7E,$4C,$BB,$E4   ; 1/5
  8116                        ;##   .byte $7F,$AA,$AA,$6C   ;-1/3
  8117                        
  8118             0000E213   LAB_1D96    equ *+1             ; $00,$00 used for undefined variables
  8119                        LAB_259C
  8120 00:E212: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.000000, used for INC
  8121                        LAB_2AFD
  8122 00:E216: 81 80 00 00        .byte $81,$80,$00,$00   ; -1.00000, used for DEC. must be on the same page as +1.00
  8123                        
  8124                                                      ; misc constants
  8125                        LAB_1DF7
  8126 00:E21A: 90                 .byte $90               ;-32768 (uses first three bytes from 0.5)
  8127                        LAB_2A96
  8128 00:E21B: 80 00 00 00        .byte $80,$00,$00,$00   ; 0.5
  8129                        LAB_2C80
  8130 00:E21F: 7F 00 00 00        .byte $7F,$00,$00,$00   ; 0.25
  8131                        LAB_26B5
  8132 00:E223: 84 20 00 00        .byte $84,$20,$00,$00   ; 10.0000 divide by 10 constant
  8133                        
  8134                        ; This table is used in converting numbers to ASCII.
  8135                        
  8136                        LAB_2A9A
  8137             0000E228   LAB_2A9B equ LAB_2A9A+1
  8138             0000E229   LAB_2A9C equ LAB_2A9B+1
  8139 00:E227: FE 79 60           .byte $FE,$79,$60       ; -100000
  8140 00:E22A: 00 27 10           .byte $00,$27,$10       ; 10000
  8141 00:E22D: FF FC 18           .byte $FF,$FC,$18       ; -1000
  8142 00:E230: 00 00 64           .byte $00,$00,$64       ; 100
  8143 00:E233: FF FF F6           .byte $FF,$FF,$F6       ; -10
  8144 00:E236: 00 00 01           .byte $00,$00,$01       ; 1
  8145                        
  8146                        LAB_CTBL
  8147 00:E239: 3E C5              .word LAB_END-1         ; END
  8148 00:E23B: 7A C4              .word LAB_FOR-1         ; FOR
  8149 00:E23D: 86 CA              .word LAB_NEXT-1        ; NEXT
  8150 00:E23F: AB C6              .word LAB_DATA-1        ; DATA
  8151 00:E241: 69 C9              .word LAB_INPUT-1       ; INPUT
  8152 00:E243: 8E CD              .word LAB_DIM-1         ; DIM
  8153 00:E245: 88 C9              .word LAB_READ-1        ; READ
  8154 00:E247: D6 C7              .word LAB_LET-1         ; LET
  8155 00:E249: A8 C7              .word LAB_DEC-1         ; DEC             new command
  8156 00:E24B: 0A C6              .word LAB_GOTO-1        ; GOTO
  8157 00:E24D: C9 C5              .word LAB_RUN-1         ; RUN
  8158 00:E24F: D9 C6              .word LAB_IF-1          ; IF
  8159 00:E251: 5F C5              .word LAB_RESTORE-1     ; RESTORE         modified command
  8160 00:E253: ED C5              .word LAB_GOSUB-1       ; GOSUB
  8161 00:E255: 94 DF              .word LAB_RETIRQ-1      ; RETIRQ          new command
  8162 00:E257: A0 DF              .word LAB_RETNMI-1      ; RETNMI          new command
  8163 00:E259: 96 C6              .word LAB_RETURN-1      ; RETURN
  8164 00:E25B: 40 C7              .word LAB_REM-1         ; REM
  8165 00:E25D: 3C C5              .word LAB_STOP-1        ; STOP
  8166 00:E25F: 49 C7              .word LAB_ON-1          ; ON              modified command
  8167 00:E261: 9D C5              .word LAB_NULL-1        ; NULL            modified command
  8168 00:E263: AB C7              .word LAB_INC-1         ; INC             new command
  8169 00:E265: B7 D5              .word LAB_WAIT-1        ; WAIT
  8170 00:E267: 1F E1              .word V_LOAD-1          ; LOAD
  8171 00:E269: 22 E1              .word V_SAVE-1          ; SAVE
  8172 00:E26B: A3 D0              .word LAB_DEF-1         ; DEF
  8173 00:E26D: 3C D5              .word LAB_POKE-1        ; POKE
  8174 00:E26F: 58 D5              .word LAB_DOKE-1        ; DOKE            new command
  8175 00:E271: A5 D5              .word LAB_CALL-1        ; CALL            new command
  8176 00:E273: D3 C5              .word LAB_DO-1          ; DO              new command
  8177 00:E275: 3C C6              .word LAB_LOOP-1        ; LOOP            new command
  8178 00:E277: 77 C8              .word LAB_PRINT-1       ; PRINT
  8179 00:E279: A3 C5              .word LAB_CONT-1        ; CONT
  8180 00:E27B: C5 C3              .word LAB_LIST-1        ; LIST
  8181 00:E27D: C2 C3              .word LAB_CLEAR-1       ; CLEAR
  8182 00:E27F: 72 C3              .word LAB_NEW-1         ; NEW
  8183 00:E281: 15 E0              .word LAB_WDTH-1        ; WIDTH           new command
  8184 00:E283: 46 C8              .word LAB_GET-1         ; GET             new command
  8185 00:E285: 7D D5              .word LAB_SWAP-1        ; SWAP            new command
  8186 00:E287: B0 DD              .word LAB_BITSET-1      ; BITSET          new command
  8187 00:E289: C4 DD              .word LAB_BITCLR-1      ; BITCLR          new command
  8188 00:E28B: 44 DF              .word LAB_IRQ-1         ; IRQ             new command
  8189 00:E28D: 47 DF              .word LAB_NMI-1         ; NMI             new command
  8190                        
  8191                        ; function pre process routine table
  8192                        
  8193                        LAB_FTPL
  8194             0000E290   LAB_FTPM    equ LAB_FTPL+$01
  8195 00:E28F: 94 CC              .word LAB_PPFN-1        ; SGN(n)    process numeric expression in ()
  8196 00:E291: 94 CC              .word LAB_PPFN-1        ; INT(n)          "
  8197 00:E293: 94 CC              .word LAB_PPFN-1        ; ABS(n)          "
  8198 00:E295: 0A CB              .word LAB_EVEZ-1        ; USR(x)    process any expression
  8199 00:E297: 0D CC              .word LAB_1BF7-1        ; FRE(x)          "
  8200 00:E299: 0D CC              .word LAB_1BF7-1        ; POS(x)          "
  8201 00:E29B: 94 CC              .word LAB_PPFN-1        ; SQR(n)    process numeric expression in ()
  8202 00:E29D: 94 CC              .word LAB_PPFN-1        ; RND(n)          "
  8203 00:E29F: 94 CC              .word LAB_PPFN-1        ; LOG(n)          "
  8204 00:E2A1: 94 CC              .word LAB_PPFN-1        ; EXP(n)          "
  8205 00:E2A3: 94 CC              .word LAB_PPFN-1        ; COS(n)          "
  8206 00:E2A5: 94 CC              .word LAB_PPFN-1        ; SIN(n)          "
  8207 00:E2A7: 94 CC              .word LAB_PPFN-1        ; TAN(n)          "
  8208 00:E2A9: 94 CC              .word LAB_PPFN-1        ; ATN(n)          "
  8209 00:E2AB: 94 CC              .word LAB_PPFN-1        ; PEEK(n)         "
  8210 00:E2AD: 94 CC              .word LAB_PPFN-1        ; DEEK(n)         "
  8211 00:E2AF: 00 00              .word $0000             ; SADD()    none
  8212 00:E2B1: 8E CC              .word LAB_PPFS-1        ; LEN($)    process string expression in ()
  8213 00:E2B3: 94 CC              .word LAB_PPFN-1        ; STR$(n)   process numeric expression in ()
  8214 00:E2B5: 8E CC              .word LAB_PPFS-1        ; VAL($)    process string expression in ()
  8215 00:E2B7: 8E CC              .word LAB_PPFS-1        ; ASC($)          "
  8216 00:E2B9: 8E CC              .word LAB_PPFS-1        ; UCASE$($)       "
  8217 00:E2BB: 8E CC              .word LAB_PPFS-1        ; LCASE$($)       "
  8218 00:E2BD: 94 CC              .word LAB_PPFN-1        ; CHR$(n)   process numeric expression in ()
  8219 00:E2BF: BB CC              .word LAB_BHSS-1        ; HEX$(n)         "
  8220 00:E2C1: BB CC              .word LAB_BHSS-1        ; BIN$(n)         "
  8221 00:E2C3: 00 00              .word $0000             ; BITTST()  none
  8222 00:E2C5: AC DF              .word LAB_MMPP-1        ; MAX()     process numeric expression
  8223 00:E2C7: AC DF              .word LAB_MMPP-1        ; MIN()           "
  8224 00:E2C9: 9A CC              .word LAB_PPBI-1        ; PI        advance pointer
  8225 00:E2CB: 9A CC              .word LAB_PPBI-1        ; TWOPI           "
  8226 00:E2CD: 00 00              .word $0000             ; VARPTR()  none
  8227 00:E2CF: 9F CC              .word LAB_LRMS-1        ; LEFT$()   process string expression
  8228 00:E2D1: 9F CC              .word LAB_LRMS-1        ; RIGHT$()        "
  8229 00:E2D3: 9F CC              .word LAB_LRMS-1        ; MID$()          "
  8230                        
  8231                        ; action addresses for functions
  8232                        
  8233                        LAB_FTBL
  8234             0000E2D6   LAB_FTBM    equ LAB_FTBL+$01
  8235 00:E2D5: 25 D9              .word LAB_SGN-1         ; SGN()
  8236 00:E2D7: AF D9              .word LAB_INT-1         ; INT()
  8237 00:E2D9: 42 D9              .word LAB_ABS-1         ; ABS()
  8238 00:E2DB: 7B DD              .word LAB_USR-1         ; USR()
  8239 00:E2DD: 74 D0              .word LAB_FRE-1         ; FRE()
  8240 00:E2DF: 93 D0              .word LAB_POS-1         ; POS()
  8241 00:E2E1: 6B E0              .word LAB_SQR-1         ; SQR()
  8242 00:E2E3: CB DC              .word LAB_RND-1         ; RND()           modified function
  8243 00:E2E5: 29 D7              .word LAB_LOG-1         ; LOG()
  8244 00:E2E7: 2D DC              .word LAB_EXP-1         ; EXP()
  8245 00:E2E9: FF DC              .word LAB_COS-1         ; COS()
  8246 00:E2EB: 06 DD              .word LAB_SIN-1         ; SIN()
  8247 00:E2ED: 4F DD              .word LAB_TAN-1         ; TAN()
  8248 00:E2EF: 81 DD              .word LAB_ATN-1         ; ATN()
  8249 00:E2F1: 31 D5              .word LAB_PEEK-1        ; PEEK()
  8250 00:E2F3: 45 D5              .word LAB_DEEK-1        ; DEEK()          new function
  8251 00:E2F5: 8A D4              .word LAB_SADD-1        ; SADD()          new function
  8252 00:E2F7: A3 D4              .word LAB_LENS-1        ; LEN()
  8253 00:E2F9: 55 D1              .word LAB_STRS-1        ; STR$()
  8254 00:E2FB: D0 D4              .word LAB_VAL-1         ; VAL()
  8255 00:E2FD: AE D4              .word LAB_ASC-1         ; ASC()
  8256 00:E2FF: 68 D4              .word LAB_UCASE-1       ; UCASE$()        new function
  8257 00:E301: 47 D4              .word LAB_LCASE-1       ; LCASE$()        new function
  8258 00:E303: B9 D3              .word LAB_CHRS-1        ; CHR$()
  8259 00:E305: 51 DE              .word LAB_HEXS-1        ; HEX$()          new function
  8260 00:E307: 02 DE              .word LAB_BINS-1        ; BIN$()          new function
  8261 00:E309: DA DD              .word LAB_BTST-1        ; BITTST()        new function
  8262 00:E30B: B2 DF              .word LAB_MAX-1         ; MAX()           new function
  8263 00:E30D: C2 DF              .word LAB_MIN-1         ; MIN()           new function
  8264 00:E30F: 08 E1              .word LAB_PI-1          ; PI              new function
  8265 00:E311: 12 E1              .word LAB_TWOPI-1       ; TWOPI           new function
  8266 00:E313: F8 E0              .word LAB_VARPTR-1      ; VARPTR()        new function
  8267 00:E315: CB D3              .word LAB_LEFT-1        ; LEFT$()
  8268 00:E317: D4 D3              .word LAB_RIGHT-1       ; RIGHT$()
  8269 00:E319: 03 D4              .word LAB_MIDS-1        ; MID$()
  8270                        
  8271                        ; hierarchy and action addresses for operator
  8272                        
  8273                        LAB_OPPT
  8274 00:E31B: 79                 .byte $79               ; +
  8275 00:E31C: EF D5              .word LAB_ADD-1
  8276 00:E31E: 79                 .byte $79               ; -
  8277 00:E31F: D4 D5              .word LAB_SUBTRACT-1
  8278 00:E321: 7B                 .byte $7B               ; *
  8279 00:E322: 6A D7              .word LAB_MULTIPLY-1
  8280 00:E324: 7B                 .byte $7B               ; /
  8281 00:E325: 32 D8              .word LAB_DIVIDE-1
  8282 00:E327: 7F                 .byte $7F               ; ^
  8283 00:E328: E9 DB              .word LAB_POWER-1
  8284 00:E32A: 50                 .byte $50               ; AND
  8285 00:E32B: 04 CD              .word LAB_AND-1
  8286 00:E32D: 46                 .byte $46               ; EOR             new operator
  8287 00:E32E: EA CC              .word LAB_EOR-1
  8288 00:E330: 46                 .byte $46               ; OR
  8289 00:E331: F7 CC              .word LAB_OR-1
  8290 00:E333: 56                 .byte $56               ; >>              new operator
  8291 00:E334: B0 CD              .word LAB_RSHIFT-1
  8292 00:E336: 56                 .byte $56               ; <<              new operator
  8293 00:E337: 98 CD              .word LAB_LSHIFT-1
  8294 00:E339: 7D                 .byte $7D               ; >
  8295 00:E33A: 22 DC              .word LAB_GTHAN-1
  8296 00:E33C: 5A                 .byte $5A               ; =
  8297 00:E33D: 38 CC              .word LAB_EQUAL-1
  8298 00:E33F: 64                 .byte $64               ; <
  8299 00:E340: 25 CD              .word LAB_LTHAN-1
  8300                        
  8301                        ; keywords start with ..
  8302                        ; this is the first character table and must be in alphabetic order
  8303                        
  8304                        TAB_1STC
  8305 00:E342: 2A                 .byte "*"
  8306 00:E343: 2B                 .byte "+"
  8307 00:E344: 2D                 .byte "-"
  8308 00:E345: 2F                 .byte "/"
  8309 00:E346: 3C                 .byte "<"
  8310 00:E347: 3D                 .byte "="
  8311 00:E348: 3E                 .byte ">"
  8312 00:E349: 3F                 .byte "?"
  8313 00:E34A: 41                 .byte "A"
  8314 00:E34B: 42                 .byte "B"
  8315 00:E34C: 43                 .byte "C"
  8316 00:E34D: 44                 .byte "D"
  8317 00:E34E: 45                 .byte "E"
  8318 00:E34F: 46                 .byte "F"
  8319 00:E350: 47                 .byte "G"
  8320 00:E351: 48                 .byte "H"
  8321 00:E352: 49                 .byte "I"
  8322 00:E353: 4C                 .byte "L"
  8323 00:E354: 4D                 .byte "M"
  8324 00:E355: 4E                 .byte "N"
  8325 00:E356: 4F                 .byte "O"
  8326 00:E357: 50                 .byte "P"
  8327 00:E358: 52                 .byte "R"
  8328 00:E359: 53                 .byte "S"
  8329 00:E35A: 54                 .byte "T"
  8330 00:E35B: 55                 .byte "U"
  8331 00:E35C: 56                 .byte "V"
  8332 00:E35D: 57                 .byte "W"
  8333 00:E35E: 5E                 .byte "^"
  8334 00:E35F: 00                 .byte $00               ; table terminator
  8335                        
  8336                        ; pointers to keyword tables
  8337                        
  8338                        TAB_CHRT
  8339 00:E360: 9A E3              .word TAB_STAR          ; table for "*"
  8340 00:E362: 9C E3              .word TAB_PLUS          ; table for "+"
  8341 00:E364: 9E E3              .word TAB_MNUS          ; table for "-"
  8342 00:E366: A0 E3              .word TAB_SLAS          ; table for "/"
  8343 00:E368: A2 E3              .word TAB_LESS          ; table for "<"
  8344 00:E36A: A6 E3              .word TAB_EQUL          ; table for "="
  8345 00:E36C: A8 E3              .word TAB_MORE          ; table for ">"
  8346 00:E36E: AC E3              .word TAB_QEST          ; table for "?"
  8347 00:E370: AE E3              .word TAB_ASCA          ; table for "A"
  8348 00:E372: BE E3              .word TAB_ASCB          ; table for "B"
  8349 00:E374: D7 E3              .word TAB_ASCC          ; table for "C"
  8350 00:E376: EE E3              .word TAB_ASCD          ; table for "D"
  8351 00:E378: 07 E4              .word TAB_ASCE          ; table for "E"
  8352 00:E37A: 16 E4              .word TAB_ASCF          ; table for "F"
  8353 00:E37C: 20 E4              .word TAB_ASCG          ; table for "G"
  8354 00:E37E: 2D E4              .word TAB_ASCH          ; table for "H"
  8355 00:E380: 33 E4              .word TAB_ASCI          ; table for "I"
  8356 00:E382: 45 E4              .word TAB_ASCL          ; table for "L"
  8357 00:E384: 6A E4              .word TAB_ASCM          ; table for "M"
  8358 00:E386: 78 E4              .word TAB_ASCN          ; table for "N"
  8359 00:E388: 8A E4              .word TAB_ASCO          ; table for "O"
  8360 00:E38A: 92 E4              .word TAB_ASCP          ; table for "P"
  8361 00:E38C: A7 E4              .word TAB_ASCR          ; table for "R"
  8362 00:E38E: D6 E4              .word TAB_ASCS          ; table for "S"
  8363 00:E390: 01 E5              .word TAB_ASCT          ; table for "T"
  8364 00:E392: 15 E5              .word TAB_ASCU          ; table for "U"
  8365 00:E394: 26 E5              .word TAB_ASCV          ; table for "V"
  8366 00:E396: 32 E5              .word TAB_ASCW          ; table for "W"
  8367 00:E398: 41 E5              .word TAB_POWR          ; table for "^"
  8368                        
  8369                        ; tables for each start character, note if a longer keyword with the same start
  8370                        ; letters as a shorter one exists then it must come first, else the list is in
  8371                        ; alphabetical order as follows ..
  8372                        
  8373                        ; [keyword,token
  8374                        ; [keyword,token]]
  8375                        ; end marker (#$00)
  8376                        
  8377                        TAB_STAR
  8378 00:E39A: B8 00              .byte TK_MUL,$00        ; *
  8379                        TAB_PLUS
  8380 00:E39C: B6 00              .byte TK_PLUS,$00       ; +
  8381                        TAB_MNUS
  8382 00:E39E: B7 00              .byte TK_MINUS,$00      ; -
  8383                        TAB_SLAS
  8384 00:E3A0: B9 00              .byte TK_DIV,$00        ; /
  8385                        TAB_LESS
  8386                        LBB_LSHIFT
  8387 00:E3A2: 3C BF              .byte "<",TK_LSHIFT     ; <<  note - "<<" must come before "<"
  8388 00:E3A4: C2                 .byte TK_LT             ; <
  8389 00:E3A5: 00                 .byte $00
  8390                        TAB_EQUL
  8391 00:E3A6: C1 00              .byte TK_EQUAL,$00      ; =
  8392                        TAB_MORE
  8393                        LBB_RSHIFT
  8394 00:E3A8: 3E BE              .byte ">",TK_RSHIFT     ; >>  note - ">>" must come before ">"
  8395 00:E3AA: C0                 .byte TK_GT             ; >
  8396 00:E3AB: 00                 .byte $00
  8397                        TAB_QEST
  8398 00:E3AC: 9F 00              .byte TK_PRINT,$00      ; ?
  8399                        TAB_ASCA
  8400                        LBB_ABS
  8401 00:E3AE: 42 53 28 C5        .byte "BS(",TK_ABS      ; ABS(
  8402                        LBB_AND
  8403 00:E3B2: 4E 44 BB           .byte "ND",TK_AND       ; AND
  8404                        LBB_ASC
  8405 00:E3B5: 53 43 28 D7        .byte "SC(",TK_ASC      ; ASC(
  8406                        LBB_ATN
  8407 00:E3B9: 54 4E 28 D0        .byte "TN(",TK_ATN      ; ATN(
  8408 00:E3BD: 00                 .byte $00
  8409                        TAB_ASCB
  8410                        LBB_BINS
  8411 00:E3BE: 49 4E 24 28        .byte "IN$(",TK_BINS    ; BIN$(
       00:E3C2: DC 
  8412                        LBB_BITCLR
  8413 00:E3C3: 49 54 43 4C        .byte "ITCLR",TK_BITCLR ; BITCLR
       00:E3C7: 52 A8 
  8414                        LBB_BITSET
  8415 00:E3C9: 49 54 53 45        .byte "ITSET",TK_BITSET ; BITSET
       00:E3CD: 54 A7 
  8416                        LBB_BITTST
  8417 00:E3CF: 49 54 54 53        .byte "ITTST(",TK_BITTST
       00:E3D3: 54 28 DD 
  8418                                                      ; BITTST(
  8419 00:E3D6: 00                 .byte $00
  8420                        TAB_ASCC
  8421                        LBB_CALL
  8422 00:E3D7: 41 4C 4C 9C        .byte "ALL",TK_CALL     ; CALL
  8423                        LBB_CHRS
  8424 00:E3DB: 48 52 24 28        .byte "HR$(",TK_CHRS    ; CHR$(
       00:E3DF: DA 
  8425                        LBB_CLEAR
  8426 00:E3E0: 4C 45 41 52        .byte "LEAR",TK_CLEAR   ; CLEAR
       00:E3E4: A2 
  8427                        LBB_CONT
  8428 00:E3E5: 4F 4E 54 A0        .byte "ONT",TK_CONT     ; CONT
  8429                        LBB_COS
  8430 00:E3E9: 4F 53 28 CD        .byte "OS(",TK_COS      ; COS(
  8431 00:E3ED: 00                 .byte $00
  8432                        TAB_ASCD
  8433                        LBB_DATA
  8434 00:E3EE: 41 54 41 83        .byte "ATA",TK_DATA     ; DATA
  8435                        LBB_DEC
  8436 00:E3F2: 45 43 88           .byte "EC",TK_DEC       ; DEC
  8437                        LBB_DEEK
  8438 00:E3F5: 45 45 4B 28        .byte "EEK(",TK_DEEK    ; DEEK(
       00:E3F9: D2 
  8439                        LBB_DEF
  8440 00:E3FA: 45 46 99           .byte "EF",TK_DEF       ; DEF
  8441                        LBB_DIM
  8442 00:E3FD: 49 4D 85           .byte "IM",TK_DIM       ; DIM
  8443                        LBB_DOKE
  8444 00:E400: 4F 4B 45 9B        .byte "OKE",TK_DOKE     ; DOKE note - "DOKE" must come before "DO"
  8445                        LBB_DO
  8446 00:E404: 4F 9D              .byte "O",TK_DO         ; DO
  8447 00:E406: 00                 .byte $00
  8448                        TAB_ASCE
  8449                        LBB_ELSE
  8450 00:E407: 4C 53 45 AC        .byte "LSE",TK_ELSE     ; ELSE
  8451                        LBB_END
  8452 00:E40B: 4E 44 80           .byte "ND",TK_END       ; END
  8453                        LBB_EOR
  8454 00:E40E: 4F 52 BC           .byte "OR",TK_EOR       ; EOR
  8455                        LBB_EXP
  8456 00:E411: 58 50 28 CC        .byte "XP(",TK_EXP      ; EXP(
  8457 00:E415: 00                 .byte $00
  8458                        TAB_ASCF
  8459                        LBB_FN
  8460 00:E416: 4E AE              .byte "N",TK_FN         ; FN
  8461                        LBB_FOR
  8462 00:E418: 4F 52 81           .byte "OR",TK_FOR       ; FOR
  8463                        LBB_FRE
  8464 00:E41B: 52 45 28 C7        .byte "RE(",TK_FRE      ; FRE(
  8465 00:E41F: 00                 .byte $00
  8466                        TAB_ASCG
  8467                        LBB_GET
  8468 00:E420: 45 54 A5           .byte "ET",TK_GET       ; GET
  8469                        LBB_GOSUB
  8470 00:E423: 4F 53 55 42        .byte "OSUB",TK_GOSUB   ; GOSUB
       00:E427: 8D 
  8471                        LBB_GOTO
  8472 00:E428: 4F 54 4F 89        .byte "OTO",TK_GOTO     ; GOTO
  8473 00:E42C: 00                 .byte $00
  8474                        TAB_ASCH
  8475                        LBB_HEXS
  8476 00:E42D: 45 58 24 28        .byte "EX$(",TK_HEXS    ; HEX$(
       00:E431: DB 
  8477 00:E432: 00                 .byte $00
  8478                        TAB_ASCI
  8479                        LBB_IF
  8480 00:E433: 46 8B              .byte "F",TK_IF         ; IF
  8481                        LBB_INC
  8482 00:E435: 4E 43 95           .byte "NC",TK_INC       ; INC
  8483                        LBB_INPUT
  8484 00:E438: 4E 50 55 54        .byte "NPUT",TK_INPUT   ; INPUT
       00:E43C: 84 
  8485                        LBB_INT
  8486 00:E43D: 4E 54 28 C4        .byte "NT(",TK_INT      ; INT(
  8487                        LBB_IRQ
  8488 00:E441: 52 51 A9           .byte "RQ",TK_IRQ       ; IRQ
  8489 00:E444: 00                 .byte $00
  8490                        TAB_ASCL
  8491                        LBB_LCASES
  8492 00:E445: 43 41 53 45        .byte "CASE$(",TK_LCASES
       00:E449: 24 28 D9 
  8493                                                      ; LCASE$(
  8494                        LBB_LEFTS
  8495 00:E44C: 45 46 54 24        .byte "EFT$(",TK_LEFTS  ; LEFT$(
       00:E450: 28 E3 
  8496                        LBB_LEN
  8497 00:E452: 45 4E 28 D4        .byte "EN(",TK_LEN      ; LEN(
  8498                        LBB_LET
  8499 00:E456: 45 54 87           .byte "ET",TK_LET       ; LET
  8500                        LBB_LIST
  8501 00:E459: 49 53 54 A1        .byte "IST",TK_LIST     ; LIST
  8502                        LBB_LOAD
  8503 00:E45D: 4F 41 44 97        .byte "OAD",TK_LOAD     ; LOAD
  8504                        LBB_LOG
  8505 00:E461: 4F 47 28 CB        .byte "OG(",TK_LOG      ; LOG(
  8506                        LBB_LOOP
  8507 00:E465: 4F 4F 50 9E        .byte "OOP",TK_LOOP     ; LOOP
  8508 00:E469: 00                 .byte $00
  8509                        TAB_ASCM
  8510                        LBB_MAX
  8511 00:E46A: 41 58 28 DE        .byte "AX(",TK_MAX      ; MAX(
  8512                        LBB_MIDS
  8513 00:E46E: 49 44 24 28        .byte "ID$(",TK_MIDS    ; MID$(
       00:E472: E5 
  8514                        LBB_MIN
  8515 00:E473: 49 4E 28 DF        .byte "IN(",TK_MIN      ; MIN(
  8516 00:E477: 00                 .byte $00
  8517                        TAB_ASCN
  8518                        LBB_NEW
  8519 00:E478: 45 57 A3           .byte "EW",TK_NEW       ; NEW
  8520                        LBB_NEXT
  8521 00:E47B: 45 58 54 82        .byte "EXT",TK_NEXT     ; NEXT
  8522                        LBB_NMI
  8523 00:E47F: 4D 49 AA           .byte "MI",TK_NMI       ; NMI
  8524                        LBB_NOT
  8525 00:E482: 4F 54 B1           .byte "OT",TK_NOT       ; NOT
  8526                        LBB_NULL
  8527 00:E485: 55 4C 4C 94        .byte "ULL",TK_NULL     ; NULL
  8528 00:E489: 00                 .byte $00
  8529                        TAB_ASCO
  8530                        LBB_OFF
  8531 00:E48A: 46 46 B5           .byte "FF",TK_OFF       ; OFF
  8532                        LBB_ON
  8533 00:E48D: 4E 93              .byte "N",TK_ON         ; ON
  8534                        LBB_OR
  8535 00:E48F: 52 BD              .byte "R",TK_OR         ; OR
  8536 00:E491: 00                 .byte $00
  8537                        TAB_ASCP
  8538                        LBB_PEEK
  8539 00:E492: 45 45 4B 28        .byte "EEK(",TK_PEEK    ; PEEK(
       00:E496: D1 
  8540                        LBB_PI
  8541 00:E497: 49 E0              .byte "I",TK_PI         ; PI
  8542                        LBB_POKE
  8543 00:E499: 4F 4B 45 9A        .byte "OKE",TK_POKE     ; POKE
  8544                        LBB_POS
  8545 00:E49D: 4F 53 28 C8        .byte "OS(",TK_POS      ; POS(
  8546                        LBB_PRINT
  8547 00:E4A1: 52 49 4E 54        .byte "RINT",TK_PRINT   ; PRINT
       00:E4A5: 9F 
  8548 00:E4A6: 00                 .byte $00
  8549                        TAB_ASCR
  8550                        LBB_READ
  8551 00:E4A7: 45 41 44 86        .byte "EAD",TK_READ     ; READ
  8552                        LBB_REM
  8553 00:E4AB: 45 4D 91           .byte "EM",TK_REM       ; REM
  8554                        LBB_RESTORE
  8555 00:E4AE: 45 53 54 4F        .byte "ESTORE",TK_RESTORE
       00:E4B2: 52 45 8C 
  8556                                                      ; RESTORE
  8557                        LBB_RETIRQ
  8558 00:E4B5: 45 54 49 52        .byte "ETIRQ",TK_RETIRQ ; RETIRQ
       00:E4B9: 51 8E 
  8559                        LBB_RETNMI
  8560 00:E4BB: 45 54 4E 4D        .byte "ETNMI",TK_RETNMI ; RETNMI
       00:E4BF: 49 8F 
  8561                        LBB_RETURN
  8562 00:E4C1: 45 54 55 52        .byte "ETURN",TK_RETURN ; RETURN
       00:E4C5: 4E 90 
  8563                        LBB_RIGHTS
  8564 00:E4C7: 49 47 48 54        .byte "IGHT$(",TK_RIGHTS
       00:E4CB: 24 28 E4 
  8565                                                      ; RIGHT$(
  8566                        LBB_RND
  8567 00:E4CE: 4E 44 28 CA        .byte "ND(",TK_RND      ; RND(
  8568                        LBB_RUN
  8569 00:E4D2: 55 4E 8A           .byte "UN",TK_RUN       ; RUN
  8570 00:E4D5: 00                 .byte $00
  8571                        TAB_ASCS
  8572                        LBB_SADD
  8573 00:E4D6: 41 44 44 28        .byte "ADD(",TK_SADD    ; SADD(
       00:E4DA: D3 
  8574                        LBB_SAVE
  8575 00:E4DB: 41 56 45 98        .byte "AVE",TK_SAVE     ; SAVE
  8576                        LBB_SGN
  8577 00:E4DF: 47 4E 28 C3        .byte "GN(",TK_SGN      ; SGN(
  8578                        LBB_SIN
  8579 00:E4E3: 49 4E 28 CE        .byte "IN(",TK_SIN      ; SIN(
  8580                        LBB_SPC
  8581 00:E4E7: 50 43 28 AF        .byte "PC(",TK_SPC      ; SPC(
  8582                        LBB_SQR
  8583 00:E4EB: 51 52 28 C9        .byte "QR(",TK_SQR      ; SQR(
  8584                        LBB_STEP
  8585 00:E4EF: 54 45 50 B2        .byte "TEP",TK_STEP     ; STEP
  8586                        LBB_STOP
  8587 00:E4F3: 54 4F 50 92        .byte "TOP",TK_STOP     ; STOP
  8588                        LBB_STRS
  8589 00:E4F7: 54 52 24 28        .byte "TR$(",TK_STRS    ; STR$(
       00:E4FB: D5 
  8590                        LBB_SWAP
  8591 00:E4FC: 57 41 50 A6        .byte "WAP",TK_SWAP     ; SWAP
  8592 00:E500: 00                 .byte $00
  8593                        TAB_ASCT
  8594                        LBB_TAB
  8595 00:E501: 41 42 28 AB        .byte "AB(",TK_TAB      ; TAB(
  8596                        LBB_TAN
  8597 00:E505: 41 4E 28 CF        .byte "AN(",TK_TAN      ; TAN(
  8598                        LBB_THEN
  8599 00:E509: 48 45 4E B0        .byte "HEN",TK_THEN     ; THEN
  8600                        LBB_TO
  8601 00:E50D: 4F AD              .byte "O",TK_TO         ; TO
  8602                        LBB_TWOPI
  8603 00:E50F: 57 4F 50 49        .byte "WOPI",TK_TWOPI   ; TWOPI
       00:E513: E1 
  8604 00:E514: 00                 .byte $00
  8605                        TAB_ASCU
  8606                        LBB_UCASES
  8607 00:E515: 43 41 53 45        .byte "CASE$(",TK_UCASES
       00:E519: 24 28 D8 
  8608                                                      ; UCASE$(
  8609                        LBB_UNTIL
  8610 00:E51C: 4E 54 49 4C        .byte "NTIL",TK_UNTIL   ; UNTIL
       00:E520: B3 
  8611                        LBB_USR
  8612 00:E521: 53 52 28 C6        .byte "SR(",TK_USR      ; USR(
  8613 00:E525: 00                 .byte $00
  8614                        TAB_ASCV
  8615                        LBB_VAL
  8616 00:E526: 41 4C 28 D6        .byte "AL(",TK_VAL      ; VAL(
  8617                        LBB_VPTR
  8618 00:E52A: 41 52 50 54        .byte "ARPTR(",TK_VPTR  ; VARPTR(
       00:E52E: 52 28 E2 
  8619 00:E531: 00                 .byte $00
  8620                        TAB_ASCW
  8621                        LBB_WAIT
  8622 00:E532: 41 49 54 96        .byte "AIT",TK_WAIT     ; WAIT
  8623                        LBB_WHILE
  8624 00:E536: 48 49 4C 45        .byte "HILE",TK_WHILE   ; WHILE
       00:E53A: B4 
  8625                        LBB_WIDTH
  8626 00:E53B: 49 44 54 48        .byte "IDTH",TK_WIDTH   ; WIDTH
       00:E53F: A4 
  8627 00:E540: 00                 .byte $00
  8628                        TAB_POWR
  8629 00:E541: BA 00              .byte TK_POWER,$00      ; ^
  8630                        
  8631                        ; new decode table for LIST
  8632                        ; Table is ..
  8633                        ; byte - keyword length, keyword first character
  8634                        ; word - pointer to rest of keyword from dictionary
  8635                        
  8636                        ; note if length is 1 then the pointer is ignored
  8637                        
  8638                        LAB_KEYT
  8639 00:E543: 03 45              .byte 3,'E'
  8640 00:E545: 0B E4              .word LBB_END           ; END
  8641 00:E547: 03 46              .byte 3,'F'
  8642 00:E549: 18 E4              .word LBB_FOR           ; FOR
  8643 00:E54B: 04 4E              .byte 4,'N'
  8644 00:E54D: 7B E4              .word LBB_NEXT          ; NEXT
  8645 00:E54F: 04 44              .byte 4,'D'
  8646 00:E551: EE E3              .word LBB_DATA          ; DATA
  8647 00:E553: 05 49              .byte 5,'I'
  8648 00:E555: 38 E4              .word LBB_INPUT         ; INPUT
  8649 00:E557: 03 44              .byte 3,'D'
  8650 00:E559: FD E3              .word LBB_DIM           ; DIM
  8651 00:E55B: 04 52              .byte 4,'R'
  8652 00:E55D: A7 E4              .word LBB_READ          ; READ
  8653 00:E55F: 03 4C              .byte 3,'L'
  8654 00:E561: 56 E4              .word LBB_LET           ; LET
  8655 00:E563: 03 44              .byte 3,'D'
  8656 00:E565: F2 E3              .word LBB_DEC           ; DEC
  8657 00:E567: 04 47              .byte 4,'G'
  8658 00:E569: 28 E4              .word LBB_GOTO          ; GOTO
  8659 00:E56B: 03 52              .byte 3,'R'
  8660 00:E56D: D2 E4              .word LBB_RUN           ; RUN
  8661 00:E56F: 02 49              .byte 2,'I'
  8662 00:E571: 33 E4              .word LBB_IF            ; IF
  8663 00:E573: 07 52              .byte 7,'R'
  8664 00:E575: AE E4              .word LBB_RESTORE       ; RESTORE
  8665 00:E577: 05 47              .byte 5,'G'
  8666 00:E579: 23 E4              .word LBB_GOSUB         ; GOSUB
  8667 00:E57B: 06 52              .byte 6,'R'
  8668 00:E57D: B5 E4              .word LBB_RETIRQ        ; RETIRQ
  8669 00:E57F: 06 52              .byte 6,'R'
  8670 00:E581: BB E4              .word LBB_RETNMI        ; RETNMI
  8671 00:E583: 06 52              .byte 6,'R'
  8672 00:E585: C1 E4              .word LBB_RETURN        ; RETURN
  8673 00:E587: 03 52              .byte 3,'R'
  8674 00:E589: AB E4              .word LBB_REM           ; REM
  8675 00:E58B: 04 53              .byte 4,'S'
  8676 00:E58D: F3 E4              .word LBB_STOP          ; STOP
  8677 00:E58F: 02 4F              .byte 2,'O'
  8678 00:E591: 8D E4              .word LBB_ON            ; ON
  8679 00:E593: 04 4E              .byte 4,'N'
  8680 00:E595: 85 E4              .word LBB_NULL          ; NULL
  8681 00:E597: 03 49              .byte 3,'I'
  8682 00:E599: 35 E4              .word LBB_INC           ; INC
  8683 00:E59B: 04 57              .byte 4,'W'
  8684 00:E59D: 32 E5              .word LBB_WAIT          ; WAIT
  8685 00:E59F: 04 4C              .byte 4,'L'
  8686 00:E5A1: 5D E4              .word LBB_LOAD          ; LOAD
  8687 00:E5A3: 04 53              .byte 4,'S'
  8688 00:E5A5: DB E4              .word LBB_SAVE          ; SAVE
  8689 00:E5A7: 03 44              .byte 3,'D'
  8690 00:E5A9: FA E3              .word LBB_DEF           ; DEF
  8691 00:E5AB: 04 50              .byte 4,'P'
  8692 00:E5AD: 99 E4              .word LBB_POKE          ; POKE
  8693 00:E5AF: 04 44              .byte 4,'D'
  8694 00:E5B1: 00 E4              .word LBB_DOKE          ; DOKE
  8695 00:E5B3: 04 43              .byte 4,'C'
  8696 00:E5B5: D7 E3              .word LBB_CALL          ; CALL
  8697 00:E5B7: 02 44              .byte 2,'D'
  8698 00:E5B9: 04 E4              .word LBB_DO            ; DO
  8699 00:E5BB: 04 4C              .byte 4,'L'
  8700 00:E5BD: 65 E4              .word LBB_LOOP          ; LOOP
  8701 00:E5BF: 05 50              .byte 5,'P'
  8702 00:E5C1: A1 E4              .word LBB_PRINT         ; PRINT
  8703 00:E5C3: 04 43              .byte 4,'C'
  8704 00:E5C5: E5 E3              .word LBB_CONT          ; CONT
  8705 00:E5C7: 04 4C              .byte 4,'L'
  8706 00:E5C9: 59 E4              .word LBB_LIST          ; LIST
  8707 00:E5CB: 05 43              .byte 5,'C'
  8708 00:E5CD: E0 E3              .word LBB_CLEAR         ; CLEAR
  8709 00:E5CF: 03 4E              .byte 3,'N'
  8710 00:E5D1: 78 E4              .word LBB_NEW           ; NEW
  8711 00:E5D3: 05 57              .byte 5,'W'
  8712 00:E5D5: 3B E5              .word LBB_WIDTH         ; WIDTH
  8713 00:E5D7: 03 47              .byte 3,'G'
  8714 00:E5D9: 20 E4              .word LBB_GET           ; GET
  8715 00:E5DB: 04 53              .byte 4,'S'
  8716 00:E5DD: FC E4              .word LBB_SWAP          ; SWAP
  8717 00:E5DF: 06 42              .byte 6,'B'
  8718 00:E5E1: C9 E3              .word LBB_BITSET        ; BITSET
  8719 00:E5E3: 06 42              .byte 6,'B'
  8720 00:E5E5: C3 E3              .word LBB_BITCLR        ; BITCLR
  8721 00:E5E7: 03 49              .byte 3,'I'
  8722 00:E5E9: 41 E4              .word LBB_IRQ           ; IRQ
  8723 00:E5EB: 03 4E              .byte 3,'N'
  8724 00:E5ED: 7F E4              .word LBB_NMI           ; NMI
  8725                        
  8726                        ; secondary commands (can't start a statement)
  8727                        
  8728 00:E5EF: 04 54              .byte 4,'T'
  8729 00:E5F1: 01 E5              .word LBB_TAB           ; TAB
  8730 00:E5F3: 04 45              .byte 4,'E'
  8731 00:E5F5: 07 E4              .word LBB_ELSE          ; ELSE
  8732 00:E5F7: 02 54              .byte 2,'T'
  8733 00:E5F9: 0D E5              .word LBB_TO            ; TO
  8734 00:E5FB: 02 46              .byte 2,'F'
  8735 00:E5FD: 16 E4              .word LBB_FN            ; FN
  8736 00:E5FF: 04 53              .byte 4,'S'
  8737 00:E601: E7 E4              .word LBB_SPC           ; SPC
  8738 00:E603: 04 54              .byte 4,'T'
  8739 00:E605: 09 E5              .word LBB_THEN          ; THEN
  8740 00:E607: 03 4E              .byte 3,'N'
  8741 00:E609: 82 E4              .word LBB_NOT           ; NOT
  8742 00:E60B: 04 53              .byte 4,'S'
  8743 00:E60D: EF E4              .word LBB_STEP          ; STEP
  8744 00:E60F: 05 55              .byte 5,'U'
  8745 00:E611: 1C E5              .word LBB_UNTIL         ; UNTIL
  8746 00:E613: 05 57              .byte 5,'W'
  8747 00:E615: 36 E5              .word LBB_WHILE         ; WHILE
  8748 00:E617: 03 4F              .byte 3,'O'
  8749 00:E619: 8A E4              .word LBB_OFF           ; OFF
  8750                        
  8751                        ; opperators
  8752                        
  8753 00:E61B: 01 2B              .byte 1,'+'
  8754 00:E61D: 00 00              .word $0000             ; +
  8755 00:E61F: 01 2D              .byte 1,'-'
  8756 00:E621: 00 00              .word $0000             ; -
  8757 00:E623: 01 2A              .byte 1,'*'
  8758 00:E625: 00 00              .word $0000             ; *
  8759 00:E627: 01 2F              .byte 1,'/'
  8760 00:E629: 00 00              .word $0000             ; /
  8761 00:E62B: 01 5E              .byte 1,'^'
  8762 00:E62D: 00 00              .word $0000             ; ^
  8763 00:E62F: 03 41              .byte 3,'A'
  8764 00:E631: B2 E3              .word LBB_AND           ; AND
  8765 00:E633: 03 45              .byte 3,'E'
  8766 00:E635: 0E E4              .word LBB_EOR           ; EOR
  8767 00:E637: 02 4F              .byte 2,'O'
  8768 00:E639: 8F E4              .word LBB_OR            ; OR
  8769 00:E63B: 02 3E              .byte 2,'>'
  8770 00:E63D: A8 E3              .word LBB_RSHIFT        ; >>
  8771 00:E63F: 02 3C              .byte 2,'<'
  8772 00:E641: A2 E3              .word LBB_LSHIFT        ; <<
  8773 00:E643: 01 3E              .byte 1,'>'
  8774 00:E645: 00 00              .word $0000             ; >
  8775 00:E647: 01 3D              .byte 1,'='
  8776 00:E649: 00 00              .word $0000             ; =
  8777 00:E64B: 01 3C              .byte 1,'<'
  8778 00:E64D: 00 00              .word $0000             ; <
  8779                        
  8780                        ; functions
  8781                        
  8782 00:E64F: 04 53              .byte 4,'S'             ;
  8783 00:E651: DF E4              .word LBB_SGN           ; SGN
  8784 00:E653: 04 49              .byte 4,'I'             ;
  8785 00:E655: 3D E4              .word LBB_INT           ; INT
  8786 00:E657: 04 41              .byte 4,'A'             ;
  8787 00:E659: AE E3              .word LBB_ABS           ; ABS
  8788 00:E65B: 04 55              .byte 4,'U'             ;
  8789 00:E65D: 21 E5              .word LBB_USR           ; USR
  8790 00:E65F: 04 46              .byte 4,'F'             ;
  8791 00:E661: 1B E4              .word LBB_FRE           ; FRE
  8792 00:E663: 04 50              .byte 4,'P'             ;
  8793 00:E665: 9D E4              .word LBB_POS           ; POS
  8794 00:E667: 04 53              .byte 4,'S'             ;
  8795 00:E669: EB E4              .word LBB_SQR           ; SQR
  8796 00:E66B: 04 52              .byte 4,'R'             ;
  8797 00:E66D: CE E4              .word LBB_RND           ; RND
  8798 00:E66F: 04 4C              .byte 4,'L'             ;
  8799 00:E671: 61 E4              .word LBB_LOG           ; LOG
  8800 00:E673: 04 45              .byte 4,'E'             ;
  8801 00:E675: 11 E4              .word LBB_EXP           ; EXP
  8802 00:E677: 04 43              .byte 4,'C'             ;
  8803 00:E679: E9 E3              .word LBB_COS           ; COS
  8804 00:E67B: 04 53              .byte 4,'S'             ;
  8805 00:E67D: E3 E4              .word LBB_SIN           ; SIN
  8806 00:E67F: 04 54              .byte 4,'T'             ;
  8807 00:E681: 05 E5              .word LBB_TAN           ; TAN
  8808 00:E683: 04 41              .byte 4,'A'             ;
  8809 00:E685: B9 E3              .word LBB_ATN           ; ATN
  8810 00:E687: 05 50              .byte 5,'P'             ;
  8811 00:E689: 92 E4              .word LBB_PEEK          ; PEEK
  8812 00:E68B: 05 44              .byte 5,'D'             ;
  8813 00:E68D: F5 E3              .word LBB_DEEK          ; DEEK
  8814 00:E68F: 05 53              .byte 5,'S'             ;
  8815 00:E691: D6 E4              .word LBB_SADD          ; SADD
  8816 00:E693: 04 4C              .byte 4,'L'             ;
  8817 00:E695: 52 E4              .word LBB_LEN           ; LEN
  8818 00:E697: 05 53              .byte 5,'S'             ;
  8819 00:E699: F7 E4              .word LBB_STRS          ; STR$
  8820 00:E69B: 04 56              .byte 4,'V'             ;
  8821 00:E69D: 26 E5              .word LBB_VAL           ; VAL
  8822 00:E69F: 04 41              .byte 4,'A'             ;
  8823 00:E6A1: B5 E3              .word LBB_ASC           ; ASC
  8824 00:E6A3: 07 55              .byte 7,'U'             ;
  8825 00:E6A5: 15 E5              .word LBB_UCASES        ; UCASE$
  8826 00:E6A7: 07 4C              .byte 7,'L'             ;
  8827 00:E6A9: 45 E4              .word LBB_LCASES        ; LCASE$
  8828 00:E6AB: 05 43              .byte 5,'C'             ;
  8829 00:E6AD: DB E3              .word LBB_CHRS          ; CHR$
  8830 00:E6AF: 05 48              .byte 5,'H'             ;
  8831 00:E6B1: 2D E4              .word LBB_HEXS          ; HEX$
  8832 00:E6B3: 05 42              .byte 5,'B'             ;
  8833 00:E6B5: BE E3              .word LBB_BINS          ; BIN$
  8834 00:E6B7: 07 42              .byte 7,'B'             ;
  8835 00:E6B9: CF E3              .word LBB_BITTST        ; BITTST
  8836 00:E6BB: 04 4D              .byte 4,'M'             ;
  8837 00:E6BD: 6A E4              .word LBB_MAX           ; MAX
  8838 00:E6BF: 04 4D              .byte 4,'M'             ;
  8839 00:E6C1: 73 E4              .word LBB_MIN           ; MIN
  8840 00:E6C3: 02 50              .byte 2,'P'             ;
  8841 00:E6C5: 97 E4              .word LBB_PI            ; PI
  8842 00:E6C7: 05 54              .byte 5,'T'             ;
  8843 00:E6C9: 0F E5              .word LBB_TWOPI         ; TWOPI
  8844 00:E6CB: 07 56              .byte 7,'V'             ;
  8845 00:E6CD: 2A E5              .word LBB_VPTR          ; VARPTR
  8846 00:E6CF: 06 4C              .byte 6,'L'             ;
  8847 00:E6D1: 4C E4              .word LBB_LEFTS         ; LEFT$
  8848 00:E6D3: 07 52              .byte 7,'R'             ;
  8849 00:E6D5: C7 E4              .word LBB_RIGHTS        ; RIGHT$
  8850 00:E6D7: 05 4D              .byte 5,'M'             ;
  8851 00:E6D9: 6E E4              .word LBB_MIDS          ; MID$
  8852                        
  8853                        ; BASIC messages, mostly error messages
  8854                        
  8855                        LAB_BAER
  8856 00:E6DB: FF E6              .word ERR_NF            ;$00 NEXT without FOR
  8857 00:E6DD: 10 E7              .word ERR_SN            ;$02 syntax
  8858 00:E6DF: 17 E7              .word ERR_RG            ;$04 RETURN without GOSUB
  8859 00:E6E1: 2C E7              .word ERR_OD            ;$06 out of data
  8860 00:E6E3: 38 E7              .word ERR_FC            ;$08 function call
  8861 00:E6E5: 46 E7              .word ERR_OV            ;$0A overflow
  8862 00:E6E7: 4F E7              .word ERR_OM            ;$0C out of memory
  8863 00:E6E9: 5D E7              .word ERR_US            ;$0E undefined statement
  8864 00:E6EB: 71 E7              .word ERR_BS            ;$10 array bounds
  8865 00:E6ED: 7E E7              .word ERR_DD            ;$12 double dimension array
  8866 00:E6EF: 8F E7              .word ERR_D0            ;$14 divide by 0
  8867 00:E6F1: 9E E7              .word ERR_ID            ;$16 illegal direct
  8868 00:E6F3: AD E7              .word ERR_TM            ;$18 type mismatch
  8869 00:E6F5: BB E7              .word ERR_LS            ;$1A long string
  8870 00:E6F7: CB E7              .word ERR_ST            ;$1C string too complex
  8871 00:E6F9: DE E7              .word ERR_CN            ;$1E continue error
  8872 00:E6FB: ED E7              .word ERR_UF            ;$20 undefined function
  8873 00:E6FD: 00 E8              .word ERR_LD            ;$22 LOOP without DO
  8874                        
  8875                        ; I may implement these two errors to force definition of variables and
  8876                        ; dimensioning of arrays before use.
  8877                        
  8878                        ;     .word ERR_UV            ;$24 undefined variable
  8879                        
  8880                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8881                        
  8882                        ;     .word ERR_UA            ;$26 undimensioned array
  8883                        
  8884 00:E6FF: 4E 45 58 54  ERR_NF      .byte "NEXT without FOR",$00
       00:E703: 20 77 69 74 
       00:E707: 68 6F 75 74 
       00:E70B: 20 46 4F 52 
       00:E70F: 00 
  8885 00:E710: 53 79 6E 74  ERR_SN      .byte "Syntax",$00
       00:E714: 61 78 00 
  8886 00:E717: 52 45 54 55  ERR_RG      .byte "RETURN without GOSUB",$00
       00:E71B: 52 4E 20 77 
       00:E71F: 69 74 68 6F 
       00:E723: 75 74 20 47 
       00:E727: 4F 53 55 42 
       00:E72B: 00 
  8887 00:E72C: 4F 75 74 20  ERR_OD      .byte "Out of DATA",$00
       00:E730: 6F 66 20 44 
       00:E734: 41 54 41 00 
  8888 00:E738: 46 75 6E 63  ERR_FC      .byte "Function call",$00
       00:E73C: 74 69 6F 6E 
       00:E740: 20 63 61 6C 
       00:E744: 6C 00 
  8889 00:E746: 4F 76 65 72  ERR_OV      .byte "Overflow",$00
       00:E74A: 66 6C 6F 77 
       00:E74E: 00 
  8890 00:E74F: 4F 75 74 20  ERR_OM      .byte "Out of memory",$00
       00:E753: 6F 66 20 6D 
       00:E757: 65 6D 6F 72 
       00:E75B: 79 00 
  8891 00:E75D: 55 6E 64 65  ERR_US      .byte "Undefined statement",$00
       00:E761: 66 69 6E 65 
       00:E765: 64 20 73 74 
       00:E769: 61 74 65 6D 
       00:E76D: 65 6E 74 00 
  8892 00:E771: 41 72 72 61  ERR_BS      .byte "Array bounds",$00
       00:E775: 79 20 62 6F 
       00:E779: 75 6E 64 73 
       00:E77D: 00 
  8893 00:E77E: 44 6F 75 62  ERR_DD      .byte "Double dimension",$00
       00:E782: 6C 65 20 64 
       00:E786: 69 6D 65 6E 
       00:E78A: 73 69 6F 6E 
       00:E78E: 00 
  8894 00:E78F: 44 69 76 69  ERR_D0      .byte "Divide by zero",$00
       00:E793: 64 65 20 62 
       00:E797: 79 20 7A 65 
       00:E79B: 72 6F 00 
  8895 00:E79E: 49 6C 6C 65  ERR_ID      .byte "Illegal direct",$00
       00:E7A2: 67 61 6C 20 
       00:E7A6: 64 69 72 65 
       00:E7AA: 63 74 00 
  8896 00:E7AD: 54 79 70 65  ERR_TM      .byte "Type mismatch",$00
       00:E7B1: 20 6D 69 73 
       00:E7B5: 6D 61 74 63 
       00:E7B9: 68 00 
  8897 00:E7BB: 53 74 72 69  ERR_LS      .byte "String too long",$00
       00:E7BF: 6E 67 20 74 
       00:E7C3: 6F 6F 20 6C 
       00:E7C7: 6F 6E 67 00 
  8898 00:E7CB: 53 74 72 69  ERR_ST      .byte "String too complex",$00
       00:E7CF: 6E 67 20 74 
       00:E7D3: 6F 6F 20 63 
       00:E7D7: 6F 6D 70 6C 
       00:E7DB: 65 78 00 
  8899 00:E7DE: 43 61 6E 27  ERR_CN      .byte "Can't continue",$00
       00:E7E2: 74 20 63 6F 
       00:E7E6: 6E 74 69 6E 
       00:E7EA: 75 65 00 
  8900 00:E7ED: 55 6E 64 65  ERR_UF      .byte "Undefined function",$00
       00:E7F1: 66 69 6E 65 
       00:E7F5: 64 20 66 75 
       00:E7F9: 6E 63 74 69 
       00:E7FD: 6F 6E 00 
  8901 00:E800: 4C 4F 4F 50  ERR_LD      .byte "LOOP without DO",$00
       00:E804: 20 77 69 74 
       00:E808: 68 6F 75 74 
       00:E80C: 20 44 4F 00 
  8902                        
  8903                        ;ERR_UV     .byte "Undefined variable",$00
  8904                        
  8905                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8906                        
  8907                        ;ERR_UA     .byte "Undimensioned array",$00
  8908                        
  8909 00:E810: 0D 0A 42 72  LAB_BMSG    .byte $0D,$0A,"Break",$00
       00:E814: 65 61 6B 00 
  8910 00:E818: 20 45 72 72  LAB_EMSG    .byte " Error",$00
       00:E81C: 6F 72 00 
  8911 00:E81F: 20 69 6E 20  LAB_LMSG    .byte " in line ",$00
       00:E823: 6C 69 6E 65 
       00:E827: 20 00 
  8912 00:E829: 0D 0A 52 65  LAB_RMSG    .byte $0D,$0A,"Ready",$0D,$0A,$00
       00:E82D: 61 64 79 0D 
       00:E831: 0A 00 
  8913                        
  8914 00:E833: 20 45 78 74  LAB_IMSG    .byte " Extra ignored",$0D,$0A,$00
       00:E837: 72 61 20 69 
       00:E83B: 67 6E 6F 72 
       00:E83F: 65 64 0D 0A 
       00:E843: 00 
  8915 00:E844: 20 52 65 64  LAB_REDO    .byte " Redo from start",$0D,$0A,$00
       00:E848: 6F 20 66 72 
       00:E84C: 6F 6D 20 73 
       00:E850: 74 61 72 74 
       00:E854: 0D 0A 00 
  8916                        
  8917                        LAB_vec
  8918 00:E857: 5F E8                .word   CONIN           ; byte in from simulated ACIA
  8919 00:E859: 69 E8                .word   CONOUT          ; byte out to simulated ACIA
  8920 00:E85B: 68 E8                .word   no_load         ; null load vector for EhBASIC
  8921 00:E85D: 68 E8                .word   no_save         ; null save vector for EhBASIC
  8922                        
  8923                        ; IRQ/NMI no support
  8924                        	if 0
  8925                        IRQ_CODE
  8926                                PHA                     ; save A
  8927                                LDA     IrqBase         ; get the IRQ flag byte
  8928                                LSR                     ; shift the set b7 to b6, and on down ...
  8929                                ORA     IrqBase         ; OR the original back in
  8930                                STA     IrqBase         ; save the new IRQ flag byte
  8931                                PLA                             ; restore A
  8932                                RTI
  8933                        
  8934                        ; EhBASIC NMI support
  8935                        
  8936                        NMI_CODE
  8937                                PHA                     ; save A
  8938                                LDA     NmiBase         ; get the NMI flag byte
  8939                                LSR                     ; shift the set b7 to b6, and on down ...
  8940                                ORA     NmiBase         ; OR the original back in
  8941                                STA     NmiBase         ; save the new NMI flag byte
  8942                                PLA                     ; restore A
  8943                                RTI
  8944                        	endif
  8945                        
  8946                        END_CODE
  8947                        
  8948                        ;;;
  8949                        ;;;     Console Driver
  8950                        ;;;
  8951             00000001   CONIN_NO	equ	1
  8952             00000002   CONOUT_NO	equ	2
  8953             00000003   CONST_NO	equ	3
  8954                        
  8955                        CONIN
  8956 00:E85F: 00 03        	BRK	CONST_NO
  8957 00:E861: 29 01        	and	#1
  8958 00:E863: F0 06        	beq	no_key
  8959 00:E865: 00 01        	BRK	CONIN_NO
  8960 00:E867: 38           	sec
  8961                        no_load                         ; empty load vector for EhBASIC
  8962                        no_save                         ; empty save vector for EhBASIC
  8963 00:E868: 60           	RTS
  8964                        
  8965                        CONOUT
  8966 00:E869: 00 02        	BRK	CONOUT_NO		; ECHO BACK
  8967                        no_key
  8968 00:E86B: 18           	clc
  8969 00:E86C: 60           	RTS
  8970                        AA_end_basic


      Lines assembled: 8970
      Errors: 0
