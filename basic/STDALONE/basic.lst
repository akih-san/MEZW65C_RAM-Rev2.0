     1                        ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.22p5
     2                        ;
     3                        ; -- original sorce code --
     4                        ; https://github.com/Klaus2m5/6502_EhBASIC_V2.22
     5                        ;
     6                        ; MEZW65C_RAM version
     7                        ;
     8                        ; This program was ported for the mezzanine board MEZW65C_RAM
     9                        ; by Akihito Honda. 2024.10
    10                        ; X(Twitter)  @akih_san
    11                        ;
    12                        ; Mezzanine board MEZW65C_RAM works on EMUZ80 SBC
    13                        ;
    14                        ; EMUZ80
    15                        ; https://vintagechips.wordpress.com/2022/03/05/emuz80_reference/
    16                        ; MEZW65C_RAM
    17                        ; https://github.com/akih-san/MEZW65C_RAM
    18                        ;
    19                        ;   Thanks all.
    20                        ;
    21                        	pl	0
    22                        	pw      132
    23                        	chip    65C02
    24                        
    25                        ; zero page use ..
    26                        
    27                        ; the following locations are bulk initialized from StrTab at LAB_GMEM
    28             00000000   LAB_WARM        equ $00       ; BASIC warm start entry point
    29             00000001   Wrmjpl          equ LAB_WARM+1; BASIC warm start vector jump low byte
    30             00000002   Wrmjph          equ LAB_WARM+2; BASIC warm start vector jump high byte
    31                        
    32             0000000A   Usrjmp          equ $0A       ; USR function JMP address
    33             0000000B   Usrjpl          equ Usrjmp+1  ; USR function JMP vector low byte
    34             0000000C   Usrjph          equ Usrjmp+2  ; USR function JMP vector high byte
    35             0000000D   Nullct          equ $0D       ; nulls output after each line
    36             0000000E   TPos            equ $0E       ; BASIC terminal position byte
    37             0000000F   TWidth          equ $0F       ; BASIC terminal width byte
    38             00000010   Iclim           equ $10       ; input column limit
    39             00000011   Itempl          equ $11       ; temporary integer low byte
    40             00000012   Itemph          equ Itempl+1  ; temporary integer high byte
    41                        ; end bulk initialize from StrTab at LAB_GMEM
    42                        
    43             00000011   nums_1          equ Itempl    ; number to bin/hex string convert MSB
    44             00000012   nums_2          equ nums_1+1  ; number to bin/hex string convert
    45             00000013   nums_3          equ nums_1+2  ; number to bin/hex string convert LSB
    46                        
    47             0000005B   Srchc           equ $5B       ; search character
    48             0000005B   Temp3           equ Srchc     ; temp byte used in number routines
    49             0000005C   Scnquo          equ $5C       ; scan-between-quotes flag
    50             0000005C   Asrch           equ Scnquo    ; alt search character
    51                        
    52             0000005B   XOAw_l          equ Srchc     ; eXclusive OR, OR and AND word low byte
    53             0000005C   XOAw_h          equ Scnquo    ; eXclusive OR, OR and AND word high byte
    54                        
    55             0000005D   Ibptr           equ $5D       ; input buffer pointer
    56             0000005D   Dimcnt          equ Ibptr     ; # of dimensions
    57             0000005D   Tindx           equ Ibptr     ; token index
    58                        
    59             0000005E   Defdim          equ $5E       ; default DIM flag
    60             0000005F   Dtypef          equ $5F       ; data type flag, $FF=string, $00=numeric
    61             00000060   Oquote          equ $60       ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
    62             00000060   Gclctd          equ $60       ; garbage collected flag
    63             00000061   Sufnxf          equ $61       ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
    64             00000062   Imode           equ $62       ; input mode flag, $00=INPUT, $80=READ
    65                        
    66             00000063   Cflag           equ $63       ; comparison evaluation flag
    67                        
    68             00000064   TabSiz          equ $64       ; TAB step size (was input flag)
    69                        
    70             00000065   next_s          equ $65       ; next descriptor stack address
    71                        
    72                                                      ; these two bytes form a word pointer to the item
    73                                                      ; currently on top of the descriptor stack
    74             00000066   last_sl         equ $66       ; last descriptor stack address low byte
    75             00000067   last_sh         equ $67       ; last descriptor stack address high byte (always $00)
    76                        
    77             00000068   des_sk          equ $68       ; descriptor stack start address (temp strings)
    78                        
    79                        ;               equ $70       ; End of descriptor stack
    80                        
    81             00000071   ut1_pl          equ $71       ; utility pointer 1 low byte
    82             00000072   ut1_ph          equ ut1_pl+1  ; utility pointer 1 high byte
    83             00000073   ut2_pl          equ $73       ; utility pointer 2 low byte
    84             00000074   ut2_ph          equ ut2_pl+1  ; utility pointer 2 high byte
    85                        
    86             00000071   Temp_2          equ ut1_pl    ; temp byte for block move    
    87                        
    88             00000075   FACt_1          equ $75       ; FAC temp mantissa1
    89             00000076   FACt_2          equ FACt_1+1  ; FAC temp mantissa2
    90             00000077   FACt_3          equ FACt_2+1  ; FAC temp mantissa3
    91                        
    92             00000076   dims_l          equ FACt_2    ; array dimension size low byte
    93             00000077   dims_h          equ FACt_3    ; array dimension size high byte
    94                        
    95             00000078   TempB           equ $78       ; temp page 0 byte
    96                        
    97             00000079   Smeml           equ $79       ; start of mem low byte       (Start-of-Basic)
    98             0000007A   Smemh           equ Smeml+1   ; start of mem high byte      (Start-of-Basic)
    99             0000007B   Svarl           equ $7B       ; start of vars low byte      (Start-of-Variables)
   100             0000007C   Svarh           equ Svarl+1   ; start of vars high byte     (Start-of-Variables)
   101             0000007D   Sarryl          equ $7D       ; var mem end low byte        (Start-of-Arrays)
   102             0000007E   Sarryh          equ Sarryl+1  ; var mem end high byte       (Start-of-Arrays)
   103             0000007F   Earryl          equ $7F       ; array mem end low byte      (End-of-Arrays)
   104             00000080   Earryh          equ Earryl+1  ; array mem end high byte     (End-of-Arrays)
   105             00000081   Sstorl          equ $81       ; string storage low byte     (String storage (moving down))
   106             00000082   Sstorh          equ Sstorl+1  ; string storage high byte    (String storage (moving down))
   107             00000083   Sutill          equ $83       ; string utility ptr low byte
   108             00000084   Sutilh          equ Sutill+1  ; string utility ptr high byte
   109             00000085   Ememl           equ $85       ; end of mem low byte         (Limit-of-memory)
   110             00000086   Ememh           equ Ememl+1   ; end of mem high byte        (Limit-of-memory)
   111             00000087   Clinel          equ $87       ; current line low byte       (Basic line number)
   112             00000088   Clineh          equ Clinel+1  ; current line high byte      (Basic line number)
   113             00000089   Blinel          equ $89       ; break line low byte         (Previous Basic line number)
   114             0000008A   Blineh          equ Blinel+1  ; break line high byte        (Previous Basic line number)
   115                        
   116             0000008B   Cpntrl          equ $8B       ; continue pointer low byte
   117             0000008C   Cpntrh          equ Cpntrl+1  ; continue pointer high byte
   118                        
   119             0000008D   Dlinel          equ $8D       ; current DATA line low byte
   120             0000008E   Dlineh          equ Dlinel+1  ; current DATA line high byte
   121                        
   122             0000008F   Dptrl           equ $8F       ; DATA pointer low byte
   123             00000090   Dptrh           equ Dptrl+1   ; DATA pointer high byte
   124                        
   125             00000091   Rdptrl          equ $91       ; read pointer low byte
   126             00000092   Rdptrh          equ Rdptrl+1  ; read pointer high byte
   127                        
   128             00000093   Varnm1          equ $93       ; current var name 1st byte
   129             00000094   Varnm2          equ Varnm1+1  ; current var name 2nd byte
   130                        
   131             00000095   Cvaral          equ $95       ; current var address low byte
   132             00000096   Cvarah          equ Cvaral+1  ; current var address high byte
   133                        
   134             00000097   Frnxtl          equ $97       ; var pointer for FOR/NEXT low byte
   135             00000098   Frnxth          equ Frnxtl+1  ; var pointer for FOR/NEXT high byte
   136                        
   137             00000097   Tidx1           equ Frnxtl    ; temp line index
   138                        
   139             00000097   Lvarpl          equ Frnxtl    ; let var pointer low byte
   140             00000098   Lvarph          equ Frnxth    ; let var pointer high byte
   141                        
   142             00000099   prstk           equ $99       ; precedence stacked flag
   143                        
   144             0000009B   comp_f          equ $9B       ; compare function flag, bits 0,1 and 2 used
   145                                                      ; bit 2 set if >
   146                                                      ; bit 1 set if =
   147                                                      ; bit 0 set if <
   148                        
   149             0000009C   func_l          equ $9C       ; function pointer low byte
   150             0000009D   func_h          equ func_l+1  ; function pointer high byte
   151                        
   152             0000009C   garb_l          equ func_l    ; garbage collection working pointer low byte
   153             0000009D   garb_h          equ func_h    ; garbage collection working pointer high byte
   154                        
   155             0000009E   des_2l          equ $9E       ; string descriptor_2 pointer low byte
   156             0000009F   des_2h          equ des_2l+1  ; string descriptor_2 pointer high byte
   157                        
   158             000000A0   g_step          equ $A0       ; garbage collect step size
   159                        
   160             000000A1   Fnxjmp          equ $A1       ; jump vector for functions
   161             000000A2   Fnxjpl          equ Fnxjmp+1  ; functions jump vector low byte
   162             000000A3   Fnxjph          equ Fnxjmp+2  ; functions jump vector high byte
   163                        
   164             000000A2   g_indx          equ Fnxjpl    ; garbage collect temp index
   165                        
   166             000000A3   FAC2_r          equ $A3       ; FAC2 rounding byte
   167                        
   168             000000A4   Adatal          equ $A4       ; array data pointer low byte
   169             000000A5   Adatah          equ Adatal+1  ; array data pointer high  byte
   170                        
   171             000000A4   Nbendl          equ Adatal    ; new block end pointer low byte
   172             000000A5   Nbendh          equ Adatah    ; new block end pointer high  byte
   173                        
   174             000000A6   Obendl          equ $A6       ; old block end pointer low byte
   175             000000A7   Obendh          equ Obendl+1  ; old block end pointer high  byte
   176                        
   177             000000A8   numexp          equ $A8       ; string to float number exponent count
   178             000000A9   expcnt          equ $A9       ; string to float exponent count
   179                        
   180             000000A8   numbit          equ numexp    ; bit count for array element calculations
   181                        
   182             000000AA   numdpf          equ $AA       ; string to float decimal point flag
   183             000000AB   expneg          equ $AB       ; string to float eval exponent -ve flag
   184                        
   185             000000AA   Astrtl          equ numdpf    ; array start pointer low byte
   186             000000AB   Astrth          equ expneg    ; array start pointer high  byte
   187                        
   188             000000AA   Histrl          equ numdpf    ; highest string low byte
   189             000000AB   Histrh          equ expneg    ; highest string high  byte
   190                        
   191             000000AA   Baslnl          equ numdpf    ; BASIC search line pointer low byte
   192             000000AB   Baslnh          equ expneg    ; BASIC search line pointer high  byte
   193                        
   194             000000AA   Fvar_l          equ numdpf    ; find/found variable pointer low byte
   195             000000AB   Fvar_h          equ expneg    ; find/found variable pointer high  byte
   196                        
   197             000000AA   Ostrtl          equ numdpf    ; old block start pointer low byte
   198             000000AB   Ostrth          equ expneg    ; old block start pointer high  byte
   199                        
   200             000000AA   Vrschl          equ numdpf    ; variable search pointer low byte
   201             000000AB   Vrschh          equ expneg    ; variable search pointer high  byte
   202                        
   203             000000AC   FAC1_e          equ $AC       ; FAC1 exponent
   204             000000AD   FAC1_1          equ FAC1_e+1  ; FAC1 mantissa1
   205             000000AE   FAC1_2          equ FAC1_e+2  ; FAC1 mantissa2
   206             000000AF   FAC1_3          equ FAC1_e+3  ; FAC1 mantissa3
   207             000000B0   FAC1_s          equ FAC1_e+4  ; FAC1 sign (b7)
   208                        
   209             000000AC   str_ln          equ FAC1_e    ; string length
   210             000000AD   str_pl          equ FAC1_1    ; string pointer low byte
   211             000000AE   str_ph          equ FAC1_2    ; string pointer high byte
   212                        
   213             000000AE   des_pl          equ FAC1_2    ; string descriptor pointer low byte
   214             000000AF   des_ph          equ FAC1_3    ; string descriptor pointer high byte
   215                        
   216             000000AF   mids_l          equ FAC1_3    ; MID$ string temp length byte
   217                        
   218             000000B1   negnum          equ $B1       ; string to float eval -ve flag
   219             000000B1   numcon          equ $B1       ; series evaluation constant count
   220                        
   221             000000B2   FAC1_o          equ $B2       ; FAC1 overflow byte
   222                        
   223             000000B3   FAC2_e          equ $B3       ; FAC2 exponent
   224             000000B4   FAC2_1          equ FAC2_e+1  ; FAC2 mantissa1
   225             000000B5   FAC2_2          equ FAC2_e+2  ; FAC2 mantissa2
   226             000000B6   FAC2_3          equ FAC2_e+3  ; FAC2 mantissa3
   227             000000B7   FAC2_s          equ FAC2_e+4  ; FAC2 sign (b7)
   228                        
   229             000000B8   FAC_sc          equ $B8       ; FAC sign comparison, Acc#1 vs #2
   230             000000B9   FAC1_r          equ $B9       ; FAC1 rounding byte
   231                        
   232             000000B8   ssptr_l         equ FAC_sc    ; string start pointer low byte
   233             000000B9   ssptr_h         equ FAC1_r    ; string start pointer high byte
   234                        
   235             000000B8   sdescr          equ FAC_sc    ; string descriptor pointer
   236                        
   237             000000BA   csidx           equ $BA       ; line crunch save index
   238             000000BA   Asptl           equ csidx     ; array size/pointer low byte
   239             000000BB   Aspth           equ $BB       ; array size/pointer high byte
   240                        
   241             000000BA   Btmpl           equ Asptl     ; BASIC pointer temp low byte
   242             000000BB   Btmph           equ Aspth     ; BASIC pointer temp low byte
   243                        
   244             000000BA   Cptrl           equ Asptl     ; BASIC pointer temp low byte
   245             000000BB   Cptrh           equ Aspth     ; BASIC pointer temp low byte
   246                        
   247             000000BA   Sendl           equ Asptl     ; BASIC pointer temp low byte
   248             000000BB   Sendh           equ Aspth     ; BASIC pointer temp low byte
   249                        
   250                        ; the following locations are bulk initialized from LAB_2CEE at LAB_2D4E
   251             000000BC   LAB_IGBY        equ $BC       ; get next BASIC byte subroutine
   252                        
   253             000000C2   LAB_GBYT        equ $C2       ; get current BASIC byte subroutine
   254             000000C3   Bpntrl          equ $C3       ; BASIC execute (get byte) pointer low byte
   255             000000C4   Bpntrh          equ Bpntrl+1  ; BASIC execute (get byte) pointer high byte
   256                        
   257                        ;               equ $D7       ; end of get BASIC char subroutine
   258                        ; end bulk initialize from LAB_2CEE at LAB_2D4E
   259                        
   260             000000D8   Rbyte4          equ $D8       ; extra PRNG byte
   261             000000D9   Rbyte1          equ Rbyte4+1  ; most significant PRNG byte
   262             000000DA   Rbyte2          equ Rbyte4+2  ; middle PRNG byte
   263             000000DB   Rbyte3          equ Rbyte4+3  ; least significant PRNG byte
   264                        
   265             000000DC   NmiBase         equ $DC       ; NMI handler enabled/setup/triggered flags
   266                                                      ; bit function
   267                                                      ; === ========
   268                                                      ; 7   interrupt enabled
   269                                                      ; 6   interrupt setup
   270                                                      ; 5   interrupt happened
   271                        ;               equ $DD       ; NMI handler addr low byte
   272                        ;               equ $DE       ; NMI handler addr high byte
   273             000000DF   IrqBase         equ $DF       ; IRQ handler enabled/setup/triggered flags
   274                        ;               equ $E0       ; IRQ handler addr low byte
   275                        ;               equ $E1       ; IRQ handler addr high byte
   276                        
   277                        ; *** removed unused comments for $DE-$E1
   278                        
   279                        ;               equ $E2       ; unused
   280                        ;               equ $E3       ; unused
   281                        ;               equ $E4       ; unused
   282                        ;               equ $E5       ; unused
   283                        ;               equ $E6       ; unused
   284                        ;               equ $E7       ; unused
   285                        ;               equ $E8       ; unused
   286                        ;               equ $E9       ; unused
   287                        ;               equ $EA       ; unused
   288                        ;               equ $EB       ; unused
   289                        ;               equ $EC       ; unused
   290                        ;               equ $ED       ; unused
   291                        ;               equ $EE       ; unused
   292                        
   293             000000EF   Decss           equ $EF       ; number to decimal string start
   294             000000F0   Decssp1         equ Decss+1   ; number to decimal string start
   295                        
   296                        ;               equ $FF       ; decimal string end
   297                        
   298                        ; token values needed for BASIC
   299                        
   300                        ; primary command tokens (can start a statement)
   301                        
   302             00000080   TK_END          equ $80             ; END token
   303             00000081   TK_FOR          equ TK_END+1        ; FOR token
   304             00000082   TK_NEXT         equ TK_FOR+1        ; NEXT token
   305             00000083   TK_DATA         equ TK_NEXT+1       ; DATA token
   306             00000084   TK_INPUT        equ TK_DATA+1       ; INPUT token
   307             00000085   TK_DIM          equ TK_INPUT+1      ; DIM token
   308             00000086   TK_READ         equ TK_DIM+1        ; READ token
   309             00000087   TK_LET          equ TK_READ+1       ; LET token
   310             00000088   TK_DEC          equ TK_LET+1        ; DEC token
   311             00000089   TK_GOTO         equ TK_DEC+1        ; GOTO token
   312             0000008A   TK_RUN          equ TK_GOTO+1       ; RUN token
   313             0000008B   TK_IF           equ TK_RUN+1        ; IF token
   314             0000008C   TK_RESTORE      equ TK_IF+1         ; RESTORE token
   315             0000008D   TK_GOSUB        equ TK_RESTORE+1    ; GOSUB token
   316             0000008E   TK_RETIRQ       equ TK_GOSUB+1      ; RETIRQ token
   317             0000008F   TK_RETNMI       equ TK_RETIRQ+1     ; RETNMI token
   318             00000090   TK_RETURN       equ TK_RETNMI+1     ; RETURN token
   319             00000091   TK_REM          equ TK_RETURN+1     ; REM token
   320             00000092   TK_STOP         equ TK_REM+1        ; STOP token
   321             00000093   TK_ON           equ TK_STOP+1       ; ON token
   322             00000094   TK_NULL         equ TK_ON+1         ; NULL token
   323             00000095   TK_INC          equ TK_NULL+1       ; INC token
   324             00000096   TK_WAIT         equ TK_INC+1        ; WAIT token
   325             00000097   TK_LOAD         equ TK_WAIT+1       ; LOAD token
   326             00000098   TK_SAVE         equ TK_LOAD+1       ; SAVE token
   327             00000099   TK_DEF          equ TK_SAVE+1       ; DEF token
   328             0000009A   TK_POKE         equ TK_DEF+1        ; POKE token
   329             0000009B   TK_DOKE         equ TK_POKE+1       ; DOKE token
   330             0000009C   TK_CALL         equ TK_DOKE+1       ; CALL token
   331             0000009D   TK_DO           equ TK_CALL+1       ; DO token
   332             0000009E   TK_LOOP         equ TK_DO+1         ; LOOP token
   333             0000009F   TK_PRINT        equ TK_LOOP+1       ; PRINT token
   334             000000A0   TK_CONT         equ TK_PRINT+1      ; CONT token
   335             000000A1   TK_LIST         equ TK_CONT+1       ; LIST token
   336             000000A2   TK_CLEAR        equ TK_LIST+1       ; CLEAR token
   337             000000A3   TK_NEW          equ TK_CLEAR+1      ; NEW token
   338             000000A4   TK_WIDTH        equ TK_NEW+1        ; WIDTH token
   339             000000A5   TK_GET          equ TK_WIDTH+1      ; GET token
   340             000000A6   TK_SWAP         equ TK_GET+1        ; SWAP token
   341             000000A7   TK_BITSET       equ TK_SWAP+1       ; BITSET token
   342             000000A8   TK_BITCLR       equ TK_BITSET+1     ; BITCLR token
   343             000000A9   TK_IRQ          equ TK_BITCLR+1     ; IRQ token
   344             000000AA   TK_NMI          equ TK_IRQ+1        ; NMI token
   345                        
   346                        ; secondary command tokens, can't start a statement
   347                        
   348             000000AB   TK_TAB          equ TK_NMI+1        ; TAB token
   349             000000AC   TK_ELSE         equ TK_TAB+1        ; ELSE token
   350             000000AD   TK_TO           equ TK_ELSE+1       ; TO token
   351             000000AE   TK_FN           equ TK_TO+1         ; FN token
   352             000000AF   TK_SPC          equ TK_FN+1         ; SPC token
   353             000000B0   TK_THEN         equ TK_SPC+1        ; THEN token
   354             000000B1   TK_NOT          equ TK_THEN+1       ; NOT token
   355             000000B2   TK_STEP         equ TK_NOT+1        ; STEP token
   356             000000B3   TK_UNTIL        equ TK_STEP+1       ; UNTIL token
   357             000000B4   TK_WHILE        equ TK_UNTIL+1      ; WHILE token
   358             000000B5   TK_OFF          equ TK_WHILE+1      ; OFF token
   359                        
   360                        ; opperator tokens
   361                        
   362             000000B6   TK_PLUS         equ TK_OFF+1        ; + token
   363             000000B7   TK_MINUS        equ TK_PLUS+1       ; - token
   364             000000B8   TK_MUL          equ TK_MINUS+1      ; * token
   365             000000B9   TK_DIV          equ TK_MUL+1        ; / token
   366             000000BA   TK_POWER        equ TK_DIV+1        ; ^ token
   367             000000BB   TK_AND          equ TK_POWER+1      ; AND token
   368             000000BC   TK_EOR          equ TK_AND+1        ; EOR token
   369             000000BD   TK_OR           equ TK_EOR+1        ; OR token
   370             000000BE   TK_RSHIFT       equ TK_OR+1         ; RSHIFT token
   371             000000BF   TK_LSHIFT       equ TK_RSHIFT+1     ; LSHIFT token
   372             000000C0   TK_GT           equ TK_LSHIFT+1     ; > token
   373             000000C1   TK_EQUAL        equ TK_GT+1         ; = token
   374             000000C2   TK_LT           equ TK_EQUAL+1      ; < token
   375                        
   376                        ; functions tokens
   377                        
   378             000000C3   TK_SGN          equ TK_LT+1         ; SGN token
   379             000000C4   TK_INT          equ TK_SGN+1        ; INT token
   380             000000C5   TK_ABS          equ TK_INT+1        ; ABS token
   381             000000C6   TK_USR          equ TK_ABS+1        ; USR token
   382             000000C7   TK_FRE          equ TK_USR+1        ; FRE token
   383             000000C8   TK_POS          equ TK_FRE+1        ; POS token
   384             000000C9   TK_SQR          equ TK_POS+1        ; SQR token
   385             000000CA   TK_RND          equ TK_SQR+1        ; RND token
   386             000000CB   TK_LOG          equ TK_RND+1        ; LOG token
   387             000000CC   TK_EXP          equ TK_LOG+1        ; EXP token
   388             000000CD   TK_COS          equ TK_EXP+1        ; COS token
   389             000000CE   TK_SIN          equ TK_COS+1        ; SIN token
   390             000000CF   TK_TAN          equ TK_SIN+1        ; TAN token
   391             000000D0   TK_ATN          equ TK_TAN+1        ; ATN token
   392             000000D1   TK_PEEK         equ TK_ATN+1        ; PEEK token
   393             000000D2   TK_DEEK         equ TK_PEEK+1       ; DEEK token
   394             000000D3   TK_SADD         equ TK_DEEK+1       ; SADD token
   395             000000D4   TK_LEN          equ TK_SADD+1       ; LEN token
   396             000000D5   TK_STRS         equ TK_LEN+1        ; STR$ token
   397             000000D6   TK_VAL          equ TK_STRS+1       ; VAL token
   398             000000D7   TK_ASC          equ TK_VAL+1        ; ASC token
   399             000000D8   TK_UCASES       equ TK_ASC+1        ; UCASE$ token
   400             000000D9   TK_LCASES       equ TK_UCASES+1     ; LCASE$ token
   401             000000DA   TK_CHRS         equ TK_LCASES+1     ; CHR$ token
   402             000000DB   TK_HEXS         equ TK_CHRS+1       ; HEX$ token
   403             000000DC   TK_BINS         equ TK_HEXS+1       ; BIN$ token
   404             000000DD   TK_BITTST       equ TK_BINS+1       ; BITTST token
   405             000000DE   TK_MAX          equ TK_BITTST+1     ; MAX token
   406             000000DF   TK_MIN          equ TK_MAX+1        ; MIN token
   407             000000E0   TK_PI           equ TK_MIN+1        ; PI token
   408             000000E1   TK_TWOPI        equ TK_PI+1         ; TWOPI token
   409             000000E2   TK_VPTR         equ TK_TWOPI+1      ; VARPTR token
   410             000000E3   TK_LEFTS        equ TK_VPTR+1       ; LEFT$ token
   411             000000E4   TK_RIGHTS       equ TK_LEFTS+1      ; RIGHT$ token
   412             000000E5   TK_MIDS         equ TK_RIGHTS+1     ; MID$ token
   413                        
   414                        ; offsets from a base of X or Y
   415                        
   416             00000000   PLUS_0          equ $00       ; X or Y plus 0
   417             00000001   PLUS_1          equ $01       ; X or Y plus 1
   418             00000002   PLUS_2          equ $02       ; X or Y plus 2
   419             00000003   PLUS_3          equ $03       ; X or Y plus 3
   420                        
   421             00000100   LAB_STAK        equ $0100     ; stack bottom, no offset
   422                        
   423             000001FE   LAB_SKFE        equ LAB_STAK+$FE
   424                                                      ; flushed stack address
   425             000001FF   LAB_SKFF        equ LAB_STAK+$FF
   426                                                      ; flushed stack address
   427                        
   428                        ; the following locations are bulk initialized from PG2_TABS at LAB_COLD
   429             00000200   ccflag          equ $0200     ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
   430             00000201   ccbyte          equ ccflag+1  ; BASIC CTRL-C byte
   431             00000202   ccnull          equ ccbyte+1  ; BASIC CTRL-C byte timeout
   432                        
   433             00000203   VEC_CC          equ ccnull+1  ; ctrl c check vector
   434                        ; end bulk initialize from PG2_TABS at LAB_COLD
   435                        
   436                        ; the following locations are bulk initialized by min_mon.asm from LAB_vec at LAB_stlp
   437             00000205   VEC_IN          equ VEC_CC+2  ; input vector
   438             00000207   VEC_OUT         equ VEC_IN+2  ; output vector
   439             00000209   VEC_LD          equ VEC_OUT+2 ; load vector
   440             0000020B   VEC_SV          equ VEC_LD+2  ; save vector
   441                        ; end bulk initialize by min_mon.asm from LAB_vec at LAB_stlp
   442                        
   443                        ; Ibuffs can now be anywhere in RAM, ensure that the max length is < $80,
   444                        ; the input buffer must not cross a page boundary and must not overlap with
   445                        ; program RAM pages!
   446                        
   447                        ;Ibuffs          equ IRQ_vec+$14
   448             00000221   Ibuffs          equ VEC_SV+$16
   449                                                      ; start of input buffer after IRQ/NMI code
   450             00000268   Ibuffe          equ Ibuffs+$47; end of input buffer
   451                        
   452             00000300   Ram_base        equ $0300     ; start of user RAM (set as needed, should be page aligned)
   453             0000D700   Ram_top          equ $D700     ; end of user RAM+1 (set as needed, should be page aligned)
   454                        
   455             00000018   UREQ_COM      equ       $18     ; CONIN/CONOUT request command (SYS)
   456             0000001A   CREQ_COM      equ       $1A     ; CONIN/CONOUT request command (User)
   457             0000001B   CBI_CHR         equ       $1B     ; charcter (CONIN/CONOUT) or number of strings
   458                        
   459                        
   460             00000010   Stack_floor     equ 16        ; bytes left free on stack for background interrupts
   461                        
   462                        ; This start can be changed to suit your system
   463                        
   464                              org    Ram_top
   465                        
   466                        ; BASIC cold start entry point
   467                        
   468                        LAB_COLD
   469                        
   470                        ;--------- MEZW65C_RAM file header --------------------------
   471 00:D700: 4C 20 D7     	jmp	COLD_START
   472                        
   473                        	; uinimon config data
   474                        	;
   475 00:D703: 4C 82 D8     	JMP	LAB_1274
   476                        	; Unique ID
   477 00:D706: 00 00        	db	0,0		; reserve
   478 00:D708: 4D 45 5A 57  mezID	db	"MEZW65C",0
       00:D70C: 36 35 43 00 
   479                        	;start program address
   480 00:D710: 00 D7        start_p	dw	Ram_top		; start address (Low)
   481 00:D712: 00 00        	dw	0		; (high)
   482                        
   483                        	; define Common memory address
   484 00:D714: 18 00        PIC_IF	dw	UREQ_COM	;  Common memory address for PIC (Low)
   485 00:D716: 00 00        	dw	0		; (high)
   486                        
   487 00:D718: 00           SW_816	db	0	; 0 : W65C02
   488                        			; 1 : W65C816 native mode 
   489 00:D719: 00           irq_sw	db	0	; 0 : no use IRQ console I/O
   490                        			; 1 : use IRQ timer interrupt driven console I/O
   491 00:D71A: 00 00 00 00  	db	0,0,0,0,0,0
       00:D71E: 00 00 
   492                        
   493                        ;--------- MEZW65C_RAM file header --------------------------
   494                        
   495                        ; set up vectors and interrupt code, copy them to page 2
   496                        
   497                        COLD_START
   498 00:D720: A0 1C                LDY     #END_CODE-LAB_vec       ; set index/count
   499                        LAB_stlp
   500 00:D722: B9 7C FF             LDA     LAB_vec-1,Y             ; get byte from interrupt code
   501 00:D725: 99 04 02             STA     VEC_IN-1,Y              ; save to RAM
   502 00:D728: 88                   DEY                             ; decrement index/count
   503 00:D729: D0 F7                BNE     LAB_stlp                ; loop if more to do
   504                        
   505 00:D72B: A0 04              LDY   #PG2_TABE-PG2_TABS-1
   506                                                      ; byte count-1
   507                        LAB_2D13
   508 00:D72D: B9 29 F8           LDA   PG2_TABS,Y        ; get byte
   509 00:D730: 99 00 02           STA   ccflag,Y          ; store in page 2
   510 00:D733: 88                 DEY                     ; decrement count
   511 00:D734: 10 F7              BPL   LAB_2D13          ; loop if not done
   512                        
   513 00:D736: A2 FF              LDX   #$FF              ; set byte
   514 00:D738: 86 88              STX   Clineh            ; set current line high byte (set immediate mode)
   515 00:D73A: 9A                 TXS                     ; reset stack pointer
   516                        
   517 00:D73B: 20 5A FF           jsr   INIT_RPB
   518                        
   519 00:D73E: A9 4C              LDA   #$4C              ; code for JMP
   520 00:D740: 85 A1              STA   Fnxjmp            ; save for jump vector for functions
   521                        
   522                        ; copy block from LAB_2CEE to $00BC - $00D7
   523                        
   524 00:D742: A2 1C              LDX   #StrTab-LAB_2CEE  ; set byte count
   525                        LAB_2D4E
   526 00:D744: BD 2D F8           LDA   LAB_2CEE-1,X      ; get byte from table
   527 00:D747: 95 BB              STA   LAB_IGBY-1,X      ; save byte in page zero
   528 00:D749: CA                 DEX                     ; decrement count
   529 00:D74A: D0 F8              BNE   LAB_2D4E          ; loop if not all done
   530                        
   531                        ; copy block from StrTab to $0000 - $0012
   532                        
   533                        LAB_GMEM
   534 00:D74C: A2 12              LDX   #EndTab-StrTab-1  ; set byte count-1
   535                        TabLoop
   536 00:D74E: BD 4A F8           LDA   StrTab,X          ; get byte from table
   537 00:D751: 95 00              STA   PLUS_0,X          ; save byte in page zero
   538 00:D753: CA                 DEX                     ; decrement count
   539 00:D754: 10 F8              BPL   TabLoop           ; loop if not all done
   540                        
   541                        ; set-up start values
   542                        
   543 00:D756: A9 00              LDA   #$00              ; clear A
   544 00:D758: 85 DC              STA   NmiBase           ; clear NMI handler enabled flag
   545 00:D75A: 85 DF              STA   IrqBase           ; clear IRQ handler enabled flag
   546 00:D75C: 85 B2              STA   FAC1_o            ; clear FAC1 overflow byte
   547 00:D75E: 85 67              STA   last_sh           ; clear descriptor stack top item pointer high byte
   548                        
   549 00:D760: A9 0E              LDA   #$0E              ; set default tab size
   550 00:D762: 85 64              STA   TabSiz            ; save it
   551 00:D764: A9 03              LDA   #$03              ; set garbage collect step size for descriptor stack
   552 00:D766: 85 A0              STA   g_step            ; save it
   553 00:D768: A2 68              LDX   #des_sk           ; descriptor stack start
   554 00:D76A: 86 65              STX   next_s            ; set descriptor stack pointer
   555 00:D76C: 20 B8 DF           JSR   LAB_CRLF          ; print CR/LF
   556                              
   557                        	if 0
   558                              LDA   #<LAB_MSZM        ; point to memory size message (low addr)
   559                              LDY   #>LAB_MSZM        ; point to memory size message (high addr)
   560                              JSR   LAB_18C3          ; print null terminated string from memory
   561                              JSR   LAB_INLN          ; print "? " and get BASIC input
   562                        	endif
   563                        
   564 00:D76F: A2 15        	ldx #21
   565 00:D771: A0 02        	ldy #02
   566                        
   567 00:D773: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   568 00:D775: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   569                        
   570 00:D777: A9 00        	lda #0
   571                        
   572                        	if 0
   573                              JSR   LAB_GBYT          ; get last byte back
   574                        
   575                              BNE   LAB_2DAA          ; branch if not null (user typed something)
   576                        	endif
   577                        
   578 00:D779: A0 00              LDY   #$00              ; else clear Y
   579                                                      ; character was null so get memory size the hard way
   580                                                      ; we get here with Y=0 and Itempl/h = Ram_base
   581                        LAB_2D93
   582 00:D77B: E6 11              INC   Itempl            ; increment temporary integer low byte
   583 00:D77D: D0 08              BNE   LAB_2D99          ; branch if no overflow
   584                        
   585 00:D77F: E6 12              INC   Itemph            ; increment temporary integer high byte
   586 00:D781: A5 12              LDA   Itemph            ; get high byte
   587 00:D783: C9 D7              CMP   #>Ram_top         ; compare with top of RAM+1
   588 00:D785: F0 1D              BEQ   LAB_2DB6          ; branch if match (end of user RAM)
   589                        
   590                        LAB_2D99
   591 00:D787: A9 55              LDA   #$55              ; set test byte
   592 00:D789: 91 11              STA   (Itempl),Y        ; save via temporary integer
   593 00:D78B: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   594 00:D78D: D0 15              BNE   LAB_2DB6          ; branch if fail
   595                        
   596 00:D78F: 0A                 ASL                     ; shift test byte left (now $AA)
   597 00:D790: 91 11              STA   (Itempl),Y        ; save via temporary integer
   598 00:D792: D1 11              CMP   (Itempl),Y        ; compare via temporary integer
   599 00:D794: F0 E5              BEQ   LAB_2D93          ; if ok go do next byte
   600                        
   601 00:D796: D0 0C              BNE   LAB_2DB6          ; branch if fail
   602                        
   603                        LAB_2DAA
   604 00:D798: 20 D8 F0           JSR   LAB_2887          ; get FAC1 from string
   605 00:D79B: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
   606 00:D79D: C9 98              CMP   #$98              ; compare with exponent = 2^24
   607 00:D79F: B0 AB              BCS   LAB_GMEM          ; if too large go try again
   608                        
   609 00:D7A1: 20 29 EC           JSR   LAB_F2FU          ; save integer part of FAC1 in temporary integer
   610                                                      ; (no range check)
   611                        
   612                        LAB_2DB6
   613 00:D7A4: A5 11              LDA   Itempl            ; get temporary integer low byte
   614 00:D7A6: A4 12              LDY   Itemph            ; get temporary integer high byte
   615                        ; *** begin patch  2.22p5.0 RAM top sanity check ***
   616                        ; *** replace
   617                        ;      CPY   #<Ram_base+$100      ; compare with start of RAM+$100 high byte
   618                        ; +++ with
   619 00:D7A8: C0 04              CPY   #>Ram_base+$100      ; compare with start of RAM+$100 high byte
   620                        ; *** end patch    2.22p5.0 ***
   621 00:D7AA: 90 A0              BCC   LAB_GMEM          ; if too small go try again
   622                        
   623                        
   624                        ; uncomment these lines if you want to check on the high limit of memory. Note if
   625                        ; Ram_top is set too low then this will fail. default is ignore it and assume the
   626                        ; users know what they're doing!
   627                        
   628                        ;     CPY   #>Ram_top         ; compare with top of RAM high byte
   629                        ;     BCC   MEM_OK            ; branch if < RAM top
   630                        
   631                        ;     BNE   LAB_GMEM          ; if too large go try again
   632                                                      ; else was = so compare low bytes
   633                        ;     CMP   #<Ram_top         ; compare with top of RAM low byte
   634                        ;     BEQ   MEM_OK            ; branch if = RAM top
   635                        
   636                        ;     BCS   LAB_GMEM          ; if too large go try again
   637                        
   638                        ;MEM_OK
   639 00:D7AC: 85 85              STA   Ememl             ; set end of mem low byte
   640 00:D7AE: 84 86              STY   Ememh             ; set end of mem high byte
   641 00:D7B0: 85 81              STA   Sstorl            ; set bottom of string space low byte
   642 00:D7B2: 84 82              STY   Sstorh            ; set bottom of string space high byte
   643                        
   644 00:D7B4: A0 00              LDY   #<Ram_base        ; set start addr low byte
   645 00:D7B6: A2 03              LDX   #>Ram_base        ; set start addr high byte
   646 00:D7B8: 84 79              STY   Smeml             ; save start of mem low byte
   647 00:D7BA: 86 7A              STX   Smemh             ; save start of mem high byte
   648                        
   649                        ; this line is only needed if Ram_base is not $xx00
   650                              .IF   Ram_base&$FF>0
   651                              LDY   #$00              ; clear Y
   652                              .ENDIF
   653                        
   654 00:D7BC: 98                 TYA                     ; clear A
   655 00:D7BD: 91 79              STA   (Smeml),Y         ; clear first byte
   656 00:D7BF: E6 79              INC   Smeml             ; increment start of mem low byte
   657                        
   658                        ; these two lines are only needed if Ram_base is $xxFF
   659                              .IF   Ram_base&$FF=$FF
   660                              BNE   LAB_2E05          ; branch if no rollover
   661                              INC   Smemh             ; increment start of mem high byte
   662                        LAB_2E05
   663                              .ENDIF
   664                        
   665 00:D7C1: 20 B8 DF           JSR   LAB_CRLF          ; print CR/LF
   666 00:D7C4: 20 78 DA           JSR   LAB_1463          ; do "NEW" and "CLEAR"
   667 00:D7C7: A5 85              LDA   Ememl             ; get end of mem low byte
   668 00:D7C9: 38                 SEC                     ; set carry for subtract
   669 00:D7CA: E5 79              SBC   Smeml             ; subtract start of mem low byte
   670 00:D7CC: AA                 TAX                     ; copy to X
   671 00:D7CD: A5 86              LDA   Ememh             ; get end of mem high byte
   672 00:D7CF: E5 7A              SBC   Smemh             ; subtract start of mem high byte
   673 00:D7D1: 20 B4 F1           JSR   LAB_295E          ; print XA as unsigned integer (bytes free)
   674 00:D7D4: A9 6C              LDA   #<LAB_SMSG        ; point to sign-on message (low addr)
   675 00:D7D6: A0 F8              LDY   #>LAB_SMSG        ; point to sign-on message (high addr)
   676 00:D7D8: 20 F9 DF           JSR   LAB_18C3          ; print null terminated string from memory
   677 00:D7DB: A9 82              LDA   #<LAB_1274        ; warm start vector low byte
   678 00:D7DD: A0 D8              LDY   #>LAB_1274        ; warm start vector high byte
   679 00:D7DF: 85 01              STA   Wrmjpl            ; save warm start vector low byte
   680 00:D7E1: 84 02              STY   Wrmjph            ; save warm start vector high byte
   681 00:D7E3: 6C 01 00           JMP   (Wrmjpl)          ; go do warm start
   682                        
   683                        ; open up space in memory
   684                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   685                        
   686                        ; Nbendl,Nbendh - new block end address (A/Y)
   687                        ; Obendl,Obendh - old block end address
   688                        ; Ostrtl,Ostrth - old block start address
   689                        
   690                        ; returns with ..
   691                        
   692                        ; Nbendl,Nbendh - new block start address (high byte - $100)
   693                        ; Obendl,Obendh - old block start address (high byte - $100)
   694                        ; Ostrtl,Ostrth - old block start address (unchanged)
   695                        
   696                        LAB_11CF
   697 00:D7E6: 20 33 D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
   698                                                      ; addr to check is in AY (low/high)
   699 00:D7E9: 85 7F              STA   Earryl            ; save new array mem end low byte
   700 00:D7EB: 84 80              STY   Earryh            ; save new array mem end high byte
   701                        
   702                        ; open up space in memory
   703                        ; move (Ostrtl)-(Obendl) to new block ending at (Nbendl)
   704                        ; don't set array end
   705                        
   706                        LAB_11D6
   707 00:D7ED: 38                 SEC                     ; set carry for subtract
   708 00:D7EE: A5 A6              LDA   Obendl            ; get block end low byte
   709 00:D7F0: E5 AA              SBC   Ostrtl            ; subtract block start low byte
   710 00:D7F2: A8                 TAY                     ; copy MOD(block length/$100) byte to Y
   711 00:D7F3: A5 A7              LDA   Obendh            ; get block end high byte
   712 00:D7F5: E5 AB              SBC   Ostrth            ; subtract block start high byte
   713 00:D7F7: AA                 TAX                     ; copy block length high byte to X
   714 00:D7F8: E8                 INX                     ; +1 to allow for count=0 exit
   715 00:D7F9: 98                 TYA                     ; copy block length low byte to A
   716 00:D7FA: F0 24              BEQ   LAB_120A          ; branch if length low byte=0
   717                        
   718                                                      ; block is (X-1)*256+Y bytes, do the Y bytes first
   719                        
   720 00:D7FC: 38                 SEC                     ; set carry for add + 1, two's complement
   721 00:D7FD: 49 FF              EOR   #$FF              ; invert low byte for subtract
   722 00:D7FF: 65 A6              ADC   Obendl            ; add block end low byte
   723                        
   724 00:D801: 85 A6              STA   Obendl            ; save corrected old block end low byte
   725 00:D803: B0 03              BCS   LAB_11F3          ; branch if no underflow
   726                        
   727 00:D805: C6 A7              DEC   Obendh            ; else decrement block end high byte
   728 00:D807: 38                 SEC                     ; set carry for add + 1, two's complement
   729                        LAB_11F3
   730 00:D808: 98                 TYA                     ; get MOD(block length/$100) byte
   731 00:D809: 49 FF              EOR   #$FF              ; invert low byte for subtract
   732 00:D80B: 65 A4              ADC   Nbendl            ; add destination end low byte
   733 00:D80D: 85 A4              STA   Nbendl            ; save modified new block end low byte
   734 00:D80F: B0 08              BCS   LAB_1203          ; branch if no underflow
   735                        
   736 00:D811: C6 A5              DEC   Nbendh            ; else decrement block end high byte
   737 00:D813: 90 04              BCC   LAB_1203          ; branch always
   738                        
   739                        LAB_11FF
   740 00:D815: B1 A6              LDA   (Obendl),Y        ; get byte from source
   741 00:D817: 91 A4              STA   (Nbendl),Y        ; copy byte to destination
   742                        LAB_1203
   743 00:D819: 88                 DEY                     ; decrement index
   744 00:D81A: D0 F9              BNE   LAB_11FF          ; loop until Y=0
   745                        
   746                                                      ; now do Y=0 indexed byte
   747 00:D81C: B1 A6              LDA   (Obendl),Y        ; get byte from source
   748 00:D81E: 91 A4              STA   (Nbendl),Y        ; save byte to destination
   749                        LAB_120A
   750 00:D820: C6 A7              DEC   Obendh            ; decrement source pointer high byte
   751 00:D822: C6 A5              DEC   Nbendh            ; decrement destination pointer high byte
   752 00:D824: CA                 DEX                     ; decrement block count
   753 00:D825: D0 F2              BNE   LAB_1203          ; loop until count = $0
   754                        
   755 00:D827: 60                 RTS
   756                        
   757                        ; check room on stack for A bytes
   758                        ; stack too deep? do OM error
   759                        
   760                        LAB_1212
   761                        ; *** patch - additional stack floor protection for background interrupts
   762                        ; *** add
   763                              .IF   Stack_floor
   764 00:D828: 18                 CLC                     ; prep ADC
   765 00:D829: 69 10              ADC   #Stack_floor      ; stack pointer lower limit before interrupts
   766                              .ENDIF
   767                        ; *** end patch
   768 00:D82B: 85 78              STA   TempB             ; save result in temp byte
   769 00:D82D: BA                 TSX                     ; copy stack
   770 00:D82E: E4 78              CPX   TempB             ; compare new "limit" with stack
   771 00:D830: 90 30              BCC   LAB_OMER          ; if stack < limit do "Out of memory" error then warm start
   772                        
   773 00:D832: 60                 RTS
   774                        
   775                        ; check available memory, "Out of memory" error if no room
   776                        ; addr to check is in AY (low/high)
   777                        
   778                        LAB_121F
   779 00:D833: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   780 00:D835: 90 2A              BCC   LAB_124B          ; if less then exit (is ok)
   781                        
   782 00:D837: D0 04              BNE   LAB_1229          ; skip next test if greater (tested <)
   783                        
   784                                                      ; high byte was =, now do low byte
   785 00:D839: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   786 00:D83B: 90 24              BCC   LAB_124B          ; if less then exit (is ok)
   787                        
   788                                                      ; addr is > string storage ptr (oops!)
   789                        LAB_1229
   790 00:D83D: 48                 PHA                     ; push addr low byte
   791 00:D83E: A2 08              LDX   #$08              ; set index to save Adatal to expneg inclusive
   792 00:D840: 98                 TYA                     ; copy addr high byte (to push on stack)
   793                        
   794                                                      ; save misc numeric work area
   795                        LAB_122D
   796 00:D841: 48                 PHA                     ; push byte
   797 00:D842: B5 A3              LDA   Adatal-1,X        ; get byte from Adatal to expneg ( ,$00 not pushed)
   798 00:D844: CA                 DEX                     ; decrement index
   799 00:D845: 10 FA              BPL   LAB_122D          ; loop until all done
   800                        
   801 00:D847: 20 14 E9           JSR   LAB_GARB          ; garbage collection routine
   802                        
   803                                                      ; restore misc numeric work area
   804 00:D84A: A2 00              LDX   #$00              ; clear the index to restore bytes
   805                        LAB_1238
   806 00:D84C: 68                 PLA                     ; pop byte
   807 00:D84D: 95 A4              STA   Adatal,X          ; save byte to Adatal to expneg
   808 00:D84F: E8                 INX                     ; increment index
   809 00:D850: E0 08              CPX   #$08              ; compare with end + 1
   810 00:D852: 30 F8              BMI   LAB_1238          ; loop if more to do
   811                        
   812 00:D854: 68                 PLA                     ; pop addr high byte
   813 00:D855: A8                 TAY                     ; copy back to Y
   814 00:D856: 68                 PLA                     ; pop addr low byte
   815 00:D857: C4 82              CPY   Sstorh            ; compare bottom of string mem high byte
   816 00:D859: 90 06              BCC   LAB_124B          ; if less then exit (is ok)
   817                        
   818 00:D85B: D0 05              BNE   LAB_OMER          ; if greater do "Out of memory" error then warm start
   819                        
   820                                                      ; high byte was =, now do low byte
   821 00:D85D: C5 81              CMP   Sstorl            ; compare with bottom of string mem low byte
   822 00:D85F: B0 01              BCS   LAB_OMER          ; if >= do "Out of memory" error then warm start
   823                        
   824                                                      ; ok exit, carry clear
   825                        LAB_124B
   826 00:D861: 60                 RTS
   827                        
   828                        ; do "Out of memory" error then warm start
   829                        
   830                        LAB_OMER
   831 00:D862: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
   832                        
   833                        ; do error #X, then warm start
   834                        
   835                        LAB_XERR
   836 00:D864: 20 B8 DF           JSR   LAB_CRLF          ; print CR/LF
   837                        
   838 00:D867: BD DE FD           LDA   LAB_BAER,X        ; get error message pointer low byte
   839 00:D86A: BC DF FD           LDY   LAB_BAER+1,X      ; get error message pointer high byte
   840 00:D86D: 20 F9 DF           JSR   LAB_18C3          ; print null terminated string from memory
   841                        
   842 00:D870: 20 B1 DA           JSR   LAB_1491          ; flush stack and clear continue flag
   843 00:D873: A9 1B              LDA   #<LAB_EMSG        ; point to " Error" low addr
   844 00:D875: A0 FF              LDY   #>LAB_EMSG        ; point to " Error" high addr
   845                        LAB_1269
   846 00:D877: 20 F9 DF           JSR   LAB_18C3          ; print null terminated string from memory
   847 00:D87A: A4 88              LDY   Clineh            ; get current line high byte
   848 00:D87C: C8                 INY                     ; increment it
   849 00:D87D: F0 03              BEQ   LAB_1274          ; go do warm start (was immediate mode)
   850                        
   851                                                      ; else print line number
   852 00:D87F: 20 A9 F1           JSR   LAB_2953          ; print " in line [LINE #]"
   853                        
   854                        ; BASIC warm start entry point
   855                        ; wait for Basic command
   856                        
   857                        LAB_1274
   858                                                      ; clear ON IRQ/NMI bytes
   859 00:D882: A9 00              LDA   #$00              ; clear A
   860 00:D884: 85 DF              STA   IrqBase           ; clear enabled byte
   861 00:D886: 85 DC              STA   NmiBase           ; clear enabled byte
   862 00:D888: A9 2C              LDA   #<LAB_RMSG        ; point to "Ready" message low byte
   863 00:D88A: A0 FF              LDY   #>LAB_RMSG        ; point to "Ready" message high byte
   864                        
   865 00:D88C: 20 F9 DF           JSR   LAB_18C3          ; go do print string
   866                        
   867                        ; wait for Basic command (no "Ready")
   868                        
   869                        LAB_127D
   870 00:D88F: 20 75 D9           JSR   LAB_1357          ; call for BASIC input
   871                        LAB_1280
   872 00:D892: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
   873 00:D894: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
   874 00:D896: 20 C2 00           JSR   LAB_GBYT          ; scan memory
   875 00:D899: F0 F4              BEQ   LAB_127D          ; loop while null
   876                        
   877                        ; got to interpret input line now ..
   878                        
   879 00:D89B: A2 FF              LDX   #$FF              ; current line to null value
   880 00:D89D: 86 88              STX   Clineh            ; set current line high byte
   881 00:D89F: 90 06              BCC   LAB_1295          ; branch if numeric character (handle new BASIC line)
   882                        
   883                                                      ; no line number .. immediate mode
   884 00:D8A1: 20 A6 D9           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   885 00:D8A4: 4C 1A DC           JMP   LAB_15F6          ; go scan and interpret code
   886                        
   887                        ; handle new BASIC line
   888                        
   889                        LAB_1295
   890 00:D8A7: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
   891 00:D8AA: 20 A6 D9           JSR   LAB_13A6          ; crunch keywords into Basic tokens
   892 00:D8AD: 84 5D              STY   Ibptr             ; save index pointer to end of crunched line
   893 00:D8AF: 20 4C DA           JSR   LAB_SSLN          ; search BASIC for temp integer line number
   894 00:D8B2: 90 44              BCC   LAB_12E6          ; branch if not found
   895                        
   896                                                      ; aroooogah! line # already exists! delete it
   897 00:D8B4: A0 01              LDY   #$01              ; set index to next line pointer high byte
   898 00:D8B6: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
   899 00:D8B8: 85 72              STA   ut1_ph            ; save it
   900 00:D8BA: A5 7B              LDA   Svarl             ; get start of vars low byte
   901 00:D8BC: 85 71              STA   ut1_pl            ; save it
   902 00:D8BE: A5 AB              LDA   Baslnh            ; get found line pointer high byte
   903 00:D8C0: 85 74              STA   ut2_ph            ; save it
   904 00:D8C2: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   905 00:D8C4: 88                 DEY                     ; decrement index
   906 00:D8C5: F1 AA              SBC   (Baslnl),Y        ; subtract next line pointer low byte
   907 00:D8C7: 18                 CLC                     ; clear carry for add
   908 00:D8C8: 65 7B              ADC   Svarl             ; add start of vars low byte
   909 00:D8CA: 85 7B              STA   Svarl             ; save new start of vars low byte
   910 00:D8CC: 85 73              STA   ut2_pl            ; save destination pointer low byte
   911 00:D8CE: A5 7C              LDA   Svarh             ; get start of vars high byte
   912 00:D8D0: 69 FF              ADC   #$FF              ; -1 + carry
   913 00:D8D2: 85 7C              STA   Svarh             ; save start of vars high byte
   914 00:D8D4: E5 AB              SBC   Baslnh            ; subtract found line pointer high byte
   915 00:D8D6: AA                 TAX                     ; copy to block count
   916 00:D8D7: 38                 SEC                     ; set carry for subtract
   917 00:D8D8: A5 AA              LDA   Baslnl            ; get found line pointer low byte
   918 00:D8DA: E5 7B              SBC   Svarl             ; subtract start of vars low byte
   919 00:D8DC: A8                 TAY                     ; copy to bytes in first block count
   920 00:D8DD: B0 03              BCS   LAB_12D0          ; branch if overflow
   921                        
   922 00:D8DF: E8                 INX                     ; increment block count (correct for =0 loop exit)
   923 00:D8E0: C6 74              DEC   ut2_ph            ; decrement destination high byte
   924                        LAB_12D0
   925 00:D8E2: 18                 CLC                     ; clear carry for add
   926 00:D8E3: 65 71              ADC   ut1_pl            ; add source pointer low byte
   927 00:D8E5: 90 03              BCC   LAB_12D8          ; branch if no overflow
   928                        
   929 00:D8E7: C6 72              DEC   ut1_ph            ; else decrement source pointer high byte
   930 00:D8E9: 18                 CLC                     ; clear carry
   931                        
   932                                                      ; close up memory to delete old line
   933                        LAB_12D8
   934 00:D8EA: B1 71              LDA   (ut1_pl),Y        ; get byte from source
   935 00:D8EC: 91 73              STA   (ut2_pl),Y        ; copy to destination
   936 00:D8EE: C8                 INY                     ; increment index
   937 00:D8EF: D0 F9              BNE   LAB_12D8          ; while <> 0 do this block
   938                        
   939 00:D8F1: E6 72              INC   ut1_ph            ; increment source pointer high byte
   940 00:D8F3: E6 74              INC   ut2_ph            ; increment destination pointer high byte
   941 00:D8F5: CA                 DEX                     ; decrement block count
   942 00:D8F6: D0 F2              BNE   LAB_12D8          ; loop until all done
   943                        
   944                                                      ; got new line in buffer and no existing same #
   945                        LAB_12E6
   946 00:D8F8: AD 21 02           LDA   Ibuffs            ; get byte from start of input buffer
   947 00:D8FB: F0 3F              BEQ   LAB_1319          ; if null line just go flush stack/vars and exit
   948                        
   949                                                      ; got new line and it isn't empty line
   950 00:D8FD: A5 85              LDA   Ememl             ; get end of mem low byte
   951 00:D8FF: A4 86              LDY   Ememh             ; get end of mem high byte
   952 00:D901: 85 81              STA   Sstorl            ; set bottom of string space low byte
   953 00:D903: 84 82              STY   Sstorh            ; set bottom of string space high byte
   954 00:D905: A5 7B              LDA   Svarl             ; get start of vars low byte  (end of BASIC)
   955 00:D907: 85 A6              STA   Obendl            ; save old block end low byte
   956 00:D909: A4 7C              LDY   Svarh             ; get start of vars high byte (end of BASIC)
   957 00:D90B: 84 A7              STY   Obendh            ; save old block end high byte
   958 00:D90D: 65 5D              ADC   Ibptr             ; add input buffer pointer    (also buffer length)
   959 00:D90F: 90 01              BCC   LAB_1301          ; branch if no overflow from add
   960                        
   961 00:D911: C8                 INY                     ; else increment high byte
   962                        LAB_1301
   963 00:D912: 85 A4              STA   Nbendl            ; save new block end low byte (move to, low byte)
   964 00:D914: 84 A5              STY   Nbendh            ; save new block end high byte
   965 00:D916: 20 E6 D7           JSR   LAB_11CF          ; open up space in memory
   966                                                      ; old start pointer Ostrtl,Ostrth set by the find line call
   967 00:D919: A5 7F              LDA   Earryl            ; get array mem end low byte
   968 00:D91B: A4 80              LDY   Earryh            ; get array mem end high byte
   969 00:D91D: 85 7B              STA   Svarl             ; save start of vars low byte
   970 00:D91F: 84 7C              STY   Svarh             ; save start of vars high byte
   971 00:D921: A4 5D              LDY   Ibptr             ; get input buffer pointer    (also buffer length)
   972 00:D923: 88                 DEY                     ; adjust for loop type
   973                        LAB_1311
   974 00:D924: B9 1D 02           LDA   Ibuffs-4,Y        ; get byte from crunched line
   975 00:D927: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   976 00:D929: 88                 DEY                     ; decrement count
   977 00:D92A: C0 03              CPY   #$03              ; compare with first byte-1
   978 00:D92C: D0 F6              BNE   LAB_1311          ; continue while count <> 3
   979                        
   980 00:D92E: A5 12              LDA   Itemph            ; get line # high byte
   981 00:D930: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   982 00:D932: 88                 DEY                     ; decrement count
   983 00:D933: A5 11              LDA   Itempl            ; get line # low byte
   984 00:D935: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   985 00:D937: 88                 DEY                     ; decrement count
   986 00:D938: A9 FF              LDA   #$FF              ; set byte to allow chain rebuild. if you didn't set this
   987                                                      ; byte then a zero already here would stop the chain rebuild
   988                                                      ; as it would think it was the [EOT] marker.
   989 00:D93A: 91 AA              STA   (Baslnl),Y        ; save it to program memory
   990                        
   991                        LAB_1319
   992 00:D93C: 20 8D DA           JSR   LAB_1477          ; reset execution to start, clear vars and flush stack
   993 00:D93F: A6 79              LDX   Smeml             ; get start of mem low byte
   994 00:D941: A5 7A              LDA   Smemh             ; get start of mem high byte
   995 00:D943: A0 01              LDY   #$01              ; index to high byte of next line pointer
   996                        LAB_1325
   997 00:D945: 86 71              STX   ut1_pl            ; set line start pointer low byte
   998 00:D947: 85 72              STA   ut1_ph            ; set line start pointer high byte
   999 00:D949: B1 71              LDA   (ut1_pl),Y        ; get it
  1000 00:D94B: F0 18              BEQ   LAB_133E          ; exit if end of program
  1001                        
  1002                        ; rebuild chaining of Basic lines
  1003                        
  1004 00:D94D: A0 04              LDY   #$04              ; point to first code byte of line
  1005                                                      ; there is always 1 byte + [EOL] as null entries are deleted
  1006                        LAB_1330
  1007 00:D94F: C8                 INY                     ; next code byte
  1008 00:D950: B1 71              LDA   (ut1_pl),Y        ; get byte
  1009 00:D952: D0 FB              BNE   LAB_1330          ; loop if not [EOL]
  1010                        
  1011 00:D954: 38                 SEC                     ; set carry for add + 1
  1012 00:D955: 98                 TYA                     ; copy end index
  1013 00:D956: 65 71              ADC   ut1_pl            ; add to line start pointer low byte
  1014 00:D958: AA                 TAX                     ; copy to X
  1015 00:D959: A0 00              LDY   #$00              ; clear index, point to this line's next line pointer
  1016 00:D95B: 91 71              STA   (ut1_pl),Y        ; set next line pointer low byte
  1017 00:D95D: 98                 TYA                     ; clear A
  1018 00:D95E: 65 72              ADC   ut1_ph            ; add line start pointer high byte + carry
  1019 00:D960: C8                 INY                     ; increment index to high byte
  1020 00:D961: 91 71              STA   (ut1_pl),Y        ; save next line pointer low byte
  1021 00:D963: 90 E0              BCC   LAB_1325          ; go do next line, branch always, carry clear
  1022                        
  1023                        
  1024                        LAB_133E
  1025 00:D965: 4C 8F D8           JMP   LAB_127D          ; else we just wait for Basic command, no "Ready"
  1026                        
  1027                        ; print "? " and get BASIC input
  1028                        
  1029                        LAB_INLN
  1030 00:D968: 20 11 E0           JSR   LAB_18E3          ; print "?" character
  1031 00:D96B: 20 0E E0           JSR   LAB_18E0          ; print " "
  1032 00:D96E: D0 05              BNE   LAB_1357          ; call for BASIC input and return
  1033                        
  1034                        ; receive line from keyboard
  1035                        
  1036                                                      ; $08 as delete key (BACKSPACE on standard keyboard)
  1037                        LAB_134B
  1038 00:D970: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  1039 00:D973: CA                 DEX                     ; decrement the buffer counter (delete)
  1040 00:D974: 2C                 .byte $2C               ; make LDX into BIT abs
  1041                        
  1042                        ; call for BASIC input (main entry point)
  1043                        
  1044                        LAB_1357
  1045 00:D975: A2 00              LDX   #$00              ; clear BASIC line buffer pointer
  1046                        LAB_1359
  1047 00:D977: 20 1D F8           JSR   V_INPT            ; call scan input device
  1048 00:D97A: 90 FB              BCC   LAB_1359          ; loop if no byte
  1049                        
  1050 00:D97C: F0 F9              BEQ   LAB_1359          ; loop until valid input (ignore NULLs)
  1051                        
  1052 00:D97E: C9 07              CMP   #$07              ; compare with [BELL]
  1053 00:D980: F0 10              BEQ   LAB_1378          ; branch if [BELL]
  1054                        
  1055 00:D982: C9 0D              CMP   #$0D              ; compare with [CR]
  1056 00:D984: F0 19              BEQ   LAB_1384          ; do CR/LF exit if [CR]
  1057                        
  1058 00:D986: E0 00              CPX   #$00              ; compare pointer with $00
  1059 00:D988: D0 04              BNE   LAB_1374          ; branch if not empty
  1060                        
  1061                        ; next two lines ignore any non print character and [SPACE] if input buffer empty
  1062                        
  1063 00:D98A: C9 21              CMP   #$21              ; compare with [SP]+1
  1064 00:D98C: 90 E9              BCC   LAB_1359          ; if < ignore character
  1065                        
  1066                        LAB_1374
  1067 00:D98E: C9 08              CMP   #$08              ; compare with [BACKSPACE] (delete last character)
  1068 00:D990: F0 DE              BEQ   LAB_134B          ; go delete last character
  1069                        
  1070                        LAB_1378
  1071 00:D992: E0 47              CPX   #Ibuffe-Ibuffs    ; compare character count with max
  1072 00:D994: B0 0C              BCS   LAB_138E          ; skip store and do [BELL] if buffer full
  1073                        
  1074 00:D996: 9D 21 02           STA   Ibuffs,X          ; else store in buffer
  1075 00:D999: E8                 INX                     ; increment pointer
  1076                        LAB_137F
  1077 00:D99A: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  1078 00:D99D: D0 D8              BNE   LAB_1359          ; always loop for next character
  1079                        
  1080                        LAB_1384
  1081 00:D99F: 4C AF DF           JMP   LAB_1866          ; do CR/LF exit to BASIC
  1082                        
  1083                        ; announce buffer full
  1084                        
  1085                        LAB_138E
  1086 00:D9A2: A9 07              LDA   #$07              ; [BELL] character into A
  1087 00:D9A4: D0 F4              BNE   LAB_137F          ; go print the [BELL] but ignore input character
  1088                                                      ; branch always
  1089                        
  1090                        ; crunch keywords into Basic tokens
  1091                        ; position independent buffer version ..
  1092                        ; faster, dictionary search version ....
  1093                        
  1094                        LAB_13A6
  1095 00:D9A6: A0 FF              LDY   #$FF              ; set save index (makes for easy math later)
  1096                        
  1097 00:D9A8: 38                 SEC                     ; set carry for subtract
  1098 00:D9A9: A5 C3              LDA   Bpntrl            ; get basic execute pointer low byte
  1099 00:D9AB: E9 21              SBC   #<Ibuffs          ; subtract input buffer start pointer
  1100 00:D9AD: AA                 TAX                     ; copy result to X (index past line # if any)
  1101                        
  1102 00:D9AE: 86 60              STX   Oquote            ; clear open quote/DATA flag
  1103                        LAB_13AC
  1104 00:D9B0: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1105 00:D9B3: F0 51              BEQ   LAB_13EC          ; if null save byte then exit
  1106                        
  1107 00:D9B5: C9 5F              CMP   #'_'              ; compare with "_"
  1108 00:D9B7: B0 4D              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1109                        
  1110 00:D9B9: C9 3C              CMP   #'<'              ; compare with "<"
  1111 00:D9BB: B0 0E              BCS   LAB_13CC          ; if >= go crunch now
  1112                        
  1113 00:D9BD: C9 30              CMP   #'0'              ; compare with "0"
  1114 00:D9BF: B0 45              BCS   LAB_13EC          ; if >= go save byte then continue crunching
  1115                        
  1116 00:D9C1: 85 5C              STA   Scnquo            ; save buffer byte as search character
  1117 00:D9C3: C9 22              CMP   #$22              ; is it quote character?
  1118 00:D9C5: F0 61              BEQ   LAB_1410          ; branch if so (copy quoted string)
  1119                        
  1120 00:D9C7: C9 2A              CMP   #'*'              ; compare with "*"
  1121 00:D9C9: 90 3B              BCC   LAB_13EC          ; if < go save byte then continue crunching
  1122                        
  1123                                                      ; else crunch now
  1124                        LAB_13CC
  1125 00:D9CB: 24 60              BIT   Oquote            ; get open quote/DATA token flag
  1126 00:D9CD: 70 37              BVS   LAB_13EC          ; branch if b6 of Oquote set (was DATA)
  1127                                                      ; go save byte then continue crunching
  1128                        
  1129 00:D9CF: 86 78              STX   TempB             ; save buffer read index
  1130 00:D9D1: 84 BA              STY   csidx             ; copy buffer save index
  1131 00:D9D3: A0 45              LDY   #<TAB_1STC        ; get keyword first character table low address
  1132 00:D9D5: 84 73              STY   ut2_pl            ; save pointer low byte
  1133 00:D9D7: A0 FA              LDY   #>TAB_1STC        ; get keyword first character table high address
  1134 00:D9D9: 84 74              STY   ut2_ph            ; save pointer high byte
  1135 00:D9DB: A0 00              LDY   #$00              ; clear table pointer
  1136                        
  1137                        LAB_13D0
  1138 00:D9DD: D1 73              CMP   (ut2_pl),Y        ; compare with keyword first character table byte
  1139 00:D9DF: F0 05              BEQ   LAB_13D1          ; go do word_table_chr if match
  1140                        
  1141 00:D9E1: 90 21              BCC   LAB_13EA          ; if < keyword first character table byte go restore
  1142                                                      ; Y and save to crunched
  1143                        
  1144 00:D9E3: C8                 INY                     ; else increment pointer
  1145 00:D9E4: D0 F7              BNE   LAB_13D0          ; and loop (branch always)
  1146                        
  1147                        ; have matched first character of some keyword
  1148                        
  1149                        LAB_13D1
  1150 00:D9E6: 98                 TYA                     ; copy matching index
  1151 00:D9E7: 0A                 ASL                     ; *2 (bytes per pointer)
  1152 00:D9E8: AA                 TAX                     ; copy to new index
  1153 00:D9E9: BD 63 FA           LDA   TAB_CHRT,X        ; get keyword table pointer low byte
  1154 00:D9EC: 85 73              STA   ut2_pl            ; save pointer low byte
  1155 00:D9EE: BD 64 FA           LDA   TAB_CHRT+1,X      ; get keyword table pointer high byte
  1156 00:D9F1: 85 74              STA   ut2_ph            ; save pointer high byte
  1157                        
  1158 00:D9F3: A0 FF              LDY   #$FF              ; clear table pointer (make -1 for start)
  1159                        
  1160 00:D9F5: A6 78              LDX   TempB             ; restore buffer read index
  1161                        
  1162                        LAB_13D6
  1163 00:D9F7: C8                 INY                     ; next table byte
  1164 00:D9F8: B1 73              LDA   (ut2_pl),Y        ; get byte from table
  1165                        LAB_13D8
  1166 00:D9FA: 30 08              BMI   LAB_13EA          ; all bytes matched so go save token
  1167                        
  1168 00:D9FC: E8                 INX                     ; next buffer byte
  1169 00:D9FD: DD 21 02           CMP   Ibuffs,X          ; compare with byte from input buffer
  1170 00:DA00: F0 F5              BEQ   LAB_13D6          ; go compare next if match
  1171                        
  1172 00:DA02: D0 2B              BNE   LAB_1417          ; branch if >< (not found keyword)
  1173                        
  1174                        LAB_13EA
  1175 00:DA04: A4 BA              LDY   csidx             ; restore save index
  1176                        
  1177                                                      ; save crunched to output
  1178                        LAB_13EC
  1179 00:DA06: E8                 INX                     ; increment buffer index (to next input byte)
  1180 00:DA07: C8                 INY                     ; increment save index (to next output byte)
  1181 00:DA08: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1182 00:DA0B: C9 00              CMP   #$00              ; set the flags, set carry
  1183 00:DA0D: F0 32              BEQ   LAB_142A          ; do exit if was null [EOL]
  1184                        
  1185                                                      ; A holds token or byte here
  1186 00:DA0F: E9 3A              SBC   #':'              ; subtract ":" (carry set by CMP #00)
  1187 00:DA11: F0 04              BEQ   LAB_13FF          ; branch if it was ":" (is now $00)
  1188                        
  1189                                                      ; A now holds token-$3A
  1190 00:DA13: C9 49              CMP   #TK_DATA-$3A      ; compare with DATA token - $3A
  1191 00:DA15: D0 02              BNE   LAB_1401          ; branch if not DATA
  1192                        
  1193                                                      ; token was : or DATA
  1194                        LAB_13FF
  1195 00:DA17: 85 60              STA   Oquote            ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
  1196                        LAB_1401
  1197 00:DA19: 49 57              EOR   #TK_REM-$3A       ; effectively subtract REM token offset
  1198 00:DA1B: D0 93              BNE   LAB_13AC          ; If wasn't REM then go crunch rest of line
  1199                        
  1200 00:DA1D: 85 5C              STA   Asrch             ; else was REM so set search for [EOL]
  1201                        
  1202                                                      ; loop for REM, "..." etc.
  1203                        LAB_1408
  1204 00:DA1F: BD 21 02           LDA   Ibuffs,X          ; get byte from input buffer
  1205 00:DA22: F0 E2              BEQ   LAB_13EC          ; branch if null [EOL]
  1206                        
  1207 00:DA24: C5 5C              CMP   Asrch             ; compare with stored character
  1208 00:DA26: F0 DE              BEQ   LAB_13EC          ; branch if match (end quote)
  1209                        
  1210                                                      ; entry for copy string in quotes, don't crunch
  1211                        LAB_1410
  1212 00:DA28: C8                 INY                     ; increment buffer save index
  1213 00:DA29: 99 21 02           STA   Ibuffs,Y          ; save byte to output
  1214 00:DA2C: E8                 INX                     ; increment buffer read index
  1215 00:DA2D: D0 F0              BNE   LAB_1408          ; loop while <> 0 (should never be 0!)
  1216                        
  1217                                                      ; not found keyword this go
  1218                        LAB_1417
  1219 00:DA2F: A6 78              LDX   TempB             ; compare has failed, restore buffer index (start byte!)
  1220                        
  1221                                                      ; now find the end of this word in the table
  1222                        LAB_141B
  1223 00:DA31: B1 73              LDA   (ut2_pl),Y        ; get table byte
  1224 00:DA33: 08                 PHP                     ; save status
  1225 00:DA34: C8                 INY                     ; increment table index
  1226 00:DA35: 28                 PLP                     ; restore byte status
  1227 00:DA36: 10 F9              BPL   LAB_141B          ; if not end of keyword go do next
  1228                        
  1229 00:DA38: B1 73              LDA   (ut2_pl),Y        ; get byte from keyword table
  1230 00:DA3A: D0 BE              BNE   LAB_13D8          ; go test next word if not zero byte (end of table)
  1231                        
  1232                                                      ; reached end of table with no match
  1233 00:DA3C: BD 21 02           LDA   Ibuffs,X          ; restore byte from input buffer
  1234 00:DA3F: 10 C3              BPL   LAB_13EA          ; branch always (all bytes in buffer are $00-$7F)
  1235                                                      ; go save byte in output and continue crunching
  1236                        
  1237                                                      ; reached [EOL]
  1238                        LAB_142A
  1239 00:DA41: C8                 INY                     ; increment pointer
  1240 00:DA42: C8                 INY                     ; increment pointer (makes it next line pointer high byte)
  1241 00:DA43: 99 21 02           STA   Ibuffs,Y          ; save [EOL] (marks [EOT] in immediate mode)
  1242 00:DA46: C8                 INY                     ; adjust for line copy
  1243 00:DA47: C8                 INY                     ; adjust for line copy
  1244 00:DA48: C8                 INY                     ; adjust for line copy
  1245                        ; *** begin patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1246                        ; *** insert
  1247                              .IF   Ibuffs&$FF=0
  1248                              LDA   Bpntrl            ; test for $00
  1249                              BNE   LAB_142P          ; not $00
  1250                              DEC   Bpntrh            ; allow for increment when $xx00
  1251                        LAB_142P
  1252                              .ENDIF
  1253                        ; *** end   patch for when Ibuffs is $xx00 - Daryl Rictor ***
  1254                        ; end of patch
  1255 00:DA49: C6 C3              DEC   Bpntrl            ; allow for increment
  1256 00:DA4B: 60                 RTS
  1257                        
  1258                        ; search Basic for temp integer line number from start of mem
  1259                        
  1260                        LAB_SSLN
  1261 00:DA4C: A5 79              LDA   Smeml             ; get start of mem low byte
  1262 00:DA4E: A6 7A              LDX   Smemh             ; get start of mem high byte
  1263                        
  1264                        ; search Basic for temp integer line number from AX
  1265                        ; returns carry set if found
  1266                        ; returns Baslnl/Baslnh pointer to found or next higher (not found) line
  1267                        
  1268                        ; old 541 new 507
  1269                        
  1270                        LAB_SHLN
  1271 00:DA50: A0 01              LDY   #$01              ; set index
  1272 00:DA52: 85 AA              STA   Baslnl            ; save low byte as current
  1273 00:DA54: 86 AB              STX   Baslnh            ; save high byte as current
  1274 00:DA56: B1 AA              LDA   (Baslnl),Y        ; get pointer high byte from addr
  1275 00:DA58: F0 1A              BEQ   LAB_145F          ; pointer was zero so we're done, do 'not found' exit
  1276                        
  1277 00:DA5A: A0 03              LDY   #$03              ; set index to line # high byte
  1278 00:DA5C: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1279 00:DA5E: 88                 DEY                     ; decrement index (point to low byte)
  1280 00:DA5F: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1281 00:DA61: D0 04              BNE   LAB_1455          ; if <> skip low byte check
  1282                        
  1283 00:DA63: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1284 00:DA65: C5 11              CMP   Itempl            ; compare with temporary integer low byte
  1285                        LAB_1455
  1286 00:DA67: B0 09              BCS   LAB_145E          ; else if temp < this line, exit (passed line#)
  1287                        
  1288                        LAB_1456
  1289 00:DA69: 88                 DEY                     ; decrement index to next line ptr high byte
  1290 00:DA6A: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1291 00:DA6C: AA                 TAX                     ; copy to X
  1292 00:DA6D: 88                 DEY                     ; decrement index to next line ptr low byte
  1293 00:DA6E: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1294 00:DA70: 90 DE              BCC   LAB_SHLN          ; go search for line # in temp (Itempl/Itemph) from AX
  1295                                                      ; (carry always clear)
  1296                        
  1297                        LAB_145E
  1298 00:DA72: F0 01              BEQ   LAB_1460          ; exit if temp = found line #, carry is set
  1299                        
  1300                        LAB_145F
  1301 00:DA74: 18                 CLC                     ; clear found flag
  1302                        LAB_1460
  1303 00:DA75: 60                 RTS
  1304                        
  1305                        ; perform NEW
  1306                        
  1307                        LAB_NEW
  1308 00:DA76: D0 FD              BNE   LAB_1460          ; exit if not end of statement (to do syntax error)
  1309                        
  1310                        LAB_1463
  1311 00:DA78: A9 00              LDA   #$00              ; clear A
  1312 00:DA7A: A8                 TAY                     ; clear Y
  1313 00:DA7B: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, low byte
  1314 00:DA7D: C8                 INY                     ; increment index
  1315 00:DA7E: 91 79              STA   (Smeml),Y         ; clear first line, next line pointer, high byte
  1316 00:DA80: 18                 CLC                     ; clear carry
  1317 00:DA81: A5 79              LDA   Smeml             ; get start of mem low byte
  1318 00:DA83: 69 02              ADC   #$02              ; calculate end of BASIC low byte
  1319 00:DA85: 85 7B              STA   Svarl             ; save start of vars low byte
  1320 00:DA87: A5 7A              LDA   Smemh             ; get start of mem high byte
  1321 00:DA89: 69 00              ADC   #$00              ; add any carry
  1322 00:DA8B: 85 7C              STA   Svarh             ; save start of vars high byte
  1323                        
  1324                        ; reset execution to start, clear vars and flush stack
  1325                        
  1326                        LAB_1477
  1327 00:DA8D: 18                 CLC                     ; clear carry
  1328 00:DA8E: A5 79              LDA   Smeml             ; get start of mem low byte
  1329 00:DA90: 69 FF              ADC   #$FF              ; -1
  1330 00:DA92: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1331 00:DA94: A5 7A              LDA   Smemh             ; get start of mem high byte
  1332 00:DA96: 69 FF              ADC   #$FF              ; -1+carry
  1333 00:DA98: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1334                        
  1335                        ; "CLEAR" command gets here
  1336                        
  1337                        LAB_147A
  1338 00:DA9A: A5 85              LDA   Ememl             ; get end of mem low byte
  1339 00:DA9C: A4 86              LDY   Ememh             ; get end of mem high byte
  1340 00:DA9E: 85 81              STA   Sstorl            ; set bottom of string space low byte
  1341 00:DAA0: 84 82              STY   Sstorh            ; set bottom of string space high byte
  1342 00:DAA2: A5 7B              LDA   Svarl             ; get start of vars low byte
  1343 00:DAA4: A4 7C              LDY   Svarh             ; get start of vars high byte
  1344 00:DAA6: 85 7D              STA   Sarryl            ; save var mem end low byte
  1345 00:DAA8: 84 7E              STY   Sarryh            ; save var mem end high byte
  1346 00:DAAA: 85 7F              STA   Earryl            ; save array mem end low byte
  1347 00:DAAC: 84 80              STY   Earryh            ; save array mem end high byte
  1348 00:DAAE: 20 65 DC           JSR   LAB_161A          ; perform RESTORE command
  1349                        
  1350                        ; flush stack and clear continue flag
  1351                        
  1352                        LAB_1491
  1353 00:DAB1: A2 68              LDX   #des_sk           ; set descriptor stack pointer
  1354 00:DAB3: 86 65              STX   next_s            ; save descriptor stack pointer
  1355 00:DAB5: 68                 PLA                     ; pull return address low byte
  1356 00:DAB6: AA                 TAX                     ; copy return address low byte
  1357 00:DAB7: 68                 PLA                     ; pull return address high byte
  1358 00:DAB8: 8E FE 01           STX   LAB_SKFE          ; save to cleared stack
  1359 00:DABB: 8D FF 01           STA   LAB_SKFF          ; save to cleared stack
  1360 00:DABE: A2 FD              LDX   #$FD              ; new stack pointer
  1361 00:DAC0: 9A                 TXS                     ; reset stack
  1362 00:DAC1: A9 00              LDA   #$00              ; clear byte
  1363                        ;*** fix p2: no longer necessary as the continue pointer is saved anyway
  1364                        ;      STA   Cpntrh            ; clear continue pointer high byte
  1365 00:DAC3: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  1366                        LAB_14A6
  1367 00:DAC5: 60                 RTS
  1368                        
  1369                        ; perform CLEAR
  1370                        
  1371                        LAB_CLEAR
  1372 00:DAC6: F0 D2              BEQ   LAB_147A          ; if no following token go do "CLEAR"
  1373                        
  1374                                                      ; else there was a following token (go do syntax error)
  1375 00:DAC8: 60                 RTS
  1376                        
  1377                        ; perform LIST [n][-m]
  1378                        ; bigger, faster version (a _lot_ faster)
  1379                        
  1380                        LAB_LIST
  1381 00:DAC9: 90 06              BCC   LAB_14BD          ; branch if next character numeric (LIST n..)
  1382                        
  1383 00:DACB: F0 04              BEQ   LAB_14BD          ; branch if next character [NULL] (LIST)
  1384                        
  1385 00:DACD: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1386 00:DACF: D0 F4              BNE   LAB_14A6          ; exit if not - (LIST -m)
  1387                        
  1388                                                      ; LIST [[n][-m]]
  1389                                                      ; this bit sets the n , if present, as the start and end
  1390                        LAB_14BD
  1391 00:DAD1: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1392 00:DAD4: 20 4C DA           JSR   LAB_SSLN          ; search BASIC for temp integer line number
  1393                                                      ; (pointer in Baslnl/Baslnh)
  1394 00:DAD7: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1395 00:DADA: F0 0C              BEQ   LAB_14D4          ; branch if no more characters
  1396                        
  1397                                                      ; this bit checks the - is present
  1398 00:DADC: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  1399 00:DADE: D0 95              BNE   LAB_1460          ; return if not "-" (will be Syntax error)
  1400                        
  1401                                                      ; LIST [n]-m
  1402                                                      ; the - was there so set m as the end value
  1403 00:DAE0: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1404 00:DAE3: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1405 00:DAE6: D0 8D              BNE   LAB_1460          ; exit if not ok
  1406                        
  1407                        LAB_14D4
  1408 00:DAE8: A5 11              LDA   Itempl            ; get temporary integer low byte
  1409 00:DAEA: 05 12              ORA   Itemph            ; OR temporary integer high byte
  1410 00:DAEC: D0 06              BNE   LAB_14E2          ; branch if start set
  1411                        
  1412 00:DAEE: A9 FF              LDA   #$FF              ; set for -1
  1413 00:DAF0: 85 11              STA   Itempl            ; set temporary integer low byte
  1414 00:DAF2: 85 12              STA   Itemph            ; set temporary integer high byte
  1415                        LAB_14E2
  1416 00:DAF4: A0 01              LDY   #$01              ; set index for line
  1417 00:DAF6: 84 60              STY   Oquote            ; clear open quote flag
  1418 00:DAF8: 20 B8 DF           JSR   LAB_CRLF          ; print CR/LF
  1419 00:DAFB: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1420                                                      ; pointer initially set by search at LAB_14BD
  1421 00:DAFD: F0 3E              BEQ   LAB_152B          ; if null all done so exit
  1422 00:DAFF: 20 3B DC           JSR   LAB_1629          ; do CRTL-C check vector
  1423                        
  1424 00:DB02: C8                 INY                     ; increment index for line
  1425 00:DB03: B1 AA              LDA   (Baslnl),Y        ; get line # low byte
  1426 00:DB05: AA                 TAX                     ; copy to X
  1427 00:DB06: C8                 INY                     ; increment index
  1428 00:DB07: B1 AA              LDA   (Baslnl),Y        ; get line # high byte
  1429 00:DB09: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1430 00:DB0B: D0 04              BNE   LAB_14FF          ; branch if no high byte match
  1431                        
  1432 00:DB0D: E4 11              CPX   Itempl            ; compare with temporary integer low byte
  1433 00:DB0F: F0 02              BEQ   LAB_1501          ; branch if = last line to do (< will pass next branch)
  1434                        
  1435                        LAB_14FF                      ; else ..
  1436 00:DB11: B0 2A              BCS   LAB_152B          ; if greater all done so exit
  1437                        
  1438                        LAB_1501
  1439 00:DB13: 84 97              STY   Tidx1             ; save index for line
  1440 00:DB15: 20 B4 F1           JSR   LAB_295E          ; print XA as unsigned integer
  1441 00:DB18: A9 20              LDA   #$20              ; space is the next character
  1442                        LAB_1508
  1443 00:DB1A: A4 97              LDY   Tidx1             ; get index for line
  1444 00:DB1C: 29 7F              AND   #$7F              ; mask top out bit of character
  1445                        LAB_150C
  1446 00:DB1E: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  1447 00:DB21: C9 22              CMP   #$22              ; was it " character
  1448 00:DB23: D0 06              BNE   LAB_1519          ; branch if not
  1449                        
  1450                                                      ; we are either entering or leaving a pair of quotes
  1451 00:DB25: A5 60              LDA   Oquote            ; get open quote flag
  1452 00:DB27: 49 FF              EOR   #$FF              ; toggle it
  1453 00:DB29: 85 60              STA   Oquote            ; save it back
  1454                        LAB_1519
  1455 00:DB2B: C8                 INY                     ; increment index
  1456 00:DB2C: B1 AA              LDA   (Baslnl),Y        ; get next byte
  1457 00:DB2E: D0 0E              BNE   LAB_152E          ; branch if not [EOL] (go print character)
  1458 00:DB30: A8                 TAY                     ; else clear index
  1459 00:DB31: B1 AA              LDA   (Baslnl),Y        ; get next line pointer low byte
  1460 00:DB33: AA                 TAX                     ; copy to X
  1461 00:DB34: C8                 INY                     ; increment index
  1462 00:DB35: B1 AA              LDA   (Baslnl),Y        ; get next line pointer high byte
  1463 00:DB37: 86 AA              STX   Baslnl            ; set pointer to line low byte
  1464 00:DB39: 85 AB              STA   Baslnh            ; set pointer to line high byte
  1465 00:DB3B: D0 B7              BNE   LAB_14E2          ; go do next line if not [EOT]
  1466                                                      ; else ..
  1467                        LAB_152B
  1468 00:DB3D: 60                 RTS
  1469                        
  1470                        LAB_152E
  1471 00:DB3E: 10 DE              BPL   LAB_150C          ; just go print it if not token byte
  1472                        
  1473                                                      ; else was token byte so uncrunch it (maybe)
  1474 00:DB40: 24 60              BIT   Oquote            ; test the open quote flag
  1475 00:DB42: 30 DA              BMI   LAB_150C          ; just go print character if open quote set
  1476                        
  1477 00:DB44: A2 FC              LDX   #>LAB_KEYT        ; get table address high byte
  1478 00:DB46: 0A                 ASL                     ; *2
  1479 00:DB47: 0A                 ASL                     ; *4
  1480 00:DB48: 90 02              BCC   LAB_152F          ; branch if no carry
  1481                        
  1482 00:DB4A: E8                 INX                     ; else increment high byte
  1483 00:DB4B: 18                 CLC                     ; clear carry for add
  1484                        LAB_152F
  1485 00:DB4C: 69 46              ADC   #<LAB_KEYT        ; add low byte
  1486 00:DB4E: 90 01              BCC   LAB_1530          ; branch if no carry
  1487                        
  1488 00:DB50: E8                 INX                     ; else increment high byte
  1489                        LAB_1530
  1490 00:DB51: 85 73              STA   ut2_pl            ; save table pointer low byte
  1491 00:DB53: 86 74              STX   ut2_ph            ; save table pointer high byte
  1492 00:DB55: 84 97              STY   Tidx1             ; save index for line
  1493 00:DB57: A0 00              LDY   #$00              ; clear index
  1494 00:DB59: B1 73              LDA   (ut2_pl),Y        ; get length
  1495 00:DB5B: AA                 TAX                     ; copy length
  1496 00:DB5C: C8                 INY                     ; increment index
  1497 00:DB5D: B1 73              LDA   (ut2_pl),Y        ; get 1st character
  1498 00:DB5F: CA                 DEX                     ; decrement length
  1499 00:DB60: F0 B8              BEQ   LAB_1508          ; if no more characters exit and print
  1500                        
  1501 00:DB62: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  1502 00:DB65: C8                 INY                     ; increment index
  1503 00:DB66: B1 73              LDA   (ut2_pl),Y        ; get keyword address low byte
  1504 00:DB68: 48                 PHA                     ; save it for now
  1505 00:DB69: C8                 INY                     ; increment index
  1506 00:DB6A: B1 73              LDA   (ut2_pl),Y        ; get keyword address high byte
  1507 00:DB6C: A0 00              LDY   #$00
  1508 00:DB6E: 85 74              STA   ut2_ph            ; save keyword pointer high byte
  1509 00:DB70: 68                 PLA                     ; pull low byte
  1510 00:DB71: 85 73              STA   ut2_pl            ; save keyword pointer low byte
  1511                        LAB_1540
  1512 00:DB73: B1 73              LDA   (ut2_pl),Y        ; get character
  1513 00:DB75: CA                 DEX                     ; decrement character count
  1514 00:DB76: F0 A2              BEQ   LAB_1508          ; if last character exit and print
  1515                        
  1516 00:DB78: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  1517 00:DB7B: C8                 INY                     ; increment index
  1518 00:DB7C: D0 F5              BNE   LAB_1540          ; loop for next character
  1519                        
  1520                        ; perform FOR
  1521                        
  1522                        LAB_FOR
  1523 00:DB7E: A9 80              LDA   #$80              ; set FNX
  1524 00:DB80: 85 61              STA   Sufnxf            ; set subscript/FNX flag
  1525 00:DB82: 20 DA DE           JSR   LAB_LET           ; go do LET
  1526 00:DB85: 68                 PLA                     ; pull return address
  1527 00:DB86: 68                 PLA                     ; pull return address
  1528 00:DB87: A9 10              LDA   #$10              ; we need 16d bytes !
  1529 00:DB89: 20 28 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1530 00:DB8C: 20 C0 DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  1531 00:DB8F: 18                 CLC                     ; clear carry for add
  1532 00:DB90: 98                 TYA                     ; copy index to A
  1533 00:DB91: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1534 00:DB93: 48                 PHA                     ; push onto stack
  1535 00:DB94: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1536 00:DB96: 69 00              ADC   #$00              ; add carry
  1537 00:DB98: 48                 PHA                     ; push onto stack
  1538 00:DB99: A5 88              LDA   Clineh            ; get current line high byte
  1539 00:DB9B: 48                 PHA                     ; push onto stack
  1540 00:DB9C: A5 87              LDA   Clinel            ; get current line low byte
  1541 00:DB9E: 48                 PHA                     ; push onto stack
  1542 00:DB9F: A9 AD              LDA   #TK_TO            ; get "TO" token
  1543 00:DBA1: 20 16 E3           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  1544 00:DBA4: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  1545 00:DBA7: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1546                                                      ; else do type mismatch
  1547                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  1548                        ; *** add
  1549 00:DBAA: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  1550                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  1551 00:DBAD: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  1552 00:DBAF: 09 7F              ORA   #$7F              ; set all non sign bits
  1553 00:DBB1: 25 AD              AND   FAC1_1            ; and FAC1 mantissa1
  1554 00:DBB3: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  1555 00:DBB5: A9 C0              LDA   #<LAB_159F        ; set return address low byte
  1556 00:DBB7: A0 DB              LDY   #>LAB_159F        ; set return address high byte
  1557 00:DBB9: 85 71              STA   ut1_pl            ; save return address low byte
  1558 00:DBBB: 84 72              STY   ut1_ph            ; save return address high byte
  1559 00:DBBD: 4C AC E2           JMP   LAB_1B66          ; round FAC1 and put on stack (returns to next instruction)
  1560                        
  1561                        LAB_159F
  1562 00:DBC0: A9 15              LDA   #<LAB_259C        ; set 1 pointer low addr (default step size)
  1563 00:DBC2: A0 F9              LDY   #>LAB_259C        ; set 1 pointer high addr
  1564 00:DBC4: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  1565 00:DBC7: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1566 00:DBCA: C9 B2              CMP   #TK_STEP          ; compare with STEP token
  1567 00:DBCC: D0 06              BNE   LAB_15B3          ; jump if not "STEP"
  1568                        
  1569                                                      ;.was step so ..
  1570 00:DBCE: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1571 00:DBD1: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  1572                                                      ; else do type mismatch
  1573                        LAB_15B3
  1574 00:DBD4: 20 1B F0           JSR   LAB_27CA          ; return A=FF,C=1/-ve A=01,C=0/+ve
  1575 00:DBD7: 85 B0              STA   FAC1_s            ; set FAC1 sign (b7)
  1576                                                      ; this is +1 for +ve step and -1 for -ve step, in NEXT we
  1577                                                      ; compare the FOR value and the TO value and return +1 if
  1578                                                      ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
  1579                                                      ; here (+/-1) is then compared to that result and if they
  1580                                                      ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
  1581                                                      ; the loop is done
  1582                                                     
  1583                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1584                        ; *** add
  1585                           .IF $&$FF=$FD
  1586                              NOP                     ; return address of JSR +1 (on  next page)
  1587                           .ENDIF  
  1588                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  1589 00:DBD9: 20 9E E2           JSR   LAB_1B5B          ; push sign, round FAC1 and put on stack
  1590 00:DBDC: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  1591 00:DBDE: 48                 PHA                     ; push on stack
  1592 00:DBDF: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  1593 00:DBE1: 48                 PHA                     ; push on stack
  1594 00:DBE2: A9 81              LDA   #TK_FOR           ; get FOR token
  1595 00:DBE4: 48                 PHA                     ; push on stack
  1596                        
  1597                        ; interpreter inner loop
  1598                        
  1599                        LAB_15C2
  1600 00:DBE5: 20 3B DC           JSR   LAB_1629          ; do CRTL-C check vector
  1601 00:DBE8: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1602 00:DBEA: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  1603                        
  1604 00:DBEC: A6 88              LDX   Clineh            ; continue line is $FFxx for immediate mode
  1605                                                      ; ($00xx for RUN from immediate mode)
  1606 00:DBEE: E8                 INX                     ; increment it (now $00 if immediate mode)
  1607                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1608                        ;      BEQ   LAB_15D1          ; branch if null (immediate mode)
  1609                        
  1610 00:DBEF: 85 8B              STA   Cpntrl            ; save continue pointer low byte
  1611 00:DBF1: 84 8C              STY   Cpntrh            ; save continue pointer high byte
  1612                        LAB_15D1
  1613 00:DBF3: A0 00              LDY   #$00              ; clear index
  1614 00:DBF5: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  1615 00:DBF7: F0 07              BEQ   LAB_15DC          ; branch if null [EOL]
  1616                        
  1617 00:DBF9: C9 3A              CMP   #':'              ; compare with ":"
  1618 00:DBFB: F0 1D              BEQ   LAB_15F6          ; branch if = (statement separator)
  1619                        
  1620                        LAB_15D9
  1621 00:DBFD: 4C 27 E3           JMP   LAB_SNER          ; else syntax error then warm start
  1622                        
  1623                                                      ; have reached [EOL]
  1624                        LAB_15DC
  1625 00:DC00: A0 02              LDY   #$02              ; set index
  1626 00:DC02: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  1627 00:DC04: 18                 CLC                     ; clear carry for no "BREAK" message
  1628 00:DC05: F0 50              BEQ   LAB_1651          ; if null go to immediate mode (was immediate or [EOT]
  1629                                                      ; marker)
  1630                        
  1631 00:DC07: C8                 INY                     ; increment index
  1632 00:DC08: B1 C3              LDA   (Bpntrl),Y        ; get line # low byte
  1633 00:DC0A: 85 87              STA   Clinel            ; save current line low byte
  1634 00:DC0C: C8                 INY                     ; increment index
  1635 00:DC0D: B1 C3              LDA   (Bpntrl),Y        ; get line # high byte
  1636 00:DC0F: 85 88              STA   Clineh            ; save current line high byte
  1637 00:DC11: 98                 TYA                     ; A now = 4
  1638 00:DC12: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1639 00:DC14: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1640 00:DC16: 90 02              BCC   LAB_15F6          ; branch if no overflow
  1641                        
  1642 00:DC18: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  1643                        LAB_15F6
  1644 00:DC1A: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1645                        
  1646                        LAB_15F9
  1647 00:DC1D: 20 23 DC           JSR   LAB_15FF          ; go interpret BASIC code from (Bpntrl)
  1648                        
  1649                        LAB_15FC
  1650 00:DC20: 4C E5 DB           JMP   LAB_15C2          ; loop
  1651                        
  1652                        ; interpret BASIC code from (Bpntrl)
  1653                        
  1654                        LAB_15FF
  1655 00:DC23: F0 4E              BEQ   LAB_1628          ; exit if zero [EOL]
  1656                        
  1657                        LAB_1602
  1658 00:DC25: 0A                 ASL                     ; *2 bytes per vector and normalise token
  1659 00:DC26: B0 03              BCS   LAB_1609          ; branch if was token
  1660                        
  1661 00:DC28: 4C DA DE           JMP   LAB_LET           ; else go do implied LET
  1662                        
  1663                        LAB_1609
  1664 00:DC2B: C9 56              CMP   #(TK_TAB-$80)*2   ; compare normalised token * 2 with TAB
  1665 00:DC2D: B0 CE              BCS   LAB_15D9          ; branch if A>=TAB (do syntax error then warm start)
  1666                                                      ; only tokens before TAB can start a line
  1667 00:DC2F: A8                 TAY                     ; copy to index
  1668 00:DC30: B9 3D F9           LDA   LAB_CTBL+1,Y      ; get vector high byte
  1669 00:DC33: 48                 PHA                     ; onto stack
  1670 00:DC34: B9 3C F9           LDA   LAB_CTBL,Y        ; get vector low byte
  1671 00:DC37: 48                 PHA                     ; onto stack
  1672 00:DC38: 4C BC 00           JMP   LAB_IGBY          ; jump to increment and scan memory
  1673                                                      ; then "return" to vector
  1674                        
  1675                        ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
  1676                        ; key press is detected.
  1677                        
  1678                        LAB_1629
  1679 00:DC3B: 6C 03 02           JMP   (VEC_CC)          ; ctrl c check vector
  1680                        
  1681                        ; if there was a key press it gets back here ..
  1682                        
  1683                        LAB_1636
  1684 00:DC3E: C9 03              CMP   #$03              ; compare with CTRL-C
  1685                        
  1686                        ; perform STOP
  1687                        
  1688                        LAB_STOP
  1689 00:DC40: B0 01              BCS   LAB_163B          ; branch if token follows STOP
  1690                                                      ; else just END
  1691                        ; END
  1692                        
  1693                        LAB_END
  1694 00:DC42: 18                 CLC                     ; clear the carry, indicate a normal program end
  1695                        LAB_163B
  1696 00:DC43: D0 61              BNE   LAB_167A          ; if wasn't CTRL-C or there is a following byte return
  1697                        
  1698 00:DC45: A5 C4              LDA   Bpntrh            ; get the BASIC execute pointer high byte
  1699                        ;*** fix p2: skip no longer necessary as the continue pointer is saved anyway
  1700                        ;      EOR   #>Ibuffs          ; compare with buffer address high byte (Cb unchanged)
  1701                        ;      BEQ   LAB_164F          ; branch if the BASIC pointer is in the input buffer
  1702                        ;                              ; (can't continue in immediate mode)
  1703                        ;                              ; else ..
  1704                        ;      EOR   #>Ibuffs          ; correct the bits
  1705 00:DC47: A4 C3              LDY   Bpntrl            ; get BASIC execute pointer low byte
  1706 00:DC49: 84 8B              STY   Cpntrl            ; save continue pointer low byte
  1707 00:DC4B: 85 8C              STA   Cpntrh            ; save continue pointer high byte
  1708                        LAB_1647
  1709 00:DC4D: A5 87              LDA   Clinel            ; get current line low byte
  1710 00:DC4F: A4 88              LDY   Clineh            ; get current line high byte
  1711 00:DC51: 85 89              STA   Blinel            ; save break line low byte
  1712 00:DC53: 84 8A              STY   Blineh            ; save break line high byte
  1713                        LAB_164F
  1714 00:DC55: 68                 PLA                     ; pull return address low
  1715 00:DC56: 68                 PLA                     ; pull return address high
  1716                        LAB_1651
  1717 00:DC57: 90 07              BCC   LAB_165E          ; if was program end just do warm start
  1718                        
  1719                                                      ; else ..
  1720 00:DC59: A9 13              LDA   #<LAB_BMSG        ; point to "Break" low byte
  1721 00:DC5B: A0 FF              LDY   #>LAB_BMSG        ; point to "Break" high byte
  1722 00:DC5D: 4C 77 D8           JMP   LAB_1269          ; print "Break" and do warm start
  1723                        
  1724                        LAB_165E
  1725 00:DC60: 4C 82 D8           JMP   LAB_1274          ; go do warm start
  1726                        
  1727                        ; perform RESTORE
  1728                        
  1729                        LAB_RESTORE
  1730 00:DC63: D0 0F              BNE   LAB_RESTOREn      ; branch if next character not null (RESTORE n)
  1731                        
  1732                        LAB_161A
  1733 00:DC65: 38                 SEC                     ; set carry for subtract
  1734 00:DC66: A5 79              LDA   Smeml             ; get start of mem low byte
  1735 00:DC68: E9 01              SBC   #$01              ; -1
  1736 00:DC6A: A4 7A              LDY   Smemh             ; get start of mem high byte
  1737 00:DC6C: B0 01              BCS   LAB_1624          ; branch if no underflow
  1738                        
  1739                        LAB_uflow
  1740 00:DC6E: 88                 DEY                     ; else decrement high byte
  1741                        LAB_1624
  1742 00:DC6F: 85 8F              STA   Dptrl             ; save DATA pointer low byte
  1743 00:DC71: 84 90              STY   Dptrh             ; save DATA pointer high byte
  1744                        LAB_1628
  1745 00:DC73: 60                 RTS
  1746                        
  1747                                                      ; is RESTORE n
  1748                        LAB_RESTOREn
  1749 00:DC74: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1750 00:DC77: 20 C3 DD           JSR   LAB_SNBL          ; scan for next BASIC line
  1751 00:DC7A: A5 88              LDA   Clineh            ; get current line high byte
  1752 00:DC7C: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1753 00:DC7E: B0 0B              BCS   LAB_reset_search  ; branch if >= (start search from beginning)
  1754                        
  1755 00:DC80: 98                 TYA                     ; else copy line index to A
  1756 00:DC81: 38                 SEC                     ; set carry (+1)
  1757 00:DC82: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1758 00:DC84: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1759 00:DC86: 90 07              BCC   LAB_go_search     ; branch if no overflow to high byte
  1760                        
  1761 00:DC88: E8                 INX                     ; increment high byte
  1762 00:DC89: B0 04              BCS   LAB_go_search     ; branch always (can never be carry clear)
  1763                        
  1764                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1765                        
  1766                        LAB_reset_search
  1767 00:DC8B: A5 79              LDA   Smeml             ; get start of mem low byte
  1768 00:DC8D: A6 7A              LDX   Smemh             ; get start of mem high byte
  1769                        
  1770                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1771                        
  1772                        LAB_go_search
  1773                        
  1774 00:DC8F: 20 50 DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1775 00:DC92: B0 03              BCS   LAB_line_found    ; if carry set go set pointer
  1776                        
  1777 00:DC94: 4C 95 DD           JMP   LAB_16F7          ; else go do "Undefined statement" error
  1778                        
  1779                        LAB_line_found
  1780                                                      ; carry already set for subtract
  1781 00:DC97: A5 AA              LDA   Baslnl            ; get pointer low byte
  1782 00:DC99: E9 01              SBC   #$01              ; -1
  1783 00:DC9B: A4 AB              LDY   Baslnh            ; get pointer high byte
  1784 00:DC9D: B0 D0              BCS   LAB_1624          ; branch if no underflow (save DATA pointer and return)
  1785                        
  1786 00:DC9F: 90 CD              BCC   LAB_uflow         ; else decrement high byte then save DATA pointer and
  1787                                                      ; return (branch always)
  1788                        
  1789                        ; perform NULL
  1790                        
  1791                        LAB_NULL
  1792 00:DCA1: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter
  1793 00:DCA4: 86 0D              STX   Nullct            ; save new NULL count
  1794                        LAB_167A
  1795 00:DCA6: 60                 RTS
  1796                        
  1797                        ; perform CONT
  1798                        
  1799                        LAB_CONT
  1800 00:DCA7: D0 FD              BNE   LAB_167A          ; if following byte exit to do syntax error
  1801                        
  1802 00:DCA9: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  1803 00:DCAB: C0 02              CPY   #>Ibuffs          ; *** fix p2: test direct mode
  1804 00:DCAD: D0 05              BNE   LAB_166C          ; go do continue if we can
  1805                        
  1806 00:DCAF: A2 1E              LDX   #$1E              ; error code $1E ("Can't continue" error)
  1807 00:DCB1: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  1808                        
  1809                                                      ; we can continue so ..
  1810                        LAB_166C
  1811 00:DCB4: A9 93              LDA   #TK_ON            ; set token for ON
  1812 00:DCB6: 20 48 F6           JSR   LAB_IRQ           ; set IRQ flags
  1813 00:DCB9: A9 93              LDA   #TK_ON            ; set token for ON
  1814 00:DCBB: 20 4B F6           JSR   LAB_NMI           ; set NMI flags
  1815                        
  1816 00:DCBE: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  1817 00:DCC0: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  1818 00:DCC2: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1819 00:DCC4: A5 89              LDA   Blinel            ; get break line low byte
  1820 00:DCC6: A4 8A              LDY   Blineh            ; get break line high byte
  1821 00:DCC8: 85 87              STA   Clinel            ; set current line low byte
  1822 00:DCCA: 84 88              STY   Clineh            ; set current line high byte
  1823 00:DCCC: 60                 RTS
  1824                        
  1825                        ; perform RUN
  1826                        
  1827                        LAB_RUN
  1828 00:DCCD: D0 03              BNE   LAB_1696          ; branch if RUN n
  1829 00:DCCF: 4C 8D DA           JMP   LAB_1477          ; reset execution to start, clear variables, flush stack and
  1830                                                      ; return
  1831                        
  1832                        ; does RUN n
  1833                        
  1834                        LAB_1696
  1835 00:DCD2: 20 9A DA           JSR   LAB_147A          ; go do "CLEAR"
  1836 00:DCD5: F0 2E              BEQ   LAB_16B0          ; get n and do GOTO n (branch always as CLEAR sets Z=1)
  1837                        
  1838                        ; perform DO
  1839                        
  1840                        LAB_DO
  1841 00:DCD7: A9 05              LDA   #$05              ; need 5 bytes for DO
  1842 00:DCD9: 20 28 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1843 00:DCDC: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1844 00:DCDE: 48                 PHA                     ; push on stack
  1845 00:DCDF: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1846 00:DCE1: 48                 PHA                     ; push on stack
  1847 00:DCE2: A5 88              LDA   Clineh            ; get current line high byte
  1848 00:DCE4: 48                 PHA                     ; push on stack
  1849 00:DCE5: A5 87              LDA   Clinel            ; get current line low byte
  1850 00:DCE7: 48                 PHA                     ; push on stack
  1851 00:DCE8: A9 9D              LDA   #TK_DO            ; token for DO
  1852 00:DCEA: 48                 PHA                     ; push on stack
  1853 00:DCEB: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1854 00:DCEE: 4C E5 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1855                        
  1856                        ; perform GOSUB
  1857                        
  1858                        LAB_GOSUB
  1859 00:DCF1: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  1860 00:DCF3: 20 28 D8           JSR   LAB_1212          ; check room on stack for A bytes
  1861 00:DCF6: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  1862 00:DCF8: 48                 PHA                     ; push on stack
  1863 00:DCF9: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  1864 00:DCFB: 48                 PHA                     ; push on stack
  1865 00:DCFC: A5 88              LDA   Clineh            ; get current line high byte
  1866 00:DCFE: 48                 PHA                     ; push on stack
  1867 00:DCFF: A5 87              LDA   Clinel            ; get current line low byte
  1868 00:DD01: 48                 PHA                     ; push on stack
  1869 00:DD02: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  1870 00:DD04: 48                 PHA                     ; push on stack
  1871                        LAB_16B0
  1872 00:DD05: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1873 00:DD08: 20 0E DD           JSR   LAB_GOTO          ; perform GOTO n
  1874 00:DD0B: 4C E5 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1875                                                      ; (can't RTS, we used the stack!)
  1876                        
  1877                        ; perform GOTO
  1878                        
  1879                        LAB_GOTO
  1880 00:DD0E: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  1881 00:DD11: 20 C3 DD           JSR   LAB_SNBL          ; scan for next BASIC line
  1882 00:DD14: A5 88              LDA   Clineh            ; get current line high byte
  1883 00:DD16: C5 12              CMP   Itemph            ; compare with temporary integer high byte
  1884 00:DD18: B0 0B              BCS   LAB_16D0          ; branch if >= (start search from beginning)
  1885                        
  1886 00:DD1A: 98                 TYA                     ; else copy line index to A
  1887 00:DD1B: 38                 SEC                     ; set carry (+1)
  1888 00:DD1C: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  1889 00:DD1E: A6 C4              LDX   Bpntrh            ; get BASIC execute pointer high byte
  1890 00:DD20: 90 07              BCC   LAB_16D4          ; branch if no overflow to high byte
  1891                        
  1892 00:DD22: E8                 INX                     ; increment high byte
  1893 00:DD23: B0 04              BCS   LAB_16D4          ; branch always (can never be carry)
  1894                        
  1895                        ; search for line # in temp (Itempl/Itemph) from start of mem pointer (Smeml)
  1896                        
  1897                        LAB_16D0
  1898 00:DD25: A5 79              LDA   Smeml             ; get start of mem low byte
  1899 00:DD27: A6 7A              LDX   Smemh             ; get start of mem high byte
  1900                        
  1901                        ; search for line # in temp (Itempl/Itemph) from (AX)
  1902                        
  1903                        LAB_16D4
  1904 00:DD29: 20 50 DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  1905 00:DD2C: 90 67              BCC   LAB_16F7          ; if carry clear go do "Undefined statement" error
  1906                                                      ; (unspecified statement)
  1907                        
  1908                                                      ; carry already set for subtract
  1909 00:DD2E: A5 AA              LDA   Baslnl            ; get pointer low byte
  1910 00:DD30: E9 01              SBC   #$01              ; -1
  1911 00:DD32: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1912 00:DD34: A5 AB              LDA   Baslnh            ; get pointer high byte
  1913 00:DD36: E9 00              SBC   #$00              ; subtract carry
  1914 00:DD38: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1915                        LAB_16E5
  1916 00:DD3A: 60                 RTS
  1917                        
  1918                        LAB_DONOK
  1919 00:DD3B: A2 22              LDX   #$22              ; error code $22 ("LOOP without DO" error)
  1920 00:DD3D: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  1921                        
  1922                        ; perform LOOP
  1923                        
  1924                        LAB_LOOP
  1925 00:DD40: A8                 TAY                     ; save following token
  1926 00:DD41: BA                 TSX                     ; copy stack pointer
  1927 00:DD42: BD 03 01           LDA   LAB_STAK+3,X      ; get token byte from stack
  1928 00:DD45: C9 9D              CMP   #TK_DO            ; compare with DO token
  1929 00:DD47: D0 F2              BNE   LAB_DONOK         ; branch if no matching DO
  1930                        
  1931 00:DD49: E8                 INX                     ; dump calling routine return address
  1932 00:DD4A: E8                 INX                     ; dump calling routine return address
  1933 00:DD4B: 9A                 TXS                     ; correct stack
  1934 00:DD4C: 98                 TYA                     ; get saved following token back
  1935 00:DD4D: F0 20              BEQ   LoopAlways        ; if no following token loop forever
  1936                                                      ; (stack pointer in X)
  1937                        
  1938 00:DD4F: C9 3A              CMP   #':'              ; could be ':'
  1939 00:DD51: F0 1C              BEQ   LoopAlways        ; if :... loop forever
  1940                        
  1941 00:DD53: E9 B3              SBC   #TK_UNTIL         ; subtract token for UNTIL, we know carry is set here
  1942 00:DD55: AA                 TAX                     ; copy to X (if it was UNTIL then Y will be correct)
  1943 00:DD56: F0 04              BEQ   DoRest            ; branch if was UNTIL
  1944                        
  1945 00:DD58: CA                 DEX                     ; decrement result
  1946 00:DD59: D0 62              BNE   LAB_16FC          ; if not WHILE go do syntax error and warm start
  1947                                                      ; only if the token was WHILE will this fail
  1948                        
  1949 00:DD5B: CA                 DEX                     ; set invert result byte
  1950                        DoRest
  1951 00:DD5C: 86 98              STX   Frnxth            ; save invert result byte
  1952 00:DD5E: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  1953 00:DD61: 20 06 E2           JSR   LAB_EVEX          ; evaluate expression
  1954 00:DD64: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  1955 00:DD66: F0 02              BEQ   DoCmp             ; if =0 go do straight compare
  1956                        
  1957 00:DD68: A9 FF              LDA   #$FF              ; else set all bits
  1958                        DoCmp
  1959 00:DD6A: BA                 TSX                     ; copy stack pointer
  1960 00:DD6B: 45 98              EOR   Frnxth            ; EOR with invert byte
  1961 00:DD6D: D0 1A              BNE   LoopDone          ; if <> 0 clear stack and back to interpreter loop
  1962                        
  1963                                                      ; loop condition wasn't met so do it again
  1964                        LoopAlways
  1965 00:DD6F: BD 02 01           LDA   LAB_STAK+2,X      ; get current line low byte
  1966 00:DD72: 85 87              STA   Clinel            ; save current line low byte
  1967 00:DD74: BD 03 01           LDA   LAB_STAK+3,X      ; get current line high byte
  1968 00:DD77: 85 88              STA   Clineh            ; save current line high byte
  1969 00:DD79: BD 04 01           LDA   LAB_STAK+4,X      ; get BASIC execute pointer low byte
  1970 00:DD7C: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  1971 00:DD7E: BD 05 01           LDA   LAB_STAK+5,X      ; get BASIC execute pointer high byte
  1972 00:DD81: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  1973 00:DD83: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  1974 00:DD86: 4C E5 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  1975                        
  1976                                                      ; clear stack and back to interpreter loop
  1977                        LoopDone
  1978 00:DD89: E8                 INX                     ; dump DO token
  1979 00:DD8A: E8                 INX                     ; dump current line low byte
  1980 00:DD8B: E8                 INX                     ; dump current line high byte
  1981 00:DD8C: E8                 INX                     ; dump BASIC execute pointer low byte
  1982 00:DD8D: E8                 INX                     ; dump BASIC execute pointer high byte
  1983 00:DD8E: 9A                 TXS                     ; correct stack
  1984 00:DD8F: 4C AF DD           JMP   LAB_DATA          ; go perform DATA (find : or [EOL])
  1985                        
  1986                        ; do the return without gosub error
  1987                        
  1988                        LAB_16F4
  1989 00:DD92: A2 04              LDX   #$04              ; error code $04 ("RETURN without GOSUB" error)
  1990 00:DD94: 2C                 .byte $2C               ; makes next line BIT LAB_0EA2
  1991                        
  1992                        LAB_16F7                      ; do undefined statement error
  1993 00:DD95: A2 0E              LDX   #$0E              ; error code $0E ("Undefined statement" error)
  1994 00:DD97: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  1995                        
  1996                        ; perform RETURN
  1997                        
  1998                        LAB_RETURN
  1999 00:DD9A: D0 9E              BNE   LAB_16E5          ; exit if following token (to allow syntax error)
  2000                        
  2001                        LAB_16E8
  2002 00:DD9C: 68                 PLA                     ; dump calling routine return address
  2003 00:DD9D: 68                 PLA                     ; dump calling routine return address
  2004 00:DD9E: 68                 PLA                     ; pull token
  2005 00:DD9F: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  2006 00:DDA1: D0 EF              BNE   LAB_16F4          ; branch if no matching GOSUB
  2007                        
  2008                        LAB_16FF
  2009 00:DDA3: 68                 PLA                     ; pull current line low byte
  2010 00:DDA4: 85 87              STA   Clinel            ; save current line low byte
  2011 00:DDA6: 68                 PLA                     ; pull current line high byte
  2012 00:DDA7: 85 88              STA   Clineh            ; save current line high byte
  2013 00:DDA9: 68                 PLA                     ; pull BASIC execute pointer low byte
  2014 00:DDAA: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2015 00:DDAC: 68                 PLA                     ; pull BASIC execute pointer high byte
  2016 00:DDAD: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  2017                        
  2018                                                      ; now do the DATA statement as we could be returning into
  2019                                                      ; the middle of an ON <var> GOSUB n,m,p,q line
  2020                                                      ; (the return address used by the DATA statement is the one
  2021                                                      ; pushed before the GOSUB was executed!)
  2022                        
  2023                        ; perform DATA
  2024                        
  2025                        LAB_DATA
  2026 00:DDAF: 20 C0 DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  2027                        
  2028                                                      ; set BASIC execute pointer
  2029                        LAB_170F
  2030 00:DDB2: 98                 TYA                     ; copy index to A
  2031 00:DDB3: 18                 CLC                     ; clear carry for add
  2032 00:DDB4: 65 C3              ADC   Bpntrl            ; add BASIC execute pointer low byte
  2033 00:DDB6: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2034 00:DDB8: 90 02              BCC   LAB_1719          ; skip next if no carry
  2035                        
  2036 00:DDBA: E6 C4              INC   Bpntrh            ; else increment BASIC execute pointer high byte
  2037                        LAB_1719
  2038 00:DDBC: 60                 RTS
  2039                        
  2040                        LAB_16FC
  2041 00:DDBD: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2042                        
  2043                        ; scan for next BASIC statement ([:] or [EOL])
  2044                        ; returns Y as index to [:] or [EOL]
  2045                        
  2046                        LAB_SNBS
  2047 00:DDC0: A2 3A              LDX   #':'              ; set look for character = ":"
  2048 00:DDC2: 2C                 .byte $2C               ; makes next line BIT $00A2
  2049                        
  2050                        ; scan for next BASIC line
  2051                        ; returns Y as index to [EOL]
  2052                        
  2053                        LAB_SNBL
  2054 00:DDC3: A2 00              LDX   #$00              ; set alt search character = [EOL]
  2055 00:DDC5: A0 00              LDY   #$00              ; set search character = [EOL]
  2056 00:DDC7: 84 5C              STY   Asrch             ; store search character
  2057                        LAB_1725
  2058 00:DDC9: 8A                 TXA                     ; get alt search character
  2059 00:DDCA: 45 5C              EOR   Asrch             ; toggle search character, effectively swap with $00
  2060 00:DDCC: 85 5C              STA   Asrch             ; save swapped search character
  2061                        LAB_172D
  2062 00:DDCE: B1 C3              LDA   (Bpntrl),Y        ; get next byte
  2063 00:DDD0: F0 EA              BEQ   LAB_1719          ; exit if null [EOL]
  2064                        
  2065 00:DDD2: C5 5C              CMP   Asrch             ; compare with search character
  2066 00:DDD4: F0 E6              BEQ   LAB_1719          ; exit if found
  2067                        
  2068 00:DDD6: C8                 INY                     ; increment index
  2069 00:DDD7: C9 22              CMP   #$22              ; compare current character with open quote
  2070 00:DDD9: D0 F3              BNE   LAB_172D          ; if not open quote go get next character
  2071                        
  2072 00:DDDB: F0 EC              BEQ   LAB_1725          ; if found go swap search character for alt search character
  2073                        
  2074                        ; perform IF
  2075                        
  2076                        LAB_IF
  2077 00:DDDD: 20 06 E2           JSR   LAB_EVEX          ; evaluate the expression
  2078 00:DDE0: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2079 00:DDE3: C9 B0              CMP   #TK_THEN          ; compare with THEN token
  2080 00:DDE5: F0 11              BEQ   LAB_174B          ; if it was THEN go do IF
  2081                        
  2082                                                      ; wasn't IF .. THEN so must be IF .. GOTO
  2083 00:DDE7: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2084 00:DDE9: D0 D2              BNE   LAB_16FC          ; if it wasn't GOTO go do syntax error
  2085                        
  2086 00:DDEB: A6 C3              LDX   Bpntrl            ; save the basic pointer low byte
  2087 00:DDED: A4 C4              LDY   Bpntrh            ; save the basic pointer high byte
  2088 00:DDEF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2089 00:DDF2: B0 C9              BCS   LAB_16FC          ; if not numeric go do syntax error
  2090                        
  2091 00:DDF4: 86 C3              STX   Bpntrl            ; restore the basic pointer low byte
  2092 00:DDF6: 84 C4              STY   Bpntrh            ; restore the basic pointer high byte
  2093                        LAB_174B
  2094 00:DDF8: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  2095 00:DDFA: F0 1E              BEQ   LAB_174E          ; if the result was zero go look for an ELSE
  2096                        
  2097 00:DDFC: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2098 00:DDFF: B0 03              BCS   LAB_174D          ; if not numeric go do var or keyword
  2099                        
  2100                        LAB_174C
  2101 00:DE01: 4C 0E DD           JMP   LAB_GOTO          ; else was numeric so do GOTO n
  2102                        
  2103                                                      ; is var or keyword
  2104                        LAB_174D
  2105                        ; *** patch       allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2106                        ; *** replace
  2107                        ;      CMP   #TK_RETURN        ; compare the byte with the token for RETURN
  2108                        ;      BNE   LAB_174G          ; if it wasn't RETURN go interpret BASIC code from (Bpntrl)
  2109                        ;                              ; and return to this code to process any following code
  2110                        ;
  2111                        ;      JMP   LAB_1602          ; else it was RETURN so interpret BASIC code from (Bpntrl)
  2112                        ;                              ; but don't return here
  2113                        ;
  2114                        ;LAB_174G
  2115                        ;      JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2116                        ;
  2117                        ;; the IF was executed and there may be a following ELSE so the code needs to return
  2118                        ;; here to check and ignore the ELSE if present
  2119                        ;
  2120                        ;      LDY   #$00              ; clear the index
  2121                        ;      LDA   (Bpntrl),Y        ; get the next BASIC byte
  2122                        ;      CMP   #TK_ELSE          ; compare it with the token for ELSE
  2123                        ;      BEQ   LAB_DATA          ; if ELSE ignore the following statement
  2124                        ;
  2125                        ;; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2126                        ;; following ELSE will, correctly, cause a syntax error
  2127                        ;
  2128                        ;      RTS                     ; else return to the interpreter inner loop
  2129                        ;
  2130                        ; *** with
  2131 00:DE04: 68                 PLA                     ; discard interpreter loop return address
  2132 00:DE05: 68                 PLA                     ; so data structures are at the correct stack offset
  2133 00:DE06: 20 C2 00           JSR   LAB_GBYT          ; restore token or variable
  2134 00:DE09: 20 23 DC           JSR   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2135                        
  2136                        ; the IF was executed and there may be a following ELSE so the code needs to return
  2137                        ; here to check and ignore the ELSE if present
  2138                        
  2139 00:DE0C: A0 00              LDY   #$00              ; clear the index
  2140 00:DE0E: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2141 00:DE10: C9 AC              CMP   #TK_ELSE          ; compare it with the token for ELSE
  2142 00:DE12: D0 03              BNE   LAB_no_ELSE       ; no - continue on this line
  2143 00:DE14: 20 AF DD           JSR   LAB_DATA          ; yes - skip the rest of the line
  2144                        
  2145                        ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
  2146                        ; following ELSE will, correctly, cause a syntax error
  2147                        
  2148                        LAB_no_ELSE
  2149 00:DE17: 4C E5 DB           JMP LAB_15C2            ; return to the interpreter inner loop
  2150                        ; *** end patch  allow NEXT, LOOP & RETURN to find FOR, DO or GOSUB structure on stack
  2151                        
  2152                        ; perform ELSE after IF
  2153                        
  2154                        LAB_174E
  2155 00:DE1A: A0 00              LDY   #$00              ; clear the BASIC byte index
  2156 00:DE1C: A2 01              LDX   #$01              ; clear the nesting depth
  2157                        LAB_1750
  2158 00:DE1E: C8                 INY                     ; increment the BASIC byte index
  2159 00:DE1F: B1 C3              LDA   (Bpntrl),Y        ; get the next BASIC byte
  2160 00:DE21: F0 0F              BEQ   LAB_1753          ; if EOL go add the pointer and return
  2161                        
  2162 00:DE23: C9 8B              CMP   #TK_IF            ; compare the byte with the token for IF
  2163 00:DE25: D0 03              BNE   LAB_1752          ; if not IF token skip the depth increment
  2164                        
  2165 00:DE27: E8                 INX                     ; else increment the nesting depth ..
  2166 00:DE28: D0 F4              BNE   LAB_1750          ; .. and continue looking
  2167                        
  2168                        LAB_1752
  2169 00:DE2A: C9 AC              CMP   #TK_ELSE          ; compare the byte with the token for ELSE
  2170 00:DE2C: D0 F0              BNE   LAB_1750          ; if not ELSE token continue looking
  2171                        
  2172 00:DE2E: CA                 DEX                     ; was ELSE so decrement the nesting depth
  2173 00:DE2F: D0 ED              BNE   LAB_1750          ; loop if still nested
  2174                        
  2175 00:DE31: C8                 INY                     ; increment the BASIC byte index past the ELSE
  2176                        
  2177                        ; found the matching ELSE, now do <{n|statement}>
  2178                        
  2179                        LAB_1753
  2180 00:DE32: 98                 TYA                     ; else copy line index to A
  2181 00:DE33: 18                 CLC                     ; clear carry for add
  2182 00:DE34: 65 C3              ADC   Bpntrl            ; add the BASIC execute pointer low byte
  2183 00:DE36: 85 C3              STA   Bpntrl            ; save the BASIC execute pointer low byte
  2184 00:DE38: 90 02              BCC   LAB_1754          ; branch if no overflow to high byte
  2185                        
  2186 00:DE3A: E6 C4              INC   Bpntrh            ; else increment the BASIC execute pointer high byte
  2187                        LAB_1754
  2188 00:DE3C: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2189 00:DE3F: 90 C0              BCC   LAB_174C          ; if numeric do GOTO n
  2190                                                      ; the code will return to the interpreter loop at the
  2191                                                      ; tail end of the GOTO <n>
  2192                        
  2193 00:DE41: 4C 23 DC           JMP   LAB_15FF          ; interpret BASIC code from (Bpntrl)
  2194                                                      ; the code will return to the interpreter loop at the
  2195                                                      ; tail end of the <statement>
  2196                        
  2197                        ; perform REM, skip (rest of) line
  2198                        
  2199                        LAB_REM
  2200 00:DE44: 20 C3 DD           JSR   LAB_SNBL          ; scan for next BASIC line
  2201 00:DE47: 4C B2 DD           JMP   LAB_170F          ; go set BASIC execute pointer and return, branch always
  2202                        
  2203                        LAB_16FD
  2204 00:DE4A: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2205                        
  2206                        ; perform ON
  2207                        
  2208                        LAB_ON
  2209 00:DE4D: C9 A9              CMP   #TK_IRQ           ; was it IRQ token ?
  2210 00:DE4F: D0 03              BNE   LAB_NOIN          ; if not go check NMI
  2211                        
  2212 00:DE51: 4C 6C F6           JMP   LAB_SIRQ          ; else go set-up IRQ
  2213                        
  2214                        LAB_NOIN
  2215 00:DE54: C9 AA              CMP   #TK_NMI           ; was it NMI token ?
  2216 00:DE56: D0 03              BNE   LAB_NONM          ; if not go do normal ON command
  2217                        
  2218 00:DE58: 4C 6F F6           JMP   LAB_SNMI          ; else go set-up NMI
  2219                        
  2220                        LAB_NONM
  2221 00:DE5B: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter
  2222 00:DE5E: 48                 PHA                     ; push GOTO/GOSUB token
  2223 00:DE5F: C9 8D              CMP   #TK_GOSUB         ; compare with GOSUB token
  2224 00:DE61: F0 04              BEQ   LAB_176B          ; branch if GOSUB
  2225                        
  2226 00:DE63: C9 89              CMP   #TK_GOTO          ; compare with GOTO token
  2227                        LAB_1767
  2228 00:DE65: D0 E3              BNE   LAB_16FD          ; if not GOTO do syntax error then warm start
  2229                        
  2230                        
  2231                        ; next character was GOTO or GOSUB
  2232                        
  2233                        LAB_176B
  2234 00:DE67: C6 AF              DEC   FAC1_3            ; decrement index (byte value)
  2235 00:DE69: D0 04              BNE   LAB_1773          ; branch if not zero
  2236                        
  2237 00:DE6B: 68                 PLA                     ; pull GOTO/GOSUB token
  2238 00:DE6C: 4C 25 DC           JMP   LAB_1602          ; go execute it
  2239                        
  2240                        LAB_1773
  2241 00:DE6F: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2242 00:DE72: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer (skip this n)
  2243                                                      ; (we could LDX #',' and JSR LAB_SNBL+2, then we
  2244                                                      ; just BNE LAB_176B for the loop. should be quicker ..
  2245                                                      ; no we can't, what if we meet a colon or [EOL]?)
  2246 00:DE75: C9 2C              CMP   #$2C              ; compare next character with ","
  2247 00:DE77: F0 EE              BEQ   LAB_176B          ; loop if ","
  2248                        
  2249                        LAB_177E
  2250 00:DE79: 68                 PLA                     ; else pull keyword token (run out of options)
  2251                                                      ; also dump +/-1 pointer low byte and exit
  2252                        LAB_177F
  2253 00:DE7A: 60                 RTS
  2254                        
  2255                        ; takes n * 106 + 11 cycles where n is the number of digits
  2256                        
  2257                        ; get fixed-point number into temp integer
  2258                        
  2259                        LAB_GFPN
  2260 00:DE7B: A2 00              LDX   #$00              ; clear reg
  2261 00:DE7D: 86 11              STX   Itempl            ; clear temporary integer low byte
  2262                        LAB_1785
  2263 00:DE7F: 86 12              STX   Itemph            ; save temporary integer high byte
  2264 00:DE81: B0 F7              BCS   LAB_177F          ; return if carry set, end of scan, character was
  2265                                                      ; not 0-9
  2266                        
  2267 00:DE83: E0 19              CPX   #$19              ; compare high byte with $19
  2268 00:DE85: A8                 TAY                     ; ensure Zb = 0 if the branch is taken
  2269 00:DE86: B0 DD              BCS   LAB_1767          ; branch if >=, makes max line # 63999 because next
  2270                                                      ; bit does *$0A, = 64000, compare at target will fail
  2271                                                      ; and do syntax error
  2272                        
  2273 00:DE88: E9 2F              SBC   #'0'-1            ; subtract "0", $2F + carry, from byte
  2274 00:DE8A: A8                 TAY                     ; copy binary digit
  2275 00:DE8B: A5 11              LDA   Itempl            ; get temporary integer low byte
  2276 00:DE8D: 0A                 ASL                     ; *2 low byte
  2277 00:DE8E: 26 12              ROL   Itemph            ; *2 high byte
  2278 00:DE90: 0A                 ASL                     ; *2 low byte
  2279 00:DE91: 26 12              ROL   Itemph            ; *2 high byte, *4
  2280 00:DE93: 65 11              ADC   Itempl            ; + low byte, *5
  2281 00:DE95: 85 11              STA   Itempl            ; save it
  2282 00:DE97: 8A                 TXA                     ; get high byte copy to A
  2283 00:DE98: 65 12              ADC   Itemph            ; + high byte, *5
  2284 00:DE9A: 06 11              ASL   Itempl            ; *2 low byte, *10d
  2285 00:DE9C: 2A                 ROL                     ; *2 high byte, *10d
  2286 00:DE9D: AA                 TAX                     ; copy high byte back to X
  2287 00:DE9E: 98                 TYA                     ; get binary digit back
  2288 00:DE9F: 65 11              ADC   Itempl            ; add number low byte
  2289 00:DEA1: 85 11              STA   Itempl            ; save number low byte
  2290 00:DEA3: 90 01              BCC   LAB_17B3          ; if no overflow to high byte get next character
  2291                        
  2292 00:DEA5: E8                 INX                     ; else increment high byte
  2293                        LAB_17B3
  2294 00:DEA6: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2295 00:DEA9: 4C 7F DE           JMP   LAB_1785          ; loop for next character
  2296                        
  2297                        ; perform DEC
  2298                        
  2299                        LAB_DEC
  2300 00:DEAC: A9 19              LDA   #<LAB_2AFD        ; set -1 pointer low byte
  2301 00:DEAE: 2C                 .byte $2C               ; BIT abs to skip the LDA below
  2302                        
  2303                        ; perform INC
  2304                        
  2305                        LAB_INC
  2306 00:DEAF: A9 15              LDA   #<LAB_259C        ; set 1 pointer low byte
  2307                        LAB_17B5
  2308 00:DEB1: 48                 PHA                     ; save +/-1 pointer low byte
  2309                        LAB_17B7
  2310 00:DEB2: 20 DD E4           JSR   LAB_GVAR          ; get var address
  2311 00:DEB5: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2312 00:DEB7: 30 1E              BMI   IncrErr           ; exit if string
  2313                        
  2314 00:DEB9: 85 97              STA   Lvarpl            ; save var address low byte
  2315 00:DEBB: 84 98              STY   Lvarph            ; save var address high byte
  2316 00:DEBD: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  2317 00:DEC0: 68                 PLA                     ; get +/-1 pointer low byte
  2318 00:DEC1: 48                 PHA                     ; save +/-1 pointer low byte
  2319 00:DEC2: A0 F9              LDY   #>LAB_259C        ; set +/-1 pointer high byte (both the same)
  2320 00:DEC4: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1
  2321 00:DEC7: 20 D5 EF           JSR   LAB_PFAC          ; pack FAC1 into variable (Lvarpl)
  2322                        
  2323 00:DECA: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2324 00:DECD: C9 2C              CMP   #','              ; compare with ","
  2325 00:DECF: D0 A8              BNE   LAB_177E          ; exit if not "," (either end or error)
  2326                        
  2327                                                      ; was "," so another INCR variable to do
  2328 00:DED1: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2329 00:DED4: 4C B2 DE           JMP   LAB_17B7          ; go do next var
  2330                        
  2331                        IncrErr
  2332 00:DED7: 4C 01 E2           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  2333                        
  2334                        ; perform LET
  2335                        
  2336                        LAB_LET
  2337 00:DEDA: 20 DD E4           JSR   LAB_GVAR          ; get var address
  2338 00:DEDD: 85 97              STA   Lvarpl            ; save var address low byte
  2339 00:DEDF: 84 98              STY   Lvarph            ; save var address high byte
  2340 00:DEE1: A9 C1              LDA   #TK_EQUAL         ; get = token
  2341 00:DEE3: 20 16 E3           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2342 00:DEE6: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2343 00:DEE8: 48                 PHA                     ; push data type flag
  2344 00:DEE9: 20 06 E2           JSR   LAB_EVEX          ; evaluate expression
  2345 00:DEEC: 68                 PLA                     ; pop data type flag
  2346 00:DEED: 2A                 ROL                     ; set carry if type = string
  2347                        ; *** begin patch  result of a string compare stores string pointer to variable
  2348                        ;                  but should store FAC1 (true/false value)
  2349                        ; *** replace
  2350                        ;      JSR   LAB_CKTM          ; type match check, set C for string
  2351                        ;      BNE   LAB_17D5          ; branch if string
  2352                        ; *** with
  2353 00:DEEE: 20 F8 E1           JSR   LAB_CKTM          ; type match check, keep C (expected type)
  2354 00:DEF1: B0 03              BCS   LAB_17D5          ; branch if string
  2355                        ; *** end patch
  2356                        
  2357 00:DEF3: 4C D5 EF           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2358                        
  2359                        ; string LET
  2360                        
  2361                        LAB_17D5
  2362 00:DEF6: A0 02              LDY   #$02              ; set index to pointer high byte
  2363 00:DEF8: B1 AE              LDA   (des_pl),Y        ; get string pointer high byte
  2364 00:DEFA: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  2365 00:DEFC: 90 17              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2366                        
  2367 00:DEFE: D0 07              BNE   LAB_17E6          ; branch if >
  2368                                                      ; else was equal so compare low bytes
  2369 00:DF00: 88                 DEY                     ; decrement index
  2370 00:DF01: B1 AE              LDA   (des_pl),Y        ; get pointer low byte
  2371 00:DF03: C5 81              CMP   Sstorl            ; compare bottom of string space low byte
  2372 00:DF05: 90 0E              BCC   LAB_17F4          ; if less assign value and exit (was in program memory)
  2373                        
  2374                                                      ; pointer was >= to bottom of string space pointer
  2375                        LAB_17E6
  2376 00:DF07: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2377 00:DF09: C4 7C              CPY   Svarh             ; compare start of vars high byte
  2378 00:DF0B: 90 08              BCC   LAB_17F4          ; branch if less (descriptor is on stack)
  2379                        
  2380 00:DF0D: D0 0D              BNE   LAB_17FB          ; branch if greater (descriptor is not on stack)
  2381                        
  2382                                                      ; else high bytes were equal so ..
  2383 00:DF0F: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2384 00:DF11: C5 7B              CMP   Svarl             ; compare start of vars low byte
  2385 00:DF13: B0 07              BCS   LAB_17FB          ; branch if >= (descriptor is not on stack)
  2386                        
  2387                        LAB_17F4
  2388 00:DF15: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  2389 00:DF17: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  2390 00:DF19: 4C 32 DF           JMP   LAB_1811          ; clean stack, copy descriptor to variable and return
  2391                        
  2392                                                      ; make space and copy string
  2393                        LAB_17FB
  2394 00:DF1C: A0 00              LDY   #$00              ; index to length
  2395 00:DF1E: B1 AE              LDA   (des_pl),Y        ; get string length
  2396 00:DF20: 20 65 E8           JSR   LAB_209C          ; copy string
  2397 00:DF23: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  2398 00:DF25: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  2399 00:DF27: 85 B8              STA   ssptr_l           ; save descriptor pointer low byte
  2400 00:DF29: 84 B9              STY   ssptr_h           ; save descriptor pointer high byte
  2401 00:DF2B: 20 4A EA           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  2402 00:DF2E: A9 AC              LDA   #<FAC1_e          ; set descriptor pointer low byte
  2403 00:DF30: A0 00              LDY   #>FAC1_e          ; get descriptor pointer high byte
  2404                        
  2405                                                      ; clean stack and assign value to string variable
  2406                        LAB_1811
  2407 00:DF32: 85 9E              STA   des_2l            ; save descriptor_2 pointer low byte
  2408 00:DF34: 84 9F              STY   des_2h            ; save descriptor_2 pointer high byte
  2409 00:DF36: 20 AC EA           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  2410 00:DF39: A0 00              LDY   #$00              ; index to length
  2411 00:DF3B: B1 9E              LDA   (des_2l),Y        ; get string length
  2412 00:DF3D: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2413 00:DF3F: C8                 INY                     ; index to string pointer low byte
  2414 00:DF40: B1 9E              LDA   (des_2l),Y        ; get string pointer low byte
  2415 00:DF42: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2416 00:DF44: C8                 INY                     ; index to string pointer high byte
  2417 00:DF45: B1 9E              LDA   (des_2l),Y        ; get string pointer high byte
  2418 00:DF47: 91 97              STA   (Lvarpl),Y        ; copy to let string variable
  2419 00:DF49: 60                 RTS
  2420                        
  2421                        ; perform GET
  2422                        
  2423                        LAB_GET
  2424 00:DF4A: 20 DD E4           JSR   LAB_GVAR          ; get var address
  2425 00:DF4D: 85 97              STA   Lvarpl            ; save var address low byte
  2426 00:DF4F: 84 98              STY   Lvarph            ; save var address high byte
  2427 00:DF51: 20 34 F6           JSR   INGET             ; get input byte
  2428 00:DF54: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  2429 00:DF56: 30 07              BMI   LAB_GETS          ; go get string character
  2430                        
  2431                                                      ; was numeric get
  2432 00:DF58: A8                 TAY                     ; copy character to Y
  2433 00:DF59: 20 99 E7           JSR   LAB_1FD0          ; convert Y to byte in FAC1
  2434 00:DF5C: 4C D5 EF           JMP   LAB_PFAC          ; pack FAC1 into variable (Lvarpl) and return
  2435                        
  2436                        LAB_GETS
  2437 00:DF5F: 48                 PHA                     ; save character
  2438 00:DF60: A9 01              LDA   #$01              ; string is single byte
  2439 00:DF62: B0 01              BCS   LAB_IsByte        ; branch if byte received
  2440                        
  2441 00:DF64: 68                 PLA                     ; string is null
  2442                        LAB_IsByte
  2443 00:DF65: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  2444                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  2445 00:DF68: F0 05              BEQ   LAB_NoSt          ; skip store if null string
  2446                        
  2447 00:DF6A: 68                 PLA                     ; get character back
  2448 00:DF6B: A0 00              LDY   #$00              ; clear index
  2449 00:DF6D: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  2450                        LAB_NoSt
  2451 00:DF6F: 20 BA E8           JSR   LAB_RTST          ; check for space on descriptor stack then put address
  2452                                                      ; and length on descriptor stack and update stack pointers
  2453                        
  2454 00:DF72: 4C F6 DE           JMP   LAB_17D5          ; do string LET and return
  2455                        
  2456                        ; perform PRINT
  2457                        
  2458                        LAB_1829
  2459 00:DF75: 20 FC DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2460                        LAB_182C
  2461 00:DF78: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2462                        
  2463                        ; PRINT
  2464                        
  2465                        LAB_PRINT
  2466 00:DF7B: F0 3B              BEQ   LAB_CRLF          ; if nothing following just print CR/LF
  2467                        
  2468                        LAB_1831
  2469 00:DF7D: C9 AB              CMP   #TK_TAB           ; compare with TAB( token
  2470 00:DF7F: F0 56              BEQ   LAB_18A2          ; go do TAB/SPC
  2471                        
  2472 00:DF81: C9 AF              CMP   #TK_SPC           ; compare with SPC( token
  2473 00:DF83: F0 52              BEQ   LAB_18A2          ; go do TAB/SPC
  2474                        
  2475 00:DF85: C9 2C              CMP   #','              ; compare with ","
  2476 00:DF87: F0 38              BEQ   LAB_188B          ; go do move to next TAB mark
  2477                        
  2478 00:DF89: C9 3B              CMP   #';'              ; compare with ";"
  2479 00:DF8B: F0 66              BEQ   LAB_18BD          ; if ";" continue with PRINT processing
  2480                        
  2481 00:DF8D: 20 06 E2           JSR   LAB_EVEX          ; evaluate expression
  2482 00:DF90: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2483 00:DF92: 30 E1              BMI   LAB_1829          ; branch if string
  2484                        
  2485 00:DF94: 20 C7 F1           JSR   LAB_296E          ; convert FAC1 to string
  2486 00:DF97: 20 77 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2487 00:DF9A: A0 00              LDY   #$00              ; clear index
  2488                        
  2489                        ; don't check fit if terminal width byte is zero
  2490                        
  2491 00:DF9C: A5 0F              LDA   TWidth            ; get terminal width byte
  2492 00:DF9E: F0 0A              BEQ   LAB_185E          ; skip check if zero
  2493                        
  2494 00:DFA0: 38                 SEC                     ; set carry for subtract
  2495 00:DFA1: E5 0E              SBC   TPos              ; subtract terminal position
  2496 00:DFA3: F1 AE              SBC   (des_pl),Y        ; subtract string length
  2497 00:DFA5: B0 03              BCS   LAB_185E          ; branch if less than terminal width
  2498                        
  2499 00:DFA7: 20 B8 DF           JSR   LAB_CRLF          ; else print CR/LF
  2500                        LAB_185E
  2501 00:DFAA: 20 FC DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2502 00:DFAD: F0 C9              BEQ   LAB_182C          ; always go continue processing line
  2503                        
  2504                        ; CR/LF return to BASIC from BASIC input handler
  2505                        
  2506                        LAB_1866
  2507 00:DFAF: A9 00              LDA   #$00              ; clear byte
  2508 00:DFB1: 9D 21 02           STA   Ibuffs,X          ; null terminate input
  2509 00:DFB4: A2 21              LDX   #<Ibuffs          ; set X to buffer start-1 low byte
  2510 00:DFB6: A0 02              LDY   #>Ibuffs          ; set Y to buffer start-1 high byte
  2511                        
  2512                        ; print CR/LF
  2513                        
  2514                        LAB_CRLF
  2515 00:DFB8: A9 0D              LDA   #$0D              ; load [CR]
  2516 00:DFBA: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  2517 00:DFBD: A9 0A              LDA   #$0A              ; load [LF]
  2518 00:DFBF: D0 52              BNE   LAB_PRNA          ; go print the character and return, branch always
  2519                        
  2520                        LAB_188B
  2521 00:DFC1: A5 0E              LDA   TPos              ; get terminal position
  2522 00:DFC3: C5 10              CMP   Iclim             ; compare with input column limit
  2523 00:DFC5: 90 05              BCC   LAB_1897          ; branch if less
  2524                        
  2525 00:DFC7: 20 B8 DF           JSR   LAB_CRLF          ; else print CR/LF (next line)
  2526 00:DFCA: D0 27              BNE   LAB_18BD          ; continue with PRINT processing (branch always)
  2527                        
  2528                        LAB_1897
  2529 00:DFCC: 38                 SEC                     ; set carry for subtract
  2530                        LAB_1898
  2531 00:DFCD: E5 64              SBC   TabSiz            ; subtract TAB size
  2532 00:DFCF: B0 FC              BCS   LAB_1898          ; loop if result was +ve
  2533                        
  2534 00:DFD1: 49 FF              EOR   #$FF              ; complement it
  2535 00:DFD3: 69 01              ADC   #$01              ; +1 (twos complement)
  2536 00:DFD5: D0 12              BNE   LAB_18B6          ; always print A spaces (result is never $00)
  2537                        
  2538                                                      ; do TAB/SPC
  2539                        LAB_18A2
  2540 00:DFD7: 48                 PHA                     ; save token
  2541 00:DFD8: 20 C2 EB           JSR   LAB_SGBY          ; scan and get byte parameter
  2542 00:DFDB: C9 29              CMP   #$29              ; is next character )
  2543 00:DFDD: D0 7B              BNE   LAB_1910          ; if not do syntax error then warm start
  2544                        
  2545 00:DFDF: 68                 PLA                     ; get token back
  2546 00:DFE0: C9 AB              CMP   #TK_TAB           ; was it TAB ?
  2547 00:DFE2: D0 06              BNE   LAB_18B7          ; if not go do SPC
  2548                        
  2549                                                      ; calculate TAB offset
  2550 00:DFE4: 8A                 TXA                     ; copy integer value to A
  2551 00:DFE5: E5 0E              SBC   TPos              ; subtract terminal position
  2552 00:DFE7: 90 0A              BCC   LAB_18BD          ; branch if result was < 0 (can't TAB backwards)
  2553                        
  2554                                                      ; print A spaces
  2555                        LAB_18B6
  2556 00:DFE9: AA                 TAX                     ; copy result to X
  2557                        LAB_18B7
  2558 00:DFEA: 8A                 TXA                     ; set flags on size for SPC
  2559 00:DFEB: F0 06              BEQ   LAB_18BD          ; branch if result was = $0, already here
  2560                        
  2561                                                      ; print X spaces
  2562                        LAB_18BA
  2563 00:DFED: 20 0E E0           JSR   LAB_18E0          ; print " "
  2564 00:DFF0: CA                 DEX                     ; decrement count
  2565 00:DFF1: D0 FA              BNE   LAB_18BA          ; loop if not all done
  2566                        
  2567                                                      ; continue with PRINT processing
  2568                        LAB_18BD
  2569 00:DFF3: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2570 00:DFF6: D0 85              BNE   LAB_1831          ; if more to print go do it
  2571                        
  2572 00:DFF8: 60                 RTS
  2573                        
  2574                        ; print null terminated string from memory
  2575                        
  2576                        LAB_18C3
  2577 00:DFF9: 20 77 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  2578                        
  2579                        ; print string from Sutill/Sutilh
  2580                        
  2581                        LAB_18C6
  2582 00:DFFC: 20 77 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  2583                                                      ; space returns with A = length, X=$71=pointer low byte,
  2584                                                      ; Y=$72=pointer high byte
  2585 00:DFFF: A0 00              LDY   #$00              ; reset index
  2586 00:E001: AA                 TAX                     ; copy length to X
  2587 00:E002: F0 49              BEQ   LAB_188C          ; exit (RTS) if null string
  2588                        
  2589                        LAB_18CD
  2590                        
  2591 00:E004: B1 71              LDA   (ut1_pl),Y        ; get next byte
  2592 00:E006: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  2593 00:E009: C8                 INY                     ; increment index
  2594 00:E00A: CA                 DEX                     ; decrement count
  2595 00:E00B: D0 F7              BNE   LAB_18CD          ; loop if not done yet
  2596                        
  2597 00:E00D: 60                 RTS
  2598                        
  2599                                                      ; Print single format character
  2600                        ; print " "
  2601                        
  2602                        LAB_18E0
  2603 00:E00E: A9 20              LDA   #$20              ; load " "
  2604 00:E010: 2C                 .byte $2C               ; change next line to BIT LAB_3FA9
  2605                        
  2606                        ; print "?" character
  2607                        
  2608                        LAB_18E3
  2609 00:E011: A9 3F              LDA   #$3F              ; load "?" character
  2610                        
  2611                        ; print character in A
  2612                        ; now includes the null handler
  2613                        ; also includes infinite line length code
  2614                        ; note! some routines expect this one to exit with Zb=0
  2615                        
  2616                        LAB_PRNA
  2617 00:E013: C9 20              CMP   #' '              ; compare with " "
  2618 00:E015: 90 19              BCC   LAB_18F9          ; branch if less (non printing)
  2619                        
  2620                                                      ; else printable character
  2621 00:E017: 48                 PHA                     ; save the character
  2622                        
  2623                        ; don't check fit if terminal width byte is zero
  2624                        
  2625 00:E018: A5 0F              LDA   TWidth            ; get terminal width
  2626 00:E01A: D0 0A              BNE   LAB_18F0          ; branch if not zero (not infinite length)
  2627                        
  2628                        ; is "infinite line" so check TAB position
  2629                        
  2630 00:E01C: A5 0E              LDA   TPos              ; get position
  2631 00:E01E: E5 64              SBC   TabSiz            ; subtract TAB size, carry set by CMP #$20 above
  2632 00:E020: D0 0B              BNE   LAB_18F7          ; skip reset if different
  2633                        
  2634 00:E022: 85 0E              STA   TPos              ; else reset position
  2635 00:E024: F0 07              BEQ   LAB_18F7          ; go print character
  2636                        
  2637                        LAB_18F0
  2638 00:E026: C5 0E              CMP   TPos              ; compare with terminal character position
  2639 00:E028: D0 03              BNE   LAB_18F7          ; branch if not at end of line
  2640                        
  2641 00:E02A: 20 B8 DF           JSR   LAB_CRLF          ; else print CR/LF
  2642                        LAB_18F7
  2643 00:E02D: E6 0E              INC   TPos              ; increment terminal position
  2644 00:E02F: 68                 PLA                     ; get character back
  2645                        LAB_18F9
  2646 00:E030: 20 20 F8           JSR   V_OUTP            ; output byte via output vector
  2647 00:E033: C9 0D              CMP   #$0D              ; compare with [CR]
  2648 00:E035: D0 14              BNE   LAB_188A          ; branch if not [CR]
  2649                        
  2650                                                      ; else print nullct nulls after the [CR]
  2651 00:E037: 86 78              STX   TempB             ; save buffer index
  2652 00:E039: A6 0D              LDX   Nullct            ; get null count
  2653 00:E03B: F0 0A              BEQ   LAB_1886          ; branch if no nulls
  2654                        
  2655 00:E03D: A9 00              LDA   #$00              ; load [NULL]
  2656                        LAB_1880
  2657 00:E03F: 20 13 E0           JSR   LAB_PRNA          ; go print the character
  2658 00:E042: CA                 DEX                     ; decrement count
  2659 00:E043: D0 FA              BNE   LAB_1880          ; loop if not all done
  2660                        
  2661 00:E045: A9 0D              LDA   #$0D              ; restore the character (and set the flags)
  2662                        LAB_1886
  2663 00:E047: 86 0E              STX   TPos              ; clear terminal position (X always = zero when we get here)
  2664 00:E049: A6 78              LDX   TempB             ; restore buffer index
  2665                        LAB_188A
  2666 00:E04B: 29 FF              AND   #$FF              ; set the flags
  2667                        LAB_188C
  2668 00:E04D: 60                 RTS
  2669                        
  2670                        ; handle bad input data
  2671                        
  2672                        LAB_1904
  2673 00:E04E: A5 62              LDA   Imode             ; get input mode flag, $00=INPUT, $00=READ
  2674 00:E050: 10 0B              BPL   LAB_1913          ; branch if INPUT (go do redo)
  2675                        
  2676 00:E052: A5 8D              LDA   Dlinel            ; get current DATA line low byte
  2677 00:E054: A4 8E              LDY   Dlineh            ; get current DATA line high byte
  2678 00:E056: 85 87              STA   Clinel            ; save current line low byte
  2679 00:E058: 84 88              STY   Clineh            ; save current line high byte
  2680                        LAB_1910
  2681 00:E05A: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  2682                        
  2683                                                      ; mode was INPUT
  2684                        LAB_1913
  2685 00:E05D: A9 47              LDA   #<LAB_REDO        ; point to redo message (low addr)
  2686 00:E05F: A0 FF              LDY   #>LAB_REDO        ; point to redo message (high addr)
  2687 00:E061: 20 F9 DF           JSR   LAB_18C3          ; print null terminated string from memory
  2688 00:E064: A5 8B              LDA   Cpntrl            ; get continue pointer low byte
  2689 00:E066: A4 8C              LDY   Cpntrh            ; get continue pointer high byte
  2690 00:E068: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2691 00:E06A: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  2692 00:E06C: 60                 RTS
  2693                        
  2694                        ; perform INPUT
  2695                        
  2696                        LAB_INPUT
  2697 00:E06D: C9 22              CMP   #$22              ; compare next byte with open quote
  2698 00:E06F: D0 0B              BNE   LAB_1934          ; branch if no prompt string
  2699                        
  2700 00:E071: 20 E3 E2           JSR   LAB_1BC1          ; print "..." string
  2701 00:E074: A9 3B              LDA   #$3B              ; load A with ";"
  2702 00:E076: 20 16 E3           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  2703 00:E079: 20 FC DF           JSR   LAB_18C6          ; print string from Sutill/Sutilh
  2704                        
  2705                                                      ; done with prompt, now get data
  2706                        LAB_1934
  2707 00:E07C: 20 9D E7           JSR   LAB_CKRN          ; check not Direct, back here if ok
  2708 00:E07F: 20 68 D9           JSR   LAB_INLN          ; print "? " and get BASIC input
  2709 00:E082: A9 00              LDA   #$00              ; set mode = INPUT
  2710 00:E084: CD 21 02           CMP   Ibuffs            ; test first byte in buffer
  2711 00:E087: D0 09              BNE   LAB_1953          ; branch if not null input
  2712                        
  2713                        ; *** change p2: keep carry set to throw break message
  2714                        ;      CLC                     ; was null input so clear carry to exit program
  2715 00:E089: 4C 4D DC           JMP   LAB_1647          ; go do BREAK exit
  2716                        
  2717                        ; perform READ
  2718                        
  2719                        LAB_READ
  2720 00:E08C: A6 8F              LDX   Dptrl             ; get DATA pointer low byte
  2721 00:E08E: A4 90              LDY   Dptrh             ; get DATA pointer high byte
  2722 00:E090: A9 80              LDA   #$80              ; set mode = READ
  2723                        
  2724                        LAB_1953
  2725 00:E092: 85 62              STA   Imode             ; set input mode flag, $00=INPUT, $80=READ
  2726 00:E094: 86 91              STX   Rdptrl            ; save READ pointer low byte
  2727 00:E096: 84 92              STY   Rdptrh            ; save READ pointer high byte
  2728                        
  2729                                                      ; READ or INPUT next variable from list
  2730                        LAB_195B
  2731 00:E098: 20 DD E4           JSR   LAB_GVAR          ; get (var) address
  2732 00:E09B: 85 97              STA   Lvarpl            ; save address low byte
  2733 00:E09D: 84 98              STY   Lvarph            ; save address high byte
  2734 00:E09F: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2735 00:E0A1: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2736 00:E0A3: 85 11              STA   Itempl            ; save as temporary integer low byte
  2737 00:E0A5: 84 12              STY   Itemph            ; save as temporary integer high byte
  2738 00:E0A7: A6 91              LDX   Rdptrl            ; get READ pointer low byte
  2739 00:E0A9: A4 92              LDY   Rdptrh            ; get READ pointer high byte
  2740 00:E0AB: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2741 00:E0AD: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2742 00:E0AF: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2743 00:E0B2: D0 11              BNE   LAB_1988          ; branch if not null
  2744                        
  2745                                                      ; pointer was to null entry
  2746 00:E0B4: 24 62              BIT   Imode             ; test input mode flag, $00=INPUT, $80=READ
  2747 00:E0B6: 30 65              BMI   LAB_19DD          ; branch if READ
  2748                        
  2749                                                      ; mode was INPUT
  2750 00:E0B8: 20 11 E0           JSR   LAB_18E3          ; print "?" character (double ? for extended input)
  2751 00:E0BB: 20 68 D9           JSR   LAB_INLN          ; print "? " and get BASIC input
  2752 00:E0BE: 86 C3              STX   Bpntrl            ; set BASIC execute pointer low byte
  2753 00:E0C0: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2754                        LAB_1985
  2755 00:E0C2: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2756                        LAB_1988
  2757 00:E0C5: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  2758 00:E0C7: 10 24              BPL   LAB_19B0          ; branch if numeric
  2759                        
  2760                                                      ; else get string
  2761 00:E0C9: 85 5B              STA   Srchc             ; save search character
  2762 00:E0CB: C9 22              CMP   #$22              ; was it " ?
  2763 00:E0CD: F0 07              BEQ   LAB_1999          ; branch if so
  2764                        
  2765 00:E0CF: A9 3A              LDA   #':'              ; else search character is ":"
  2766 00:E0D1: 85 5B              STA   Srchc             ; set new search character
  2767 00:E0D3: A9 2C              LDA   #','              ; other search character is ","
  2768 00:E0D5: 18                 CLC                     ; clear carry for add
  2769                        LAB_1999
  2770 00:E0D6: 85 5C              STA   Asrch             ; set second search character
  2771 00:E0D8: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  2772 00:E0DA: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  2773                        
  2774 00:E0DC: 69 00              ADC   #$00              ; c is =1 if we came via the BEQ LAB_1999, else =0
  2775 00:E0DE: 90 01              BCC   LAB_19A4          ; branch if no execute pointer low byte rollover
  2776                        
  2777 00:E0E0: C8                 INY                     ; else increment high byte
  2778                        LAB_19A4
  2779 00:E0E1: 20 7D E8           JSR   LAB_20B4          ; print Srchc or Asrch terminated string to Sutill/Sutilh
  2780 00:E0E4: 20 01 EC           JSR   LAB_23F3          ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  2781 00:E0E7: 20 F6 DE           JSR   LAB_17D5          ; go do string LET
  2782 00:E0EA: 4C F3 E0           JMP   LAB_19B6          ; go check string terminator
  2783                        
  2784                                                      ; get numeric INPUT
  2785                        LAB_19B0
  2786 00:E0ED: 20 D8 F0           JSR   LAB_2887          ; get FAC1 from string
  2787 00:E0F0: 20 D5 EF           JSR   LAB_PFAC          ; pack FAC1 into (Lvarpl)
  2788                        LAB_19B6
  2789 00:E0F3: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2790 00:E0F6: F0 0A              BEQ   LAB_19C5          ; branch if null (last entry)
  2791                        
  2792 00:E0F8: C9 2C              CMP   #','              ; else compare with ","
  2793 00:E0FA: F0 03              BEQ   LAB_19C2          ; branch if ","
  2794                        
  2795 00:E0FC: 4C 4E E0           JMP   LAB_1904          ; else go handle bad input data
  2796                        
  2797                                                      ; got good input data
  2798                        LAB_19C2
  2799 00:E0FF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  2800                        LAB_19C5
  2801 00:E102: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
  2802 00:E104: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
  2803 00:E106: 85 91              STA   Rdptrl            ; save for now
  2804 00:E108: 84 92              STY   Rdptrh            ; save for now
  2805 00:E10A: A5 11              LDA   Itempl            ; get temporary integer low byte (temp BASIC execute ptr)
  2806 00:E10C: A4 12              LDY   Itemph            ; get temporary integer high byte (temp BASIC execute ptr)
  2807 00:E10E: 85 C3              STA   Bpntrl            ; set BASIC execute pointer low byte
  2808 00:E110: 84 C4              STY   Bpntrh            ; set BASIC execute pointer high byte
  2809 00:E112: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2810 00:E115: F0 2C              BEQ   LAB_1A03          ; if null go do extra ignored message
  2811                        
  2812 00:E117: 20 23 E3           JSR   LAB_1C01          ; else scan for "," , else do syntax error then warm start
  2813 00:E11A: 4C 98 E0           JMP   LAB_195B          ; go INPUT next variable from list
  2814                        
  2815                                                      ; find next DATA statement or do "Out of DATA" error
  2816                        LAB_19DD
  2817 00:E11D: 20 C0 DD           JSR   LAB_SNBS          ; scan for next BASIC statement ([:] or [EOL])
  2818 00:E120: C8                 INY                     ; increment index
  2819 00:E121: AA                 TAX                     ; copy character ([:] or [EOL])
  2820 00:E122: D0 12              BNE   LAB_19F6          ; branch if [:]
  2821                        
  2822 00:E124: A2 06              LDX   #$06              ; set for "Out of DATA" error
  2823 00:E126: C8                 INY                     ; increment index, now points to next line pointer high byte
  2824 00:E127: B1 C3              LDA   (Bpntrl),Y        ; get next line pointer high byte
  2825 00:E129: F0 73              BEQ   LAB_1A54          ; branch if end (eventually does error X)
  2826                        
  2827 00:E12B: C8                 INY                     ; increment index
  2828 00:E12C: B1 C3              LDA   (Bpntrl),Y        ; get next line # low byte
  2829 00:E12E: 85 8D              STA   Dlinel            ; save current DATA line low byte
  2830 00:E130: C8                 INY                     ; increment index
  2831 00:E131: B1 C3              LDA   (Bpntrl),Y        ; get next line # high byte
  2832 00:E133: C8                 INY                     ; increment index
  2833 00:E134: 85 8E              STA   Dlineh            ; save current DATA line high byte
  2834                        LAB_19F6
  2835 00:E136: B1 C3              LDA   (Bpntrl),Y        ; get byte
  2836 00:E138: C8                 INY                     ; increment index
  2837 00:E139: AA                 TAX                     ; copy to X
  2838 00:E13A: 20 B2 DD           JSR   LAB_170F          ; set BASIC execute pointer
  2839 00:E13D: E0 83              CPX   #TK_DATA          ; compare with "DATA" token
  2840 00:E13F: F0 81              BEQ   LAB_1985          ; was "DATA" so go do next READ
  2841                        
  2842 00:E141: D0 DA              BNE   LAB_19DD          ; go find next statement if not "DATA"
  2843                        
  2844                        ; end of INPUT/READ routine
  2845                        
  2846                        LAB_1A03
  2847 00:E143: A5 91              LDA   Rdptrl            ; get temp READ pointer low byte
  2848 00:E145: A4 92              LDY   Rdptrh            ; get temp READ pointer high byte
  2849 00:E147: A6 62              LDX   Imode             ; get input mode flag, $00=INPUT, $80=READ
  2850 00:E149: 10 03              BPL   LAB_1A0E          ; branch if INPUT
  2851                        
  2852 00:E14B: 4C 6F DC           JMP   LAB_1624          ; save AY as DATA pointer and return
  2853                        
  2854                                                      ; we were getting INPUT
  2855                        LAB_1A0E
  2856 00:E14E: A0 00              LDY   #$00              ; clear index
  2857 00:E150: B1 91              LDA   (Rdptrl),Y        ; get next byte
  2858 00:E152: D0 01              BNE   LAB_1A1B          ; error if not end of INPUT
  2859                        
  2860 00:E154: 60                 RTS
  2861                        
  2862                                                      ; user typed too much
  2863                        LAB_1A1B
  2864 00:E155: A9 36              LDA   #<LAB_IMSG        ; point to extra ignored message (low addr)
  2865 00:E157: A0 FF              LDY   #>LAB_IMSG        ; point to extra ignored message (high addr)
  2866 00:E159: 4C F9 DF           JMP   LAB_18C3          ; print null terminated string from memory and return
  2867                        
  2868                        ; search the stack for FOR activity
  2869                        ; exit with z=1 if FOR else exit with z=0
  2870                        
  2871                        LAB_11A1
  2872 00:E15C: BA                 TSX                     ; copy stack pointer
  2873 00:E15D: E8                 INX                     ; +1 pass return address
  2874 00:E15E: E8                 INX                     ; +2 pass return address
  2875 00:E15F: E8                 INX                     ; +3 pass calling routine return address
  2876 00:E160: E8                 INX                     ; +4 pass calling routine return address
  2877                        LAB_11A6
  2878 00:E161: BD 01 01           LDA   LAB_STAK+1,X      ; get token byte from stack
  2879 00:E164: C9 81              CMP   #TK_FOR           ; is it FOR token
  2880 00:E166: D0 21              BNE   LAB_11CE          ; exit if not FOR token
  2881                        
  2882                                                      ; was FOR token
  2883 00:E168: A5 98              LDA   Frnxth            ; get var pointer for FOR/NEXT high byte
  2884 00:E16A: D0 0A              BNE   LAB_11BB          ; branch if not null
  2885                        
  2886 00:E16C: BD 02 01           LDA   LAB_STAK+2,X      ; get FOR variable pointer low byte
  2887 00:E16F: 85 97              STA   Frnxtl            ; save var pointer for FOR/NEXT low byte
  2888 00:E171: BD 03 01           LDA   LAB_STAK+3,X      ; get FOR variable pointer high byte
  2889 00:E174: 85 98              STA   Frnxth            ; save var pointer for FOR/NEXT high byte
  2890                        LAB_11BB
  2891 00:E176: DD 03 01           CMP   LAB_STAK+3,X      ; compare var pointer with stacked var pointer (high byte)
  2892 00:E179: D0 07              BNE   LAB_11C7          ; branch if no match
  2893                        
  2894 00:E17B: A5 97              LDA   Frnxtl            ; get var pointer for FOR/NEXT low byte
  2895 00:E17D: DD 02 01           CMP   LAB_STAK+2,X      ; compare var pointer with stacked var pointer (low byte)
  2896 00:E180: F0 07              BEQ   LAB_11CE          ; exit if match found
  2897                        
  2898                        LAB_11C7
  2899 00:E182: 8A                 TXA                     ; copy index
  2900 00:E183: 18                 CLC                     ; clear carry for add
  2901 00:E184: 69 10              ADC   #$10              ; add FOR stack use size
  2902 00:E186: AA                 TAX                     ; copy back to index
  2903 00:E187: D0 D8              BNE   LAB_11A6          ; loop if not at start of stack
  2904                        
  2905                        LAB_11CE
  2906 00:E189: 60                 RTS
  2907                        
  2908                        ; perform NEXT
  2909                        
  2910                        LAB_NEXT
  2911 00:E18A: D0 04              BNE   LAB_1A46          ; branch if NEXT var
  2912                        
  2913 00:E18C: A0 00              LDY   #$00              ; else clear Y
  2914 00:E18E: F0 03              BEQ   LAB_1A49          ; branch always (no variable to search for)
  2915                        
  2916                        ; NEXT var
  2917                        
  2918                        LAB_1A46
  2919 00:E190: 20 DD E4           JSR   LAB_GVAR          ; get variable address
  2920                        LAB_1A49
  2921 00:E193: 85 97              STA   Frnxtl            ; store variable pointer low byte
  2922 00:E195: 84 98              STY   Frnxth            ; store variable pointer high byte
  2923                                                      ; (both cleared if no variable defined)
  2924 00:E197: 20 5C E1           JSR   LAB_11A1          ; search the stack for FOR activity
  2925 00:E19A: F0 04              BEQ   LAB_1A56          ; branch if found
  2926                        
  2927 00:E19C: A2 00              LDX   #$00              ; else set error $00 ("NEXT without FOR" error)
  2928                        LAB_1A54
  2929 00:E19E: F0 63              BEQ   LAB_1ABE          ; do error #X, then warm start
  2930                        
  2931                        LAB_1A56
  2932 00:E1A0: 9A                 TXS                     ; set stack pointer, X set by search, dumps return addresses
  2933                        
  2934 00:E1A1: 8A                 TXA                     ; copy stack pointer
  2935 00:E1A2: 38                 SEC                     ; set carry for subtract
  2936 00:E1A3: E9 F7              SBC   #$F7              ; point to TO var
  2937 00:E1A5: 85 73              STA   ut2_pl            ; save pointer to TO var for compare
  2938 00:E1A7: 69 FB              ADC   #$FB              ; point to STEP var
  2939                        
  2940 00:E1A9: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2941 00:E1AB: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (STEP value) into FAC1
  2942 00:E1AE: BA                 TSX                     ; get stack pointer back
  2943 00:E1AF: BD 08 01           LDA   LAB_STAK+8,X      ; get step sign
  2944 00:E1B2: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  2945 00:E1B4: A5 97              LDA   Frnxtl            ; get FOR variable pointer low byte
  2946 00:E1B6: A4 98              LDY   Frnxth            ; get FOR variable pointer high byte
  2947 00:E1B8: 20 F0 EC           JSR   LAB_246C          ; add (FOR variable) to FAC1
  2948 00:E1BB: 20 D5 EF           JSR   LAB_PFAC          ; pack FAC1 into (FOR variable)
  2949 00:E1BE: A0 01              LDY   #>LAB_STAK        ; point to stack page high byte
  2950 00:E1C0: 20 4B F0           JSR   LAB_27FA          ; compare FAC1 with (Y,ut2_pl) (TO value)
  2951 00:E1C3: BA                 TSX                     ; get stack pointer back
  2952 00:E1C4: DD 08 01           CMP   LAB_STAK+8,X      ; compare step sign
  2953 00:E1C7: F0 17              BEQ   LAB_1A9B          ; branch if = (loop complete)
  2954                        
  2955                                                      ; loop back and do it all again
  2956 00:E1C9: BD 0D 01           LDA   LAB_STAK+$0D,X    ; get FOR line low byte
  2957 00:E1CC: 85 87              STA   Clinel            ; save current line low byte
  2958 00:E1CE: BD 0E 01           LDA   LAB_STAK+$0E,X    ; get FOR line high byte
  2959 00:E1D1: 85 88              STA   Clineh            ; save current line high byte
  2960 00:E1D3: BD 10 01           LDA   LAB_STAK+$10,X    ; get BASIC execute pointer low byte
  2961 00:E1D6: 85 C3              STA   Bpntrl            ; save BASIC execute pointer low byte
  2962 00:E1D8: BD 0F 01           LDA   LAB_STAK+$0F,X    ; get BASIC execute pointer high byte
  2963 00:E1DB: 85 C4              STA   Bpntrh            ; save BASIC execute pointer high byte
  2964                        LAB_1A98
  2965 00:E1DD: 4C E5 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  2966                        
  2967                                                      ; loop complete so carry on
  2968                        LAB_1A9B
  2969 00:E1E0: 8A                 TXA                     ; stack copy to A
  2970 00:E1E1: 69 0F              ADC   #$0F              ; add $10 ($0F+carry) to dump FOR structure
  2971 00:E1E3: AA                 TAX                     ; copy back to index
  2972 00:E1E4: 9A                 TXS                     ; copy to stack pointer
  2973 00:E1E5: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  2974 00:E1E8: C9 2C              CMP   #','              ; compare with ","
  2975 00:E1EA: D0 F1              BNE   LAB_1A98          ; branch if not "," (go do interpreter inner loop)
  2976                        
  2977                                                      ; was "," so another NEXT variable to do
  2978 00:E1EC: 20 BC 00           JSR   LAB_IGBY          ; else increment and scan memory
  2979 00:E1EF: 20 90 E1           JSR   LAB_1A46          ; do NEXT (var)
  2980                        
  2981                        ; evaluate expression and check is numeric, else do type mismatch
  2982                        
  2983                        LAB_EVNM
  2984 00:E1F2: 20 06 E2           JSR   LAB_EVEX          ; evaluate expression
  2985                        
  2986                        ; check if source is numeric, else do type mismatch
  2987                        
  2988                        LAB_CTNM
  2989 00:E1F5: 18                 CLC                     ; destination is numeric
  2990 00:E1F6: 24                 .byte $24               ; makes next line BIT $38
  2991                        
  2992                        ; check if source is string, else do type mismatch
  2993                        
  2994                        LAB_CTST
  2995 00:E1F7: 38                 SEC                     ; required type is string
  2996                        
  2997                        ; type match check, set C for string, clear C for numeric
  2998                        
  2999                        LAB_CKTM
  3000 00:E1F8: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  3001 00:E1FA: 30 03              BMI   LAB_1ABA          ; branch if data type is string
  3002                        
  3003                                                      ; else data type was numeric
  3004 00:E1FC: B0 03              BCS   LAB_1ABC          ; if required type is string do type mismatch error
  3005                        LAB_1AB9
  3006 00:E1FE: 60                 RTS
  3007                        
  3008                                                      ; data type was string, now check required type
  3009                        LAB_1ABA
  3010 00:E1FF: B0 FD              BCS   LAB_1AB9          ; exit if required type is string
  3011                        
  3012                                                      ; else do type mismatch error
  3013                        LAB_1ABC
  3014 00:E201: A2 18              LDX   #$18              ; error code $18 ("Type mismatch" error)
  3015                        LAB_1ABE
  3016 00:E203: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  3017                        
  3018                        ; evaluate expression
  3019                        
  3020                        LAB_EVEX
  3021 00:E206: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  3022 00:E208: D0 02              BNE   LAB_1AC7          ; skip next if not zero
  3023                        
  3024 00:E20A: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  3025                        LAB_1AC7
  3026 00:E20C: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  3027                        
  3028                        LAB_EVEZ
  3029 00:E20E: A9 00              LDA   #$00              ; set null precedence (flag done)
  3030                        LAB_1ACC
  3031 00:E210: 48                 PHA                     ; push precedence byte
  3032 00:E211: A9 02              LDA   #$02              ; 2 bytes
  3033 00:E213: 20 28 D8           JSR   LAB_1212          ; check room on stack for A bytes
  3034 00:E216: 20 F2 E2           JSR   LAB_GVAL          ; get value from line
  3035 00:E219: A9 00              LDA   #$00              ; clear A
  3036 00:E21B: 85 9B              STA   comp_f            ; clear compare function flag
  3037                        LAB_1ADB
  3038 00:E21D: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3039                        LAB_1ADE
  3040 00:E220: 38                 SEC                     ; set carry for subtract
  3041 00:E221: E9 C0              SBC   #TK_GT            ; subtract token for > (lowest comparison function)
  3042 00:E223: 90 17              BCC   LAB_1AFA          ; branch if < TK_GT
  3043                        
  3044 00:E225: C9 03              CMP   #$03              ; compare with ">" to "<" tokens
  3045 00:E227: B0 13              BCS   LAB_1AFA          ; branch if >= TK_SGN (highest evaluation function +1)
  3046                        
  3047                                                      ; was token for > = or < (A = 0, 1 or 2)
  3048 00:E229: C9 01              CMP   #$01              ; compare with token for =
  3049 00:E22B: 2A                 ROL                     ; *2, b0 = carry (=1 if token was = or <)
  3050                                                      ; (A = 0, 3 or 5)
  3051 00:E22C: 49 01              EOR   #$01              ; toggle b0
  3052                                                      ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
  3053 00:E22E: 45 9B              EOR   comp_f            ; EOR with compare function flag bits
  3054 00:E230: C5 9B              CMP   comp_f            ; compare with compare function flag
  3055 00:E232: 90 67              BCC   LAB_1B53          ; if <(comp_f) do syntax error then warm start
  3056                                                      ; was more than one <, = or >)
  3057                        
  3058 00:E234: 85 9B              STA   comp_f            ; save new compare function flag
  3059 00:E236: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3060 00:E239: 4C 20 E2           JMP   LAB_1ADE          ; go do next character
  3061                        
  3062                                                      ; token is < ">" or > "<" tokens
  3063                        LAB_1AFA
  3064 00:E23C: A6 9B              LDX   comp_f            ; get compare function flag
  3065 00:E23E: D0 2C              BNE   LAB_1B2A          ; branch if compare function
  3066                        
  3067 00:E240: B0 79              BCS   LAB_1B78          ; go do functions
  3068                        
  3069                                                      ; else was <  TK_GT so is operator or lower
  3070 00:E242: 69 0A              ADC   #TK_GT-TK_PLUS    ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
  3071 00:E244: 90 75              BCC   LAB_1B78          ; branch if < + operator
  3072                        
  3073                                                      ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
  3074 00:E246: D0 07              BNE   LAB_1B0B          ; branch if not + token
  3075                        
  3076 00:E248: 24 5F              BIT   Dtypef            ; test data type flag, $FF=string, $00=numeric
  3077 00:E24A: 10 03              BPL   LAB_1B0B          ; branch if not string
  3078                        
  3079                                                      ; will only be $00 if type is string and token was +
  3080 00:E24C: 4C 0D EA           JMP   LAB_224D          ; add strings, string 1 is in descriptor des_pl, string 2
  3081                                                      ; is in line, and return
  3082                        
  3083                        LAB_1B0B
  3084 00:E24F: 85 71              STA   ut1_pl            ; save it
  3085 00:E251: 0A                 ASL                     ; *2
  3086 00:E252: 65 71              ADC   ut1_pl            ; *3
  3087 00:E254: A8                 TAY                     ; copy to index
  3088                        LAB_1B13
  3089 00:E255: 68                 PLA                     ; pull previous precedence
  3090 00:E256: D9 1E FA           CMP   LAB_OPPT,Y        ; compare with precedence byte
  3091 00:E259: B0 65              BCS   LAB_1B7D          ; branch if A >=
  3092                        
  3093 00:E25B: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3094                        LAB_1B1C
  3095 00:E25E: 48                 PHA                     ; save precedence
  3096                        LAB_1B1D
  3097 00:E25F: 20 87 E2           JSR   LAB_1B43          ; get vector, execute function then continue evaluation
  3098 00:E262: 68                 PLA                     ; restore precedence
  3099 00:E263: A4 99              LDY   prstk             ; get precedence stacked flag
  3100 00:E265: 10 19              BPL   LAB_1B3C          ; branch if stacked values
  3101                        
  3102 00:E267: AA                 TAX                     ; copy precedence (set flags)
  3103 00:E268: F0 76              BEQ   LAB_1B9D          ; exit if done
  3104                        
  3105 00:E26A: D0 5D              BNE   LAB_1B86          ; else pop FAC2 and return, branch always
  3106                        
  3107                        LAB_1B2A
  3108 00:E26C: 26 5F              ROL   Dtypef            ; shift data type flag into Cb
  3109 00:E26E: 8A                 TXA                     ; copy compare function flag
  3110 00:E26F: 85 5F              STA   Dtypef            ; clear data type flag, X is 0xxx xxxx
  3111 00:E271: 2A                 ROL                     ; shift data type into compare function byte b0
  3112 00:E272: A6 C3              LDX   Bpntrl            ; get BASIC execute pointer low byte
  3113 00:E274: D0 02              BNE   LAB_1B34          ; branch if no underflow
  3114                        
  3115 00:E276: C6 C4              DEC   Bpntrh            ; else decrement BASIC execute pointer high byte
  3116                        LAB_1B34
  3117 00:E278: C6 C3              DEC   Bpntrl            ; decrement BASIC execute pointer low byte
  3118             0000000C   TK_LT_PLUS  equ TK_LT-TK_PLUS
  3119 00:E27A: A0 24              LDY   #TK_LT_PLUS*3     ; set offset to last operator entry
  3120 00:E27C: 85 9B              STA   comp_f            ; save new compare function flag
  3121 00:E27E: D0 D5              BNE   LAB_1B13          ; branch always
  3122                        
  3123                        LAB_1B3C
  3124 00:E280: D9 1E FA           CMP   LAB_OPPT,Y        ;.compare with stacked function precedence
  3125 00:E283: B0 44              BCS   LAB_1B86          ; branch if A >=, pop FAC2 and return
  3126                        
  3127 00:E285: 90 D7              BCC   LAB_1B1C          ; branch always
  3128                        
  3129                        ;.get vector, execute function then continue evaluation
  3130                        
  3131                        LAB_1B43
  3132 00:E287: B9 20 FA           LDA   LAB_OPPT+2,Y      ; get function vector high byte
  3133 00:E28A: 48                 PHA                     ; onto stack
  3134 00:E28B: B9 1F FA           LDA   LAB_OPPT+1,Y      ; get function vector low byte
  3135 00:E28E: 48                 PHA                     ; onto stack
  3136                                                      ; now push sign, round FAC1 and put on stack
  3137                        ; *** begin patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3138                        ; *** add
  3139                           .IF $&$FF=$FD
  3140                              NOP                     ; return address of JSR +1 (on  next page)
  3141                           .ENDIF  
  3142                        ; *** end   patch  2.22p5.3   potential return address -$100 (page not incremented) ***
  3143 00:E28F: 20 9E E2           JSR   LAB_1B5B          ; function will return here, then the next RTS will call
  3144                                                      ; the function
  3145 00:E292: A5 9B              LDA   comp_f            ; get compare function flag
  3146 00:E294: 48                 PHA                     ; push compare evaluation byte
  3147 00:E295: B9 1E FA           LDA   LAB_OPPT,Y        ; get precedence byte
  3148 00:E298: 4C 10 E2           JMP   LAB_1ACC          ; continue evaluating expression
  3149                        
  3150                        LAB_1B53
  3151 00:E29B: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  3152                        
  3153                        ; push sign, round FAC1 and put on stack
  3154                        
  3155                        LAB_1B5B
  3156 00:E29E: 68                 PLA                     ; get return addr low byte
  3157 00:E29F: 85 71              STA   ut1_pl            ; save it
  3158 00:E2A1: E6 71              INC   ut1_pl            ; increment it (was ret-1 pushed? yes!)
  3159                                                      ; note! no check is made on the high byte! if the calling
  3160                                                      ; routine assembles to a page edge then this all goes
  3161                                                      ; horribly wrong !!!
  3162 00:E2A3: 68                 PLA                     ; get return addr high byte
  3163 00:E2A4: 85 72              STA   ut1_ph            ; save it
  3164 00:E2A6: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3165 00:E2A8: 48                 PHA                     ; push sign
  3166                        
  3167                        ; round FAC1 and put on stack
  3168                        
  3169                        ; *** begin patch  2.22p5.1   TO expression may get sign bit flipped
  3170                        ; *** replace
  3171                        ;LAB_1B66
  3172                        ;      JSR   LAB_27BA          ; round FAC1
  3173                        ; *** with
  3174 00:E2A9: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  3175                        LAB_1B66
  3176                        ; *** end   patch  2.22p5.1   TO expression may get sign bit flipped
  3177 00:E2AC: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3178 00:E2AE: 48                 PHA                     ; push on stack
  3179 00:E2AF: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3180 00:E2B1: 48                 PHA                     ; push on stack
  3181 00:E2B2: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  3182 00:E2B4: 48                 PHA                     ; push on stack
  3183 00:E2B5: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3184 00:E2B7: 48                 PHA                     ; push on stack
  3185 00:E2B8: 6C 71 00           JMP   (ut1_pl)          ; return, sort of
  3186                        
  3187                        ; do functions
  3188                        
  3189                        LAB_1B78
  3190 00:E2BB: A0 FF              LDY   #$FF              ; flag function
  3191 00:E2BD: 68                 PLA                     ; pull precedence byte
  3192                        LAB_1B7B
  3193 00:E2BE: F0 20              BEQ   LAB_1B9D          ; exit if done
  3194                        
  3195                        LAB_1B7D
  3196 00:E2C0: C9 64              CMP   #$64              ; compare previous precedence with $64
  3197 00:E2C2: F0 03              BEQ   LAB_1B84          ; branch if was $64 (< function)
  3198                        
  3199 00:E2C4: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3200                        LAB_1B84
  3201 00:E2C7: 84 99              STY   prstk             ; save precedence stacked flag
  3202                        
  3203                                                      ; pop FAC2 and return
  3204                        LAB_1B86
  3205 00:E2C9: 68                 PLA                     ; pop byte
  3206 00:E2CA: 4A                 LSR                     ; shift out comparison evaluation lowest bit
  3207 00:E2CB: 85 63              STA   Cflag             ; save comparison evaluation flag
  3208 00:E2CD: 68                 PLA                     ; pop exponent
  3209 00:E2CE: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  3210 00:E2D0: 68                 PLA                     ; pop mantissa1
  3211 00:E2D1: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3212 00:E2D3: 68                 PLA                     ; pop mantissa2
  3213 00:E2D4: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  3214 00:E2D6: 68                 PLA                     ; pop mantissa3
  3215 00:E2D7: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  3216 00:E2D9: 68                 PLA                     ; pop sign
  3217 00:E2DA: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  3218 00:E2DC: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  3219 00:E2DE: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  3220                        LAB_1B9D
  3221 00:E2E0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3222 00:E2E2: 60                 RTS
  3223                        
  3224                        ; print "..." string to string util area
  3225                        
  3226                        LAB_1BC1
  3227 00:E2E3: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  3228 00:E2E5: A4 C4              LDY   Bpntrh            ; get BASIC execute pointer high byte
  3229 00:E2E7: 69 00              ADC   #$00              ; add carry to low byte
  3230 00:E2E9: 90 01              BCC   LAB_1BCA          ; branch if no overflow
  3231                        
  3232 00:E2EB: C8                 INY                     ; increment high byte
  3233                        LAB_1BCA
  3234 00:E2EC: 20 77 E8           JSR   LAB_20AE          ; print " terminated string to Sutill/Sutilh
  3235 00:E2EF: 4C 01 EC           JMP   LAB_23F3          ; restore BASIC execute pointer from temp and return
  3236                        
  3237                        ; get value from line
  3238                        
  3239                        LAB_GVAL
  3240 00:E2F2: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3241 00:E2F5: B0 03              BCS   LAB_1BAC          ; branch if not numeric character
  3242                        
  3243                                                      ; else numeric string found (e.g. 123)
  3244                        LAB_1BA9
  3245 00:E2F7: 4C D8 F0           JMP   LAB_2887          ; get FAC1 from string and return
  3246                        
  3247                        ; get value from line .. continued
  3248                        
  3249                                                      ; wasn't a number so ..
  3250                        LAB_1BAC
  3251 00:E2FA: AA                 TAX                     ; set the flags
  3252 00:E2FB: 30 2F              BMI   LAB_1BD0          ; if -ve go test token values
  3253                        
  3254                                                      ; else it is either a string, number, variable or (<expr>)
  3255 00:E2FD: C9 24              CMP   #'$'              ; compare with "$"
  3256 00:E2FF: F0 F6              BEQ   LAB_1BA9          ; branch if "$", hex number
  3257                        
  3258 00:E301: C9 25              CMP   #'%'              ; else compare with "%"
  3259 00:E303: F0 F2              BEQ   LAB_1BA9          ; branch if "%", binary number
  3260                        
  3261 00:E305: C9 2E              CMP   #'.'              ; compare with "."
  3262 00:E307: F0 EE              BEQ   LAB_1BA9          ; if so get FAC1 from string and return (e.g. was .123)
  3263                        
  3264                                                      ; it wasn't any sort of number so ..
  3265 00:E309: C9 22              CMP   #$22              ; compare with "
  3266 00:E30B: F0 D6              BEQ   LAB_1BC1          ; branch if open quote
  3267                        
  3268                                                      ; wasn't any sort of number so ..
  3269                        
  3270                        ; evaluate expression within parentheses
  3271                        
  3272 00:E30D: C9 28              CMP   #'('              ; compare with "("
  3273 00:E30F: D0 5B              BNE   LAB_1C18          ; if not "(" get (var), return value in FAC1 and $ flag
  3274                        
  3275                        LAB_1BF7
  3276 00:E311: 20 0E E2           JSR   LAB_EVEZ          ; evaluate expression, no decrement
  3277                        
  3278                        ; all the 'scan for' routines return the character after the sought character
  3279                        
  3280                        ; scan for ")" , else do syntax error then warm start
  3281                        
  3282                        LAB_1BFB
  3283 00:E314: A9 29              LDA   #$29              ; load A with ")"
  3284                        
  3285                        ; scan for CHR$(A) , else do syntax error then warm start
  3286                        
  3287                        LAB_SCCA
  3288 00:E316: A0 00              LDY   #$00              ; clear index
  3289 00:E318: D1 C3              CMP   (Bpntrl),Y        ; check next byte is = A
  3290 00:E31A: D0 0B              BNE   LAB_SNER          ; if not do syntax error then warm start
  3291                        
  3292 00:E31C: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then return
  3293                        
  3294                        ; scan for "(" , else do syntax error then warm start
  3295                        
  3296                        LAB_1BFE
  3297 00:E31F: A9 28              LDA   #$28              ; load A with "("
  3298 00:E321: D0 F3              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3299                                                      ; (branch always)
  3300                        
  3301                        ; scan for "," , else do syntax error then warm start
  3302                        
  3303                        LAB_1C01
  3304 00:E323: A9 2C              LDA   #$2C              ; load A with ","
  3305 00:E325: D0 EF              BNE   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  3306                                                      ; (branch always)
  3307                        
  3308                        ; syntax error then warm start
  3309                        
  3310                        LAB_SNER
  3311 00:E327: A2 02              LDX   #$02              ; error code $02 ("Syntax" error)
  3312 00:E329: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  3313                        
  3314                        ; get value from line .. continued
  3315                        ; do tokens
  3316                        
  3317                        LAB_1BD0
  3318 00:E32C: C9 B7              CMP   #TK_MINUS         ; compare with token for -
  3319 00:E32E: F0 29              BEQ   LAB_1C11          ; branch if - token (do set-up for functions)
  3320                        
  3321                                                      ; wasn't -n so ..
  3322 00:E330: C9 B6              CMP   #TK_PLUS          ; compare with token for +
  3323 00:E332: F0 BE              BEQ   LAB_GVAL          ; branch if + token (+n = n so ignore leading +)
  3324                        
  3325 00:E334: C9 B1              CMP   #TK_NOT           ; compare with token for NOT
  3326 00:E336: D0 13              BNE   LAB_1BE7          ; branch if not token for NOT
  3327                        
  3328                                                      ; was NOT token
  3329             0000000B   TK_EQUAL_PLUS   equ TK_EQUAL-TK_PLUS
  3330 00:E338: A0 21              LDY   #TK_EQUAL_PLUS*3  ; offset to NOT function
  3331 00:E33A: D0 1F              BNE   LAB_1C13          ; do set-up for function then execute (branch always)
  3332                        
  3333                        ; do = compare
  3334                        
  3335                        LAB_EQUAL
  3336 00:E33C: 20 D9 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3337 00:E33F: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3338 00:E341: 49 FF              EOR   #$FF              ; invert it
  3339 00:E343: A8                 TAY                     ; copy it
  3340 00:E344: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3341 00:E346: 49 FF              EOR   #$FF              ; invert it
  3342 00:E348: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3343                        
  3344                        ; get value from line .. continued
  3345                        
  3346                                                      ; wasn't +, -, or NOT so ..
  3347                        LAB_1BE7
  3348 00:E34B: C9 AE              CMP   #TK_FN            ; compare with token for FN
  3349 00:E34D: D0 03              BNE   LAB_1BEE          ; branch if not token for FN
  3350                        
  3351 00:E34F: 4C E7 E7           JMP   LAB_201E          ; go evaluate FNx
  3352                        
  3353                        ; get value from line .. continued
  3354                        
  3355                                                      ; wasn't +, -, NOT or FN so ..
  3356                        LAB_1BEE
  3357 00:E352: E9 C3              SBC   #TK_SGN           ; subtract with token for SGN
  3358 00:E354: B0 27              BCS   LAB_1C27          ; if a function token go do it
  3359                        
  3360 00:E356: 4C 27 E3           JMP   LAB_SNER          ; else do syntax error
  3361                        
  3362                        ; set-up for functions
  3363                        
  3364                        LAB_1C11
  3365             0000000A   TK_GT_PLUS  equ TK_GT-TK_PLUS
  3366 00:E359: A0 1E              LDY   #TK_GT_PLUS*3     ; set offset from base to > operator
  3367                        LAB_1C13
  3368 00:E35B: 68                 PLA                     ; dump return address low byte
  3369                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3370                        ; *** replace
  3371                        ;      PLA                     ; dump return address high byte
  3372                        ;      JMP   LAB_1B1D          ; execute function then continue evaluation
  3373                        ; *** with
  3374 00:E35C: AA                 TAX                     ; save to trap concatenate
  3375 00:E35D: 68                 PLA                     ; dump return address high byte
  3376 00:E35E: E0 15              CPX   #<(LAB_224Da+2)   ; from concatenate low return address?
  3377 00:E360: D0 04              BNE   LAB_1C13b         ; No - continue!
  3378 00:E362: C9 EA              CMP   #>(LAB_224Da+2)   ; from concatenate high return address?
  3379 00:E364: F0 03              BEQ   LAB_1C13a         ; Yes - error!
  3380                        LAB_1C13b
  3381 00:E366: 4C 5F E2           JMP   LAB_1B1D          ; execute function then continue evaluation
  3382                        LAB_1C13a
  3383 00:E369: 4C 01 E2           JMP   LAB_1ABC          ; throw "type mismatch error" then warm start      
  3384                        ; *** end   patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  3385                        
  3386                        ; variable name set-up
  3387                        ; get (var), return value in FAC_1 and $ flag
  3388                        
  3389                        LAB_1C18
  3390 00:E36C: 20 DD E4           JSR   LAB_GVAR          ; get (var) address
  3391 00:E36F: 85 AE              STA   FAC1_2            ; save address low byte in FAC1 mantissa2
  3392 00:E371: 84 AF              STY   FAC1_3            ; save address high byte in FAC1 mantissa3
  3393 00:E373: A6 5F              LDX   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3394 00:E375: 30 03              BMI   LAB_1C25          ; if string then return (does RTS)
  3395                        
  3396                        LAB_1C24
  3397 00:E377: 4C AF EF           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1
  3398                        
  3399                        LAB_1C25
  3400                        ; *** begin patch  string pointer high byte trashed when moved to stack
  3401                        ; *** add
  3402 00:E37A: 46 B9              LSR   FAC1_r            ; clear bit 7 (<$80) = do not round up
  3403                        ; *** end patch 
  3404 00:E37C: 60                 RTS
  3405                        
  3406                        ; get value from line .. continued
  3407                        ; only functions left so ..
  3408                        
  3409                        ; set up function references
  3410                        
  3411                        ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
  3412                        ; to process function calls. now the function vector is computed and pushed on the stack
  3413                        ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
  3414                        ; is calculated and the routine called, if not this routine just does RTS. whichever
  3415                        ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
  3416                        ; the function code
  3417                        
  3418                        ; this also removes some less than elegant code that was used to bypass type checking
  3419                        ; for functions that returned strings
  3420                        
  3421                        LAB_1C27
  3422 00:E37D: 0A                 ASL                     ; *2 (2 bytes per function address)
  3423 00:E37E: A8                 TAY                     ; copy to index
  3424                        
  3425 00:E37F: B9 D9 F9           LDA   LAB_FTBM,Y        ; get function jump vector high byte
  3426 00:E382: 48                 PHA                     ; push functions jump vector high byte
  3427 00:E383: B9 D8 F9           LDA   LAB_FTBL,Y        ; get function jump vector low byte
  3428 00:E386: 48                 PHA                     ; push functions jump vector low byte
  3429                        
  3430 00:E387: B9 93 F9           LDA   LAB_FTPM,Y        ; get function pre process vector high byte
  3431 00:E38A: F0 05              BEQ   LAB_1C56          ; skip pre process if null vector
  3432                        
  3433 00:E38C: 48                 PHA                     ; push functions pre process vector high byte
  3434 00:E38D: B9 92 F9           LDA   LAB_FTPL,Y        ; get function pre process vector low byte
  3435 00:E390: 48                 PHA                     ; push functions pre process vector low byte
  3436                        
  3437                        LAB_1C56
  3438 00:E391: 60                 RTS                     ; do function, or pre process, call
  3439                        
  3440                        ; process string expression in parenthesis
  3441                        
  3442                        LAB_PPFS
  3443 00:E392: 20 11 E3           JSR   LAB_1BF7          ; process expression in parenthesis
  3444 00:E395: 4C F7 E1           JMP   LAB_CTST          ; check if source is string then do function,
  3445                                                      ; else do type mismatch
  3446                        
  3447                        ; process numeric expression in parenthesis
  3448                        
  3449                        LAB_PPFN
  3450 00:E398: 20 11 E3           JSR   LAB_1BF7          ; process expression in parenthesis
  3451 00:E39B: 4C F5 E1           JMP   LAB_CTNM          ; check if source is numeric then do function,
  3452                                                      ; else do type mismatch
  3453                        
  3454                        ; set numeric data type and increment BASIC execute pointer
  3455                        
  3456                        LAB_PPBI
  3457 00:E39E: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3458 00:E3A0: 4C BC 00           JMP   LAB_IGBY          ; increment and scan memory then do function
  3459                        
  3460                        ; process string for LEFT$, RIGHT$ or MID$
  3461                        
  3462                        LAB_LRMS
  3463 00:E3A3: 20 0E E2           JSR   LAB_EVEZ          ; evaluate (should be string) expression
  3464 00:E3A6: 20 23 E3           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3465 00:E3A9: 20 F7 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  3466                        
  3467 00:E3AC: 68                 PLA                     ; get function jump vector low byte
  3468 00:E3AD: AA                 TAX                     ; save functions jump vector low byte
  3469 00:E3AE: 68                 PLA                     ; get function jump vector high byte
  3470 00:E3AF: A8                 TAY                     ; save functions jump vector high byte
  3471 00:E3B0: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  3472 00:E3B2: 48                 PHA                     ; push string pointer high byte
  3473 00:E3B3: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  3474 00:E3B5: 48                 PHA                     ; push string pointer low byte
  3475 00:E3B6: 98                 TYA                     ; get function jump vector high byte back
  3476 00:E3B7: 48                 PHA                     ; save functions jump vector high byte
  3477 00:E3B8: 8A                 TXA                     ; get function jump vector low byte back
  3478 00:E3B9: 48                 PHA                     ; save functions jump vector low byte
  3479 00:E3BA: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter
  3480 00:E3BD: 8A                 TXA                     ; copy byte parameter to A
  3481 00:E3BE: 60                 RTS                     ; go do function
  3482                        
  3483                        ; process numeric expression(s) for BIN$ or HEX$
  3484                        
  3485                        LAB_BHSS
  3486 00:E3BF: 20 0E E2           JSR   LAB_EVEZ          ; process expression
  3487 00:E3C2: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  3488 00:E3C5: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3489 00:E3C7: C9 98              CMP   #$98              ; compare with exponent = 2^24
  3490 00:E3C9: B0 20              BCS   LAB_BHER          ; branch if n>=2^24 (is too big)
  3491                        
  3492 00:E3CB: 20 82 F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  3493 00:E3CE: A2 02              LDX   #$02              ; 3 bytes to do
  3494                        LAB_CFAC
  3495 00:E3D0: B5 AD              LDA   FAC1_1,X          ; get byte from FAC1
  3496 00:E3D2: 95 11              STA   nums_1,X          ; save byte to temp
  3497 00:E3D4: CA                 DEX                     ; decrement index
  3498 00:E3D5: 10 F9              BPL   LAB_CFAC          ; copy FAC1 mantissa to temp
  3499                        
  3500 00:E3D7: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  3501 00:E3DA: A2 00              LDX   #$00              ; set default to no leading "0"s
  3502 00:E3DC: C9 29              CMP   #')'              ; compare with close bracket
  3503 00:E3DE: F0 0A              BEQ   LAB_1C54          ; if ")" go do rest of function
  3504                        
  3505 00:E3E0: 20 10 EC           JSR   LAB_SCGB          ; scan for "," and get byte
  3506 00:E3E3: 20 C2 00           JSR   LAB_GBYT          ; get last byte back
  3507 00:E3E6: C9 29              CMP   #')'              ; is next character )
  3508 00:E3E8: D0 01              BNE   LAB_BHER          ; if not ")" go do error
  3509                        
  3510                        LAB_1C54
  3511 00:E3EA: 60                 RTS                     ; else do function
  3512                        
  3513                        LAB_BHER
  3514 00:E3EB: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start
  3515                        
  3516                        ; perform EOR
  3517                        
  3518                        ; added operator format is the same as AND or OR, precedence is the same as OR
  3519                        
  3520                        ; this bit worked first time but it took a while to sort out the operator table
  3521                        ; pointers and offsets afterwards!
  3522                        
  3523                        LAB_EOR
  3524 00:E3EE: 20 15 E4           JSR   GetFirst          ; get first integer expression (no sign check)
  3525 00:E3F1: 45 5B              EOR   XOAw_l            ; EOR with expression 1 low byte
  3526 00:E3F3: A8                 TAY                     ; save in Y
  3527 00:E3F4: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3528 00:E3F6: 45 5C              EOR   XOAw_h            ; EOR with expression 1 high byte
  3529 00:E3F8: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3530                        
  3531                        ; perform OR
  3532                        
  3533                        LAB_OR
  3534 00:E3FB: 20 15 E4           JSR   GetFirst          ; get first integer expression (no sign check)
  3535 00:E3FE: 05 5B              ORA   XOAw_l            ; OR with expression 1 low byte
  3536 00:E400: A8                 TAY                     ; save in Y
  3537 00:E401: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3538 00:E403: 05 5C              ORA   XOAw_h            ; OR with expression 1 high byte
  3539 00:E405: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3540                        
  3541                        ; perform AND
  3542                        
  3543                        LAB_AND
  3544 00:E408: 20 15 E4           JSR   GetFirst          ; get first integer expression (no sign check)
  3545 00:E40B: 25 5B              AND   XOAw_l            ; AND with expression 1 low byte
  3546 00:E40D: A8                 TAY                     ; save in Y
  3547 00:E40E: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3548 00:E410: 25 5C              AND   XOAw_h            ; AND with expression 1 high byte
  3549 00:E412: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3550                        
  3551                        ; get first value for OR, AND or EOR
  3552                        
  3553                        GetFirst
  3554 00:E415: 20 D9 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3555 00:E418: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  3556 00:E41A: 85 5C              STA   XOAw_h            ; save it
  3557 00:E41C: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3558 00:E41E: 85 5B              STA   XOAw_l            ; save it
  3559 00:E420: 20 F5 EC           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3560 00:E423: 20 D9 E5           JSR   LAB_EVIR          ; evaluate integer expression (no sign check)
  3561 00:E426: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  3562                        LAB_1C95
  3563 00:E428: 60                 RTS
  3564                        
  3565                        ; perform comparisons
  3566                        
  3567                        ; do < compare
  3568                        
  3569                        LAB_LTHAN
  3570 00:E429: 20 F8 E1           JSR   LAB_CKTM          ; type match check, set C for string
  3571 00:E42C: B0 13              BCS   LAB_1CAE          ; branch if string
  3572                        
  3573                                                      ; do numeric < compare
  3574 00:E42E: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  3575 00:E430: 09 7F              ORA   #$7F              ; set all non sign bits
  3576 00:E432: 25 B4              AND   FAC2_1            ; and FAC2 mantissa1 (AND in sign bit)
  3577 00:E434: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  3578 00:E436: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  3579 00:E438: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  3580 00:E43A: 20 49 F0           JSR   LAB_27F8          ; compare FAC1 with FAC2 (AY)
  3581 00:E43D: AA                 TAX                     ; copy result
  3582 00:E43E: 4C 72 E4           JMP   LAB_1CE1          ; go evaluate result
  3583                        
  3584                                                      ; do string < compare
  3585                        LAB_1CAE
  3586 00:E441: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3587 00:E443: C6 9B              DEC   comp_f            ; clear < bit in compare function flag
  3588 00:E445: 20 77 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  3589                                                      ; space returns with A = length, X=pointer low byte,
  3590                                                      ; Y=pointer high byte
  3591 00:E448: 85 AC              STA   str_ln            ; save length
  3592 00:E44A: 86 AD              STX   str_pl            ; save string pointer low byte
  3593 00:E44C: 84 AE              STY   str_ph            ; save string pointer high byte
  3594 00:E44E: A5 B5              LDA   FAC2_2            ; get descriptor pointer low byte
  3595 00:E450: A4 B6              LDY   FAC2_3            ; get descriptor pointer high byte
  3596 00:E452: 20 7B EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  3597                                                      ; returns with A = length, X=pointer low byte,
  3598                                                      ; Y=pointer high byte
  3599 00:E455: 86 B5              STX   FAC2_2            ; save string pointer low byte
  3600 00:E457: 84 B6              STY   FAC2_3            ; save string pointer high byte
  3601 00:E459: AA                 TAX                     ; copy length
  3602 00:E45A: 38                 SEC                     ; set carry for subtract
  3603 00:E45B: E5 AC              SBC   str_ln            ; subtract string 1 length
  3604 00:E45D: F0 08              BEQ   LAB_1CD6          ; branch if str 1 length = string 2 length
  3605                        
  3606 00:E45F: A9 01              LDA   #$01              ; set str 1 length > string 2 length
  3607 00:E461: 90 04              BCC   LAB_1CD6          ; branch if so
  3608                        
  3609 00:E463: A6 AC              LDX   str_ln            ; get string 1 length
  3610 00:E465: A9 FF              LDA   #$FF              ; set str 1 length < string 2 length
  3611                        LAB_1CD6
  3612 00:E467: 85 B0              STA   FAC1_s            ; save length compare
  3613 00:E469: A0 FF              LDY   #$FF              ; set index
  3614 00:E46B: E8                 INX                     ; adjust for loop
  3615                        LAB_1CDB
  3616 00:E46C: C8                 INY                     ; increment index
  3617 00:E46D: CA                 DEX                     ; decrement count
  3618 00:E46E: D0 07              BNE   LAB_1CE6          ; branch if still bytes to do
  3619                        
  3620 00:E470: A6 B0              LDX   FAC1_s            ; get length compare back
  3621                        LAB_1CE1
  3622 00:E472: 30 0F              BMI   LAB_1CF2          ; branch if str 1 < str 2
  3623                        
  3624 00:E474: 18                 CLC                     ; flag str 1 <= str 2
  3625 00:E475: 90 0C              BCC   LAB_1CF2          ; go evaluate result
  3626                        
  3627                        LAB_1CE6
  3628 00:E477: B1 B5              LDA   (FAC2_2),Y        ; get string 2 byte
  3629 00:E479: D1 AD              CMP   (FAC1_1),Y        ; compare with string 1 byte
  3630 00:E47B: F0 EF              BEQ   LAB_1CDB          ; loop if bytes =
  3631                        
  3632 00:E47D: A2 FF              LDX   #$FF              ; set str 1 < string 2
  3633 00:E47F: B0 02              BCS   LAB_1CF2          ; branch if so
  3634                        
  3635 00:E481: A2 01              LDX   #$01              ;  set str 1 > string 2
  3636                        LAB_1CF2
  3637 00:E483: E8                 INX                     ; x = 0, 1 or 2
  3638 00:E484: 8A                 TXA                     ; copy to A
  3639 00:E485: 2A                 ROL                     ; *2 (1, 2 or 4)
  3640 00:E486: 25 63              AND   Cflag             ; AND with comparison evaluation flag
  3641 00:E488: F0 02              BEQ   LAB_1CFB          ; branch if 0 (compare is false)
  3642                        
  3643 00:E48A: A9 FF              LDA   #$FF              ; else set result true
  3644                        LAB_1CFB
  3645 00:E48C: 4C 2C F0           JMP   LAB_27DB          ; save A as integer byte and return
  3646                        
  3647                        LAB_1CFE
  3648 00:E48F: 20 23 E3           JSR   LAB_1C01          ; scan for ",", else do syntax error then warm start
  3649                        
  3650                        ; perform DIM
  3651                        
  3652                        LAB_DIM
  3653 00:E492: AA                 TAX                     ; copy "DIM" flag to X
  3654 00:E493: 20 E2 E4           JSR   LAB_1D10          ; search for variable
  3655 00:E496: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  3656 00:E499: D0 F4              BNE   LAB_1CFE          ; scan for "," and loop if not null
  3657                        
  3658 00:E49B: 60                 RTS
  3659                        
  3660                        ; perform << (left shift)
  3661                        
  3662                        LAB_LSHIFT
  3663 00:E49C: 20 D2 E4           JSR   GetPair           ; get integer expression and byte (no sign check)
  3664 00:E49F: A5 AE              LDA   FAC1_2            ; get expression high byte
  3665 00:E4A1: A6 78              LDX   TempB             ; get shift count
  3666 00:E4A3: F0 22              BEQ   NoShift           ; branch if zero
  3667                        
  3668 00:E4A5: E0 10              CPX   #$10              ; compare bit count with 16d
  3669 00:E4A7: B0 23              BCS   TooBig            ; branch if >=
  3670                        
  3671                        Ls_loop
  3672 00:E4A9: 06 AF              ASL   FAC1_3            ; shift low byte
  3673 00:E4AB: 2A                 ROL                     ; shift high byte
  3674 00:E4AC: CA                 DEX                     ; decrement bit count
  3675 00:E4AD: D0 FA              BNE   Ls_loop           ; loop if shift not complete
  3676                        
  3677 00:E4AF: A4 AF              LDY   FAC1_3            ; get expression low byte
  3678 00:E4B1: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3679                        
  3680                        ; perform >> (right shift)
  3681                        
  3682                        LAB_RSHIFT
  3683 00:E4B4: 20 D2 E4           JSR   GetPair           ; get integer expression and byte (no sign check)
  3684 00:E4B7: A5 AE              LDA   FAC1_2            ; get expression high byte
  3685 00:E4B9: A6 78              LDX   TempB             ; get shift count
  3686 00:E4BB: F0 0A              BEQ   NoShift           ; branch if zero
  3687                        
  3688 00:E4BD: E0 10              CPX   #$10              ; compare bit count with 16d
  3689 00:E4BF: B0 0B              BCS   TooBig            ; branch if >=
  3690                        
  3691                        Rs_loop
  3692 00:E4C1: 4A                 LSR                     ; shift high byte
  3693 00:E4C2: 66 AF              ROR   FAC1_3            ; shift low byte
  3694 00:E4C4: CA                 DEX                     ; decrement bit count
  3695 00:E4C5: D0 FA              BNE   Rs_loop           ; loop if shift not complete
  3696                        
  3697                        NoShift
  3698 00:E4C7: A4 AF              LDY   FAC1_3            ; get expression low byte
  3699 00:E4C9: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3700                        
  3701                        TooBig
  3702 00:E4CC: A9 00              LDA   #$00              ; clear high byte
  3703 00:E4CE: A8                 TAY                     ; copy to low byte
  3704 00:E4CF: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  3705                        
  3706                        GetPair
  3707 00:E4D2: 20 C8 EB           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  3708 00:E4D5: 86 78              STX   TempB             ; save it
  3709 00:E4D7: 20 F5 EC           JSR   LAB_279B          ; copy FAC2 to FAC1 (get 2nd value in expression)
  3710 00:E4DA: 4C D9 E5           JMP   LAB_EVIR          ; evaluate integer expression (no sign check)
  3711                        
  3712                        ; search for variable
  3713                        
  3714                        ; return pointer to variable in Cvaral/Cvarah
  3715                        
  3716                        LAB_GVAR
  3717 00:E4DD: A2 00              LDX   #$00              ; set DIM flag = $00
  3718 00:E4DF: 20 C2 00           JSR   LAB_GBYT          ; scan memory (1st character)
  3719                        LAB_1D10
  3720 00:E4E2: 86 5E              STX   Defdim            ; save DIM flag
  3721                        LAB_1D12
  3722 00:E4E4: 85 93              STA   Varnm1            ; save 1st character
  3723 00:E4E6: 29 7F              AND   #$7F              ; clear FN flag bit
  3724 00:E4E8: 20 51 E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3725 00:E4EB: B0 03              BCS   LAB_1D1F          ; branch if ok
  3726                        
  3727 00:E4ED: 4C 27 E3           JMP   LAB_SNER          ; else syntax error then warm start
  3728                        
  3729                                                      ; was variable name so ..
  3730                        LAB_1D1F
  3731 00:E4F0: A2 00              LDX   #$00              ; clear 2nd character temp
  3732 00:E4F2: 86 5F              STX   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  3733 00:E4F4: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (2nd character)
  3734 00:E4F7: 90 05              BCC   LAB_1D2D          ; branch if character = "0"-"9" (ok)
  3735                        
  3736                                                      ; 2nd character wasn't "0" to "9" so ..
  3737 00:E4F9: 20 51 E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3738 00:E4FC: 90 0B              BCC   LAB_1D38          ; branch if <"A" or >"Z" (go check if string)
  3739                        
  3740                        LAB_1D2D
  3741 00:E4FE: AA                 TAX                     ; copy 2nd character
  3742                        
  3743                                                      ; ignore further (valid) characters in the variable name
  3744                        LAB_1D2E
  3745 00:E4FF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (3rd character)
  3746 00:E502: 90 FB              BCC   LAB_1D2E          ; loop if character = "0"-"9" (ignore)
  3747                        
  3748 00:E504: 20 51 E5           JSR   LAB_CASC          ; check byte, return C=0 if<"A" or >"Z"
  3749 00:E507: B0 F6              BCS   LAB_1D2E          ; loop if character = "A"-"Z" (ignore)
  3750                        
  3751                                                      ; check if string variable
  3752                        LAB_1D38
  3753 00:E509: C9 24              CMP   #'$'              ; compare with "$"
  3754 00:E50B: D0 0B              BNE   LAB_1D47          ; branch if not string
  3755                        
  3756                        ; to introduce a new variable type (% suffix for integers say) then this branch
  3757                        ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
  3758                        
  3759                                                      ; type is string
  3760 00:E50D: A9 FF              LDA   #$FF              ; set data type = string
  3761 00:E50F: 85 5F              STA   Dtypef            ; set data type flag, $FF=string, $00=numeric
  3762 00:E511: 8A                 TXA                     ; get 2nd character back
  3763 00:E512: 09 80              ORA   #$80              ; set top bit (indicate string var)
  3764 00:E514: AA                 TAX                     ; copy back to 2nd character temp
  3765 00:E515: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3766                        
  3767                        ; after we have determined the variable type we need to come back here to determine
  3768                        ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
  3769                        
  3770                        
  3771                        LAB_1D47                      ; gets here with character after var name in A
  3772 00:E518: 86 94              STX   Varnm2            ; save 2nd character
  3773 00:E51A: 05 61              ORA   Sufnxf            ; or with subscript/FNX flag (or FN name)
  3774 00:E51C: C9 28              CMP   #'('              ; compare with "("
  3775 00:E51E: D0 03              BNE   LAB_1D53          ; branch if not "("
  3776                        
  3777 00:E520: 4C EB E5           JMP   LAB_1E17          ; go find, or make, array
  3778                        
  3779                        ; either find or create var
  3780                        ; var name (1st two characters only!) is in Varnm1,Varnm2
  3781                        
  3782                                                      ; variable name wasn't var(... so look for plain var
  3783                        LAB_1D53
  3784 00:E523: A9 00              LDA   #$00              ; clear A
  3785 00:E525: 85 61              STA   Sufnxf            ; clear subscript/FNX flag
  3786 00:E527: A5 7B              LDA   Svarl             ; get start of vars low byte
  3787 00:E529: A6 7C              LDX   Svarh             ; get start of vars high byte
  3788 00:E52B: A0 00              LDY   #$00              ; clear index
  3789                        LAB_1D5D
  3790 00:E52D: 86 AB              STX   Vrschh            ; save search address high byte
  3791                        LAB_1D5F
  3792 00:E52F: 85 AA              STA   Vrschl            ; save search address low byte
  3793 00:E531: E4 7E              CPX   Sarryh            ; compare high address with var space end
  3794 00:E533: D0 04              BNE   LAB_1D69          ; skip next compare if <>
  3795                        
  3796                                                      ; high addresses were = so compare low addresses
  3797 00:E535: C5 7D              CMP   Sarryl            ; compare low address with var space end
  3798 00:E537: F0 2C              BEQ   LAB_1D8B          ; if not found go make new var
  3799                        
  3800                        LAB_1D69
  3801 00:E539: A5 93              LDA   Varnm1            ; get 1st character of var to find
  3802 00:E53B: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 1st character
  3803 00:E53D: D0 08              BNE   LAB_1D77          ; branch if no match
  3804                        
  3805                                                      ; 1st characters match so compare 2nd characters
  3806 00:E53F: A5 94              LDA   Varnm2            ; get 2nd character of var to find
  3807 00:E541: C8                 INY                     ; index to point to variable name 2nd character
  3808 00:E542: D1 AA              CMP   (Vrschl),Y        ; compare with variable name 2nd character
  3809 00:E544: F0 69              BEQ   LAB_1DD7          ; branch if match (found var)
  3810                        
  3811 00:E546: 88                 DEY                     ; else decrement index (now = $00)
  3812                        LAB_1D77
  3813 00:E547: 18                 CLC                     ; clear carry for add
  3814 00:E548: A5 AA              LDA   Vrschl            ; get search address low byte
  3815 00:E54A: 69 06              ADC   #$06              ; +6 (offset to next var name)
  3816 00:E54C: 90 E1              BCC   LAB_1D5F          ; loop if no overflow to high byte
  3817                        
  3818 00:E54E: E8                 INX                     ; else increment high byte
  3819 00:E54F: D0 DC              BNE   LAB_1D5D          ; loop always (RAM doesn't extend to $FFFF !)
  3820                        
  3821                        ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
  3822                        
  3823                        LAB_CASC
  3824 00:E551: C9 61              CMP   #'a'              ; compare with "a"
  3825 00:E553: B0 0A              BCS   LAB_1D83          ; go check <"z"+1
  3826                        
  3827                        ; check byte, return C=0 if<"A" or >"Z"
  3828                        
  3829                        LAB_1D82
  3830 00:E555: C9 41              CMP   #'A'              ; compare with "A"
  3831 00:E557: 90 05              BCC   LAB_1D8A          ; exit if less
  3832                        
  3833                                                      ; carry is set
  3834 00:E559: E9 5B              SBC   #$5B              ; subtract "Z"+1
  3835 00:E55B: 38                 SEC                     ; set carry
  3836 00:E55C: E9 A5              SBC   #$A5              ; subtract $A5 (restore byte)
  3837                                                      ; carry clear if byte>$5A
  3838                        LAB_1D8A
  3839 00:E55E: 60                 RTS
  3840                        
  3841                        LAB_1D83
  3842 00:E55F: E9 7B              SBC   #$7B              ; subtract "z"+1
  3843 00:E561: 38                 SEC                     ; set carry
  3844 00:E562: E9 85              SBC   #$85              ; subtract $85 (restore byte)
  3845                                                      ; carry clear if byte>$7A
  3846 00:E564: 60                 RTS
  3847                        
  3848                                                      ; reached end of variable mem without match
  3849                                                      ; .. so create new variable
  3850                        LAB_1D8B
  3851 00:E565: 68                 PLA                     ; pop return address low byte
  3852 00:E566: 48                 PHA                     ; push return address low byte
  3853             0000E36E   LAB_1C18p2  equ LAB_1C18+2
  3854 00:E567: C9 6E              CMP   #<LAB_1C18p2      ; compare with expected calling routine return low byte
  3855 00:E569: D0 05              BNE   LAB_1D98          ; if not get (var) go create new var
  3856                        
  3857                        ; This will only drop through if the call was from LAB_1C18 and is only called
  3858                        ; from there if it is searching for a variable from the RHS of a LET a=b statement
  3859                        ; it prevents the creation of variables not assigned a value.
  3860                        
  3861                        ; value returned by this is either numeric zero (exponent byte is $00) or null string
  3862                        ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
  3863                        
  3864                        ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
  3865                        
  3866                        ; this is where you would put the undefined variable error call e.g.
  3867                        
  3868                        ;                             ; variable doesn't exist so flag error
  3869                        ;     LDX   #$24              ; error code $24 ("undefined variable" error)
  3870                        ;     JMP   LAB_XERR          ; do error #X then warm start
  3871                        
  3872                        ; the above code has been tested and works a treat! (it replaces the three code lines
  3873                        ; below)
  3874                        
  3875                                                      ; else return dummy null value
  3876 00:E56B: A9 16              LDA   #<LAB_1D96        ; low byte point to $00,$00
  3877                                                      ; (uses part of misc constants table)
  3878 00:E56D: A0 F9              LDY   #>LAB_1D96        ; high byte point to $00,$00
  3879 00:E56F: 60                 RTS
  3880                        
  3881                                                      ; create new numeric variable
  3882                        LAB_1D98
  3883 00:E570: A5 7D              LDA   Sarryl            ; get var mem end low byte
  3884 00:E572: A4 7E              LDY   Sarryh            ; get var mem end high byte
  3885 00:E574: 85 AA              STA   Ostrtl            ; save old block start low byte
  3886 00:E576: 84 AB              STY   Ostrth            ; save old block start high byte
  3887 00:E578: A5 7F              LDA   Earryl            ; get array mem end low byte
  3888 00:E57A: A4 80              LDY   Earryh            ; get array mem end high byte
  3889 00:E57C: 85 A6              STA   Obendl            ; save old block end low byte
  3890 00:E57E: 84 A7              STY   Obendh            ; save old block end high byte
  3891 00:E580: 18                 CLC                     ; clear carry for add
  3892 00:E581: 69 06              ADC   #$06              ; +6 (space for one var)
  3893 00:E583: 90 01              BCC   LAB_1DAE          ; branch if no overflow to high byte
  3894                        
  3895 00:E585: C8                 INY                     ; else increment high byte
  3896                        LAB_1DAE
  3897 00:E586: 85 A4              STA   Nbendl            ; set new block end low byte
  3898 00:E588: 84 A5              STY   Nbendh            ; set new block end high byte
  3899 00:E58A: 20 E6 D7           JSR   LAB_11CF          ; open up space in memory
  3900 00:E58D: A5 A4              LDA   Nbendl            ; get new start low byte
  3901 00:E58F: A4 A5              LDY   Nbendh            ; get new start high byte (-$100)
  3902 00:E591: C8                 INY                     ; correct high byte
  3903 00:E592: 85 7D              STA   Sarryl            ; save new var mem end low byte
  3904 00:E594: 84 7E              STY   Sarryh            ; save new var mem end high byte
  3905 00:E596: A0 00              LDY   #$00              ; clear index
  3906 00:E598: A5 93              LDA   Varnm1            ; get var name 1st character
  3907 00:E59A: 91 AA              STA   (Vrschl),Y        ; save var name 1st character
  3908 00:E59C: C8                 INY                     ; increment index
  3909 00:E59D: A5 94              LDA   Varnm2            ; get var name 2nd character
  3910 00:E59F: 91 AA              STA   (Vrschl),Y        ; save var name 2nd character
  3911 00:E5A1: A9 00              LDA   #$00              ; clear A
  3912 00:E5A3: C8                 INY                     ; increment index
  3913 00:E5A4: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3914 00:E5A6: C8                 INY                     ; increment index
  3915 00:E5A7: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3916 00:E5A9: C8                 INY                     ; increment index
  3917 00:E5AA: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3918 00:E5AC: C8                 INY                     ; increment index
  3919 00:E5AD: 91 AA              STA   (Vrschl),Y        ; initialise var byte
  3920                        
  3921                                                      ; found a match for var ((Vrschl) = ptr)
  3922                        LAB_1DD7
  3923 00:E5AF: A5 AA              LDA   Vrschl            ; get var address low byte
  3924 00:E5B1: 18                 CLC                     ; clear carry for add
  3925 00:E5B2: 69 02              ADC   #$02              ; +2 (offset past var name bytes)
  3926 00:E5B4: A4 AB              LDY   Vrschh            ; get var address high byte
  3927 00:E5B6: 90 01              BCC   LAB_1DE1          ; branch if no overflow from add
  3928                        
  3929 00:E5B8: C8                 INY                     ; else increment high byte
  3930                        LAB_1DE1
  3931 00:E5B9: 85 95              STA   Cvaral            ; save current var address low byte
  3932 00:E5BB: 84 96              STY   Cvarah            ; save current var address high byte
  3933 00:E5BD: 60                 RTS
  3934                        
  3935                        ; set-up array pointer (Adatal/h) to first element in array
  3936                        ; set Adatal,Adatah to Astrtl,Astrth+2*Dimcnt+#$05
  3937                        
  3938                        LAB_1DE6
  3939 00:E5BE: A5 5D              LDA   Dimcnt            ; get # of dimensions (1, 2 or 3)
  3940 00:E5C0: 0A                 ASL                     ; *2 (also clears the carry !)
  3941 00:E5C1: 69 05              ADC   #$05              ; +5 (result is 7, 9 or 11 here)
  3942 00:E5C3: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  3943 00:E5C5: A4 AB              LDY   Astrth            ; get array pointer high byte
  3944 00:E5C7: 90 01              BCC   LAB_1DF2          ; branch if no overflow
  3945                        
  3946 00:E5C9: C8                 INY                     ; else increment high byte
  3947                        LAB_1DF2
  3948 00:E5CA: 85 A4              STA   Adatal            ; save array data pointer low byte
  3949 00:E5CC: 84 A5              STY   Adatah            ; save array data pointer high byte
  3950 00:E5CE: 60                 RTS
  3951                        
  3952                        ; evaluate integer expression
  3953                        
  3954                        LAB_EVIN
  3955 00:E5CF: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  3956 00:E5D2: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  3957                                                      ; else do type mismatch
  3958                        
  3959                        ; evaluate integer expression (no check)
  3960                        
  3961                        LAB_EVPI
  3962 00:E5D5: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  3963 00:E5D7: 30 0D              BMI   LAB_1E12          ; do function call error if -ve
  3964                        
  3965                        ; evaluate integer expression (no sign check)
  3966                        
  3967                        LAB_EVIR
  3968 00:E5D9: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  3969 00:E5DB: C9 90              CMP   #$90              ; compare with exponent = 2^16 (n>2^15)
  3970 00:E5DD: 90 09              BCC   LAB_1E14          ; branch if n<2^16 (is ok)
  3971                        
  3972 00:E5DF: A9 1D              LDA   #<LAB_1DF7        ; set pointer low byte to -32768
  3973 00:E5E1: A0 F9              LDY   #>LAB_1DF7        ; set pointer high byte to -32768
  3974 00:E5E3: 20 49 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  3975                        LAB_1E12
  3976 00:E5E6: D0 74              BNE   LAB_FCER          ; if <> do function call error then warm start
  3977                        
  3978                        LAB_1E14
  3979 00:E5E8: 4C 82 F0           JMP   LAB_2831          ; convert FAC1 floating-to-fixed and return
  3980                        
  3981                        ; find or make array
  3982                        
  3983                        LAB_1E17
  3984 00:E5EB: A5 5E              LDA   Defdim            ; get DIM flag
  3985 00:E5ED: 48                 PHA                     ; push it
  3986 00:E5EE: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  3987 00:E5F0: 48                 PHA                     ; push it
  3988 00:E5F1: A0 00              LDY   #$00              ; clear dimensions count
  3989                        
  3990                        ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
  3991                        
  3992                        LAB_1E1F
  3993 00:E5F3: 98                 TYA                     ; copy dimensions count
  3994 00:E5F4: 48                 PHA                     ; save it
  3995 00:E5F5: A5 94              LDA   Varnm2            ; get array name 2nd byte
  3996 00:E5F7: 48                 PHA                     ; save it
  3997 00:E5F8: A5 93              LDA   Varnm1            ; get array name 1st byte
  3998 00:E5FA: 48                 PHA                     ; save it
  3999 00:E5FB: 20 CF E5           JSR   LAB_EVIN          ; evaluate integer expression
  4000 00:E5FE: 68                 PLA                     ; pull array name 1st byte
  4001 00:E5FF: 85 93              STA   Varnm1            ; restore array name 1st byte
  4002 00:E601: 68                 PLA                     ; pull array name 2nd byte
  4003 00:E602: 85 94              STA   Varnm2            ; restore array name 2nd byte
  4004 00:E604: 68                 PLA                     ; pull dimensions count
  4005 00:E605: A8                 TAY                     ; restore it
  4006 00:E606: BA                 TSX                     ; copy stack pointer
  4007 00:E607: BD 02 01           LDA   LAB_STAK+2,X      ; get DIM flag
  4008 00:E60A: 48                 PHA                     ; push it
  4009 00:E60B: BD 01 01           LDA   LAB_STAK+1,X      ; get data type flag
  4010 00:E60E: 48                 PHA                     ; push it
  4011 00:E60F: A5 AE              LDA   FAC1_2            ; get this dimension size high byte
  4012 00:E611: 9D 02 01           STA   LAB_STAK+2,X      ; stack before flag bytes
  4013 00:E614: A5 AF              LDA   FAC1_3            ; get this dimension size low byte
  4014 00:E616: 9D 01 01           STA   LAB_STAK+1,X      ; stack before flag bytes
  4015 00:E619: C8                 INY                     ; increment dimensions count
  4016 00:E61A: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  4017 00:E61D: C9 2C              CMP   #','              ; compare with ","
  4018 00:E61F: F0 D2              BEQ   LAB_1E1F          ; if found go do next dimension
  4019                        
  4020 00:E621: 84 5D              STY   Dimcnt            ; store dimensions count
  4021 00:E623: 20 14 E3           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  4022 00:E626: 68                 PLA                     ; pull data type flag
  4023 00:E627: 85 5F              STA   Dtypef            ; restore data type flag, $FF=string, $00=numeric
  4024 00:E629: 68                 PLA                     ; pull DIM flag
  4025 00:E62A: 85 5E              STA   Defdim            ; restore DIM flag
  4026 00:E62C: A6 7D              LDX   Sarryl            ; get array mem start low byte
  4027 00:E62E: A5 7E              LDA   Sarryh            ; get array mem start high byte
  4028                        
  4029                        ; now check to see if we are at the end of array memory (we would be if there were
  4030                        ; no arrays).
  4031                        
  4032                        LAB_1E5C
  4033 00:E630: 86 AA              STX   Astrtl            ; save as array start pointer low byte
  4034 00:E632: 85 AB              STA   Astrth            ; save as array start pointer high byte
  4035 00:E634: C5 80              CMP   Earryh            ; compare with array mem end high byte
  4036 00:E636: D0 04              BNE   LAB_1E68          ; branch if not reached array mem end
  4037                        
  4038 00:E638: E4 7F              CPX   Earryl            ; else compare with array mem end low byte
  4039 00:E63A: F0 39              BEQ   LAB_1EA1          ; go build array if not found
  4040                        
  4041                                                      ; search for array
  4042                        LAB_1E68
  4043 00:E63C: A0 00              LDY   #$00              ; clear index
  4044 00:E63E: B1 AA              LDA   (Astrtl),Y        ; get array name first byte
  4045 00:E640: C8                 INY                     ; increment index to second name byte
  4046 00:E641: C5 93              CMP   Varnm1            ; compare with this array name first byte
  4047 00:E643: D0 06              BNE   LAB_1E77          ; branch if no match
  4048                        
  4049 00:E645: A5 94              LDA   Varnm2            ; else get this array name second byte
  4050 00:E647: D1 AA              CMP   (Astrtl),Y        ; compare with array name second byte
  4051 00:E649: F0 16              BEQ   LAB_1E8D          ; array found so branch
  4052                        
  4053                                                      ; no match
  4054                        LAB_1E77
  4055 00:E64B: C8                 INY                     ; increment index
  4056 00:E64C: B1 AA              LDA   (Astrtl),Y        ; get array size low byte
  4057 00:E64E: 18                 CLC                     ; clear carry for add
  4058 00:E64F: 65 AA              ADC   Astrtl            ; add array start pointer low byte
  4059 00:E651: AA                 TAX                     ; copy low byte to X
  4060 00:E652: C8                 INY                     ; increment index
  4061 00:E653: B1 AA              LDA   (Astrtl),Y        ; get array size high byte
  4062 00:E655: 65 AB              ADC   Astrth            ; add array mem pointer high byte
  4063 00:E657: 90 D7              BCC   LAB_1E5C          ; if no overflow go check next array
  4064                        
  4065                        ; do array bounds error
  4066                        
  4067                        LAB_1E85
  4068 00:E659: A2 10              LDX   #$10              ; error code $10 ("Array bounds" error)
  4069 00:E65B: 2C                 .byte $2C               ; makes next bit BIT LAB_08A2
  4070                        
  4071                        ; do function call error
  4072                        
  4073                        LAB_FCER
  4074 00:E65C: A2 08              LDX   #$08              ; error code $08 ("Function call" error)
  4075                        LAB_1E8A
  4076 00:E65E: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  4077                        
  4078                                                      ; found array, are we trying to dimension it?
  4079                        LAB_1E8D
  4080 00:E661: A2 12              LDX   #$12              ; set error $12 ("Double dimension" error)
  4081 00:E663: A5 5E              LDA   Defdim            ; get DIM flag
  4082 00:E665: D0 F7              BNE   LAB_1E8A          ; if we are trying to dimension it do error #X, then warm
  4083                                                      ; start
  4084                        
  4085                        ; found the array and we're not dimensioning it so we must find an element in it
  4086                        
  4087 00:E667: 20 BE E5           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4088                                                      ; (Astrtl,Astrth points to start of array)
  4089 00:E66A: A5 5D              LDA   Dimcnt            ; get dimensions count
  4090 00:E66C: A0 04              LDY   #$04              ; set index to array's # of dimensions
  4091 00:E66E: D1 AA              CMP   (Astrtl),Y        ; compare with no of dimensions
  4092 00:E670: D0 E7              BNE   LAB_1E85          ; if wrong do array bounds error, could do "Wrong
  4093                                                      ; dimensions" error here .. if we want a different
  4094                                                      ; error message
  4095                        
  4096 00:E672: 4C F8 E6           JMP   LAB_1F28          ; found array so go get element
  4097                                                      ; (could jump to LAB_1F28 as all LAB_1F24 does is take
  4098                                                      ; Dimcnt and save it at (Astrtl),Y which is already the
  4099                                                      ; same or we would have taken the BNE)
  4100                        
  4101                                                      ; array not found, so build it
  4102                        LAB_1EA1
  4103 00:E675: 20 BE E5           JSR   LAB_1DE6          ; set-up array pointer (Adatal/h) to first element in array
  4104                                                      ; (Astrtl,Astrth points to start of array)
  4105 00:E678: 20 33 D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4106                                                      ; addr to check is in AY (low/high)
  4107 00:E67B: A0 00              LDY   #$00              ; clear Y (don't need to clear A)
  4108 00:E67D: 84 BB              STY   Aspth             ; clear array data size high byte
  4109 00:E67F: A5 93              LDA   Varnm1            ; get variable name 1st byte
  4110 00:E681: 91 AA              STA   (Astrtl),Y        ; save array name 1st byte
  4111 00:E683: C8                 INY                     ; increment index
  4112 00:E684: A5 94              LDA   Varnm2            ; get variable name 2nd byte
  4113 00:E686: 91 AA              STA   (Astrtl),Y        ; save array name 2nd byte
  4114 00:E688: A5 5D              LDA   Dimcnt            ; get dimensions count
  4115 00:E68A: A0 04              LDY   #$04              ; index to dimension count
  4116 00:E68C: 84 BA              STY   Asptl             ; set array data size low byte (four bytes per element)
  4117 00:E68E: 91 AA              STA   (Astrtl),Y        ; set array's dimensions count
  4118                        
  4119                                                      ; now calculate the size of the data space for the array
  4120 00:E690: 18                 CLC                     ; clear carry for add (clear on subsequent loops)
  4121                        LAB_1EC0
  4122 00:E691: A2 0B              LDX   #$0B              ; set default dimension value low byte
  4123 00:E693: A9 00              LDA   #$00              ; set default dimension value high byte
  4124 00:E695: 24 5E              BIT   Defdim            ; test default DIM flag
  4125 00:E697: 50 07              BVC   LAB_1ED0          ; branch if b6 of Defdim is clear
  4126                        
  4127 00:E699: 68                 PLA                     ; else pull dimension value low byte
  4128 00:E69A: 69 01              ADC   #$01              ; +1 (allow for zeroeth element)
  4129 00:E69C: AA                 TAX                     ; copy low byte to X
  4130 00:E69D: 68                 PLA                     ; pull dimension value high byte
  4131 00:E69E: 69 00              ADC   #$00              ; add carry from low byte
  4132                        
  4133                        LAB_1ED0
  4134 00:E6A0: C8                 INY                     ; index to dimension value high byte
  4135 00:E6A1: 91 AA              STA   (Astrtl),Y        ; save dimension value high byte
  4136 00:E6A3: C8                 INY                     ; index to dimension value high byte
  4137 00:E6A4: 8A                 TXA                     ; get dimension value low byte
  4138 00:E6A5: 91 AA              STA   (Astrtl),Y        ; save dimension value low byte
  4139 00:E6A7: 20 47 E7           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4140 00:E6AA: 86 BA              STX   Asptl             ; save array data size low byte
  4141 00:E6AC: 85 BB              STA   Aspth             ; save array data size high byte
  4142 00:E6AE: A4 71              LDY   ut1_pl            ; restore index (saved by subroutine)
  4143 00:E6B0: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4144 00:E6B2: D0 DD              BNE   LAB_1EC0          ; loop while not = 0
  4145                        
  4146 00:E6B4: 65 A5              ADC   Adatah            ; add size high byte to first element high byte
  4147                                                      ; (carry is always clear here)
  4148 00:E6B6: B0 5D              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4149                        
  4150 00:E6B8: 85 A5              STA   Adatah            ; save end of array high byte
  4151 00:E6BA: A8                 TAY                     ; copy end high byte to Y
  4152 00:E6BB: 8A                 TXA                     ; get array size low byte
  4153 00:E6BC: 65 A4              ADC   Adatal            ; add array start low byte
  4154 00:E6BE: 90 03              BCC   LAB_1EF3          ; branch if no carry
  4155                        
  4156 00:E6C0: C8                 INY                     ; else increment end of array high byte
  4157 00:E6C1: F0 52              BEQ   LAB_1F45          ; if overflow go do "Out of memory" error
  4158                        
  4159                                                      ; set-up mostly complete, now zero the array
  4160                        LAB_1EF3
  4161 00:E6C3: 20 33 D8           JSR   LAB_121F          ; check available memory, "Out of memory" error if no room
  4162                                                      ; addr to check is in AY (low/high)
  4163 00:E6C6: 85 7F              STA   Earryl            ; save array mem end low byte
  4164 00:E6C8: 84 80              STY   Earryh            ; save array mem end high byte
  4165 00:E6CA: A9 00              LDA   #$00              ; clear byte for array clear
  4166 00:E6CC: E6 BB              INC   Aspth             ; increment array size high byte (now block count)
  4167 00:E6CE: A4 BA              LDY   Asptl             ; get array size low byte (now index to block)
  4168 00:E6D0: F0 05              BEQ   LAB_1F07          ; branch if low byte = $00
  4169                        
  4170                        LAB_1F02
  4171 00:E6D2: 88                 DEY                     ; decrement index (do 0 to n-1)
  4172 00:E6D3: 91 A4              STA   (Adatal),Y        ; zero byte
  4173 00:E6D5: D0 FB              BNE   LAB_1F02          ; loop until this block done
  4174                        
  4175                        LAB_1F07
  4176 00:E6D7: C6 A5              DEC   Adatah            ; decrement array pointer high byte
  4177 00:E6D9: C6 BB              DEC   Aspth             ; decrement block count high byte
  4178 00:E6DB: D0 F5              BNE   LAB_1F02          ; loop until all blocks done
  4179                        
  4180 00:E6DD: E6 A5              INC   Adatah            ; correct for last loop
  4181 00:E6DF: 38                 SEC                     ; set carry for subtract
  4182 00:E6E0: A0 02              LDY   #$02              ; index to array size low byte
  4183 00:E6E2: A5 7F              LDA   Earryl            ; get array mem end low byte
  4184 00:E6E4: E5 AA              SBC   Astrtl            ; subtract array start low byte
  4185 00:E6E6: 91 AA              STA   (Astrtl),Y        ; save array size low byte
  4186 00:E6E8: C8                 INY                     ; index to array size high byte
  4187 00:E6E9: A5 80              LDA   Earryh            ; get array mem end high byte
  4188 00:E6EB: E5 AB              SBC   Astrth            ; subtract array start high byte
  4189 00:E6ED: 91 AA              STA   (Astrtl),Y        ; save array size high byte
  4190 00:E6EF: A5 5E              LDA   Defdim            ; get default DIM flag
  4191 00:E6F1: D0 53              BNE   LAB_1F7B          ; exit (RET) if this was a DIM command
  4192                        
  4193                                                      ; else, find element
  4194 00:E6F3: C8                 INY                     ; index to # of dimensions
  4195                        
  4196                        LAB_1F24
  4197 00:E6F4: B1 AA              LDA   (Astrtl),Y        ; get array's dimension count
  4198 00:E6F6: 85 5D              STA   Dimcnt            ; save it
  4199                        
  4200                        ; we have found, or built, the array. now we need to find the element
  4201                        
  4202                        LAB_1F28
  4203 00:E6F8: A9 00              LDA   #$00              ; clear byte
  4204 00:E6FA: 85 BA              STA   Asptl             ; clear array data pointer low byte
  4205                        LAB_1F2C
  4206 00:E6FC: 85 BB              STA   Aspth             ; save array data pointer high byte
  4207 00:E6FE: C8                 INY                     ; increment index (point to array bound high byte)
  4208 00:E6FF: 68                 PLA                     ; pull array index low byte
  4209 00:E700: AA                 TAX                     ; copy to X
  4210 00:E701: 85 AE              STA   FAC1_2            ; save index low byte to FAC1 mantissa2
  4211 00:E703: 68                 PLA                     ; pull array index high byte
  4212 00:E704: 85 AF              STA   FAC1_3            ; save index high byte to FAC1 mantissa3
  4213 00:E706: D1 AA              CMP   (Astrtl),Y        ; compare with array bound high byte
  4214 00:E708: 90 0E              BCC   LAB_1F48          ; branch if within bounds
  4215                        
  4216 00:E70A: D0 06              BNE   LAB_1F42          ; if outside bounds do array bounds error
  4217                        
  4218                                                      ; else high byte was = so test low bytes
  4219 00:E70C: C8                 INY                     ; index to array bound low byte
  4220 00:E70D: 8A                 TXA                     ; get array index low byte
  4221 00:E70E: D1 AA              CMP   (Astrtl),Y        ; compare with array bound low byte
  4222 00:E710: 90 07              BCC   LAB_1F49          ; branch if within bounds
  4223                        
  4224                        LAB_1F42
  4225 00:E712: 4C 59 E6           JMP   LAB_1E85          ; else do array bounds error
  4226                        
  4227                        LAB_1F45
  4228 00:E715: 4C 62 D8           JMP   LAB_OMER          ; do "Out of memory" error then warm start
  4229                        
  4230                        LAB_1F48
  4231 00:E718: C8                 INY                     ; index to array bound low byte
  4232                        LAB_1F49
  4233 00:E719: A5 BB              LDA   Aspth             ; get array data pointer high byte
  4234 00:E71B: 05 BA              ORA   Asptl             ; OR with array data pointer low byte
  4235 00:E71D: F0 0A              BEQ   LAB_1F5A          ; branch if array data pointer = null (skip multiply)
  4236                        
  4237 00:E71F: 20 47 E7           JSR   LAB_1F7C          ; does XY = (Astrtl),Y * (Asptl)
  4238 00:E722: 8A                 TXA                     ; get result low byte
  4239 00:E723: 65 AE              ADC   FAC1_2            ; add index low byte from FAC1 mantissa2
  4240 00:E725: AA                 TAX                     ; save result low byte
  4241 00:E726: 98                 TYA                     ; get result high byte
  4242 00:E727: A4 71              LDY   ut1_pl            ; restore index
  4243                        LAB_1F5A
  4244 00:E729: 65 AF              ADC   FAC1_3            ; add index high byte from FAC1 mantissa3
  4245 00:E72B: 86 BA              STX   Asptl             ; save array data pointer low byte
  4246 00:E72D: C6 5D              DEC   Dimcnt            ; decrement dimensions count
  4247 00:E72F: D0 CB              BNE   LAB_1F2C          ; loop if dimensions still to do
  4248                        
  4249 00:E731: 06 BA              ASL   Asptl             ; array data pointer low byte * 2
  4250 00:E733: 2A                 ROL                     ; array data pointer high byte * 2
  4251 00:E734: 06 BA              ASL   Asptl             ; array data pointer low byte * 4
  4252 00:E736: 2A                 ROL                     ; array data pointer high byte * 4
  4253 00:E737: A8                 TAY                     ; copy high byte
  4254 00:E738: A5 BA              LDA   Asptl             ; get low byte
  4255 00:E73A: 65 A4              ADC   Adatal            ; add array data start pointer low byte
  4256 00:E73C: 85 95              STA   Cvaral            ; save as current var address low byte
  4257 00:E73E: 98                 TYA                     ; get high byte back
  4258 00:E73F: 65 A5              ADC   Adatah            ; add array data start pointer high byte
  4259 00:E741: 85 96              STA   Cvarah            ; save as current var address high byte
  4260 00:E743: A8                 TAY                     ; copy high byte to Y
  4261 00:E744: A5 95              LDA   Cvaral            ; get current var address low byte
  4262                        LAB_1F7B
  4263 00:E746: 60                 RTS
  4264                        
  4265                        ; does XY = (Astrtl),Y * (Asptl)
  4266                        
  4267                        LAB_1F7C
  4268 00:E747: 84 71              STY   ut1_pl            ; save index
  4269 00:E749: B1 AA              LDA   (Astrtl),Y        ; get dimension size low byte
  4270 00:E74B: 85 76              STA   dims_l            ; save dimension size low byte
  4271 00:E74D: 88                 DEY                     ; decrement index
  4272 00:E74E: B1 AA              LDA   (Astrtl),Y        ; get dimension size high byte
  4273 00:E750: 85 77              STA   dims_h            ; save dimension size high byte
  4274                        
  4275 00:E752: A9 10              LDA   #$10              ; count = $10 (16 bit multiply)
  4276 00:E754: 85 A8              STA   numbit            ; save bit count
  4277 00:E756: A2 00              LDX   #$00              ; clear result low byte
  4278 00:E758: A0 00              LDY   #$00              ; clear result high byte
  4279                        LAB_1F8F
  4280 00:E75A: 8A                 TXA                     ; get result low byte
  4281 00:E75B: 0A                 ASL                     ; *2
  4282 00:E75C: AA                 TAX                     ; save result low byte
  4283 00:E75D: 98                 TYA                     ; get result high byte
  4284 00:E75E: 2A                 ROL                     ; *2
  4285 00:E75F: A8                 TAY                     ; save result high byte
  4286 00:E760: B0 B3              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4287                        
  4288 00:E762: 06 BA              ASL   Asptl             ; shift multiplier low byte
  4289 00:E764: 26 BB              ROL   Aspth             ; shift multiplier high byte
  4290 00:E766: 90 0B              BCC   LAB_1FA8          ; skip add if no carry
  4291                        
  4292 00:E768: 18                 CLC                     ; else clear carry for add
  4293 00:E769: 8A                 TXA                     ; get result low byte
  4294 00:E76A: 65 76              ADC   dims_l            ; add dimension size low byte
  4295 00:E76C: AA                 TAX                     ; save result low byte
  4296 00:E76D: 98                 TYA                     ; get result high byte
  4297 00:E76E: 65 77              ADC   dims_h            ; add dimension size high byte
  4298 00:E770: A8                 TAY                     ; save result high byte
  4299 00:E771: B0 A2              BCS   LAB_1F45          ; if overflow go do "Out of memory" error
  4300                        
  4301                        LAB_1FA8
  4302 00:E773: C6 A8              DEC   numbit            ; decrement bit count
  4303 00:E775: D0 E3              BNE   LAB_1F8F          ; loop until all done
  4304                        
  4305 00:E777: 60                 RTS
  4306                        
  4307                        ; perform FRE()
  4308                        
  4309                        LAB_FRE
  4310 00:E778: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  4311 00:E77A: 10 03              BPL   LAB_1FB4          ; branch if numeric
  4312                        
  4313 00:E77C: 20 77 EA           JSR   LAB_22B6          ; pop string off descriptor stack, or from top of string
  4314                                                      ; space returns with A = length, X=$71=pointer low byte,
  4315                                                      ; Y=$72=pointer high byte
  4316                        
  4317                                                      ; FRE(n) was numeric so do this
  4318                        LAB_1FB4
  4319 00:E77F: 20 14 E9           JSR   LAB_GARB          ; go do garbage collection
  4320 00:E782: 38                 SEC                     ; set carry for subtract
  4321 00:E783: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4322 00:E785: E5 7F              SBC   Earryl            ; subtract array mem end low byte
  4323 00:E787: A8                 TAY                     ; copy result to Y
  4324 00:E788: A5 82              LDA   Sstorh            ; get bottom of string space high byte
  4325 00:E78A: E5 80              SBC   Earryh            ; subtract array mem end high byte
  4326                        
  4327                        ; save and convert integer AY to FAC1
  4328                        
  4329                        LAB_AYFC
  4330 00:E78C: 46 5F              LSR   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  4331 00:E78E: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  4332 00:E790: 84 AE              STY   FAC1_2            ; save FAC1 mantissa2
  4333 00:E792: A2 90              LDX   #$90              ; set exponent=2^16 (integer)
  4334 00:E794: 4C 34 F0           JMP   LAB_27E3          ; set exp=X, clear FAC1_3, normalise and return
  4335                        
  4336                        ; perform POS()
  4337                        
  4338                        LAB_POS
  4339 00:E797: A4 0E              LDY   TPos              ; get terminal position
  4340                        
  4341                        ; convert Y to byte in FAC1
  4342                        
  4343                        LAB_1FD0
  4344 00:E799: A9 00              LDA   #$00              ; clear high byte
  4345 00:E79B: F0 EF              BEQ   LAB_AYFC          ; always save and convert integer AY to FAC1 and return
  4346                        
  4347                        ; check not Direct (used by DEF and INPUT)
  4348                        
  4349                        LAB_CKRN
  4350 00:E79D: A6 88              LDX   Clineh            ; get current line high byte
  4351 00:E79F: E8                 INX                     ; increment it
  4352 00:E7A0: D0 A4              BNE   LAB_1F7B          ; return if can continue not direct mode
  4353                        
  4354                                                      ; else do illegal direct error
  4355                        LAB_1FD9
  4356 00:E7A2: A2 16              LDX   #$16              ; error code $16 ("Illegal direct" error)
  4357                        LAB_1FDB
  4358 00:E7A4: 4C 64 D8           JMP   LAB_XERR          ; go do error #X, then warm start
  4359                        
  4360                        ; perform DEF
  4361                        
  4362                        LAB_DEF
  4363 00:E7A7: 20 D8 E7           JSR   LAB_200B          ; check FNx syntax
  4364 00:E7AA: 85 9C              STA   func_l            ; save function pointer low byte
  4365 00:E7AC: 84 9D              STY   func_h            ; save function pointer high byte
  4366 00:E7AE: 20 9D E7           JSR   LAB_CKRN          ; check not Direct (back here if ok)
  4367 00:E7B1: 20 1F E3           JSR   LAB_1BFE          ; scan for "(" , else do syntax error then warm start
  4368 00:E7B4: A9 80              LDA   #$80              ; set flag for FNx
  4369 00:E7B6: 85 61              STA   Sufnxf            ; save subscript/FNx flag
  4370 00:E7B8: 20 DD E4           JSR   LAB_GVAR          ; get (var) address
  4371 00:E7BB: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4372 00:E7BE: 20 14 E3           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  4373 00:E7C1: A9 C1              LDA   #TK_EQUAL         ; get = token
  4374 00:E7C3: 20 16 E3           JSR   LAB_SCCA          ; scan for CHR$(A), else do syntax error then warm start
  4375 00:E7C6: A5 96              LDA   Cvarah            ; get current var address high byte
  4376 00:E7C8: 48                 PHA                     ; push it
  4377 00:E7C9: A5 95              LDA   Cvaral            ; get current var address low byte
  4378 00:E7CB: 48                 PHA                     ; push it
  4379 00:E7CC: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4380 00:E7CE: 48                 PHA                     ; push it
  4381 00:E7CF: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4382 00:E7D1: 48                 PHA                     ; push it
  4383 00:E7D2: 20 AF DD           JSR   LAB_DATA          ; go perform DATA
  4384 00:E7D5: 4C 47 E8           JMP   LAB_207A          ; put execute pointer and variable pointer into function
  4385                                                      ; and return
  4386                        
  4387                        ; check FNx syntax
  4388                        
  4389                        LAB_200B
  4390 00:E7D8: A9 AE              LDA   #TK_FN            ; get FN" token
  4391 00:E7DA: 20 16 E3           JSR   LAB_SCCA          ; scan for CHR$(A) , else do syntax error then warm start
  4392                                                      ; return character after A
  4393 00:E7DD: 09 80              ORA   #$80              ; set FN flag bit
  4394 00:E7DF: 85 61              STA   Sufnxf            ; save FN flag so array variable test fails
  4395 00:E7E1: 20 E4 E4           JSR   LAB_1D12          ; search for FN variable
  4396 00:E7E4: 4C F5 E1           JMP   LAB_CTNM          ; check if source is numeric and return, else do type
  4397                                                      ; mismatch
  4398                        
  4399                                                      ; Evaluate FNx
  4400                        LAB_201E
  4401 00:E7E7: 20 D8 E7           JSR   LAB_200B          ; check FNx syntax
  4402 00:E7EA: 48                 PHA                     ; push function pointer low byte
  4403 00:E7EB: 98                 TYA                     ; copy function pointer high byte
  4404 00:E7EC: 48                 PHA                     ; push function pointer high byte
  4405 00:E7ED: 20 1F E3           JSR   LAB_1BFE          ; scan for "(", else do syntax error then warm start
  4406 00:E7F0: 20 06 E2           JSR   LAB_EVEX          ; evaluate expression
  4407 00:E7F3: 20 14 E3           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  4408 00:E7F6: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4409 00:E7F9: 68                 PLA                     ; pop function pointer high byte
  4410 00:E7FA: 85 9D              STA   func_h            ; restore it
  4411 00:E7FC: 68                 PLA                     ; pop function pointer low byte
  4412 00:E7FD: 85 9C              STA   func_l            ; restore it
  4413 00:E7FF: A2 20              LDX   #$20              ; error code $20 ("Undefined function" error)
  4414 00:E801: A0 03              LDY   #$03              ; index to variable pointer high byte
  4415 00:E803: B1 9C              LDA   (func_l),Y        ; get variable pointer high byte
  4416 00:E805: F0 9D              BEQ   LAB_1FDB          ; if zero go do undefined function error
  4417                        
  4418 00:E807: 85 96              STA   Cvarah            ; save variable address high byte
  4419 00:E809: 88                 DEY                     ; index to variable address low byte
  4420 00:E80A: B1 9C              LDA   (func_l),Y        ; get variable address low byte
  4421 00:E80C: 85 95              STA   Cvaral            ; save variable address low byte
  4422 00:E80E: AA                 TAX                     ; copy address low byte
  4423                        
  4424                                                      ; now stack the function variable value before use
  4425 00:E80F: C8                 INY                     ; index to mantissa_3
  4426                        LAB_2043
  4427 00:E810: B1 95              LDA   (Cvaral),Y        ; get byte from variable
  4428 00:E812: 48                 PHA                     ; stack it
  4429 00:E813: 88                 DEY                     ; decrement index
  4430 00:E814: 10 FA              BPL   LAB_2043          ; loop until variable stacked
  4431                        
  4432 00:E816: A4 96              LDY   Cvarah            ; get variable address high byte
  4433 00:E818: 20 D9 EF           JSR   LAB_2778          ; pack FAC1 (function expression value) into (XY)
  4434                                                      ; (function variable), return Y=0, always
  4435 00:E81B: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  4436 00:E81D: 48                 PHA                     ; push it
  4437 00:E81E: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  4438 00:E820: 48                 PHA                     ; push it
  4439 00:E821: B1 9C              LDA   (func_l),Y        ; get function execute pointer low byte
  4440 00:E823: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  4441 00:E825: C8                 INY                     ; index to high byte
  4442 00:E826: B1 9C              LDA   (func_l),Y        ; get function execute pointer high byte
  4443 00:E828: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  4444 00:E82A: A5 96              LDA   Cvarah            ; get variable address high byte
  4445 00:E82C: 48                 PHA                     ; push it
  4446 00:E82D: A5 95              LDA   Cvaral            ; get variable address low byte
  4447 00:E82F: 48                 PHA                     ; push it
  4448 00:E830: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  4449                                                      ; else do type mismatch
  4450 00:E833: 68                 PLA                     ; pull variable address low byte
  4451 00:E834: 85 9C              STA   func_l            ; save variable address low byte
  4452 00:E836: 68                 PLA                     ; pull variable address high byte
  4453 00:E837: 85 9D              STA   func_h            ; save variable address high byte
  4454 00:E839: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  4455 00:E83C: F0 03              BEQ   LAB_2074          ; branch if null (should be [EOL] marker)
  4456                        
  4457 00:E83E: 4C 27 E3           JMP   LAB_SNER          ; else syntax error then warm start
  4458                        
  4459                        ; restore Bpntrl,Bpntrh and function variable from stack
  4460                        
  4461                        LAB_2074
  4462 00:E841: 68                 PLA                     ; pull BASIC execute pointer low byte
  4463 00:E842: 85 C3              STA   Bpntrl            ; restore BASIC execute pointer low byte
  4464 00:E844: 68                 PLA                     ; pull BASIC execute pointer high byte
  4465 00:E845: 85 C4              STA   Bpntrh            ; restore BASIC execute pointer high byte
  4466                        
  4467                        ; put execute pointer and variable pointer into function
  4468                        
  4469                        LAB_207A
  4470 00:E847: A0 00              LDY   #$00              ; clear index
  4471 00:E849: 68                 PLA                     ; pull BASIC execute pointer low byte
  4472 00:E84A: 91 9C              STA   (func_l),Y        ; save to function
  4473 00:E84C: C8                 INY                     ; increment index
  4474 00:E84D: 68                 PLA                     ; pull BASIC execute pointer high byte
  4475 00:E84E: 91 9C              STA   (func_l),Y        ; save to function
  4476 00:E850: C8                 INY                     ; increment index
  4477 00:E851: 68                 PLA                     ; pull current var address low byte
  4478 00:E852: 91 9C              STA   (func_l),Y        ; save to function
  4479 00:E854: C8                 INY                     ; increment index
  4480 00:E855: 68                 PLA                     ; pull current var address high byte
  4481 00:E856: 91 9C              STA   (func_l),Y        ; save to function
  4482 00:E858: 60                 RTS
  4483                        
  4484                        ; perform STR$()
  4485                        
  4486                        LAB_STRS
  4487 00:E859: 20 F5 E1           JSR   LAB_CTNM          ; check if source is numeric, else do type mismatch
  4488 00:E85C: 20 C7 F1           JSR   LAB_296E          ; convert FAC1 to string
  4489 00:E85F: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  4490 00:E861: A0 00              LDY   #>Decssp1         ; set result string high pointer
  4491 00:E863: F0 12              BEQ   LAB_20AE          ; print null terminated string to Sutill/Sutilh
  4492                        
  4493                        ; Do string vector
  4494                        ; copy des_pl/h to des_2l/h and make string space A bytes long
  4495                        
  4496                        LAB_209C
  4497 00:E865: A6 AE              LDX   des_pl            ; get descriptor pointer low byte
  4498 00:E867: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4499 00:E869: 86 9E              STX   des_2l            ; save descriptor pointer low byte
  4500 00:E86B: 84 9F              STY   des_2h            ; save descriptor pointer high byte
  4501                        
  4502                        ; make string space A bytes long
  4503                        ; A=length, X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4504                        
  4505                        LAB_MSSP
  4506 00:E86D: 20 E2 E8           JSR   LAB_2115          ; make space in string memory for string A long
  4507                                                      ; return X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  4508 00:E870: 86 AD              STX   str_pl            ; save string pointer low byte
  4509 00:E872: 84 AE              STY   str_ph            ; save string pointer high byte
  4510 00:E874: 85 AC              STA   str_ln            ; save length
  4511 00:E876: 60                 RTS
  4512                        
  4513                        ; Scan, set up string
  4514                        ; print " terminated string to Sutill/Sutilh
  4515                        
  4516                        LAB_20AE
  4517 00:E877: A2 22              LDX   #$22              ; set terminator to "
  4518 00:E879: 86 5B              STX   Srchc             ; set search character (terminator 1)
  4519 00:E87B: 86 5C              STX   Asrch             ; set terminator 2
  4520                        
  4521                        ; print [Srchc] or [Asrch] terminated string to Sutill/Sutilh
  4522                        ; source is AY
  4523                        
  4524                        LAB_20B4
  4525 00:E87D: 85 B8              STA   ssptr_l           ; store string start low byte
  4526 00:E87F: 84 B9              STY   ssptr_h           ; store string start high byte
  4527 00:E881: 85 AD              STA   str_pl            ; save string pointer low byte
  4528 00:E883: 84 AE              STY   str_ph            ; save string pointer high byte
  4529 00:E885: A0 FF              LDY   #$FF              ; set length to -1
  4530                        LAB_20BE
  4531 00:E887: C8                 INY                     ; increment length
  4532 00:E888: B1 B8              LDA   (ssptr_l),Y       ; get byte from string
  4533 00:E88A: F0 0C              BEQ   LAB_20CF          ; exit loop if null byte [EOS]
  4534                        
  4535 00:E88C: C5 5B              CMP   Srchc             ; compare with search character (terminator 1)
  4536 00:E88E: F0 04              BEQ   LAB_20CB          ; branch if terminator
  4537                        
  4538 00:E890: C5 5C              CMP   Asrch             ; compare with terminator 2
  4539 00:E892: D0 F3              BNE   LAB_20BE          ; loop if not terminator 2
  4540                        
  4541                        LAB_20CB
  4542 00:E894: C9 22              CMP   #$22              ; compare with "
  4543 00:E896: F0 01              BEQ   LAB_20D0          ; branch if " (carry set if = !)
  4544                        
  4545                        LAB_20CF
  4546 00:E898: 18                 CLC                     ; clear carry for add (only if [EOL] terminated string)
  4547                        LAB_20D0
  4548 00:E899: 84 AC              STY   str_ln            ; save length in FAC1 exponent
  4549 00:E89B: 98                 TYA                     ; copy length to A
  4550 00:E89C: 65 B8              ADC   ssptr_l           ; add string start low byte
  4551 00:E89E: 85 BA              STA   Sendl             ; save string end low byte
  4552 00:E8A0: A6 B9              LDX   ssptr_h           ; get string start high byte
  4553 00:E8A2: 90 01              BCC   LAB_20DC          ; branch if no low byte overflow
  4554                        
  4555 00:E8A4: E8                 INX                     ; else increment high byte
  4556                        LAB_20DC
  4557 00:E8A5: 86 BB              STX   Sendh             ; save string end high byte
  4558 00:E8A7: A5 B9              LDA   ssptr_h           ; get string start high byte
  4559                        ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
  4560                        ; *** replace
  4561                        ;      CMP   #>Ram_base        ; compare with start of program memory
  4562                        ;      BCS   LAB_RTST          ; branch if not in utility area
  4563                        ; *** with
  4564 00:E8A9: F0 04              BEQ   LAB_MVST          ; fix STR$() using page zero via LAB_296E
  4565 00:E8AB: C9 02              CMP   #>Ibuffs          ; compare with location of input buffer page
  4566 00:E8AD: D0 0B              BNE   LAB_RTST          ; branch if not in utility area
  4567                        LAB_MVST      
  4568                        ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
  4569                        
  4570                                                      ; string in utility area, move to string memory
  4571 00:E8AF: 98                 TYA                     ; copy length to A
  4572 00:E8B0: 20 65 E8           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4573                                                      ; long
  4574 00:E8B3: A6 B8              LDX   ssptr_l           ; get string start low byte
  4575 00:E8B5: A4 B9              LDY   ssptr_h           ; get string start high byte
  4576 00:E8B7: 20 58 EA           JSR   LAB_2298          ; store string A bytes long from XY to (Sutill)
  4577                        
  4578                        ; check for space on descriptor stack then ..
  4579                        ; put string address and length on descriptor stack and update stack pointers
  4580                        
  4581                        LAB_RTST
  4582 00:E8BA: A6 65              LDX   next_s            ; get string stack pointer
  4583 00:E8BC: E0 71              CPX   #des_sk+$09       ; compare with max+1
  4584 00:E8BE: D0 05              BNE   LAB_20F8          ; branch if space on string stack
  4585                        
  4586                                                      ; else do string too complex error
  4587 00:E8C0: A2 1C              LDX   #$1C              ; error code $1C ("String too complex" error)
  4588                        LAB_20F5
  4589 00:E8C2: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  4590                        
  4591                        ; put string address and length on descriptor stack and update stack pointers
  4592                        
  4593                        LAB_20F8
  4594 00:E8C5: A5 AC              LDA   str_ln            ; get string length
  4595 00:E8C7: 95 00              STA   PLUS_0,X          ; put on string stack
  4596 00:E8C9: A5 AD              LDA   str_pl            ; get string pointer low byte
  4597 00:E8CB: 95 01              STA   PLUS_1,X          ; put on string stack
  4598 00:E8CD: A5 AE              LDA   str_ph            ; get string pointer high byte
  4599 00:E8CF: 95 02              STA   PLUS_2,X          ; put on string stack
  4600 00:E8D1: A0 00              LDY   #$00              ; clear Y
  4601 00:E8D3: 86 AE              STX   des_pl            ; save string descriptor pointer low byte
  4602 00:E8D5: 84 AF              STY   des_ph            ; save string descriptor pointer high byte (always $00)
  4603 00:E8D7: 88                 DEY                     ; Y = $FF
  4604 00:E8D8: 84 5F              STY   Dtypef            ; save data type flag, $FF=string
  4605 00:E8DA: 86 66              STX   last_sl           ; save old stack pointer (current top item)
  4606 00:E8DC: E8                 INX                     ; update stack pointer
  4607 00:E8DD: E8                 INX                     ; update stack pointer
  4608 00:E8DE: E8                 INX                     ; update stack pointer
  4609 00:E8DF: 86 65              STX   next_s            ; save new top item value
  4610 00:E8E1: 60                 RTS
  4611                        
  4612                        ; Build descriptor
  4613                        ; make space in string memory for string A long
  4614                        ; return X=Sutill=ptr low byte, Y=Sutill=ptr high byte
  4615                        
  4616                        LAB_2115
  4617 00:E8E2: 46 60              LSR   Gclctd            ; clear garbage collected flag (b7)
  4618                        
  4619                                                      ; make space for string A long
  4620                        LAB_2117
  4621 00:E8E4: 48                 PHA                     ; save string length
  4622 00:E8E5: 49 FF              EOR   #$FF              ; complement it
  4623 00:E8E7: 38                 SEC                     ; set carry for subtract (twos comp add)
  4624 00:E8E8: 65 81              ADC   Sstorl            ; add bottom of string space low byte (subtract length)
  4625 00:E8EA: A4 82              LDY   Sstorh            ; get bottom of string space high byte
  4626 00:E8EC: B0 01              BCS   LAB_2122          ; skip decrement if no underflow
  4627                        
  4628 00:E8EE: 88                 DEY                     ; decrement bottom of string space high byte
  4629                        LAB_2122
  4630 00:E8EF: C4 80              CPY   Earryh            ; compare with array mem end high byte
  4631 00:E8F1: 90 11              BCC   LAB_2137          ; do out of memory error if less
  4632                        
  4633 00:E8F3: D0 04              BNE   LAB_212C          ; if not = skip next test
  4634                        
  4635 00:E8F5: C5 7F              CMP   Earryl            ; compare with array mem end low byte
  4636 00:E8F7: 90 0B              BCC   LAB_2137          ; do out of memory error if less
  4637                        
  4638                        LAB_212C
  4639 00:E8F9: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4640 00:E8FB: 84 82              STY   Sstorh            ; save bottom of string space high byte
  4641 00:E8FD: 85 83              STA   Sutill            ; save string utility ptr low byte
  4642 00:E8FF: 84 84              STY   Sutilh            ; save string utility ptr high byte
  4643 00:E901: AA                 TAX                     ; copy low byte to X
  4644 00:E902: 68                 PLA                     ; get string length back
  4645 00:E903: 60                 RTS
  4646                        
  4647                        LAB_2137
  4648 00:E904: A2 0C              LDX   #$0C              ; error code $0C ("Out of memory" error)
  4649 00:E906: A5 60              LDA   Gclctd            ; get garbage collected flag
  4650 00:E908: 30 B8              BMI   LAB_20F5          ; if set then do error code X
  4651                        
  4652 00:E90A: 20 14 E9           JSR   LAB_GARB          ; else go do garbage collection
  4653 00:E90D: A9 80              LDA   #$80              ; flag for garbage collected
  4654 00:E90F: 85 60              STA   Gclctd            ; set garbage collected flag
  4655 00:E911: 68                 PLA                     ; pull length
  4656 00:E912: D0 D0              BNE   LAB_2117          ; go try again (loop always, length should never be = $00)
  4657                        
  4658                        ; garbage collection routine
  4659                        
  4660                        LAB_GARB
  4661 00:E914: A6 85              LDX   Ememl             ; get end of mem low byte
  4662 00:E916: A5 86              LDA   Ememh             ; get end of mem high byte
  4663                        
  4664                        ; re-run routine from last ending
  4665                        
  4666                        LAB_214B
  4667 00:E918: 86 81              STX   Sstorl            ; set string storage low byte
  4668 00:E91A: 85 82              STA   Sstorh            ; set string storage high byte
  4669 00:E91C: A0 00              LDY   #$00              ; clear index
  4670 00:E91E: 84 9D              STY   garb_h            ; clear working pointer high byte (flag no strings to move)
  4671                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4672                        ; *** add
  4673 00:E920: 84 9C              STY   garb_l            ; clear working pointer low byte (flag no strings to move)
  4674                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4675 00:E922: A5 7F              LDA   Earryl            ; get array mem end low byte
  4676 00:E924: A6 80              LDX   Earryh            ; get array mem end high byte
  4677 00:E926: 85 AA              STA   Histrl            ; save as highest string low byte
  4678 00:E928: 86 AB              STX   Histrh            ; save as highest string high byte
  4679 00:E92A: A9 68              LDA   #des_sk           ; set descriptor stack pointer
  4680 00:E92C: 85 71              STA   ut1_pl            ; save descriptor stack pointer low byte
  4681 00:E92E: 84 72              STY   ut1_ph            ; save descriptor stack pointer high byte ($00)
  4682                        LAB_2161
  4683 00:E930: C5 65              CMP   next_s            ; compare with descriptor stack pointer
  4684 00:E932: F0 05              BEQ   LAB_216A          ; branch if =
  4685                        
  4686 00:E934: 20 9A E9           JSR   LAB_21D7          ; go garbage collect descriptor stack
  4687 00:E937: F0 F7              BEQ   LAB_2161          ; loop always
  4688                        
  4689                                                      ; done stacked strings, now do string vars
  4690                        LAB_216A
  4691 00:E939: 06 A0              ASL   g_step            ; set step size = $06
  4692 00:E93B: A5 7B              LDA   Svarl             ; get start of vars low byte
  4693 00:E93D: A6 7C              LDX   Svarh             ; get start of vars high byte
  4694 00:E93F: 85 71              STA   ut1_pl            ; save as pointer low byte
  4695 00:E941: 86 72              STX   ut1_ph            ; save as pointer high byte
  4696                        LAB_2176
  4697 00:E943: E4 7E              CPX   Sarryh            ; compare start of arrays high byte
  4698 00:E945: D0 04              BNE   LAB_217E          ; branch if no high byte match
  4699                        
  4700 00:E947: C5 7D              CMP   Sarryl            ; else compare start of arrays low byte
  4701 00:E949: F0 05              BEQ   LAB_2183          ; branch if = var mem end
  4702                        
  4703                        LAB_217E
  4704 00:E94B: 20 94 E9           JSR   LAB_21D1          ; go garbage collect strings
  4705 00:E94E: F0 F3              BEQ   LAB_2176          ; loop always
  4706                        
  4707                                                      ; done string vars, now do string arrays
  4708                        LAB_2183
  4709 00:E950: 85 A4              STA   Nbendl            ; save start of arrays low byte as working pointer
  4710 00:E952: 86 A5              STX   Nbendh            ; save start of arrays high byte as working pointer
  4711 00:E954: A9 04              LDA   #$04              ; set step size
  4712 00:E956: 85 A0              STA   g_step            ; save step size
  4713                        LAB_218B
  4714 00:E958: A5 A4              LDA   Nbendl            ; get pointer low byte
  4715 00:E95A: A6 A5              LDX   Nbendh            ; get pointer high byte
  4716                        LAB_218F
  4717 00:E95C: E4 80              CPX   Earryh            ; compare with array mem end high byte
  4718 00:E95E: D0 04              BNE   LAB_219A          ; branch if not at end
  4719                        
  4720 00:E960: C5 7F              CMP   Earryl            ; else compare with array mem end low byte
  4721 00:E962: F0 75              BEQ   LAB_2216          ; tidy up and exit if at end
  4722                        
  4723                        LAB_219A
  4724 00:E964: 85 71              STA   ut1_pl            ; save pointer low byte
  4725 00:E966: 86 72              STX   ut1_ph            ; save pointer high byte
  4726 00:E968: A0 02              LDY   #$02              ; set index
  4727 00:E96A: B1 71              LDA   (ut1_pl),Y        ; get array size low byte
  4728 00:E96C: 65 A4              ADC   Nbendl            ; add start of this array low byte
  4729 00:E96E: 85 A4              STA   Nbendl            ; save start of next array low byte
  4730 00:E970: C8                 INY                     ; increment index
  4731 00:E971: B1 71              LDA   (ut1_pl),Y        ; get array size high byte
  4732 00:E973: 65 A5              ADC   Nbendh            ; add start of this array high byte
  4733 00:E975: 85 A5              STA   Nbendh            ; save start of next array high byte
  4734 00:E977: A0 01              LDY   #$01              ; set index
  4735 00:E979: B1 71              LDA   (ut1_pl),Y        ; get name second byte
  4736 00:E97B: 10 DB              BPL   LAB_218B          ; skip if not string array
  4737                        
  4738                        ; was string array so ..
  4739                        
  4740 00:E97D: A0 04              LDY   #$04              ; set index
  4741 00:E97F: B1 71              LDA   (ut1_pl),Y        ; get # of dimensions
  4742 00:E981: 0A                 ASL                     ; *2
  4743 00:E982: 69 05              ADC   #$05              ; +5 (array header size)
  4744 00:E984: 20 CC E9           JSR   LAB_2208          ; go set up for first element
  4745                        LAB_21C4
  4746 00:E987: E4 A5              CPX   Nbendh            ; compare with start of next array high byte
  4747 00:E989: D0 04              BNE   LAB_21CC          ; branch if <> (go do this array)
  4748                        
  4749 00:E98B: C5 A4              CMP   Nbendl            ; else compare element pointer low byte with next array
  4750                                                      ; low byte
  4751 00:E98D: F0 CD              BEQ   LAB_218F          ; if equal then go do next array
  4752                        
  4753                        LAB_21CC
  4754 00:E98F: 20 9A E9           JSR   LAB_21D7          ; go defrag array strings
  4755 00:E992: F0 F3              BEQ   LAB_21C4          ; go do next array string (loop always)
  4756                        
  4757                        ; defrag string variables
  4758                        ; enter with XA = variable pointer
  4759                        ; return with XA = next variable pointer
  4760                        
  4761                        LAB_21D1
  4762 00:E994: C8                 INY                     ; increment index (Y was $00)
  4763 00:E995: B1 71              LDA   (ut1_pl),Y        ; get var name byte 2
  4764 00:E997: 10 30              BPL   LAB_2206          ; if not string, step pointer to next var and return
  4765                        
  4766 00:E999: C8                 INY                     ; else increment index
  4767                        LAB_21D7
  4768 00:E99A: B1 71              LDA   (ut1_pl),Y        ; get string length
  4769 00:E99C: F0 2B              BEQ   LAB_2206          ; if null, step pointer to next string and return
  4770                        
  4771 00:E99E: C8                 INY                     ; else increment index
  4772 00:E99F: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte
  4773 00:E9A1: AA                 TAX                     ; copy to X
  4774 00:E9A2: C8                 INY                     ; increment index
  4775 00:E9A3: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte
  4776 00:E9A5: C5 82              CMP   Sstorh            ; compare bottom of string space high byte
  4777 00:E9A7: 90 06              BCC   LAB_21EC          ; branch if less
  4778                        
  4779 00:E9A9: D0 1E              BNE   LAB_2206          ; if greater, step pointer to next string and return
  4780                        
  4781                                                      ; high bytes were = so compare low bytes
  4782 00:E9AB: E4 81              CPX   Sstorl            ; compare bottom of string space low byte
  4783 00:E9AD: B0 1A              BCS   LAB_2206          ; if >=, step pointer to next string and return
  4784                        
  4785                                                      ; string pointer is < string storage pointer (pos in mem)
  4786                        LAB_21EC
  4787 00:E9AF: C5 AB              CMP   Histrh            ; compare to highest string high byte
  4788 00:E9B1: 90 17              BCC   LAB_2207          ; if <, step pointer to next string and return
  4789                        
  4790 00:E9B3: D0 04              BNE   LAB_21F6          ; if > update pointers, step to next and return
  4791                        
  4792                                                      ; high bytes were = so compare low bytes
  4793 00:E9B5: E4 AA              CPX   Histrl            ; compare to highest string low byte
  4794 00:E9B7: 90 11              BCC   LAB_2207          ; if <, step pointer to next string and return
  4795                        
  4796                                                      ; string is in string memory space
  4797                        LAB_21F6
  4798 00:E9B9: 86 AA              STX   Histrl            ; save as new highest string low byte
  4799 00:E9BB: 85 AB              STA   Histrh            ; save as new highest string high byte
  4800 00:E9BD: A5 71              LDA   ut1_pl            ; get start of vars(descriptors) low byte
  4801 00:E9BF: A6 72              LDX   ut1_ph            ; get start of vars(descriptors) high byte
  4802 00:E9C1: 85 9C              STA   garb_l            ; save as working pointer low byte
  4803 00:E9C3: 86 9D              STX   garb_h            ; save as working pointer high byte
  4804 00:E9C5: 88                 DEY                     ; decrement index DIFFERS
  4805 00:E9C6: 88                 DEY                     ; decrement index (should point to descriptor start)
  4806 00:E9C7: 84 A2              STY   g_indx            ; save index pointer
  4807                        
  4808                                                      ; step pointer to next string
  4809                        LAB_2206
  4810 00:E9C9: 18                 CLC                     ; clear carry for add
  4811                        LAB_2207
  4812 00:E9CA: A5 A0              LDA   g_step            ; get step size
  4813                        LAB_2208
  4814 00:E9CC: 65 71              ADC   ut1_pl            ; add pointer low byte
  4815 00:E9CE: 85 71              STA   ut1_pl            ; save pointer low byte
  4816 00:E9D0: 90 02              BCC   LAB_2211          ; branch if no overflow
  4817                        
  4818 00:E9D2: E6 72              INC   ut1_ph            ; else increment high byte
  4819                        LAB_2211
  4820 00:E9D4: A6 72              LDX   ut1_ph            ; get pointer high byte
  4821 00:E9D6: A0 00              LDY   #$00              ; clear Y
  4822 00:E9D8: 60                 RTS
  4823                        
  4824                        ; search complete, now either exit or set-up and move string
  4825                        
  4826                        LAB_2216
  4827 00:E9D9: C6 A0              DEC   g_step            ; decrement step size (now $03 for descriptor stack)
  4828                        ; *** begin patch  2.22p5.5  garbage collection may overlap temporary strings
  4829                        ; *** replace
  4830                        ;      LDX   garb_h            ; get string to move high byte
  4831                        ; *** with
  4832 00:E9DB: A5 9D              LDA   garb_h            ; any string to move?
  4833 00:E9DD: 05 9C              ORA   garb_l
  4834                        ; *** end   patch  2.22p5.5  garbage collection may overlap temporary strings
  4835 00:E9DF: F0 F3              BEQ   LAB_2211          ; exit if nothing to move
  4836                        
  4837 00:E9E1: A4 A2              LDY   g_indx            ; get index byte back (points to descriptor)
  4838 00:E9E3: 18                 CLC                     ; clear carry for add
  4839 00:E9E4: B1 9C              LDA   (garb_l),Y        ; get string length
  4840 00:E9E6: 65 AA              ADC   Histrl            ; add highest string low byte
  4841 00:E9E8: 85 A6              STA   Obendl            ; save old block end low pointer
  4842 00:E9EA: A5 AB              LDA   Histrh            ; get highest string high byte
  4843 00:E9EC: 69 00              ADC   #$00              ; add any carry
  4844 00:E9EE: 85 A7              STA   Obendh            ; save old block end high byte
  4845 00:E9F0: A5 81              LDA   Sstorl            ; get bottom of string space low byte
  4846 00:E9F2: A6 82              LDX   Sstorh            ; get bottom of string space high byte
  4847 00:E9F4: 85 A4              STA   Nbendl            ; save new block end low byte
  4848 00:E9F6: 86 A5              STX   Nbendh            ; save new block end high byte
  4849 00:E9F8: 20 ED D7           JSR   LAB_11D6          ; open up space in memory, don't set array end
  4850 00:E9FB: A4 A2              LDY   g_indx            ; get index byte
  4851 00:E9FD: C8                 INY                     ; point to descriptor low byte
  4852 00:E9FE: A5 A4              LDA   Nbendl            ; get string pointer low byte
  4853 00:EA00: 91 9C              STA   (garb_l),Y        ; save new string pointer low byte
  4854 00:EA02: AA                 TAX                     ; copy string pointer low byte
  4855 00:EA03: E6 A5              INC   Nbendh            ; correct high byte (move sets high byte -1)
  4856 00:EA05: A5 A5              LDA   Nbendh            ; get new string pointer high byte
  4857 00:EA07: C8                 INY                     ; point to descriptor high byte
  4858 00:EA08: 91 9C              STA   (garb_l),Y        ; save new string pointer high byte
  4859 00:EA0A: 4C 18 E9           JMP   LAB_214B          ; re-run routine from last ending
  4860                                                      ; (but don't collect this string)
  4861                        
  4862                        ; concatenate
  4863                        ; add strings, string 1 is in descriptor des_pl, string 2 is in line
  4864                        
  4865                        LAB_224D
  4866 00:EA0D: A5 AF              LDA   des_ph            ; get descriptor pointer high byte
  4867 00:EA0F: 48                 PHA                     ; put on stack
  4868 00:EA10: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4869 00:EA12: 48                 PHA                     ; put on stack
  4870                        ; *** begin patch  2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4871                        ; *** add extra label to verify originating function
  4872                        LAB_224Da
  4873                        ; *** end patch    2.22p5.4  concatenate MINUS or NOT() crashes EhBASIC  ***
  4874 00:EA13: 20 F2 E2           JSR   LAB_GVAL          ; get value from line
  4875 00:EA16: 20 F7 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4876 00:EA19: 68                 PLA                     ; get descriptor pointer low byte back
  4877 00:EA1A: 85 B8              STA   ssptr_l           ; set pointer low byte
  4878 00:EA1C: 68                 PLA                     ; get descriptor pointer high byte back
  4879 00:EA1D: 85 B9              STA   ssptr_h           ; set pointer high byte
  4880 00:EA1F: A0 00              LDY   #$00              ; clear index
  4881 00:EA21: B1 B8              LDA   (ssptr_l),Y       ; get length_1 from descriptor
  4882 00:EA23: 18                 CLC                     ; clear carry for add
  4883 00:EA24: 71 AE              ADC   (des_pl),Y        ; add length_2
  4884 00:EA26: 90 05              BCC   LAB_226D          ; branch if no overflow
  4885                        
  4886 00:EA28: A2 1A              LDX   #$1A              ; else set error code $1A ("String too long" error)
  4887 00:EA2A: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  4888                        
  4889                        LAB_226D
  4890 00:EA2D: 20 65 E8           JSR   LAB_209C          ; copy des_pl/h to des_2l/h and make string space A bytes
  4891                                                      ; long
  4892 00:EA30: 20 4A EA           JSR   LAB_228A          ; copy string from descriptor (sdescr) to (Sutill)
  4893 00:EA33: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  4894 00:EA35: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  4895 00:EA37: 20 7B EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4896                                                      ; returns with A = length, ut1_pl = pointer low byte,
  4897                                                      ; ut1_ph = pointer high byte
  4898 00:EA3A: 20 5C EA           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  4899 00:EA3D: A5 B8              LDA   ssptr_l           ;.set descriptor pointer low byte
  4900 00:EA3F: A4 B9              LDY   ssptr_h           ;.set descriptor pointer high byte
  4901 00:EA41: 20 7B EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  4902                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  4903                                                      ; Y=ut1_ph=pointer high byte
  4904 00:EA44: 20 BA E8           JSR   LAB_RTST          ; check for space on descriptor stack then put string
  4905                                                      ; address and length on descriptor stack and update stack
  4906                                                      ; pointers
  4907 00:EA47: 4C 1D E2           JMP   LAB_1ADB          ;.continue evaluation
  4908                        
  4909                        ; copy string from descriptor (sdescr) to (Sutill)
  4910                        
  4911                        LAB_228A
  4912 00:EA4A: A0 00              LDY   #$00              ; clear index
  4913 00:EA4C: B1 B8              LDA   (sdescr),Y        ; get string length
  4914 00:EA4E: 48                 PHA                     ; save on stack
  4915 00:EA4F: C8                 INY                     ; increment index
  4916 00:EA50: B1 B8              LDA   (sdescr),Y        ; get source string pointer low byte
  4917 00:EA52: AA                 TAX                     ; copy to X
  4918 00:EA53: C8                 INY                     ; increment index
  4919 00:EA54: B1 B8              LDA   (sdescr),Y        ; get source string pointer high byte
  4920 00:EA56: A8                 TAY                     ; copy to Y
  4921 00:EA57: 68                 PLA                     ; get length back
  4922                        
  4923                        ; store string A bytes long from YX to (Sutill)
  4924                        
  4925                        LAB_2298
  4926 00:EA58: 86 71              STX   ut1_pl            ; save source string pointer low byte
  4927 00:EA5A: 84 72              STY   ut1_ph            ; save source string pointer high byte
  4928                        
  4929                        ; store string A bytes long from (ut1_pl) to (Sutill)
  4930                        
  4931                        LAB_229C
  4932 00:EA5C: AA                 TAX                     ; copy length to index (don't count with Y)
  4933 00:EA5D: F0 14              BEQ   LAB_22B2          ; branch if = $0 (null string) no need to add zero length
  4934                        
  4935 00:EA5F: A0 00              LDY   #$00              ; zero pointer (copy forward)
  4936                        LAB_22A0
  4937 00:EA61: B1 71              LDA   (ut1_pl),Y        ; get source byte
  4938 00:EA63: 91 83              STA   (Sutill),Y        ; save destination byte
  4939                        
  4940 00:EA65: C8                 INY                     ; increment index
  4941 00:EA66: CA                 DEX                     ; decrement counter
  4942 00:EA67: D0 F8              BNE   LAB_22A0          ; loop while <> 0
  4943                        
  4944 00:EA69: 98                 TYA                     ; restore length from Y
  4945                        LAB_22A9
  4946 00:EA6A: 18                 CLC                     ; clear carry for add
  4947 00:EA6B: 65 83              ADC   Sutill            ; add string utility ptr low byte
  4948 00:EA6D: 85 83              STA   Sutill            ; save string utility ptr low byte
  4949 00:EA6F: 90 02              BCC   LAB_22B2          ; branch if no carry
  4950                        
  4951 00:EA71: E6 84              INC   Sutilh            ; else increment string utility ptr high byte
  4952                        LAB_22B2
  4953 00:EA73: 60                 RTS
  4954                        
  4955                        ; evaluate string
  4956                        
  4957                        LAB_EVST
  4958 00:EA74: 20 F7 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  4959                        
  4960                        ; pop string off descriptor stack, or from top of string space
  4961                        ; returns with A = length, X=pointer low byte, Y=pointer high byte
  4962                        
  4963                        LAB_22B6
  4964 00:EA77: A5 AE              LDA   des_pl            ; get descriptor pointer low byte
  4965 00:EA79: A4 AF              LDY   des_ph            ; get descriptor pointer high byte
  4966                        
  4967                        ; pop (YA) descriptor off stack or from top of string space
  4968                        ; returns with A = length, X=ut1_pl=pointer low byte, Y=ut1_ph=pointer high byte
  4969                        
  4970                        LAB_22BA
  4971 00:EA7B: 85 71              STA   ut1_pl            ; save descriptor pointer low byte
  4972 00:EA7D: 84 72              STY   ut1_ph            ; save descriptor pointer high byte
  4973 00:EA7F: 20 AC EA           JSR   LAB_22EB          ; clean descriptor stack, YA = pointer
  4974 00:EA82: 08                 PHP                     ; save status flags
  4975 00:EA83: A0 00              LDY   #$00              ; clear index
  4976 00:EA85: B1 71              LDA   (ut1_pl),Y        ; get length from string descriptor
  4977 00:EA87: 48                 PHA                     ; put on stack
  4978 00:EA88: C8                 INY                     ; increment index
  4979 00:EA89: B1 71              LDA   (ut1_pl),Y        ; get string pointer low byte from descriptor
  4980 00:EA8B: AA                 TAX                     ; copy to X
  4981 00:EA8C: C8                 INY                     ; increment index
  4982 00:EA8D: B1 71              LDA   (ut1_pl),Y        ; get string pointer high byte from descriptor
  4983 00:EA8F: A8                 TAY                     ; copy to Y
  4984 00:EA90: 68                 PLA                     ; get string length back
  4985 00:EA91: 28                 PLP                     ; restore status
  4986 00:EA92: D0 13              BNE   LAB_22E6          ; branch if pointer <> last_sl,last_sh
  4987                        
  4988 00:EA94: C4 82              CPY   Sstorh            ; compare bottom of string space high byte
  4989 00:EA96: D0 0F              BNE   LAB_22E6          ; branch if <>
  4990                        
  4991 00:EA98: E4 81              CPX   Sstorl            ; else compare bottom of string space low byte
  4992 00:EA9A: D0 0B              BNE   LAB_22E6          ; branch if <>
  4993                        
  4994 00:EA9C: 48                 PHA                     ; save string length
  4995 00:EA9D: 18                 CLC                     ; clear carry for add
  4996 00:EA9E: 65 81              ADC   Sstorl            ; add bottom of string space low byte
  4997 00:EAA0: 85 81              STA   Sstorl            ; save bottom of string space low byte
  4998 00:EAA2: 90 02              BCC   LAB_22E5          ; skip increment if no overflow
  4999                        
  5000 00:EAA4: E6 82              INC   Sstorh            ; increment bottom of string space high byte
  5001                        LAB_22E5
  5002 00:EAA6: 68                 PLA                     ; restore string length
  5003                        LAB_22E6
  5004 00:EAA7: 86 71              STX   ut1_pl            ; save string pointer low byte
  5005 00:EAA9: 84 72              STY   ut1_ph            ; save string pointer high byte
  5006 00:EAAB: 60                 RTS
  5007                        
  5008                        ; clean descriptor stack, YA = pointer
  5009                        ; checks if AY is on the descriptor stack, if so does a stack discard
  5010                        
  5011                        LAB_22EB
  5012 00:EAAC: C4 67              CPY   last_sh           ; compare pointer high byte
  5013 00:EAAE: D0 0C              BNE   LAB_22FB          ; exit if <>
  5014                        
  5015 00:EAB0: C5 66              CMP   last_sl           ; compare pointer low byte
  5016 00:EAB2: D0 08              BNE   LAB_22FB          ; exit if <>
  5017                        
  5018 00:EAB4: 85 65              STA   next_s            ; save descriptor stack pointer
  5019 00:EAB6: E9 03              SBC   #$03              ; -3
  5020 00:EAB8: 85 66              STA   last_sl           ; save low byte -3
  5021 00:EABA: A0 00              LDY   #$00              ; clear high byte
  5022                        LAB_22FB
  5023 00:EABC: 60                 RTS
  5024                        
  5025                        ; perform CHR$()
  5026                        
  5027                        LAB_CHRS
  5028 00:EABD: 20 C8 EB           JSR   LAB_EVBY          ; evaluate byte expression, result in X
  5029 00:EAC0: 8A                 TXA                     ; copy to A
  5030 00:EAC1: 48                 PHA                     ; save character
  5031 00:EAC2: A9 01              LDA   #$01              ; string is single byte
  5032 00:EAC4: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  5033                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5034 00:EAC7: 68                 PLA                     ; get character back
  5035 00:EAC8: A0 00              LDY   #$00              ; clear index
  5036 00:EACA: 91 AD              STA   (str_pl),Y        ; save byte in string (byte IS string!)
  5037 00:EACC: 4C BA E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5038                                                      ; address and length on descriptor stack and update stack
  5039                                                      ; pointers
  5040                        
  5041                        ; perform LEFT$()
  5042                        
  5043                        LAB_LEFT
  5044 00:EACF: 48                 PHA                     ; push byte parameter
  5045 00:EAD0: 20 30 EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5046                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5047 00:EAD3: D1 9E              CMP   (des_2l),Y        ; compare byte parameter with string length
  5048 00:EAD5: 98                 TYA                     ; clear A
  5049 00:EAD6: F0 09              BEQ   LAB_2316          ; go do string copy (branch always)
  5050                        
  5051                        ; perform RIGHT$()
  5052                        
  5053                        LAB_RIGHT
  5054 00:EAD8: 48                 PHA                     ; push byte parameter
  5055 00:EAD9: 20 30 EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5056                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5057 00:EADC: 18                 CLC                     ; clear carry for add-1
  5058 00:EADD: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5059 00:EADF: 49 FF              EOR   #$FF              ; invert it (A=LEN(expression$)-l)
  5060                        
  5061                        LAB_2316
  5062 00:EAE1: 90 04              BCC   LAB_231C          ; branch if string length > byte parameter
  5063                        
  5064 00:EAE3: B1 9E              LDA   (des_2l),Y        ; else make parameter = length
  5065 00:EAE5: AA                 TAX                     ; copy to byte parameter copy
  5066 00:EAE6: 98                 TYA                     ; clear string start offset
  5067                        LAB_231C
  5068 00:EAE7: 48                 PHA                     ; save string start offset
  5069                        LAB_231D
  5070 00:EAE8: 8A                 TXA                     ; copy byte parameter (or string length if <)
  5071                        LAB_231E
  5072 00:EAE9: 48                 PHA                     ; save string length
  5073 00:EAEA: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long A=$AC=length,
  5074                                                      ; X=$AD=Sutill=ptr low byte, Y=$AE=Sutilh=ptr high byte
  5075 00:EAED: A5 9E              LDA   des_2l            ; get descriptor pointer low byte
  5076 00:EAEF: A4 9F              LDY   des_2h            ; get descriptor pointer high byte
  5077 00:EAF1: 20 7B EA           JSR   LAB_22BA          ; pop (YA) descriptor off stack or from top of string space
  5078                                                      ; returns with A = length, X=ut1_pl=pointer low byte,
  5079                                                      ; Y=ut1_ph=pointer high byte
  5080 00:EAF4: 68                 PLA                     ; get string length back
  5081 00:EAF5: A8                 TAY                     ; copy length to Y
  5082 00:EAF6: 68                 PLA                     ; get string start offset back
  5083 00:EAF7: 18                 CLC                     ; clear carry for add
  5084 00:EAF8: 65 71              ADC   ut1_pl            ; add start offset to string start pointer low byte
  5085 00:EAFA: 85 71              STA   ut1_pl            ; save string start pointer low byte
  5086 00:EAFC: 90 02              BCC   LAB_2335          ; branch if no overflow
  5087                        
  5088 00:EAFE: E6 72              INC   ut1_ph            ; else increment string start pointer high byte
  5089                        LAB_2335
  5090 00:EB00: 98                 TYA                     ; copy length to A
  5091 00:EB01: 20 5C EA           JSR   LAB_229C          ; store string A bytes long from (ut1_pl) to (Sutill)
  5092 00:EB04: 4C BA E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5093                                                      ; address and length on descriptor stack and update stack
  5094                                                      ; pointers
  5095                        
  5096                        ; perform MID$()
  5097                        
  5098                        LAB_MIDS
  5099 00:EB07: 48                 PHA                     ; push byte parameter
  5100 00:EB08: A9 FF              LDA   #$FF              ; set default length = 255
  5101 00:EB0A: 85 AF              STA   mids_l            ; save default length
  5102 00:EB0C: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5103 00:EB0F: C9 29              CMP   #')'              ; compare with ")"
  5104 00:EB11: F0 06              BEQ   LAB_2358          ; branch if = ")" (skip second byte get)
  5105                        
  5106 00:EB13: 20 23 E3           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5107 00:EB16: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter (use copy in mids_l)
  5108                        LAB_2358
  5109 00:EB19: 20 30 EB           JSR   LAB_236F          ; pull string data and byte parameter from stack
  5110                                                      ; return pointer in des_2l/h, byte in A (and X), Y=0
  5111 00:EB1C: CA                 DEX                     ; decrement start index
  5112 00:EB1D: 8A                 TXA                     ; copy to A
  5113 00:EB1E: 48                 PHA                     ; save string start offset
  5114 00:EB1F: 18                 CLC                     ; clear carry for sub-1
  5115 00:EB20: A2 00              LDX   #$00              ; clear output string length
  5116 00:EB22: F1 9E              SBC   (des_2l),Y        ; subtract string length
  5117 00:EB24: B0 C2              BCS   LAB_231D          ; if start>string length go do null string
  5118                        
  5119 00:EB26: 49 FF              EOR   #$FF              ; complement -length
  5120 00:EB28: C5 AF              CMP   mids_l            ; compare byte parameter
  5121 00:EB2A: 90 BD              BCC   LAB_231E          ; if length>remaining string go do RIGHT$
  5122                        
  5123 00:EB2C: A5 AF              LDA   mids_l            ; get length byte
  5124 00:EB2E: B0 B9              BCS   LAB_231E          ; go do string copy (branch always)
  5125                        
  5126                        ; pull string data and byte parameter from stack
  5127                        ; return pointer in des_2l/h, byte in A (and X), Y=0
  5128                        
  5129                        LAB_236F
  5130 00:EB30: 20 14 E3           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  5131 00:EB33: 68                 PLA                     ; pull return address low byte (return address)
  5132 00:EB34: 85 A2              STA   Fnxjpl            ; save functions jump vector low byte
  5133 00:EB36: 68                 PLA                     ; pull return address high byte (return address)
  5134 00:EB37: 85 A3              STA   Fnxjph            ; save functions jump vector high byte
  5135 00:EB39: 68                 PLA                     ; pull byte parameter
  5136 00:EB3A: AA                 TAX                     ; copy byte parameter to X
  5137 00:EB3B: 68                 PLA                     ; pull string pointer low byte
  5138 00:EB3C: 85 9E              STA   des_2l            ; save it
  5139 00:EB3E: 68                 PLA                     ; pull string pointer high byte
  5140 00:EB3F: 85 9F              STA   des_2h            ; save it
  5141 00:EB41: A0 00              LDY   #$00              ; clear index
  5142 00:EB43: 8A                 TXA                     ; copy byte parameter
  5143 00:EB44: F0 79              BEQ   LAB_23A8          ; if null do function call error then warm start
  5144                        
  5145 00:EB46: E6 A2              INC   Fnxjpl            ; increment function jump vector low byte
  5146                                                      ; (JSR pushes return addr-1. this is all very nice
  5147                                                      ; but will go tits up if either call is on a page
  5148                                                      ; boundary!)
  5149 00:EB48: 6C A2 00           JMP   (Fnxjpl)          ; in effect, RTS
  5150                        
  5151                        ; perform LCASE$()
  5152                        
  5153                        LAB_LCASE
  5154 00:EB4B: 20 74 EA           JSR   LAB_EVST          ; evaluate string
  5155 00:EB4E: 85 AC              STA   str_ln            ; set string length
  5156 00:EB50: A8                 TAY                     ; copy length to Y
  5157 00:EB51: F0 38              BEQ   NoString          ; branch if null string
  5158                        
  5159 00:EB53: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5160                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5161 00:EB56: 86 AD              STX   str_pl            ; save string pointer low byte
  5162 00:EB58: 84 AE              STY   str_ph            ; save string pointer high byte
  5163 00:EB5A: A8                 TAY                     ; get string length back
  5164                        
  5165                        LC_loop
  5166 00:EB5B: 88                 DEY                     ; decrement index
  5167 00:EB5C: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5168 00:EB5E: 20 55 E5           JSR   LAB_1D82          ; is character "A" to "Z"
  5169 00:EB61: 90 02              BCC   NoUcase           ; branch if not upper case alpha
  5170                        
  5171 00:EB63: 09 20              ORA   #$20              ; convert upper to lower case
  5172                        NoUcase
  5173 00:EB65: 91 83              STA   (Sutill),Y        ; save byte back to string
  5174 00:EB67: 98                 TYA                     ; test index
  5175 00:EB68: D0 F1              BNE   LC_loop           ; loop if not all done
  5176                        
  5177 00:EB6A: F0 1F              BEQ   NoString          ; tidy up and exit, branch always
  5178                        
  5179                        ; perform UCASE$()
  5180                        
  5181                        LAB_UCASE
  5182 00:EB6C: 20 74 EA           JSR   LAB_EVST          ; evaluate string
  5183 00:EB6F: 85 AC              STA   str_ln            ; set string length
  5184 00:EB71: A8                 TAY                     ; copy length to Y
  5185 00:EB72: F0 17              BEQ   NoString          ; branch if null string
  5186                        
  5187 00:EB74: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long A=length,
  5188                                                      ; X=Sutill=ptr low byte, Y=Sutilh=ptr high byte
  5189 00:EB77: 86 AD              STX   str_pl            ; save string pointer low byte
  5190 00:EB79: 84 AE              STY   str_ph            ; save string pointer high byte
  5191 00:EB7B: A8                 TAY                     ; get string length back
  5192                        
  5193                        UC_loop
  5194 00:EB7C: 88                 DEY                     ; decrement index
  5195 00:EB7D: B1 71              LDA   (ut1_pl),Y        ; get byte from string
  5196 00:EB7F: 20 51 E5           JSR   LAB_CASC          ; is character "a" to "z" (or "A" to "Z")
  5197 00:EB82: 90 02              BCC   NoLcase           ; branch if not alpha
  5198                        
  5199 00:EB84: 29 DF              AND   #$DF              ; convert lower to upper case
  5200                        NoLcase
  5201 00:EB86: 91 83              STA   (Sutill),Y        ; save byte back to string
  5202 00:EB88: 98                 TYA                     ; test index
  5203 00:EB89: D0 F1              BNE   UC_loop           ; loop if not all done
  5204                        
  5205                        NoString
  5206 00:EB8B: 4C BA E8           JMP   LAB_RTST          ; check for space on descriptor stack then put string
  5207                                                      ; address and length on descriptor stack and update stack
  5208                                                      ; pointers
  5209                        
  5210                        ; perform SADD()
  5211                        
  5212                        LAB_SADD
  5213 00:EB8E: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5214 00:EB91: 20 DD E4           JSR   LAB_GVAR          ; get var address
  5215                        
  5216 00:EB94: 20 14 E3           JSR   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  5217 00:EB97: 20 F7 E1           JSR   LAB_CTST          ; check if source is string, else do type mismatch
  5218                        
  5219 00:EB9A: A0 02              LDY   #$02              ; index to string pointer high byte
  5220 00:EB9C: B1 95              LDA   (Cvaral),Y        ; get string pointer high byte
  5221 00:EB9E: AA                 TAX                     ; copy string pointer high byte to X
  5222 00:EB9F: 88                 DEY                     ; index to string pointer low byte
  5223 00:EBA0: B1 95              LDA   (Cvaral),Y        ; get string pointer low byte
  5224 00:EBA2: A8                 TAY                     ; copy string pointer low byte to Y
  5225 00:EBA3: 8A                 TXA                     ; copy string pointer high byte to A
  5226 00:EBA4: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5227                        
  5228                        ; perform LEN()
  5229                        
  5230                        LAB_LENS
  5231 00:EBA7: 20 AD EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5232 00:EBAA: 4C 99 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5233                        
  5234                        ; evaluate string, get length in Y
  5235                        
  5236                        LAB_ESGL
  5237 00:EBAD: 20 74 EA           JSR   LAB_EVST          ; evaluate string
  5238 00:EBB0: A8                 TAY                     ; copy length to Y
  5239 00:EBB1: 60                 RTS
  5240                        
  5241                        ; perform ASC()
  5242                        
  5243                        LAB_ASC
  5244 00:EBB2: 20 AD EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5245 00:EBB5: F0 08              BEQ   LAB_23A8          ; if null do function call error then warm start
  5246                        
  5247 00:EBB7: A0 00              LDY   #$00              ; set index to first character
  5248 00:EBB9: B1 71              LDA   (ut1_pl),Y        ; get byte
  5249 00:EBBB: A8                 TAY                     ; copy to Y
  5250 00:EBBC: 4C 99 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5251                        
  5252                        ; do function call error then warm start
  5253                        
  5254                        LAB_23A8
  5255 00:EBBF: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start
  5256                        
  5257                        ; scan and get byte parameter
  5258                        
  5259                        LAB_SGBY
  5260 00:EBC2: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  5261                        
  5262                        ; get byte parameter
  5263                        
  5264                        LAB_GTBY
  5265 00:EBC5: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5266                                                      ; else do type mismatch
  5267                        
  5268                        ; evaluate byte expression, result in X
  5269                        
  5270                        LAB_EVBY
  5271 00:EBC8: 20 D5 E5           JSR   LAB_EVPI          ; evaluate integer expression (no check)
  5272                        
  5273 00:EBCB: A4 AE              LDY   FAC1_2            ; get FAC1 mantissa2
  5274 00:EBCD: D0 F0              BNE   LAB_23A8          ; if top byte <> 0 do function call error then warm start
  5275                        
  5276 00:EBCF: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5277 00:EBD1: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5278                        
  5279                        ; perform VAL()
  5280                        
  5281                        LAB_VAL
  5282 00:EBD4: 20 AD EB           JSR   LAB_ESGL          ; evaluate string, get length in A (and Y)
  5283 00:EBD7: D0 03              BNE   LAB_23C5          ; branch if not null string
  5284                        
  5285                                                      ; string was null so set result = $00
  5286 00:EBD9: 4C 82 ED           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5287                        
  5288                        LAB_23C5
  5289                        ; *** begin patch  2.22p5.7  VAL() may cause string variables to be trashed
  5290                        ; *** replace     
  5291                        ;      LDX   Bpntrl            ; get BASIC execute pointer low byte
  5292                        ;      LDY   Bpntrh            ; get BASIC execute pointer high byte
  5293                        ;      STX   Btmpl             ; save BASIC execute pointer low byte
  5294                        ;      STY   Btmph             ; save BASIC execute pointer high byte
  5295                        ;      LDX   ut1_pl            ; get string pointer low byte
  5296                        ;      STX   Bpntrl            ; save as BASIC execute pointer low byte
  5297                        ;      CLC                     ; clear carry
  5298                        ;      ADC   ut1_pl            ; add string length
  5299                        ;      STA   ut2_pl            ; save string end low byte
  5300                        ;      LDA   ut1_ph            ; get string pointer high byte
  5301                        ;      STA   Bpntrh            ; save as BASIC execute pointer high byte
  5302                        ;      ADC   #$00              ; add carry to high byte
  5303                        ;      STA   ut2_ph            ; save string end high byte
  5304                        ;      LDY   #$00              ; set index to $00
  5305                        ;      LDA   (ut2_pl),Y        ; get string end +1 byte
  5306                        ;      PHA                     ; push it
  5307                        ;      TYA                     ; clear A
  5308                        ;      STA   (ut2_pl),Y        ; terminate string with $00
  5309                        ;      JSR   LAB_GBYT          ; scan memory
  5310                        ;      JSR   LAB_2887          ; get FAC1 from string
  5311                        ;      PLA                     ; restore string end +1 byte
  5312                        ;      LDY   #$00              ; set index to zero
  5313                        ;      STA   (ut2_pl),Y        ; put string end byte back
  5314                        ; *** with
  5315 00:EBDC: 48                 PHA                     ; save length
  5316 00:EBDD: C8                 INY                     ; string length +1
  5317 00:EBDE: 98                 TYA
  5318 00:EBDF: 20 6D E8           JSR   LAB_MSSP          ; allocate temp string +1 bytes long
  5319 00:EBE2: 68                 PLA                     ; get length back
  5320 00:EBE3: 20 5C EA           JSR   LAB_229C          ; copy string (ut1_pl) -> (Sutill) for A bytes
  5321 00:EBE6: A9 00              LDA   #0                ; add delimiter to end of string
  5322 00:EBE8: A8                 TAY
  5323 00:EBE9: 91 83              STA   (Sutill),Y
  5324 00:EBEB: A6 C3              LDX   Bpntrl            ; save BASIC execute pointer low byte
  5325 00:EBED: A4 C4              LDY   Bpntrh
  5326 00:EBEF: 86 BA              STX   Btmpl
  5327 00:EBF1: 84 BB              STY   Btmph
  5328 00:EBF3: A6 AD              LDX   str_pl            ; point to temporary string
  5329 00:EBF5: A4 AE              LDY   str_ph
  5330 00:EBF7: 86 C3              STX   Bpntrl
  5331 00:EBF9: 84 C4              STY   Bpntrh
  5332 00:EBFB: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5333 00:EBFE: 20 D8 F0           JSR   LAB_2887          ; get FAC1 from string
  5334                        ; *** end patch    2.22p5.7  VAL() may cause string variables to be trashed
  5335                        
  5336                        ; restore BASIC execute pointer from temp (Btmpl/Btmph)
  5337                        
  5338                        LAB_23F3
  5339 00:EC01: A6 BA              LDX   Btmpl             ; get BASIC execute pointer low byte back
  5340 00:EC03: A4 BB              LDY   Btmph             ; get BASIC execute pointer high byte back
  5341 00:EC05: 86 C3              STX   Bpntrl            ; save BASIC execute pointer low byte
  5342 00:EC07: 84 C4              STY   Bpntrh            ; save BASIC execute pointer high byte
  5343 00:EC09: 60                 RTS
  5344                        
  5345                        ; get two parameters for POKE or WAIT
  5346                        
  5347                        LAB_GADB
  5348 00:EC0A: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5349                                                      ; else do type mismatch
  5350 00:EC0D: 20 23 EC           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5351                        
  5352                        ; scan for "," and get byte, else do Syntax error then warm start
  5353                        
  5354                        LAB_SCGB
  5355 00:EC10: 20 23 E3           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5356 00:EC13: A5 12              LDA   Itemph            ; save temporary integer high byte
  5357 00:EC15: 48                 PHA                     ; on stack
  5358 00:EC16: A5 11              LDA   Itempl            ; save temporary integer low byte
  5359 00:EC18: 48                 PHA                     ; on stack
  5360 00:EC19: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter
  5361 00:EC1C: 68                 PLA                     ; pull low byte
  5362 00:EC1D: 85 11              STA   Itempl            ; restore temporary integer low byte
  5363 00:EC1F: 68                 PLA                     ; pull high byte
  5364 00:EC20: 85 12              STA   Itemph            ; restore temporary integer high byte
  5365 00:EC22: 60                 RTS
  5366                        
  5367                        ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
  5368                        ; -ve and converts it into a right truncated integer in Itempl and Itemph
  5369                        
  5370                        ; save unsigned 16 bit integer part of FAC1 in temporary integer
  5371                        
  5372                        LAB_F2FX
  5373 00:EC23: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5374 00:EC25: C9 98              CMP   #$98              ; compare with exponent = 2^24
  5375 00:EC27: B0 96              BCS   LAB_23A8          ; if >= do function call error then warm start
  5376                        
  5377                        LAB_F2FU
  5378 00:EC29: 20 82 F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  5379 00:EC2C: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5380 00:EC2E: A4 AF              LDY   FAC1_3            ; get FAC1 mantissa3
  5381 00:EC30: 84 11              STY   Itempl            ; save temporary integer low byte
  5382 00:EC32: 85 12              STA   Itemph            ; save temporary integer high byte
  5383 00:EC34: 60                 RTS
  5384                        
  5385                        ; perform PEEK()
  5386                        
  5387                        LAB_PEEK
  5388 00:EC35: 20 23 EC           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5389 00:EC38: A2 00              LDX   #$00              ; clear index
  5390 00:EC3A: A1 11              LDA   (Itempl,X)        ; get byte via temporary integer (addr)
  5391 00:EC3C: A8                 TAY                     ; copy byte to Y
  5392 00:EC3D: 4C 99 E7           JMP   LAB_1FD0          ; convert Y to byte in FAC1 and return
  5393                        
  5394                        ; perform POKE
  5395                        
  5396                        LAB_POKE
  5397 00:EC40: 20 0A EC           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5398 00:EC43: 8A                 TXA                     ; copy byte argument to A
  5399 00:EC44: A2 00              LDX   #$00              ; clear index
  5400 00:EC46: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  5401 00:EC48: 60                 RTS
  5402                        
  5403                        ; perform DEEK()
  5404                        
  5405                        LAB_DEEK
  5406 00:EC49: 20 23 EC           JSR   LAB_F2FX          ; save integer part of FAC1 in temporary integer
  5407 00:EC4C: A2 00              LDX   #$00              ; clear index
  5408 00:EC4E: A1 11              LDA   (Itempl,X)        ; PEEK low byte
  5409 00:EC50: A8                 TAY                     ; copy to Y
  5410 00:EC51: E6 11              INC   Itempl            ; increment pointer low byte
  5411 00:EC53: D0 02              BNE   Deekh             ; skip high increment if no rollover
  5412                        
  5413 00:EC55: E6 12              INC   Itemph            ; increment pointer high byte
  5414                        Deekh
  5415 00:EC57: A1 11              LDA   (Itempl,X)        ; PEEK high byte
  5416 00:EC59: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  5417                        
  5418                        ; perform DOKE
  5419                        
  5420                        LAB_DOKE
  5421 00:EC5C: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5422                                                      ; else do type mismatch
  5423 00:EC5F: 20 23 EC           JSR   LAB_F2FX          ; convert floating-to-fixed
  5424                        
  5425 00:EC62: 84 97              STY   Frnxtl            ; save pointer low byte (float to fixed returns word in AY)
  5426 00:EC64: 85 98              STA   Frnxth            ; save pointer high byte
  5427                        
  5428 00:EC66: 20 23 E3           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5429 00:EC69: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5430                                                      ; else do type mismatch
  5431 00:EC6C: 20 23 EC           JSR   LAB_F2FX          ; convert floating-to-fixed
  5432                        
  5433 00:EC6F: 98                 TYA                     ; copy value low byte (float to fixed returns word in AY)
  5434 00:EC70: A2 00              LDX   #$00              ; clear index
  5435 00:EC72: 81 97              STA   (Frnxtl,X)        ; POKE low byte
  5436 00:EC74: E6 97              INC   Frnxtl            ; increment pointer low byte
  5437 00:EC76: D0 02              BNE   Dokeh             ; skip high increment if no rollover
  5438                        
  5439 00:EC78: E6 98              INC   Frnxth            ; increment pointer high byte
  5440                        Dokeh
  5441 00:EC7A: A5 12              LDA   Itemph            ; get value high byte
  5442 00:EC7C: 81 97              STA   (Frnxtl,X)        ; POKE high byte
  5443 00:EC7E: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5444                        
  5445                        ; perform SWAP
  5446                        
  5447                        LAB_SWAP
  5448 00:EC81: 20 DD E4           JSR   LAB_GVAR          ; get var1 address
  5449 00:EC84: 85 97              STA   Lvarpl            ; save var1 address low byte
  5450 00:EC86: 84 98              STY   Lvarph            ; save var1 address high byte
  5451 00:EC88: A5 5F              LDA   Dtypef            ; get data type flag, $FF=string, $00=numeric
  5452 00:EC8A: 48                 PHA                     ; save data type flag
  5453                        
  5454 00:EC8B: 20 23 E3           JSR   LAB_1C01          ; scan for "," , else do syntax error then warm start
  5455 00:EC8E: 20 DD E4           JSR   LAB_GVAR          ; get var2 address (pointer in Cvaral/h)
  5456 00:EC91: 68                 PLA                     ; pull var1 data type flag
  5457 00:EC92: 45 5F              EOR   Dtypef            ; compare with var2 data type
  5458 00:EC94: 10 10              BPL   SwapErr           ; exit if not both the same type
  5459                        
  5460 00:EC96: A0 03              LDY   #$03              ; four bytes to swap (either value or descriptor+1)
  5461                        SwapLp
  5462 00:EC98: B1 97              LDA   (Lvarpl),Y        ; get byte from var1
  5463 00:EC9A: AA                 TAX                     ; save var1 byte
  5464 00:EC9B: B1 95              LDA   (Cvaral),Y        ; get byte from var2
  5465 00:EC9D: 91 97              STA   (Lvarpl),Y        ; save byte to var1
  5466 00:EC9F: 8A                 TXA                     ; restore var1 byte
  5467 00:ECA0: 91 95              STA   (Cvaral),Y        ; save byte to var2
  5468 00:ECA2: 88                 DEY                     ; decrement index
  5469 00:ECA3: 10 F3              BPL   SwapLp            ; loop until done
  5470                        
  5471 00:ECA5: 60                 RTS
  5472                        
  5473                        SwapErr
  5474 00:ECA6: 4C 01 E2           JMP   LAB_1ABC          ; do "Type mismatch" error then warm start
  5475                        
  5476                        ; perform CALL
  5477                        
  5478                        LAB_CALL
  5479 00:ECA9: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  5480                                                      ; else do type mismatch
  5481 00:ECAC: 20 23 EC           JSR   LAB_F2FX          ; convert floating-to-fixed
  5482 00:ECAF: A9 EC              LDA   #>CallExit        ; set return address high byte
  5483 00:ECB1: 48                 PHA                     ; put on stack
  5484 00:ECB2: A9 B7              LDA   #<CallExit-1      ; set return address low byte
  5485 00:ECB4: 48                 PHA                     ; put on stack
  5486 00:ECB5: 6C 11 00           JMP   (Itempl)          ; do indirect jump to user routine
  5487                        
  5488                        ; if the called routine exits correctly then it will return to here. this will then get
  5489                        ; the next byte for the interpreter and return
  5490                        
  5491                        CallExit
  5492 00:ECB8: 4C C2 00           JMP   LAB_GBYT          ; scan memory and return
  5493                        
  5494                        ; perform WAIT
  5495                        
  5496                        LAB_WAIT
  5497 00:ECBB: 20 0A EC           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  5498 00:ECBE: 86 97              STX   Frnxtl            ; save byte
  5499 00:ECC0: A2 00              LDX   #$00              ; clear mask
  5500 00:ECC2: 20 C2 00           JSR   LAB_GBYT          ; scan memory
  5501 00:ECC5: F0 03              BEQ   LAB_2441          ; skip if no third argument
  5502                        
  5503 00:ECC7: 20 10 EC           JSR   LAB_SCGB          ; scan for "," and get byte, else SN error then warm start
  5504                        LAB_2441
  5505 00:ECCA: 86 98              STX   Frnxth            ; save EOR argument
  5506                        LAB_2445
  5507 00:ECCC: B1 11              LDA   (Itempl),Y        ; get byte via temporary integer (addr)
  5508 00:ECCE: 45 98              EOR   Frnxth            ; EOR with second argument (mask)
  5509 00:ECD0: 25 97              AND   Frnxtl            ; AND with first argument (byte)
  5510 00:ECD2: F0 F8              BEQ   LAB_2445          ; loop if result is zero
  5511                        
  5512                        LAB_244D
  5513 00:ECD4: 60                 RTS
  5514                        
  5515                        ; perform subtraction, FAC1 from (AY)
  5516                        
  5517                        LAB_2455
  5518 00:ECD5: 20 BD EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5519                        
  5520                        ; perform subtraction, FAC1 from FAC2
  5521                        
  5522                        LAB_SUBTRACT
  5523 00:ECD8: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5524 00:ECDA: 49 FF              EOR   #$FF              ; complement it
  5525 00:ECDC: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5526 00:ECDE: 45 B7              EOR   FAC2_s            ; EOR with FAC2 sign (b7)
  5527 00:ECE0: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5528 00:ECE2: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5529 00:ECE4: 4C F3 EC           JMP   LAB_ADD           ; go add FAC2 to FAC1
  5530                        
  5531                        ; perform addition
  5532                        
  5533                        LAB_2467
  5534 00:ECE7: 20 0C EE           JSR   LAB_257B          ; shift FACX A times right (>8 shifts)
  5535 00:ECEA: 90 4D              BCC   LAB_24A8          ;.go subtract mantissas
  5536                        
  5537                        ; add 0.5 to FAC1
  5538                        
  5539                        LAB_244E
  5540 00:ECEC: A9 1E              LDA   #<LAB_2A96        ; set 0.5 pointer low byte
  5541 00:ECEE: A0 F9              LDY   #>LAB_2A96        ; set 0.5 pointer high byte
  5542                        
  5543                        ; add (AY) to FAC1
  5544                        
  5545                        LAB_246C
  5546 00:ECF0: 20 BD EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5547                        
  5548                        ; add FAC2 to FAC1
  5549                        
  5550                        LAB_ADD
  5551 00:ECF3: D0 10              BNE   LAB_2474          ; branch if FAC1 was not zero
  5552                        
  5553                        ; copy FAC2 to FAC1
  5554                        
  5555                        LAB_279B
  5556 00:ECF5: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  5557                        
  5558                        ; save FAC1 sign and copy ABS(FAC2) to FAC1
  5559                        
  5560                        LAB_279D
  5561 00:ECF7: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5562 00:ECF9: A2 04              LDX   #$04              ; 4 bytes to copy
  5563                        LAB_27A1
  5564 00:ECFB: B5 B2              LDA   FAC1_o,X          ; get byte from FAC2,X
  5565 00:ECFD: 95 AB              STA   FAC1_e-1,X        ; save byte at FAC1,X
  5566 00:ECFF: CA                 DEX                     ; decrement count
  5567 00:ED00: D0 F9              BNE   LAB_27A1          ; loop if not all done
  5568                        
  5569 00:ED02: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  5570 00:ED04: 60                 RTS
  5571                        
  5572                                                      ; FAC1 is non zero
  5573                        LAB_2474
  5574 00:ED05: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5575 00:ED07: 86 A3              STX   FAC2_r            ; save as FAC2 rounding byte
  5576 00:ED09: A2 B3              LDX   #FAC2_e           ; set index to FAC2 exponent addr
  5577 00:ED0B: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5578                        LAB_247C
  5579 00:ED0D: A8                 TAY                     ; copy exponent
  5580 00:ED0E: F0 C4              BEQ   LAB_244D          ; exit if zero
  5581                        
  5582 00:ED10: 38                 SEC                     ; set carry for subtract
  5583 00:ED11: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5584 00:ED13: F0 24              BEQ   LAB_24A8          ; branch if = (go add mantissa)
  5585                        
  5586 00:ED15: 90 12              BCC   LAB_2498          ; branch if <
  5587                        
  5588                                                      ; FAC2>FAC1
  5589 00:ED17: 84 AC              STY   FAC1_e            ; save FAC1 exponent
  5590 00:ED19: A4 B7              LDY   FAC2_s            ; get FAC2 sign (b7)
  5591 00:ED1B: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  5592 00:ED1D: 49 FF              EOR   #$FF              ; complement A
  5593 00:ED1F: 69 00              ADC   #$00              ; +1 (twos complement, carry is set)
  5594 00:ED21: A0 00              LDY   #$00              ; clear Y
  5595 00:ED23: 84 A3              STY   FAC2_r            ; clear FAC2 rounding byte
  5596 00:ED25: A2 AC              LDX   #FAC1_e           ; set index to FAC1 exponent addr
  5597 00:ED27: D0 04              BNE   LAB_249C          ; branch always
  5598                        
  5599                        LAB_2498
  5600 00:ED29: A0 00              LDY   #$00              ; clear Y
  5601 00:ED2B: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5602                        LAB_249C
  5603 00:ED2D: C9 F9              CMP   #$F9              ; compare exponent diff with $F9
  5604 00:ED2F: 30 B6              BMI   LAB_2467          ; branch if range $79-$F8
  5605                        
  5606 00:ED31: A8                 TAY                     ; copy exponent difference to Y
  5607 00:ED32: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5608 00:ED34: 56 01              LSR   PLUS_1,X          ; shift FAC? mantissa1
  5609 00:ED36: 20 23 EE           JSR   LAB_2592          ; shift FACX Y times right
  5610                        
  5611                                                      ; exponents are equal now do mantissa subtract
  5612                        LAB_24A8
  5613 00:ED39: 24 B8              BIT   FAC_sc            ; test sign compare (FAC1 EOR FAC2)
  5614 00:ED3B: 10 4C              BPL   LAB_24F8          ; if = add FAC2 mantissa to FAC1 mantissa and return
  5615                        
  5616 00:ED3D: A0 AC              LDY   #FAC1_e           ; set index to FAC1 exponent addr
  5617 00:ED3F: E0 B3              CPX   #FAC2_e           ; compare X to FAC2 exponent addr
  5618 00:ED41: F0 02              BEQ   LAB_24B4          ; branch if =
  5619                        
  5620 00:ED43: A0 B3              LDY   #FAC2_e           ; else set index to FAC2 exponent addr
  5621                        
  5622                                                      ; subtract smaller from bigger (take sign of bigger)
  5623                        LAB_24B4
  5624 00:ED45: 38                 SEC                     ; set carry for subtract
  5625 00:ED46: 49 FF              EOR   #$FF              ; ones complement A
  5626 00:ED48: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5627 00:ED4A: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5628 00:ED4C: B9 03 00           LDA   PLUS_3,Y          ; get FACY mantissa3
  5629 00:ED4F: F5 03              SBC   PLUS_3,X          ; subtract FACX mantissa3
  5630 00:ED51: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5631 00:ED53: B9 02 00           LDA   PLUS_2,Y          ; get FACY mantissa2
  5632 00:ED56: F5 02              SBC   PLUS_2,X          ; subtract FACX mantissa2
  5633 00:ED58: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5634 00:ED5A: B9 01 00           LDA   PLUS_1,Y          ; get FACY mantissa1
  5635 00:ED5D: F5 01              SBC   PLUS_1,X          ; subtract FACX mantissa1
  5636 00:ED5F: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5637                        
  5638                        ; do ABS and normalise FAC1
  5639                        
  5640                        LAB_24D0
  5641 00:ED61: B0 03              BCS   LAB_24D5          ; branch if number is +ve
  5642                        
  5643 00:ED63: 20 C8 ED           JSR   LAB_2537          ; negate FAC1
  5644                        
  5645                        ; normalise FAC1
  5646                        
  5647                        LAB_24D5
  5648 00:ED66: A0 00              LDY   #$00              ; clear Y
  5649 00:ED68: 98                 TYA                     ; clear A
  5650 00:ED69: 18                 CLC                     ; clear carry for add
  5651                        LAB_24D9
  5652 00:ED6A: A6 AD              LDX   FAC1_1            ; get FAC1 mantissa1
  5653 00:ED6C: D0 3E              BNE   LAB_251B          ; if not zero normalise FAC1
  5654                        
  5655 00:ED6E: A6 AE              LDX   FAC1_2            ; get FAC1 mantissa2
  5656 00:ED70: 86 AD              STX   FAC1_1            ; save FAC1 mantissa1
  5657 00:ED72: A6 AF              LDX   FAC1_3            ; get FAC1 mantissa3
  5658 00:ED74: 86 AE              STX   FAC1_2            ; save FAC1 mantissa2
  5659 00:ED76: A6 B9              LDX   FAC1_r            ; get FAC1 rounding byte
  5660 00:ED78: 86 AF              STX   FAC1_3            ; save FAC1 mantissa3
  5661 00:ED7A: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  5662 00:ED7C: 69 08              ADC   #$08              ; add x to exponent offset
  5663 00:ED7E: C9 18              CMP   #$18              ; compare with $18 (max offset, all bits would be =0)
  5664 00:ED80: D0 E8              BNE   LAB_24D9          ; loop if not max
  5665                        
  5666                        ; clear FAC1 exponent and sign
  5667                        
  5668                        LAB_24F1
  5669 00:ED82: A9 00              LDA   #$00              ; clear A
  5670                        LAB_24F3
  5671 00:ED84: 85 AC              STA   FAC1_e            ; set FAC1 exponent
  5672                        
  5673                        ; save FAC1 sign
  5674                        
  5675                        LAB_24F5
  5676 00:ED86: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5677 00:ED88: 60                 RTS
  5678                        
  5679                        ; add FAC2 mantissa to FAC1 mantissa
  5680                        
  5681                        LAB_24F8
  5682 00:ED89: 65 A3              ADC   FAC2_r            ; add FAC2 rounding byte
  5683 00:ED8B: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5684 00:ED8D: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5685 00:ED8F: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5686 00:ED91: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5687 00:ED93: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5688 00:ED95: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5689 00:ED97: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5690 00:ED99: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5691 00:ED9B: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5692 00:ED9D: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5693 00:ED9F: B0 1A              BCS   LAB_252A          ; if carry then normalise FAC1 for C=1
  5694                        
  5695 00:EDA1: 60                 RTS                     ; else just exit
  5696                        
  5697                        LAB_2511
  5698 00:EDA2: 69 01              ADC   #$01              ; add 1 to exponent offset
  5699 00:EDA4: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  5700 00:EDA6: 26 AF              ROL   FAC1_3            ; shift FAC1 mantissa3
  5701 00:EDA8: 26 AE              ROL   FAC1_2            ; shift FAC1 mantissa2
  5702 00:EDAA: 26 AD              ROL   FAC1_1            ; shift FAC1 mantissa1
  5703                        
  5704                        ; normalise FAC1
  5705                        
  5706                        LAB_251B
  5707 00:EDAC: 10 F4              BPL   LAB_2511          ; loop if not normalised
  5708                        
  5709 00:EDAE: 38                 SEC                     ; set carry for subtract
  5710 00:EDAF: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent
  5711 00:EDB1: B0 CF              BCS   LAB_24F1          ; branch if underflow (set result = $0)
  5712                        
  5713 00:EDB3: 49 FF              EOR   #$FF              ; complement exponent
  5714 00:EDB5: 69 01              ADC   #$01              ; +1 (twos complement)
  5715 00:EDB7: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5716                        
  5717                        ; test and normalise FAC1 for C=0/1
  5718                        
  5719                        LAB_2528
  5720 00:EDB9: 90 0C              BCC   LAB_2536          ; exit if no overflow
  5721                        
  5722                        ; normalise FAC1 for C=1
  5723                        
  5724                        LAB_252A
  5725 00:EDBB: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  5726 00:EDBD: F0 36              BEQ   LAB_2564          ; if zero do overflow error and warm start
  5727                        
  5728 00:EDBF: 66 AD              ROR   FAC1_1            ; shift FAC1 mantissa1
  5729 00:EDC1: 66 AE              ROR   FAC1_2            ; shift FAC1 mantissa2
  5730 00:EDC3: 66 AF              ROR   FAC1_3            ; shift FAC1 mantissa3
  5731 00:EDC5: 66 B9              ROR   FAC1_r            ; shift FAC1 rounding byte
  5732                        LAB_2536
  5733 00:EDC7: 60                 RTS
  5734                        
  5735                        ; negate FAC1
  5736                        
  5737                        LAB_2537
  5738 00:EDC8: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5739 00:EDCA: 49 FF              EOR   #$FF              ; complement it
  5740 00:EDCC: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5741                        
  5742                        ; twos complement FAC1 mantissa
  5743                        
  5744                        LAB_253D
  5745 00:EDCE: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5746 00:EDD0: 49 FF              EOR   #$FF              ; complement it
  5747 00:EDD2: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  5748 00:EDD4: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5749 00:EDD6: 49 FF              EOR   #$FF              ; complement it
  5750 00:EDD8: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  5751 00:EDDA: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5752 00:EDDC: 49 FF              EOR   #$FF              ; complement it
  5753 00:EDDE: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  5754 00:EDE0: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5755 00:EDE2: 49 FF              EOR   #$FF              ; complement it
  5756 00:EDE4: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  5757 00:EDE6: E6 B9              INC   FAC1_r            ; increment FAC1 rounding byte
  5758 00:EDE8: D0 0A              BNE   LAB_2563          ; exit if no overflow
  5759                        
  5760                        ; increment FAC1 mantissa
  5761                        
  5762                        LAB_2559
  5763 00:EDEA: E6 AF              INC   FAC1_3            ; increment FAC1 mantissa3
  5764 00:EDEC: D0 06              BNE   LAB_2563          ; finished if no rollover
  5765                        
  5766 00:EDEE: E6 AE              INC   FAC1_2            ; increment FAC1 mantissa2
  5767 00:EDF0: D0 02              BNE   LAB_2563          ; finished if no rollover
  5768                        
  5769 00:EDF2: E6 AD              INC   FAC1_1            ; increment FAC1 mantissa1
  5770                        LAB_2563
  5771 00:EDF4: 60                 RTS
  5772                        
  5773                        ; do overflow error (overflow exit)
  5774                        
  5775                        LAB_2564
  5776 00:EDF5: A2 0A              LDX   #$0A              ; error code $0A ("Overflow" error)
  5777 00:EDF7: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  5778                        
  5779                        ; shift FCAtemp << A+8 times
  5780                        
  5781                        LAB_2569
  5782 00:EDFA: A2 74              LDX   #FACt_1-1         ; set offset to FACtemp
  5783                        LAB_256B
  5784 00:EDFC: B4 03              LDY   PLUS_3,X          ; get FACX mantissa3
  5785 00:EDFE: 84 B9              STY   FAC1_r            ; save as FAC1 rounding byte
  5786 00:EE00: B4 02              LDY   PLUS_2,X          ; get FACX mantissa2
  5787 00:EE02: 94 03              STY   PLUS_3,X          ; save FACX mantissa3
  5788 00:EE04: B4 01              LDY   PLUS_1,X          ; get FACX mantissa1
  5789 00:EE06: 94 02              STY   PLUS_2,X          ; save FACX mantissa2
  5790 00:EE08: A4 B2              LDY   FAC1_o            ; get FAC1 overflow byte
  5791 00:EE0A: 94 01              STY   PLUS_1,X          ; save FACX mantissa1
  5792                        
  5793                        ; shift FACX -A times right (> 8 shifts)
  5794                        
  5795                        LAB_257B
  5796 00:EE0C: 69 08              ADC   #$08              ; add 8 to shift count
  5797 00:EE0E: 30 EC              BMI   LAB_256B          ; go do 8 shift if still -ve
  5798                        
  5799 00:EE10: F0 EA              BEQ   LAB_256B          ; go do 8 shift if zero
  5800                        
  5801 00:EE12: E9 08              SBC   #$08              ; else subtract 8 again
  5802 00:EE14: A8                 TAY                     ; save count to Y
  5803 00:EE15: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5804 00:EE17: B0 12              BCS   LAB_259A          ;.
  5805                        
  5806                        LAB_2588
  5807 00:EE19: 16 01              ASL   PLUS_1,X          ; shift FACX mantissa1
  5808 00:EE1B: 90 02              BCC   LAB_258E          ; branch if +ve
  5809                        
  5810 00:EE1D: F6 01              INC   PLUS_1,X          ; this sets b7 eventually
  5811                        LAB_258E
  5812 00:EE1F: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (correct for ASL)
  5813 00:EE21: 76 01              ROR   PLUS_1,X          ; shift FACX mantissa1 (put carry in b7)
  5814                        
  5815                        ; shift FACX Y times right
  5816                        
  5817                        LAB_2592
  5818 00:EE23: 76 02              ROR   PLUS_2,X          ; shift FACX mantissa2
  5819 00:EE25: 76 03              ROR   PLUS_3,X          ; shift FACX mantissa3
  5820 00:EE27: 6A                 ROR                     ; shift FACX rounding byte
  5821 00:EE28: C8                 INY                     ; increment exponent diff
  5822 00:EE29: D0 EE              BNE   LAB_2588          ; branch if range adjust not complete
  5823                        
  5824                        LAB_259A
  5825 00:EE2B: 18                 CLC                     ; just clear it
  5826 00:EE2C: 60                 RTS
  5827                        
  5828                        ; perform LOG()
  5829                        
  5830                        LAB_LOG
  5831 00:EE2D: 20 1B F0           JSR   LAB_27CA          ; test sign and zero
  5832 00:EE30: F0 02              BEQ   LAB_25C4          ; if zero do function call error then warm start
  5833                        
  5834 00:EE32: 10 03              BPL   LAB_25C7          ; skip error if +ve
  5835                        
  5836                        LAB_25C4
  5837 00:EE34: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start (-ve)
  5838                        
  5839                        LAB_25C7
  5840 00:EE37: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5841 00:EE39: E9 7F              SBC   #$7F              ; normalise it
  5842 00:EE3B: 48                 PHA                     ; save it
  5843 00:EE3C: A9 80              LDA   #$80              ; set exponent to zero
  5844 00:EE3E: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5845 00:EE40: A9 9E              LDA   #<LAB_25AD        ; set 1/root2 pointer low byte
  5846 00:EE42: A0 F8              LDY   #>LAB_25AD        ; set 1/root2 pointer high byte
  5847 00:EE44: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1 (1/root2)
  5848 00:EE47: A9 A2              LDA   #<LAB_25B1        ; set root2 pointer low byte
  5849 00:EE49: A0 F8              LDY   #>LAB_25B1        ; set root2 pointer high byte
  5850 00:EE4B: 20 33 EF           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
  5851 00:EE4E: A9 15              LDA   #<LAB_259C        ; set 1 pointer low byte
  5852 00:EE50: A0 F9              LDY   #>LAB_259C        ; set 1 pointer high byte
  5853 00:EE52: 20 D5 EC           JSR   LAB_2455          ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
  5854 00:EE55: A9 91              LDA   #<LAB_25A0        ; set pointer low byte to counter
  5855 00:EE57: A0 F8              LDY   #>LAB_25A0        ; set pointer high byte to counter
  5856 00:EE59: 20 83 F3           JSR   LAB_2B6E          ; ^2 then series evaluation
  5857 00:EE5C: A9 A6              LDA   #<LAB_25B5        ; set -0.5 pointer low byte
  5858 00:EE5E: A0 F8              LDY   #>LAB_25B5        ; set -0.5 pointer high byte
  5859 00:EE60: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1
  5860 00:EE63: 68                 PLA                     ; restore FAC1 exponent
  5861 00:EE64: 20 77 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  5862 00:EE67: A9 AA              LDA   #<LAB_25B9        ; set LOG(2) pointer low byte
  5863 00:EE69: A0 F8              LDY   #>LAB_25B9        ; set LOG(2) pointer high byte
  5864                        
  5865                        ; do convert AY, FCA1*(AY)
  5866                        
  5867                        LAB_25FB
  5868 00:EE6B: 20 BD EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  5869                        LAB_MULTIPLY
  5870 00:EE6E: F0 4C              BEQ   LAB_264C          ; exit if zero
  5871                        
  5872 00:EE70: 20 E3 EE           JSR   LAB_2673          ; test and adjust accumulators
  5873 00:EE73: A9 00              LDA   #$00              ; clear A
  5874 00:EE75: 85 75              STA   FACt_1            ; clear temp mantissa1
  5875 00:EE77: 85 76              STA   FACt_2            ; clear temp mantissa2
  5876 00:EE79: 85 77              STA   FACt_3            ; clear temp mantissa3
  5877 00:EE7B: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  5878 00:EE7D: 20 92 EE           JSR   LAB_2622          ; go do shift/add FAC2
  5879 00:EE80: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  5880 00:EE82: 20 92 EE           JSR   LAB_2622          ; go do shift/add FAC2
  5881 00:EE85: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  5882 00:EE87: 20 92 EE           JSR   LAB_2622          ; go do shift/add FAC2
  5883 00:EE8A: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  5884 00:EE8C: 20 98 EE           JSR   LAB_2627          ; go do shift/add FAC2
  5885 00:EE8F: 4C A0 EF           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  5886                        
  5887                        LAB_2622
  5888 00:EE92: D0 04              BNE   LAB_2627          ; branch if byte <> zero
  5889                        ; *** begin patch  2.22p5.6  floating point multiply rounding bug
  5890                        ; *** replace
  5891                        ;      JMP   LAB_2569          ; shift FCAtemp << A+8 times
  5892                        ;
  5893                        ;                              ; else do shift and add
  5894                        ;LAB_2627
  5895                        ;      LSR                     ; shift byte
  5896                        ;      ORA   #$80              ; set top bit (mark for 8 times)
  5897                        ; *** with
  5898 00:EE94: 38                 SEC
  5899 00:EE95: 4C FA ED           JMP   LAB_2569          ; shift FACtemp << A+8 times
  5900                        
  5901                                                      ; else do shift and add
  5902                        LAB_2627
  5903 00:EE98: 38                 SEC                     ; set top bit (mark for 8 times)
  5904 00:EE99: 6A                 ROR
  5905                        ; *** end patch    2.22p5.6  floating point multiply rounding bug
  5906                        LAB_262A
  5907 00:EE9A: A8                 TAY                     ; copy result
  5908 00:EE9B: 90 13              BCC   LAB_2640          ; skip next if bit was zero
  5909                        
  5910 00:EE9D: 18                 CLC                     ; clear carry for add
  5911 00:EE9E: A5 77              LDA   FACt_3            ; get temp mantissa3
  5912 00:EEA0: 65 B6              ADC   FAC2_3            ; add FAC2 mantissa3
  5913 00:EEA2: 85 77              STA   FACt_3            ; save temp mantissa3
  5914 00:EEA4: A5 76              LDA   FACt_2            ; get temp mantissa2
  5915 00:EEA6: 65 B5              ADC   FAC2_2            ; add FAC2 mantissa2
  5916 00:EEA8: 85 76              STA   FACt_2            ; save temp mantissa2
  5917 00:EEAA: A5 75              LDA   FACt_1            ; get temp mantissa1
  5918 00:EEAC: 65 B4              ADC   FAC2_1            ; add FAC2 mantissa1
  5919 00:EEAE: 85 75              STA   FACt_1            ; save temp mantissa1
  5920                        LAB_2640
  5921 00:EEB0: 66 75              ROR   FACt_1            ; shift temp mantissa1
  5922 00:EEB2: 66 76              ROR   FACt_2            ; shift temp mantissa2
  5923 00:EEB4: 66 77              ROR   FACt_3            ; shift temp mantissa3
  5924 00:EEB6: 66 B9              ROR   FAC1_r            ; shift temp rounding byte
  5925 00:EEB8: 98                 TYA                     ; get byte back
  5926 00:EEB9: 4A                 LSR                     ; shift byte
  5927 00:EEBA: D0 DE              BNE   LAB_262A          ; loop if all bits not done
  5928                        
  5929                        LAB_264C
  5930 00:EEBC: 60                 RTS
  5931                        
  5932                        ; unpack memory (AY) into FAC2
  5933                        
  5934                        LAB_264D
  5935 00:EEBD: 85 71              STA   ut1_pl            ; save pointer low byte
  5936 00:EEBF: 84 72              STY   ut1_ph            ; save pointer high byte
  5937 00:EEC1: A0 03              LDY   #$03              ; 4 bytes to get (0-3)
  5938 00:EEC3: B1 71              LDA   (ut1_pl),Y        ; get mantissa3
  5939 00:EEC5: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  5940 00:EEC7: 88                 DEY                     ; decrement index
  5941 00:EEC8: B1 71              LDA   (ut1_pl),Y        ; get mantissa2
  5942 00:EECA: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  5943 00:EECC: 88                 DEY                     ; decrement index
  5944 00:EECD: B1 71              LDA   (ut1_pl),Y        ; get mantissa1+sign
  5945 00:EECF: 85 B7              STA   FAC2_s            ; save FAC2 sign (b7)
  5946 00:EED1: 45 B0              EOR   FAC1_s            ; EOR with FAC1 sign (b7)
  5947 00:EED3: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  5948 00:EED5: A5 B7              LDA   FAC2_s            ; recover FAC2 sign (b7)
  5949 00:EED7: 09 80              ORA   #$80              ; set 1xxx xxx (set normal bit)
  5950 00:EED9: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  5951 00:EEDB: 88                 DEY                     ; decrement index
  5952 00:EEDC: B1 71              LDA   (ut1_pl),Y        ; get exponent byte
  5953 00:EEDE: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  5954 00:EEE0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  5955 00:EEE2: 60                 RTS
  5956                        
  5957                        ; test and adjust accumulators
  5958                        
  5959                        LAB_2673
  5960 00:EEE3: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  5961                        LAB_2675
  5962 00:EEE5: F0 1D              BEQ   LAB_2696          ; branch if FAC2 = $00 (handle underflow)
  5963                        
  5964 00:EEE7: 18                 CLC                     ; clear carry for add
  5965 00:EEE8: 65 AC              ADC   FAC1_e            ; add FAC1 exponent
  5966 00:EEEA: 90 04              BCC   LAB_2680          ; branch if sum of exponents <$0100
  5967                        
  5968 00:EEEC: 30 31              BMI   LAB_269B          ; do overflow error
  5969                        
  5970 00:EEEE: 18                 CLC                     ; clear carry for the add
  5971 00:EEEF: 2C                 .byte $2C               ; makes next line BIT $1410
  5972                        LAB_2680
  5973 00:EEF0: 10 12              BPL   LAB_2696          ; if +ve go handle underflow
  5974                        
  5975 00:EEF2: 69 80              ADC   #$80              ; adjust exponent
  5976 00:EEF4: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  5977 00:EEF6: D0 03              BNE   LAB_268B          ; branch if not zero
  5978                        
  5979 00:EEF8: 4C 86 ED           JMP   LAB_24F5          ; save FAC1 sign and return
  5980                        
  5981                        LAB_268B
  5982 00:EEFB: A5 B8              LDA   FAC_sc            ; get sign compare (FAC1 EOR FAC2)
  5983 00:EEFD: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  5984                        LAB_268F
  5985 00:EEFF: 60                 RTS
  5986                        
  5987                        ; handle overflow and underflow
  5988                        
  5989                        LAB_2690
  5990 00:EF00: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  5991 00:EF02: 10 1B              BPL   LAB_269B          ; do overflow error
  5992                        
  5993                                                      ; handle underflow
  5994                        LAB_2696
  5995 00:EF04: 68                 PLA                     ; pop return address low byte
  5996 00:EF05: 68                 PLA                     ; pop return address high byte
  5997 00:EF06: 4C 82 ED           JMP   LAB_24F1          ; clear FAC1 exponent and sign and return
  5998                        
  5999                        ; multiply by 10
  6000                        
  6001                        LAB_269E
  6002 00:EF09: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6003 00:EF0C: AA                 TAX                     ; copy exponent (set the flags)
  6004 00:EF0D: F0 F0              BEQ   LAB_268F          ; exit if zero
  6005                        
  6006 00:EF0F: 18                 CLC                     ; clear carry for add
  6007 00:EF10: 69 02              ADC   #$02              ; add two to exponent (*4)
  6008 00:EF12: B0 0B              BCS   LAB_269B          ; do overflow error if > $FF
  6009                        
  6010 00:EF14: A2 00              LDX   #$00              ; clear byte
  6011 00:EF16: 86 B8              STX   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  6012 00:EF18: 20 0D ED           JSR   LAB_247C          ; add FAC2 to FAC1 (*5)
  6013 00:EF1B: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*10)
  6014 00:EF1D: D0 E0              BNE   LAB_268F          ; if non zero just do RTS
  6015                        
  6016                        LAB_269B
  6017 00:EF1F: 4C F5 ED           JMP   LAB_2564          ; do overflow error and warm start
  6018                        
  6019                        ; divide by 10
  6020                        
  6021                        LAB_26B9
  6022 00:EF22: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6023 00:EF25: A9 26              LDA   #<LAB_26B5        ; set pointer to 10d low addr
  6024 00:EF27: A0 F9              LDY   #>LAB_26B5        ; set pointer to 10d high addr
  6025 00:EF29: A2 00              LDX   #$00              ; clear sign
  6026                        
  6027                        ; divide by (AY) (X=sign)
  6028                        
  6029                        LAB_26C2
  6030 00:EF2B: 86 B8              STX   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  6031 00:EF2D: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  6032 00:EF30: 4C 36 EF           JMP   LAB_DIVIDE        ; do FAC2/FAC1
  6033                        
  6034                                                      ; Perform divide-by
  6035                        ; convert AY and do (AY)/FAC1
  6036                        
  6037                        LAB_26CA
  6038 00:EF33: 20 BD EE           JSR   LAB_264D          ; unpack memory (AY) into FAC2
  6039                        
  6040                                                      ; Perform divide-into
  6041                        LAB_DIVIDE
  6042 00:EF36: F0 63              BEQ   LAB_2737          ; if zero go do /0 error
  6043                        
  6044 00:EF38: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  6045 00:EF3B: A9 00              LDA   #$00              ; clear A
  6046 00:EF3D: 38                 SEC                     ; set carry for subtract
  6047 00:EF3E: E5 AC              SBC   FAC1_e            ; subtract FAC1 exponent (2s complement)
  6048 00:EF40: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6049 00:EF42: 20 E3 EE           JSR   LAB_2673          ; test and adjust accumulators
  6050 00:EF45: E6 AC              INC   FAC1_e            ; increment FAC1 exponent
  6051 00:EF47: F0 D6              BEQ   LAB_269B          ; if zero do overflow error
  6052                        
  6053 00:EF49: A2 FF              LDX   #$FF              ; set index for pre increment
  6054 00:EF4B: A9 01              LDA   #$01              ; set bit to flag byte save
  6055                        LAB_26E4
  6056 00:EF4D: A4 B4              LDY   FAC2_1            ; get FAC2 mantissa1
  6057 00:EF4F: C4 AD              CPY   FAC1_1            ; compare FAC1 mantissa1
  6058 00:EF51: D0 0A              BNE   LAB_26F4          ; branch if <>
  6059                        
  6060 00:EF53: A4 B5              LDY   FAC2_2            ; get FAC2 mantissa2
  6061 00:EF55: C4 AE              CPY   FAC1_2            ; compare FAC1 mantissa2
  6062 00:EF57: D0 04              BNE   LAB_26F4          ; branch if <>
  6063                        
  6064 00:EF59: A4 B6              LDY   FAC2_3            ; get FAC2 mantissa3
  6065 00:EF5B: C4 AF              CPY   FAC1_3            ; compare FAC1 mantissa3
  6066                        LAB_26F4
  6067 00:EF5D: 08                 PHP                     ; save FAC2-FAC1 compare status
  6068 00:EF5E: 2A                 ROL                     ; shift the result byte
  6069 00:EF5F: 90 0E              BCC   LAB_2702          ; if no carry skip the byte save
  6070                        
  6071 00:EF61: A0 01              LDY   #$01              ; set bit to flag byte save
  6072 00:EF63: E8                 INX                     ; else increment the index to FACt
  6073 00:EF64: E0 02              CPX   #$02              ; compare with the index to FACt_3
  6074 00:EF66: 30 04              BMI   LAB_2701          ; if not last byte just go save it
  6075                        
  6076 00:EF68: D0 28              BNE   LAB_272B          ; if all done go save FAC1 rounding byte, normalise and
  6077                                                      ; return
  6078                        
  6079 00:EF6A: A0 40              LDY   #$40              ; set bit to flag byte save for the rounding byte
  6080                        LAB_2701
  6081 00:EF6C: 95 75              STA   FACt_1,X          ; write result byte to FACt_1 + index
  6082 00:EF6E: 98                 TYA                     ; copy the next save byte flag
  6083                        LAB_2702
  6084 00:EF6F: 28                 PLP                     ; restore FAC2-FAC1 compare status
  6085 00:EF70: 90 14              BCC   LAB_2704          ; if FAC2 < FAC1 then skip the subtract
  6086                        
  6087 00:EF72: A8                 TAY                     ; save FAC2-FAC1 compare status
  6088 00:EF73: A5 B6              LDA   FAC2_3            ; get FAC2 mantissa3
  6089 00:EF75: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6090 00:EF77: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  6091 00:EF79: A5 B5              LDA   FAC2_2            ; get FAC2 mantissa2
  6092 00:EF7B: E5 AE              SBC   FAC1_2            ; subtract FAC1 mantissa2
  6093 00:EF7D: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  6094 00:EF7F: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  6095 00:EF81: E5 AD              SBC   FAC1_1            ; subtract FAC1 mantissa1
  6096 00:EF83: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  6097 00:EF85: 98                 TYA                     ; restore FAC2-FAC1 compare status
  6098                        
  6099                                                      ; FAC2 = FAC2*2
  6100                        LAB_2704
  6101 00:EF86: 06 B6              ASL   FAC2_3            ; shift FAC2 mantissa3
  6102 00:EF88: 26 B5              ROL   FAC2_2            ; shift FAC2 mantissa2
  6103 00:EF8A: 26 B4              ROL   FAC2_1            ; shift FAC2 mantissa1
  6104 00:EF8C: B0 CF              BCS   LAB_26F4          ; loop with no compare
  6105                        
  6106 00:EF8E: 30 BD              BMI   LAB_26E4          ; loop with compare
  6107                        
  6108 00:EF90: 10 CB              BPL   LAB_26F4          ; loop always with no compare
  6109                        
  6110                        ; do A<<6, save as FAC1 rounding byte, normalise and return
  6111                        
  6112                        LAB_272B
  6113 00:EF92: 4A                 LSR                     ; shift b1 - b0 ..
  6114 00:EF93: 6A                 ROR                     ; ..
  6115 00:EF94: 6A                 ROR                     ; .. to b7 - b6
  6116 00:EF95: 85 B9              STA   FAC1_r            ; save FAC1 rounding byte
  6117 00:EF97: 28                 PLP                     ; dump FAC2-FAC1 compare status
  6118 00:EF98: 4C A0 EF           JMP   LAB_273C          ; copy temp to FAC1, normalise and return
  6119                        
  6120                        ; do "Divide by zero" error
  6121                        
  6122                        LAB_2737
  6123 00:EF9B: A2 14              LDX   #$14              ; error code $14 ("Divide by zero" error)
  6124 00:EF9D: 4C 64 D8           JMP   LAB_XERR          ; do error #X, then warm start
  6125                        
  6126                        ; copy temp to FAC1 and normalise
  6127                        
  6128                        LAB_273C
  6129 00:EFA0: A5 75              LDA   FACt_1            ; get temp mantissa1
  6130 00:EFA2: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6131 00:EFA4: A5 76              LDA   FACt_2            ; get temp mantissa2
  6132 00:EFA6: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6133 00:EFA8: A5 77              LDA   FACt_3            ; get temp mantissa3
  6134 00:EFAA: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6135 00:EFAC: 4C 66 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  6136                        
  6137                        ; unpack memory (AY) into FAC1
  6138                        
  6139                        LAB_UFAC
  6140 00:EFAF: 85 71              STA   ut1_pl            ; save pointer low byte
  6141 00:EFB1: 84 72              STY   ut1_ph            ; save pointer high byte
  6142 00:EFB3: A0 03              LDY   #$03              ; 4 bytes to do
  6143 00:EFB5: B1 71              LDA   (ut1_pl),Y        ; get last byte
  6144 00:EFB7: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6145 00:EFB9: 88                 DEY                     ; decrement index
  6146 00:EFBA: B1 71              LDA   (ut1_pl),Y        ; get last-1 byte
  6147 00:EFBC: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6148 00:EFBE: 88                 DEY                     ; decrement index
  6149 00:EFBF: B1 71              LDA   (ut1_pl),Y        ; get second byte
  6150 00:EFC1: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6151 00:EFC3: 09 80              ORA   #$80              ; set 1xxx xxxx (add normal bit)
  6152 00:EFC5: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6153 00:EFC7: 88                 DEY                     ; decrement index
  6154 00:EFC8: B1 71              LDA   (ut1_pl),Y        ; get first byte (exponent)
  6155 00:EFCA: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6156 00:EFCC: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6157 00:EFCE: 60                 RTS
  6158                        
  6159                        ; pack FAC1 into Adatal
  6160                        
  6161                        LAB_276E
  6162 00:EFCF: A2 A4              LDX   #<Adatal          ; set pointer low byte
  6163                        LAB_2770
  6164 00:EFD1: A0 00              LDY   #>Adatal          ; set pointer high byte
  6165 00:EFD3: F0 04              BEQ   LAB_2778          ; pack FAC1 into (XY) and return
  6166                        
  6167                        ; pack FAC1 into (Lvarpl)
  6168                        
  6169                        LAB_PFAC
  6170 00:EFD5: A6 97              LDX   Lvarpl            ; get destination pointer low byte
  6171 00:EFD7: A4 98              LDY   Lvarph            ; get destination pointer high byte
  6172                        
  6173                        ; pack FAC1 into (XY)
  6174                        
  6175                        LAB_2778
  6176 00:EFD9: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  6177 00:EFDC: 86 71              STX   ut1_pl            ; save pointer low byte
  6178 00:EFDE: 84 72              STY   ut1_ph            ; save pointer high byte
  6179 00:EFE0: A0 03              LDY   #$03              ; set index
  6180 00:EFE2: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6181 00:EFE4: 91 71              STA   (ut1_pl),Y        ; store in destination
  6182 00:EFE6: 88                 DEY                     ; decrement index
  6183 00:EFE7: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6184 00:EFE9: 91 71              STA   (ut1_pl),Y        ; store in destination
  6185 00:EFEB: 88                 DEY                     ; decrement index
  6186 00:EFEC: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6187 00:EFEE: 09 7F              ORA   #$7F              ; set bits x111 1111
  6188 00:EFF0: 25 AD              AND   FAC1_1            ; AND in FAC1 mantissa1
  6189 00:EFF2: 91 71              STA   (ut1_pl),Y        ; store in destination
  6190 00:EFF4: 88                 DEY                     ; decrement index
  6191 00:EFF5: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6192 00:EFF7: 91 71              STA   (ut1_pl),Y        ; store in destination
  6193 00:EFF9: 84 B9              STY   FAC1_r            ; clear FAC1 rounding byte
  6194 00:EFFB: 60                 RTS
  6195                        
  6196                        ; round and copy FAC1 to FAC2
  6197                        
  6198                        LAB_27AB
  6199 00:EFFC: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  6200                        
  6201                        ; copy FAC1 to FAC2
  6202                        
  6203                        LAB_27AE
  6204 00:EFFF: A2 05              LDX   #$05              ; 5 bytes to copy
  6205                        LAB_27B0
  6206 00:F001: B5 AB              LDA   FAC1_e-1,X        ; get byte from FAC1,X
  6207 00:F003: 95 B2              STA   FAC1_o,X          ; save byte at FAC2,X
  6208 00:F005: CA                 DEX                     ; decrement count
  6209 00:F006: D0 F9              BNE   LAB_27B0          ; loop if not all done
  6210                        
  6211 00:F008: 86 B9              STX   FAC1_r            ; clear FAC1 rounding byte
  6212                        LAB_27B9
  6213 00:F00A: 60                 RTS
  6214                        
  6215                        ; round FAC1
  6216                        
  6217                        LAB_27BA
  6218 00:F00B: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6219 00:F00D: F0 FB              BEQ   LAB_27B9          ; exit if zero
  6220                        
  6221 00:F00F: 06 B9              ASL   FAC1_r            ; shift FAC1 rounding byte
  6222 00:F011: 90 F7              BCC   LAB_27B9          ; exit if no overflow
  6223                        
  6224                        ; round FAC1 (no check)
  6225                        
  6226                        LAB_27C2
  6227 00:F013: 20 EA ED           JSR   LAB_2559          ; increment FAC1 mantissa
  6228 00:F016: D0 F2              BNE   LAB_27B9          ; branch if no overflow
  6229                        
  6230 00:F018: 4C BB ED           JMP   LAB_252A          ; normalise FAC1 for C=1 and return
  6231                        
  6232                        ; get FAC1 sign
  6233                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6234                        
  6235                        LAB_27CA
  6236 00:F01B: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6237 00:F01D: F0 09              BEQ   LAB_27D7          ; exit if zero (already correct SGN(0)=0)
  6238                        
  6239                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6240                        ; no = 0 check
  6241                        
  6242                        LAB_27CE
  6243 00:F01F: A5 B0              LDA   FAC1_s            ; else get FAC1 sign (b7)
  6244                        
  6245                        ; return A=FF,C=1/-ve A=01,C=0/+ve
  6246                        ; no = 0 check, sign in A
  6247                        
  6248                        LAB_27D0
  6249 00:F021: 2A                 ROL                     ; move sign bit to carry
  6250 00:F022: A9 FF              LDA   #$FF              ; set byte for -ve result
  6251 00:F024: B0 02              BCS   LAB_27D7          ; return if sign was set (-ve)
  6252                        
  6253 00:F026: A9 01              LDA   #$01              ; else set byte for +ve result
  6254                        LAB_27D7
  6255 00:F028: 60                 RTS
  6256                        
  6257                        ; perform SGN()
  6258                        
  6259                        LAB_SGN
  6260 00:F029: 20 1B F0           JSR   LAB_27CA          ; get FAC1 sign
  6261                                                      ; return A=$FF/-ve A=$01/+ve
  6262                        ; save A as integer byte
  6263                        
  6264                        LAB_27DB
  6265 00:F02C: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6266 00:F02E: A9 00              LDA   #$00              ; clear A
  6267 00:F030: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6268 00:F032: A2 88              LDX   #$88              ; set exponent
  6269                        
  6270                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6271                        
  6272                        LAB_27E3
  6273 00:F034: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6274 00:F036: 49 FF              EOR   #$FF              ; complement it
  6275 00:F038: 2A                 ROL                     ; sign bit into carry
  6276                        
  6277                        ; set exp=X, clearFAC1 mantissa3 and normalise
  6278                        
  6279                        LAB_STFA
  6280 00:F039: A9 00              LDA   #$00              ; clear A
  6281 00:F03B: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6282 00:F03D: 86 AC              STX   FAC1_e            ; set FAC1 exponent
  6283 00:F03F: 85 B9              STA   FAC1_r            ; clear FAC1 rounding byte
  6284 00:F041: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6285 00:F043: 4C 61 ED           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6286                        
  6287                        ; perform ABS()
  6288                        
  6289                        LAB_ABS
  6290 00:F046: 46 B0              LSR   FAC1_s            ; clear FAC1 sign (put zero in b7)
  6291 00:F048: 60                 RTS
  6292                        
  6293                        ; compare FAC1 with (AY)
  6294                        ; returns A=$00 if FAC1 = (AY)
  6295                        ; returns A=$01 if FAC1 > (AY)
  6296                        ; returns A=$FF if FAC1 < (AY)
  6297                        
  6298                        LAB_27F8
  6299 00:F049: 85 73              STA   ut2_pl            ; save pointer low byte
  6300                        LAB_27FA
  6301 00:F04B: 84 74              STY   ut2_ph            ; save pointer high byte
  6302 00:F04D: A0 00              LDY   #$00              ; clear index
  6303 00:F04F: B1 73              LDA   (ut2_pl),Y        ; get exponent
  6304 00:F051: C8                 INY                     ; increment index
  6305 00:F052: AA                 TAX                     ; copy (AY) exponent to X
  6306 00:F053: F0 C6              BEQ   LAB_27CA          ; branch if (AY) exponent=0 and get FAC1 sign
  6307                                                      ; A=FF,C=1/-ve A=01,C=0/+ve
  6308                        
  6309 00:F055: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6310 00:F057: 45 B0              EOR   FAC1_s            ; EOR FAC1 sign (b7)
  6311 00:F059: 30 C4              BMI   LAB_27CE          ; if signs <> do return A=FF,C=1/-ve
  6312                                                      ; A=01,C=0/+ve and return
  6313                        
  6314 00:F05B: E4 AC              CPX   FAC1_e            ; compare (AY) exponent with FAC1 exponent
  6315 00:F05D: D0 1A              BNE   LAB_2828          ; branch if different
  6316                        
  6317 00:F05F: B1 73              LDA   (ut2_pl),Y        ; get (AY) mantissa1 (with sign)
  6318 00:F061: 09 80              ORA   #$80              ; normalise top bit
  6319 00:F063: C5 AD              CMP   FAC1_1            ; compare with FAC1 mantissa1
  6320 00:F065: D0 12              BNE   LAB_2828          ; branch if different
  6321                        
  6322 00:F067: C8                 INY                     ; increment index
  6323 00:F068: B1 73              LDA   (ut2_pl),Y        ; get mantissa2
  6324 00:F06A: C5 AE              CMP   FAC1_2            ; compare with FAC1 mantissa2
  6325 00:F06C: D0 0B              BNE   LAB_2828          ; branch if different
  6326                        
  6327 00:F06E: C8                 INY                     ; increment index
  6328 00:F06F: A9 7F              LDA   #$7F              ; set for 1/2 value rounding byte
  6329 00:F071: C5 B9              CMP   FAC1_r            ; compare with FAC1 rounding byte (set carry)
  6330 00:F073: B1 73              LDA   (ut2_pl),Y        ; get mantissa3
  6331 00:F075: E5 AF              SBC   FAC1_3            ; subtract FAC1 mantissa3
  6332 00:F077: F0 28              BEQ   LAB_2850          ; exit if mantissa3 equal
  6333                        
  6334                        ; gets here if number <> FAC1
  6335                        
  6336                        LAB_2828
  6337 00:F079: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6338 00:F07B: 90 02              BCC   LAB_282E          ; branch if FAC1 > (AY)
  6339                        
  6340 00:F07D: 49 FF              EOR   #$FF              ; else toggle FAC1 sign
  6341                        LAB_282E
  6342 00:F07F: 4C 21 F0           JMP   LAB_27D0          ; return A=FF,C=1/-ve A=01,C=0/+ve
  6343                        
  6344                        ; convert FAC1 floating-to-fixed
  6345                        
  6346                        LAB_2831
  6347 00:F082: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6348 00:F084: F0 4A              BEQ   LAB_287F          ; if zero go clear FAC1 and return
  6349                        
  6350 00:F086: 38                 SEC                     ; set carry for subtract
  6351 00:F087: E9 98              SBC   #$98              ; subtract maximum integer range exponent
  6352 00:F089: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6353 00:F08B: 10 09              BPL   LAB_2845          ; branch if FAC1 +ve
  6354                        
  6355                                                      ; FAC1 was -ve
  6356 00:F08D: AA                 TAX                     ; copy subtracted exponent
  6357 00:F08E: A9 FF              LDA   #$FF              ; overflow for -ve number
  6358 00:F090: 85 B2              STA   FAC1_o            ; set FAC1 overflow byte
  6359 00:F092: 20 CE ED           JSR   LAB_253D          ; twos complement FAC1 mantissa
  6360 00:F095: 8A                 TXA                     ; restore subtracted exponent
  6361                        LAB_2845
  6362 00:F096: A2 AC              LDX   #FAC1_e           ; set index to FAC1
  6363 00:F098: C9 F9              CMP   #$F9              ; compare exponent result
  6364 00:F09A: 10 06              BPL   LAB_2851          ; if < 8 shifts shift FAC1 A times right and return
  6365                        
  6366 00:F09C: 20 0C EE           JSR   LAB_257B          ; shift FAC1 A times right (> 8 shifts)
  6367 00:F09F: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6368                        LAB_2850
  6369 00:F0A1: 60                 RTS
  6370                        
  6371                        ; shift FAC1 A times right
  6372                        
  6373                        LAB_2851
  6374 00:F0A2: A8                 TAY                     ; copy shift count
  6375 00:F0A3: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6376 00:F0A5: 29 80              AND   #$80              ; mask sign bit only (x000 0000)
  6377 00:F0A7: 46 AD              LSR   FAC1_1            ; shift FAC1 mantissa1
  6378 00:F0A9: 05 AD              ORA   FAC1_1            ; OR sign in b7 FAC1 mantissa1
  6379 00:F0AB: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6380 00:F0AD: 20 23 EE           JSR   LAB_2592          ; shift FAC1 Y times right
  6381 00:F0B0: 84 B2              STY   FAC1_o            ; clear FAC1 overflow byte
  6382 00:F0B2: 60                 RTS
  6383                        
  6384                        ; perform INT()
  6385                        
  6386                        LAB_INT
  6387 00:F0B3: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6388 00:F0B5: C9 98              CMP   #$98              ; compare with max int
  6389 00:F0B7: B0 1E              BCS   LAB_2886          ; exit if >= (already int, too big for fractional part!)
  6390                        
  6391 00:F0B9: 20 82 F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6392 00:F0BC: 84 B9              STY   FAC1_r            ; save FAC1 rounding byte
  6393 00:F0BE: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6394 00:F0C0: 84 B0              STY   FAC1_s            ; save FAC1 sign (b7)
  6395 00:F0C2: 49 80              EOR   #$80              ; toggle FAC1 sign
  6396 00:F0C4: 2A                 ROL                     ; shift into carry
  6397 00:F0C5: A9 98              LDA   #$98              ; set new exponent
  6398 00:F0C7: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  6399 00:F0C9: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6400 00:F0CB: 85 5B              STA   Temp3             ; save for EXP() function
  6401 00:F0CD: 4C 61 ED           JMP   LAB_24D0          ; do ABS and normalise FAC1
  6402                        
  6403                        ; clear FAC1 and return
  6404                        
  6405                        LAB_287F
  6406 00:F0D0: 85 AD              STA   FAC1_1            ; clear FAC1 mantissa1
  6407 00:F0D2: 85 AE              STA   FAC1_2            ; clear FAC1 mantissa2
  6408 00:F0D4: 85 AF              STA   FAC1_3            ; clear FAC1 mantissa3
  6409 00:F0D6: A8                 TAY                     ; clear Y
  6410                        LAB_2886
  6411 00:F0D7: 60                 RTS
  6412                        
  6413                        ; get FAC1 from string
  6414                        ; this routine now handles hex and binary values from strings
  6415                        ; starting with "$" and "%" respectively
  6416                        
  6417                        LAB_2887
  6418 00:F0D8: A0 00              LDY   #$00              ; clear Y
  6419 00:F0DA: 84 5F              STY   Dtypef            ; clear data type flag, $FF=string, $00=numeric
  6420 00:F0DC: A2 09              LDX   #$09              ; set index
  6421                        LAB_288B
  6422 00:F0DE: 94 A8              STY   numexp,X          ; clear byte
  6423 00:F0E0: CA                 DEX                     ; decrement index
  6424 00:F0E1: 10 FB              BPL   LAB_288B          ; loop until numexp to negnum (and FAC1) = $00
  6425                        
  6426 00:F0E3: 90 7F              BCC   LAB_28FE          ; branch if 1st character numeric
  6427                        
  6428                        ; get FAC1 from string .. first character wasn't numeric
  6429                        
  6430 00:F0E5: C9 2D              CMP   #'-'              ; else compare with "-"
  6431 00:F0E7: D0 04              BNE   LAB_289A          ; branch if not "-"
  6432                        
  6433 00:F0E9: 86 B1              STX   negnum            ; set flag for -ve number (X = $FF)
  6434 00:F0EB: F0 04              BEQ   LAB_289C          ; branch always (go scan and check for hex/bin)
  6435                        
  6436                        ; get FAC1 from string .. first character wasn't numeric or -
  6437                        
  6438                        LAB_289A
  6439 00:F0ED: C9 2B              CMP   #'+'              ; else compare with "+"
  6440 00:F0EF: D0 05              BNE   LAB_289D          ; branch if not "+" (go check for hex/bin)
  6441                        
  6442                        ; was "+" or "-" to start, so get next character
  6443                        
  6444                        LAB_289C
  6445 00:F0F1: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6446 00:F0F4: 90 6E              BCC   LAB_28FE          ; branch if numeric character
  6447                        
  6448                        ; code here for hex and binary numbers
  6449                        
  6450                        LAB_289D
  6451 00:F0F6: C9 24              CMP   #'$'              ; else compare with "$"
  6452 00:F0F8: D0 03              BNE   LAB_NHEX          ; branch if not "$"
  6453                        
  6454 00:F0FA: 4C A2 F5           JMP   LAB_CHEX          ; branch if "$"
  6455                        
  6456                        LAB_NHEX
  6457 00:F0FD: C9 25              CMP   #'%'              ; else compare with "%"
  6458 00:F0FF: D0 08              BNE   LAB_28A3          ; branch if not "%" (continue original code)
  6459                        
  6460 00:F101: 4C D0 F5           JMP   LAB_CBIN          ; branch if "%"
  6461                        
  6462                        LAB_289E
  6463 00:F104: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (ignore + or get next number)
  6464                        LAB_28A1
  6465 00:F107: 90 5B              BCC   LAB_28FE          ; branch if numeric character
  6466                        
  6467                        ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
  6468                        
  6469                        LAB_28A3
  6470 00:F109: C9 2E              CMP   #'.'              ; else compare with "."
  6471 00:F10B: F0 2E              BEQ   LAB_28D5          ; branch if "."
  6472                        
  6473                        ; get FAC1 from string .. character wasn't numeric, -, + or .
  6474                        
  6475 00:F10D: C9 45              CMP   #'E'              ; else compare with "E"
  6476 00:F10F: D0 30              BNE   LAB_28DB          ; branch if not "E"
  6477                        
  6478                                                      ; was "E" so evaluate exponential part
  6479 00:F111: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6480 00:F114: 90 17              BCC   LAB_28C7          ; branch if numeric character
  6481                        
  6482 00:F116: C9 B7              CMP   #TK_MINUS         ; else compare with token for -
  6483 00:F118: F0 0E              BEQ   LAB_28C2          ; branch if token for -
  6484                        
  6485 00:F11A: C9 2D              CMP   #'-'              ; else compare with "-"
  6486 00:F11C: F0 0A              BEQ   LAB_28C2          ; branch if "-"
  6487                        
  6488 00:F11E: C9 B6              CMP   #TK_PLUS          ; else compare with token for +
  6489 00:F120: F0 08              BEQ   LAB_28C4          ; branch if token for +
  6490                        
  6491 00:F122: C9 2B              CMP   #'+'              ; else compare with "+"
  6492 00:F124: F0 04              BEQ   LAB_28C4          ; branch if "+"
  6493                        
  6494 00:F126: D0 07              BNE   LAB_28C9          ; branch always
  6495                        
  6496                        LAB_28C2
  6497 00:F128: 66 AB              ROR   expneg            ; set exponent -ve flag (C, which=1, into b7)
  6498                        LAB_28C4
  6499 00:F12A: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  6500                        LAB_28C7
  6501 00:F12D: 90 5B              BCC   LAB_2925          ; branch if numeric character
  6502                        
  6503                        LAB_28C9
  6504 00:F12F: 24 AB              BIT   expneg            ; test exponent -ve flag
  6505 00:F131: 10 0E              BPL   LAB_28DB          ; if +ve go evaluate exponent
  6506                        
  6507                                                      ; else do exponent = -exponent 
  6508 00:F133: A9 00              LDA   #$00              ; clear result
  6509 00:F135: 38                 SEC                     ; set carry for subtract
  6510 00:F136: E5 A9              SBC   expcnt            ; subtract exponent byte
  6511 00:F138: 4C 43 F1           JMP   LAB_28DD          ; go evaluate exponent
  6512                        
  6513                        LAB_28D5
  6514 00:F13B: 66 AA              ROR   numdpf            ; set decimal point flag
  6515 00:F13D: 24 AA              BIT   numdpf            ; test decimal point flag
  6516 00:F13F: 50 C3              BVC   LAB_289E          ; branch if only one decimal point so far
  6517                        
  6518                                                      ; evaluate exponent
  6519                        LAB_28DB
  6520 00:F141: A5 A9              LDA   expcnt            ; get exponent count byte
  6521                        LAB_28DD
  6522 00:F143: 38                 SEC                     ; set carry for subtract
  6523 00:F144: E5 A8              SBC   numexp            ; subtract numerator exponent
  6524 00:F146: 85 A9              STA   expcnt            ; save exponent count byte
  6525 00:F148: F0 12              BEQ   LAB_28F6          ; branch if no adjustment
  6526                        
  6527 00:F14A: 10 09              BPL   LAB_28EF          ; else if +ve go do FAC1*10^expcnt
  6528                        
  6529                                                      ; else go do FAC1/10^(0-expcnt)
  6530                        LAB_28E6
  6531 00:F14C: 20 22 EF           JSR   LAB_26B9          ; divide by 10
  6532 00:F14F: E6 A9              INC   expcnt            ; increment exponent count byte
  6533 00:F151: D0 F9              BNE   LAB_28E6          ; loop until all done
  6534                        
  6535 00:F153: F0 07              BEQ   LAB_28F6          ; branch always
  6536                        
  6537                        LAB_28EF
  6538 00:F155: 20 09 EF           JSR   LAB_269E          ; multiply by 10
  6539 00:F158: C6 A9              DEC   expcnt            ; decrement exponent count byte
  6540 00:F15A: D0 F9              BNE   LAB_28EF          ; loop until all done
  6541                        
  6542                        LAB_28F6
  6543 00:F15C: A5 B1              LDA   negnum            ; get -ve flag
  6544 00:F15E: 30 01              BMI   LAB_28FB          ; if -ve do - FAC1 and return
  6545                        
  6546 00:F160: 60                 RTS
  6547                        
  6548                        ; do - FAC1 and return
  6549                        
  6550                        LAB_28FB
  6551 00:F161: 4C 26 F3           JMP   LAB_GTHAN         ; do - FAC1 and return
  6552                        
  6553                        ; do unsigned FAC1*10+number
  6554                        
  6555                        LAB_28FE
  6556 00:F164: 48                 PHA                     ; save character
  6557 00:F165: 24 AA              BIT   numdpf            ; test decimal point flag
  6558 00:F167: 10 02              BPL   LAB_2905          ; skip exponent increment if not set
  6559                        
  6560 00:F169: E6 A8              INC   numexp            ; else increment number exponent
  6561                        LAB_2905
  6562 00:F16B: 20 09 EF           JSR   LAB_269E          ; multiply FAC1 by 10
  6563 00:F16E: 68                 PLA                     ; restore character
  6564 00:F16F: 29 0F              AND   #$0F              ; convert to binary
  6565 00:F171: 20 77 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  6566 00:F174: 4C 04 F1           JMP   LAB_289E          ; go do next character
  6567                        
  6568                        ; evaluate new ASCII digit
  6569                        
  6570                        LAB_2912
  6571 00:F177: 48                 PHA                     ; save digit
  6572 00:F178: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  6573 00:F17B: 68                 PLA                     ; restore digit
  6574 00:F17C: 20 2C F0           JSR   LAB_27DB          ; save A as integer byte
  6575 00:F17F: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6576 00:F181: 45 B0              EOR   FAC1_s            ; toggle with FAC1 sign (b7)
  6577 00:F183: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  6578 00:F185: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6579 00:F187: 4C F3 EC           JMP   LAB_ADD           ; add FAC2 to FAC1 and return
  6580                        
  6581                        ; evaluate next character of exponential part of number
  6582                        
  6583                        LAB_2925
  6584 00:F18A: A5 A9              LDA   expcnt            ; get exponent count byte
  6585 00:F18C: C9 0A              CMP   #$0A              ; compare with 10 decimal
  6586 00:F18E: 90 09              BCC   LAB_2934          ; branch if less
  6587                        
  6588 00:F190: A9 64              LDA   #$64              ; make all -ve exponents = -100 decimal (causes underflow)
  6589 00:F192: 24 AB              BIT   expneg            ; test exponent -ve flag
  6590 00:F194: 30 0E              BMI   LAB_2942          ; branch if -ve
  6591                        
  6592 00:F196: 4C F5 ED           JMP   LAB_2564          ; else do overflow error
  6593                        
  6594                        LAB_2934
  6595 00:F199: 0A                 ASL                     ; * 2
  6596 00:F19A: 0A                 ASL                     ; * 4
  6597 00:F19B: 65 A9              ADC   expcnt            ; * 5
  6598 00:F19D: 0A                 ASL                     ; * 10
  6599 00:F19E: A0 00              LDY   #$00              ; set index
  6600 00:F1A0: 71 C3              ADC   (Bpntrl),Y        ; add character (will be $30 too much!)
  6601 00:F1A2: E9 2F              SBC   #'0'-1            ; convert character to binary
  6602                        LAB_2942
  6603 00:F1A4: 85 A9              STA   expcnt            ; save exponent count byte
  6604 00:F1A6: 4C 2A F1           JMP   LAB_28C4          ; go get next character
  6605                        
  6606                        ; print " in line [LINE #]"
  6607                        
  6608                        LAB_2953
  6609 00:F1A9: A9 22              LDA   #<LAB_LMSG        ; point to " in line " message low byte
  6610 00:F1AB: A0 FF              LDY   #>LAB_LMSG        ; point to " in line " message high byte
  6611 00:F1AD: 20 F9 DF           JSR   LAB_18C3          ; print null terminated string from memory
  6612                        
  6613                                                      ; print Basic line #
  6614 00:F1B0: A5 88              LDA   Clineh            ; get current line high byte
  6615 00:F1B2: A6 87              LDX   Clinel            ; get current line low byte
  6616                        
  6617                        ; print XA as unsigned integer
  6618                        
  6619                        LAB_295E
  6620 00:F1B4: 85 AD              STA   FAC1_1            ; save low byte as FAC1 mantissa1
  6621 00:F1B6: 86 AE              STX   FAC1_2            ; save high byte as FAC1 mantissa2
  6622 00:F1B8: A2 90              LDX   #$90              ; set exponent to 16d bits
  6623 00:F1BA: 38                 SEC                     ; set integer is +ve flag
  6624 00:F1BB: 20 39 F0           JSR   LAB_STFA          ; set exp=X, clearFAC1 mantissa3 and normalise
  6625 00:F1BE: A0 00              LDY   #$00              ; clear index
  6626 00:F1C0: 98                 TYA                     ; clear A
  6627 00:F1C1: 20 D4 F1           JSR   LAB_297B          ; convert FAC1 to string, skip sign character save
  6628 00:F1C4: 4C F9 DF           JMP   LAB_18C3          ; print null terminated string from memory and return
  6629                        
  6630                        ; convert FAC1 to ASCII string result in (AY)
  6631                        ; not any more, moved scratchpad to page 0
  6632                        
  6633                        LAB_296E
  6634 00:F1C7: A0 01              LDY   #$01              ; set index = 1
  6635 00:F1C9: A9 20              LDA   #$20              ; character = " " (assume +ve)
  6636 00:F1CB: 24 B0              BIT   FAC1_s            ; test FAC1 sign (b7)
  6637 00:F1CD: 10 02              BPL   LAB_2978          ; branch if +ve
  6638                        
  6639 00:F1CF: A9 2D              LDA   #$2D              ; else character = "-"
  6640                        LAB_2978
  6641 00:F1D1: 99 EF 00           STA   Decss,Y           ; save leading character (" " or "-")
  6642                        LAB_297B
  6643 00:F1D4: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  6644 00:F1D6: 84 BA              STY   Sendl             ; save index
  6645 00:F1D8: C8                 INY                     ; increment index
  6646 00:F1D9: A6 AC              LDX   FAC1_e            ; get FAC1 exponent
  6647 00:F1DB: D0 05              BNE   LAB_2989          ; branch if FAC1<>0
  6648                        
  6649                                                      ; exponent was $00 so FAC1 is 0
  6650 00:F1DD: A9 30              LDA   #'0'              ; set character = "0"
  6651 00:F1DF: 4C E0 F2           JMP   LAB_2A89          ; save last character, [EOT] and exit
  6652                        
  6653                                                      ; FAC1 is some non zero value
  6654                        LAB_2989
  6655 00:F1E2: A9 00              LDA   #$00              ; clear (number exponent count)
  6656 00:F1E4: E0 81              CPX   #$81              ; compare FAC1 exponent with $81 (>1.00000)
  6657                        
  6658 00:F1E6: B0 09              BCS   LAB_299A          ; branch if FAC1=>1
  6659                        
  6660                                                      ; FAC1<1
  6661 00:F1E8: A9 B6              LDA   #<LAB_294F        ; set pointer low byte to 1,000,000
  6662 00:F1EA: A0 F8              LDY   #>LAB_294F        ; set pointer high byte to 1,000,000
  6663 00:F1EC: 20 6B EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6664 00:F1EF: A9 FA              LDA   #$FA              ; set number exponent count (-6)
  6665                        LAB_299A
  6666 00:F1F1: 85 A8              STA   numexp            ; save number exponent count
  6667                        LAB_299C
  6668 00:F1F3: A9 B2              LDA   #<LAB_294B        ; set pointer low byte to 999999.4375 (max before sci note)
  6669 00:F1F5: A0 F8              LDY   #>LAB_294B        ; set pointer high byte to 999999.4375
  6670 00:F1F7: 20 49 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6671 00:F1FA: F0 1E              BEQ   LAB_29C3          ; exit if FAC1 = (AY)
  6672                        
  6673 00:F1FC: 10 12              BPL   LAB_29B9          ; go do /10 if FAC1 > (AY)
  6674                        
  6675                                                      ; FAC1 < (AY)
  6676                        LAB_29A7
  6677 00:F1FE: A9 AE              LDA   #<LAB_2947        ; set pointer low byte to 99999.9375
  6678 00:F200: A0 F8              LDY   #>LAB_2947        ; set pointer high byte to 99999.9375
  6679 00:F202: 20 49 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6680 00:F205: F0 02              BEQ   LAB_29B2          ; branch if FAC1 = (AY) (allow decimal places)
  6681                        
  6682 00:F207: 10 0E              BPL   LAB_29C0          ; branch if FAC1 > (AY) (no decimal places)
  6683                        
  6684                                                      ; FAC1 <= (AY)
  6685                        LAB_29B2
  6686 00:F209: 20 09 EF           JSR   LAB_269E          ; multiply by 10
  6687 00:F20C: C6 A8              DEC   numexp            ; decrement number exponent count
  6688 00:F20E: D0 EE              BNE   LAB_29A7          ; go test again (branch always)
  6689                        
  6690                        LAB_29B9
  6691 00:F210: 20 22 EF           JSR   LAB_26B9          ; divide by 10
  6692 00:F213: E6 A8              INC   numexp            ; increment number exponent count
  6693 00:F215: D0 DC              BNE   LAB_299C          ; go test again (branch always)
  6694                        
  6695                        ; now we have just the digits to do
  6696                        
  6697                        LAB_29C0
  6698 00:F217: 20 EC EC           JSR   LAB_244E          ; add 0.5 to FAC1 (round FAC1)
  6699                        LAB_29C3
  6700 00:F21A: 20 82 F0           JSR   LAB_2831          ; convert FAC1 floating-to-fixed
  6701 00:F21D: A2 01              LDX   #$01              ; set default digits before dp = 1
  6702 00:F21F: A5 A8              LDA   numexp            ; get number exponent count
  6703 00:F221: 18                 CLC                     ; clear carry for add
  6704 00:F222: 69 07              ADC   #$07              ; up to 6 digits before point
  6705 00:F224: 30 09              BMI   LAB_29D8          ; if -ve then 1 digit before dp
  6706                        
  6707 00:F226: C9 08              CMP   #$08              ; A>=8 if n>=1E6
  6708 00:F228: B0 06              BCS   LAB_29D9          ; branch if >= $08
  6709                        
  6710                                                      ; carry is clear
  6711 00:F22A: 69 FF              ADC   #$FF              ; take 1 from digit count
  6712 00:F22C: AA                 TAX                     ; copy to A
  6713 00:F22D: A9 02              LDA   #$02              ;.set exponent adjust
  6714                        LAB_29D8
  6715 00:F22F: 38                 SEC                     ; set carry for subtract
  6716                        LAB_29D9
  6717 00:F230: E9 02              SBC   #$02              ; -2
  6718 00:F232: 85 A9              STA   expcnt            ;.save exponent adjust
  6719 00:F234: 86 A8              STX   numexp            ; save digits before dp count
  6720 00:F236: 8A                 TXA                     ; copy to A
  6721 00:F237: F0 02              BEQ   LAB_29E4          ; branch if no digits before dp
  6722                        
  6723 00:F239: 10 13              BPL   LAB_29F7          ; branch if digits before dp
  6724                        
  6725                        LAB_29E4
  6726 00:F23B: A4 BA              LDY   Sendl             ; get output string index
  6727 00:F23D: A9 2E              LDA   #$2E              ; character "."
  6728 00:F23F: C8                 INY                     ; increment index
  6729 00:F240: 99 EF 00           STA   Decss,Y           ; save to output string
  6730 00:F243: 8A                 TXA                     ;.
  6731 00:F244: F0 06              BEQ   LAB_29F5          ;.
  6732                        
  6733 00:F246: A9 30              LDA   #'0'              ; character "0"
  6734 00:F248: C8                 INY                     ; increment index
  6735 00:F249: 99 EF 00           STA   Decss,Y           ; save to output string
  6736                        LAB_29F5
  6737 00:F24C: 84 BA              STY   Sendl             ; save output string index
  6738                        LAB_29F7
  6739 00:F24E: A0 00              LDY   #$00              ; clear index (point to 100,000)
  6740 00:F250: A2 80              LDX   #$80              ; 
  6741                        LAB_29FB
  6742 00:F252: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  6743 00:F254: 18                 CLC                     ; clear carry for add
  6744 00:F255: 79 2C F9           ADC   LAB_2A9C,Y        ; add -ve LSB
  6745 00:F258: 85 AF              STA   FAC1_3            ; save FAC1 mantissa3
  6746 00:F25A: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  6747 00:F25C: 79 2B F9           ADC   LAB_2A9B,Y        ; add -ve NMSB
  6748 00:F25F: 85 AE              STA   FAC1_2            ; save FAC1 mantissa2
  6749 00:F261: A5 AD              LDA   FAC1_1            ; get FAC1 mantissa1
  6750 00:F263: 79 2A F9           ADC   LAB_2A9A,Y        ; add -ve MSB
  6751 00:F266: 85 AD              STA   FAC1_1            ; save FAC1 mantissa1
  6752 00:F268: E8                 INX                     ; 
  6753 00:F269: B0 04              BCS   LAB_2A18          ; 
  6754                        
  6755 00:F26B: 10 E5              BPL   LAB_29FB          ; not -ve so try again
  6756                        
  6757 00:F26D: 30 02              BMI   LAB_2A1A          ; 
  6758                        
  6759                        LAB_2A18
  6760 00:F26F: 30 E1              BMI   LAB_29FB          ; 
  6761                        
  6762                        LAB_2A1A
  6763 00:F271: 8A                 TXA                     ; 
  6764 00:F272: 90 04              BCC   LAB_2A21          ; 
  6765                        
  6766 00:F274: 49 FF              EOR   #$FF              ; 
  6767 00:F276: 69 0A              ADC   #$0A              ; 
  6768                        LAB_2A21
  6769 00:F278: 69 2F              ADC   #'0'-1            ; add "0"-1 to result
  6770 00:F27A: C8                 INY                     ; increment index ..
  6771 00:F27B: C8                 INY                     ; .. to next less ..
  6772 00:F27C: C8                 INY                     ; .. power of ten
  6773 00:F27D: 84 95              STY   Cvaral            ; save as current var address low byte
  6774 00:F27F: A4 BA              LDY   Sendl             ; get output string index
  6775 00:F281: C8                 INY                     ; increment output string index
  6776 00:F282: AA                 TAX                     ; copy character to X
  6777 00:F283: 29 7F              AND   #$7F              ; mask out top bit
  6778 00:F285: 99 EF 00           STA   Decss,Y           ; save to output string
  6779 00:F288: C6 A8              DEC   numexp            ; decrement # of characters before the dp
  6780 00:F28A: D0 06              BNE   LAB_2A3B          ; branch if still characters to do
  6781                        
  6782                                                      ; else output the point
  6783 00:F28C: A9 2E              LDA   #$2E              ; character "."
  6784 00:F28E: C8                 INY                     ; increment output string index
  6785 00:F28F: 99 EF 00           STA   Decss,Y           ; save to output string
  6786                        LAB_2A3B
  6787 00:F292: 84 BA              STY   Sendl             ; save output string index
  6788 00:F294: A4 95              LDY   Cvaral            ; get current var address low byte
  6789 00:F296: 8A                 TXA                     ; get character back
  6790 00:F297: 49 FF              EOR   #$FF              ; 
  6791 00:F299: 29 80              AND   #$80              ; 
  6792 00:F29B: AA                 TAX                     ; 
  6793 00:F29C: C0 12              CPY   #$12              ; compare index with max
  6794 00:F29E: D0 B2              BNE   LAB_29FB          ; loop if not max
  6795                        
  6796                                                      ; now remove trailing zeroes
  6797 00:F2A0: A4 BA              LDY   Sendl             ; get output string index
  6798                        LAB_2A4B
  6799 00:F2A2: B9 EF 00           LDA   Decss,Y           ; get character from output string
  6800 00:F2A5: 88                 DEY                     ; decrement output string index
  6801 00:F2A6: C9 30              CMP   #'0'              ; compare with "0"
  6802 00:F2A8: F0 F8              BEQ   LAB_2A4B          ; loop until non "0" character found
  6803                        
  6804 00:F2AA: C9 2E              CMP   #'.'              ; compare with "."
  6805 00:F2AC: F0 01              BEQ   LAB_2A58          ; branch if was dp
  6806                        
  6807                                                      ; restore last character
  6808 00:F2AE: C8                 INY                     ; increment output string index
  6809                        LAB_2A58
  6810 00:F2AF: A9 2B              LDA   #$2B              ; character "+"
  6811 00:F2B1: A6 A9              LDX   expcnt            ; get exponent count
  6812 00:F2B3: F0 2E              BEQ   LAB_2A8C          ; if zero go set null terminator and exit
  6813                        
  6814                                                      ; exponent isn't zero so write exponent
  6815 00:F2B5: 10 08              BPL   LAB_2A68          ; branch if exponent count +ve
  6816                        
  6817 00:F2B7: A9 00              LDA   #$00              ; clear A
  6818 00:F2B9: 38                 SEC                     ; set carry for subtract
  6819 00:F2BA: E5 A9              SBC   expcnt            ; subtract exponent count adjust (convert -ve to +ve)
  6820 00:F2BC: AA                 TAX                     ; copy exponent count to X
  6821 00:F2BD: A9 2D              LDA   #'-'              ; character "-"
  6822                        LAB_2A68
  6823 00:F2BF: 99 F1 00           STA   Decss+2,Y         ; save to output string
  6824 00:F2C2: A9 45              LDA   #$45              ; character "E"
  6825 00:F2C4: 99 F0 00           STA   Decss+1,Y         ; save exponent sign to output string
  6826 00:F2C7: 8A                 TXA                     ; get exponent count back
  6827 00:F2C8: A2 2F              LDX   #'0'-1            ; one less than "0" character
  6828 00:F2CA: 38                 SEC                     ; set carry for subtract
  6829                        LAB_2A74
  6830 00:F2CB: E8                 INX                     ; increment 10's character
  6831 00:F2CC: E9 0A              SBC   #$0A              ;.subtract 10 from exponent count
  6832 00:F2CE: B0 FB              BCS   LAB_2A74          ; loop while still >= 0
  6833                        
  6834 00:F2D0: 69 3A              ADC   #':'              ; add character ":" ($30+$0A, result is 10 less that value)
  6835 00:F2D2: 99 F3 00           STA   Decss+4,Y         ; save to output string
  6836 00:F2D5: 8A                 TXA                     ; copy 10's character
  6837 00:F2D6: 99 F2 00           STA   Decss+3,Y         ; save to output string
  6838 00:F2D9: A9 00              LDA   #$00              ; set null terminator
  6839 00:F2DB: 99 F4 00           STA   Decss+5,Y         ; save to output string
  6840 00:F2DE: F0 08              BEQ   LAB_2A91          ; go set string pointer (AY) and exit (branch always)
  6841                        
  6842                                                      ; save last character, [EOT] and exit
  6843                        LAB_2A89
  6844 00:F2E0: 99 EF 00           STA   Decss,Y           ; save last character to output string
  6845                        
  6846                                                      ; set null terminator and exit
  6847                        LAB_2A8C
  6848 00:F2E3: A9 00              LDA   #$00              ; set null terminator
  6849 00:F2E5: 99 F0 00           STA   Decss+1,Y         ; save after last character
  6850                        
  6851                                                      ; set string pointer (AY) and exit
  6852                        LAB_2A91
  6853 00:F2E8: A9 F0              LDA   #<Decssp1         ; set result string low pointer
  6854 00:F2EA: A0 00              LDY   #>Decssp1         ; set result string high pointer
  6855 00:F2EC: 60                 RTS
  6856                        
  6857                        ; perform power function
  6858                        
  6859                        LAB_POWER
  6860 00:F2ED: F0 42              BEQ   LAB_EXP           ; go do  EXP()
  6861                        
  6862 00:F2EF: A5 B3              LDA   FAC2_e            ; get FAC2 exponent
  6863 00:F2F1: D0 03              BNE   LAB_2ABF          ; branch if FAC2<>0
  6864                        
  6865 00:F2F3: 4C 84 ED           JMP   LAB_24F3          ; clear FAC1 exponent and sign and return
  6866                        
  6867                        LAB_2ABF
  6868 00:F2F6: A2 9C              LDX   #<func_l          ; set destination pointer low byte
  6869 00:F2F8: A0 00              LDY   #>func_l          ; set destination pointer high byte
  6870 00:F2FA: 20 D9 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  6871 00:F2FD: A5 B7              LDA   FAC2_s            ; get FAC2 sign (b7)
  6872 00:F2FF: 10 0F              BPL   LAB_2AD9          ; branch if FAC2>0
  6873                        
  6874                                                      ; else FAC2 is -ve and can only be raised to an
  6875                                                      ; integer power which gives an x +j0 result
  6876 00:F301: 20 B3 F0           JSR   LAB_INT           ; perform INT
  6877 00:F304: A9 9C              LDA   #<func_l          ; set source pointer low byte
  6878 00:F306: A0 00              LDY   #>func_l          ; set source pointer high byte
  6879 00:F308: 20 49 F0           JSR   LAB_27F8          ; compare FAC1 with (AY)
  6880 00:F30B: D0 03              BNE   LAB_2AD9          ; branch if FAC1 <> (AY) to allow Function Call error
  6881                                                      ; this will leave FAC1 -ve and cause a Function Call
  6882                                                      ; error when LOG() is called
  6883                        
  6884 00:F30D: 98                 TYA                     ; clear sign b7
  6885 00:F30E: A4 5B              LDY   Temp3             ; save mantissa 3 from INT() function as sign in Y
  6886                                                      ; for possible later negation, b0
  6887                        LAB_2AD9
  6888 00:F310: 20 F7 EC           JSR   LAB_279D          ; save FAC1 sign and copy ABS(FAC2) to FAC1
  6889 00:F313: 98                 TYA                     ; copy sign back ..
  6890 00:F314: 48                 PHA                     ; .. and save it
  6891 00:F315: 20 2D EE           JSR   LAB_LOG           ; do LOG(n)
  6892 00:F318: A9 9C              LDA   #<garb_l          ; set pointer low byte
  6893 00:F31A: A0 00              LDY   #>garb_l          ; set pointer high byte
  6894 00:F31C: 20 6B EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY) (square the value)
  6895 00:F31F: 20 31 F3           JSR   LAB_EXP           ; go do EXP(n)
  6896 00:F322: 68                 PLA                     ; pull sign from stack
  6897 00:F323: 4A                 LSR                     ; b0 is to be tested, shift to Cb
  6898 00:F324: 90 0A              BCC   LAB_2AF9          ; if no bit then exit
  6899                        
  6900                                                      ; Perform negation
  6901                        ; do - FAC1
  6902                        
  6903                        LAB_GTHAN
  6904 00:F326: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6905 00:F328: F0 06              BEQ   LAB_2AF9          ; exit if FAC1_e = $00
  6906                        
  6907 00:F32A: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  6908 00:F32C: 49 FF              EOR   #$FF              ; complement it
  6909 00:F32E: 85 B0              STA   FAC1_s            ; save FAC1 sign (b7)
  6910                        LAB_2AF9
  6911 00:F330: 60                 RTS
  6912                        
  6913                        ; perform EXP()   (x^e)
  6914                        
  6915                        LAB_EXP
  6916 00:F331: A9 BA              LDA   #<LAB_2AFA        ; set 1.443 pointer low byte
  6917 00:F333: A0 F8              LDY   #>LAB_2AFA        ; set 1.443 pointer high byte
  6918 00:F335: 20 6B EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6919 00:F338: A5 B9              LDA   FAC1_r            ; get FAC1 rounding byte
  6920 00:F33A: 69 50              ADC   #$50              ; +$50/$100
  6921 00:F33C: 90 03              BCC   LAB_2B2B          ; skip rounding if no carry
  6922                        
  6923 00:F33E: 20 13 F0           JSR   LAB_27C2          ; round FAC1 (no check)
  6924                        LAB_2B2B
  6925 00:F341: 85 A3              STA   FAC2_r            ; save FAC2 rounding byte
  6926 00:F343: 20 FF EF           JSR   LAB_27AE          ; copy FAC1 to FAC2
  6927 00:F346: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  6928 00:F348: C9 88              CMP   #$88              ; compare with EXP limit (256d)
  6929 00:F34A: 90 03              BCC   LAB_2B39          ; branch if less
  6930                        
  6931                        LAB_2B36
  6932 00:F34C: 20 00 EF           JSR   LAB_2690          ; handle overflow and underflow
  6933                        LAB_2B39
  6934 00:F34F: 20 B3 F0           JSR   LAB_INT           ; perform INT
  6935 00:F352: A5 5B              LDA   Temp3             ; get mantissa 3 from INT() function
  6936 00:F354: 18                 CLC                     ; clear carry for add
  6937 00:F355: 69 81              ADC   #$81              ; normalise +1
  6938 00:F357: F0 F3              BEQ   LAB_2B36          ; if $00 go handle overflow
  6939                        
  6940 00:F359: 38                 SEC                     ; set carry for subtract
  6941 00:F35A: E9 01              SBC   #$01              ; now correct for exponent
  6942 00:F35C: 48                 PHA                     ; save FAC2 exponent
  6943                        
  6944                                                      ; swap FAC1 and FAC2
  6945 00:F35D: A2 04              LDX   #$04              ; 4 bytes to do
  6946                        LAB_2B49
  6947 00:F35F: B5 B3              LDA   FAC2_e,X          ; get FAC2,X
  6948 00:F361: B4 AC              LDY   FAC1_e,X          ; get FAC1,X
  6949 00:F363: 95 AC              STA   FAC1_e,X          ; save FAC1,X
  6950 00:F365: 94 B3              STY   FAC2_e,X          ; save FAC2,X
  6951 00:F367: CA                 DEX                     ; decrement count/index
  6952 00:F368: 10 F5              BPL   LAB_2B49          ; loop if not all done
  6953                        
  6954 00:F36A: A5 A3              LDA   FAC2_r            ; get FAC2 rounding byte
  6955 00:F36C: 85 B9              STA   FAC1_r            ; save as FAC1 rounding byte
  6956 00:F36E: 20 D8 EC           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  6957 00:F371: 20 26 F3           JSR   LAB_GTHAN         ; do - FAC1
  6958 00:F374: A9 BE              LDA   #<LAB_2AFE        ; set counter pointer low byte
  6959 00:F376: A0 F8              LDY   #>LAB_2AFE        ; set counter pointer high byte
  6960 00:F378: 20 99 F3           JSR   LAB_2B84          ; go do series evaluation
  6961 00:F37B: A9 00              LDA   #$00              ; clear A
  6962 00:F37D: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  6963 00:F37F: 68                 PLA                     ;.get saved FAC2 exponent
  6964 00:F380: 4C E5 EE           JMP   LAB_2675          ; test and adjust accumulators and return
  6965                        
  6966                        ; ^2 then series evaluation
  6967                        
  6968                        LAB_2B6E
  6969 00:F383: 85 BA              STA   Cptrl             ; save count pointer low byte
  6970 00:F385: 84 BB              STY   Cptrh             ; save count pointer high byte
  6971 00:F387: 20 CF EF           JSR   LAB_276E          ; pack FAC1 into Adatal
  6972 00:F38A: A9 A4              LDA   #<Adatal          ; set pointer low byte (Y already $00)
  6973 00:F38C: 20 6B EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  6974 00:F38F: 20 9D F3           JSR   LAB_2B88          ; go do series evaluation
  6975 00:F392: A9 A4              LDA   #<Adatal          ; pointer to original # low byte
  6976 00:F394: A0 00              LDY   #>Adatal          ; pointer to original # high byte
  6977 00:F396: 4C 6B EE           JMP   LAB_25FB          ; do convert AY, FCA1*(AY) and return
  6978                        
  6979                        ; series evaluation
  6980                        
  6981                        LAB_2B84
  6982 00:F399: 85 BA              STA   Cptrl             ; save count pointer low byte
  6983 00:F39B: 84 BB              STY   Cptrh             ; save count pointer high byte
  6984                        LAB_2B88
  6985 00:F39D: A2 A8              LDX   #<numexp          ; set pointer low byte
  6986 00:F39F: 20 D1 EF           JSR   LAB_2770          ; set pointer high byte and pack FAC1 into numexp
  6987 00:F3A2: B1 BA              LDA   (Cptrl),Y         ; get constants count
  6988 00:F3A4: 85 B1              STA   numcon            ; save constants count
  6989 00:F3A6: A4 BA              LDY   Cptrl             ; get count pointer low byte
  6990 00:F3A8: C8                 INY                     ; increment it (now constants pointer)
  6991 00:F3A9: 98                 TYA                     ; copy it
  6992 00:F3AA: D0 02              BNE   LAB_2B97          ; skip next if no overflow
  6993                        
  6994 00:F3AC: E6 BB              INC   Cptrh             ; else increment high byte
  6995                        LAB_2B97
  6996 00:F3AE: 85 BA              STA   Cptrl             ; save low byte
  6997 00:F3B0: A4 BB              LDY   Cptrh             ; get high byte
  6998                        LAB_2B9B
  6999 00:F3B2: 20 6B EE           JSR   LAB_25FB          ; do convert AY, FCA1*(AY)
  7000 00:F3B5: A5 BA              LDA   Cptrl             ; get constants pointer low byte
  7001 00:F3B7: A4 BB              LDY   Cptrh             ; get constants pointer high byte
  7002 00:F3B9: 18                 CLC                     ; clear carry for add
  7003 00:F3BA: 69 04              ADC   #$04              ; +4 to  low pointer (4 bytes per constant)
  7004 00:F3BC: 90 01              BCC   LAB_2BA8          ; skip next if no overflow
  7005                        
  7006 00:F3BE: C8                 INY                     ; increment high byte
  7007                        LAB_2BA8
  7008 00:F3BF: 85 BA              STA   Cptrl             ; save pointer low byte
  7009 00:F3C1: 84 BB              STY   Cptrh             ; save pointer high byte
  7010 00:F3C3: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1
  7011 00:F3C6: A9 A8              LDA   #<numexp          ; set pointer low byte to partial @ numexp
  7012 00:F3C8: A0 00              LDY   #>numexp          ; set pointer high byte to partial @ numexp
  7013 00:F3CA: C6 B1              DEC   numcon            ; decrement constants count
  7014 00:F3CC: D0 E4              BNE   LAB_2B9B          ; loop until all done
  7015                        
  7016 00:F3CE: 60                 RTS
  7017                        
  7018                        ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
  7019                        ; to get 19th next number in sequence after seed n. This version of the PRNG uses
  7020                        ; the Galois method and a sample of 65536 bytes produced gives the following values.
  7021                        
  7022                        ; Entropy = 7.997442 bits per byte
  7023                        ; Optimum compression would reduce these 65536 bytes by 0 percent
  7024                        
  7025                        ; Chi square distribution for 65536 samples is 232.01, and
  7026                        ; randomly would exceed this value 75.00 percent of the time
  7027                        
  7028                        ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
  7029                        ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
  7030                        ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
  7031                        
  7032                        LAB_RND
  7033 00:F3CF: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7034 00:F3D1: F0 07              BEQ   NextPRN           ; do next random # if zero
  7035                        
  7036                                                      ; else get seed into random number store
  7037 00:F3D3: A2 D8              LDX   #Rbyte4           ; set PRNG pointer low byte
  7038 00:F3D5: A0 00              LDY   #$00              ; set PRNG pointer high byte
  7039 00:F3D7: 20 D9 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  7040                        NextPRN
  7041 00:F3DA: A2 AF              LDX   #$AF              ; set EOR byte
  7042 00:F3DC: A0 13              LDY   #$13              ; do this nineteen times
  7043                        LoopPRN
  7044 00:F3DE: 06 D9              ASL   Rbyte1            ; shift PRNG most significant byte
  7045 00:F3E0: 26 DA              ROL   Rbyte2            ; shift PRNG middle byte
  7046 00:F3E2: 26 DB              ROL   Rbyte3            ; shift PRNG least significant byte
  7047 00:F3E4: 26 D8              ROL   Rbyte4            ; shift PRNG extra byte
  7048 00:F3E6: 90 05              BCC   Ninc1             ; branch if bit 32 clear
  7049                        
  7050 00:F3E8: 8A                 TXA                     ; set EOR byte
  7051 00:F3E9: 45 D9              EOR   Rbyte1            ; EOR PRNG extra byte
  7052 00:F3EB: 85 D9              STA   Rbyte1            ; save new PRNG extra byte
  7053                        Ninc1
  7054 00:F3ED: 88                 DEY                     ; decrement loop count
  7055 00:F3EE: D0 EE              BNE   LoopPRN           ; loop if not all done
  7056                        
  7057 00:F3F0: A2 02              LDX   #$02              ; three bytes to copy
  7058                        CopyPRNG
  7059 00:F3F2: B5 D9              LDA   Rbyte1,X          ; get PRNG byte
  7060 00:F3F4: 95 AD              STA   FAC1_1,X          ; save FAC1 byte
  7061 00:F3F6: CA                 DEX
  7062 00:F3F7: 10 F9              BPL   CopyPRNG          ; loop if not complete
  7063                        
  7064 00:F3F9: A9 80              LDA   #$80              ; set the exponent
  7065 00:F3FB: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7066                        
  7067 00:F3FD: 0A                 ASL                     ; clear A
  7068 00:F3FE: 85 B0              STA   FAC1_s            ; save FAC1 sign
  7069                        
  7070 00:F400: 4C 66 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  7071                        
  7072                        ; perform COS()
  7073                        
  7074                        LAB_COS
  7075 00:F403: A9 DB              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7076 00:F405: A0 F8              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7077 00:F407: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1
  7078                        
  7079                        ; perform SIN()
  7080                        
  7081                        LAB_SIN
  7082 00:F40A: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7083 00:F40D: A9 F0              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7084 00:F40F: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7085 00:F411: A6 B7              LDX   FAC2_s            ; get FAC2 sign (b7)
  7086 00:F413: 20 2B EF           JSR   LAB_26C2          ; divide by (AY) (X=sign)
  7087 00:F416: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7088 00:F419: 20 B3 F0           JSR   LAB_INT           ; perform INT
  7089 00:F41C: A9 00              LDA   #$00              ; clear byte
  7090 00:F41E: 85 B8              STA   FAC_sc            ; clear sign compare (FAC1 EOR FAC2)
  7091 00:F420: 20 D8 EC           JSR   LAB_SUBTRACT      ; perform subtraction, FAC2 from FAC1
  7092 00:F423: A9 22              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7093 00:F425: A0 F9              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7094 00:F427: 20 D5 EC           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7095 00:F42A: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7096 00:F42C: 48                 PHA                     ; save FAC1 sign
  7097 00:F42D: 10 0D              BPL   LAB_2C35          ; branch if +ve
  7098                        
  7099                                                      ; FAC1 sign was -ve
  7100 00:F42F: 20 EC EC           JSR   LAB_244E          ; add 0.5 to FAC1
  7101 00:F432: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7102 00:F434: 30 09              BMI   LAB_2C38          ; branch if -ve
  7103                        
  7104 00:F436: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7105 00:F438: 49 FF              EOR   #$FF              ; toggle flag
  7106 00:F43A: 85 63              STA   Cflag             ; save comparison evaluation flag
  7107                        LAB_2C35
  7108 00:F43C: 20 26 F3           JSR   LAB_GTHAN         ; do - FAC1
  7109                        LAB_2C38
  7110 00:F43F: A9 22              LDA   #<LAB_2C80        ; set 0.25 pointer low byte
  7111 00:F441: A0 F9              LDY   #>LAB_2C80        ; set 0.25 pointer high byte
  7112 00:F443: 20 F0 EC           JSR   LAB_246C          ; add (AY) to FAC1
  7113 00:F446: 68                 PLA                     ; restore FAC1 sign
  7114 00:F447: 10 03              BPL   LAB_2C45          ; branch if was +ve
  7115                        
  7116                                                      ; else correct FAC1
  7117 00:F449: 20 26 F3           JSR   LAB_GTHAN         ; do - FAC1
  7118                        LAB_2C45
  7119 00:F44C: A9 DF              LDA   #<LAB_2C84        ; set pointer low byte to counter
  7120 00:F44E: A0 F8              LDY   #>LAB_2C84        ; set pointer high byte to counter
  7121 00:F450: 4C 83 F3           JMP   LAB_2B6E          ; ^2 then series evaluation and return
  7122                        
  7123                        ; perform TAN()
  7124                        
  7125                        LAB_TAN
  7126 00:F453: 20 CF EF           JSR   LAB_276E          ; pack FAC1 into Adatal
  7127 00:F456: A9 00              LDA   #$00              ; clear byte
  7128 00:F458: 85 63              STA   Cflag             ; clear comparison evaluation flag
  7129 00:F45A: 20 0A F4           JSR   LAB_SIN           ; go do SIN(n)
  7130 00:F45D: A2 9C              LDX   #<func_l          ; set sin(n) pointer low byte
  7131 00:F45F: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7132 00:F461: 20 D9 EF           JSR   LAB_2778          ; pack FAC1 into (XY)
  7133 00:F464: A9 A4              LDA   #<Adatal          ; set n pointer low addr
  7134 00:F466: A0 00              LDY   #>Adatal          ; set n pointer high addr
  7135 00:F468: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7136 00:F46B: A9 00              LDA   #$00              ; clear byte
  7137 00:F46D: 85 B0              STA   FAC1_s            ; clear FAC1 sign (b7)
  7138 00:F46F: A5 63              LDA   Cflag             ; get comparison evaluation flag
  7139 00:F471: 20 7B F4           JSR   LAB_2C74          ; save flag and go do series evaluation
  7140                        
  7141 00:F474: A9 9C              LDA   #<func_l          ; set sin(n) pointer low byte
  7142 00:F476: A0 00              LDY   #>func_l          ; set sin(n) pointer high byte
  7143 00:F478: 4C 33 EF           JMP   LAB_26CA          ; convert AY and do (AY)/FAC1
  7144                        
  7145                        LAB_2C74
  7146 00:F47B: 48                 PHA                     ; save comparison evaluation flag
  7147 00:F47C: 4C 3C F4           JMP   LAB_2C35          ; go do series evaluation
  7148                        
  7149                        ; perform USR()
  7150                        
  7151                        LAB_USR
  7152 00:F47F: 20 0A 00           JSR   Usrjmp            ; call user code
  7153 00:F482: 4C 14 E3           JMP   LAB_1BFB          ; scan for ")", else do syntax error then warm start
  7154                        
  7155                        ; perform ATN()
  7156                        
  7157                        LAB_ATN
  7158 00:F485: A5 B0              LDA   FAC1_s            ; get FAC1 sign (b7)
  7159 00:F487: 48                 PHA                     ; save sign
  7160 00:F488: 10 03              BPL   LAB_2CA1          ; branch if +ve
  7161                        
  7162 00:F48A: 20 26 F3           JSR   LAB_GTHAN         ; else do - FAC1
  7163                        LAB_2CA1
  7164 00:F48D: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7165 00:F48F: 48                 PHA                     ; push exponent
  7166 00:F490: C9 81              CMP   #$81              ; compare with 1
  7167 00:F492: 90 07              BCC   LAB_2CAF          ; branch if FAC1<1
  7168                        
  7169 00:F494: A9 15              LDA   #<LAB_259C        ; set 1 pointer low byte
  7170 00:F496: A0 F9              LDY   #>LAB_259C        ; set 1 pointer high byte
  7171 00:F498: 20 33 EF           JSR   LAB_26CA          ; convert AY and do (AY)/FAC1
  7172                        LAB_2CAF
  7173 00:F49B: A9 F4              LDA   #<LAB_2CC9        ; set pointer low byte to counter
  7174 00:F49D: A0 F8              LDY   #>LAB_2CC9        ; set pointer high byte to counter
  7175 00:F49F: 20 83 F3           JSR   LAB_2B6E          ; ^2 then series evaluation
  7176 00:F4A2: 68                 PLA                     ; restore old FAC1 exponent
  7177 00:F4A3: C9 81              CMP   #$81              ; compare with 1
  7178 00:F4A5: 90 07              BCC   LAB_2CC2          ; branch if FAC1<1
  7179                        
  7180 00:F4A7: A9 DB              LDA   #<LAB_2C78        ; set (pi/2) pointer low byte
  7181 00:F4A9: A0 F8              LDY   #>LAB_2C78        ; set (pi/2) pointer high byte
  7182 00:F4AB: 20 D5 EC           JSR   LAB_2455          ; perform subtraction, (AY) from FAC1
  7183                        LAB_2CC2
  7184 00:F4AE: 68                 PLA                     ; restore FAC1 sign
  7185 00:F4AF: 10 16              BPL   LAB_2D04          ; exit if was +ve
  7186                        
  7187 00:F4B1: 4C 26 F3           JMP   LAB_GTHAN         ; else do - FAC1 and return
  7188                        
  7189                        ; perform BITSET
  7190                        
  7191                        LAB_BITSET
  7192 00:F4B4: 20 0A EC           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7193 00:F4B7: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7194 00:F4B9: B0 20              BCS   FCError           ; branch if > 7
  7195                        
  7196 00:F4BB: A9 00              LDA   #$00              ; clear A
  7197 00:F4BD: 38                 SEC                     ; set the carry
  7198                        S_Bits
  7199 00:F4BE: 2A                 ROL                     ; shift bit
  7200 00:F4BF: CA                 DEX                     ; decrement bit number
  7201 00:F4C0: 10 FC              BPL   S_Bits            ; loop if still +ve
  7202                        
  7203 00:F4C2: E8                 INX                     ; make X = $00
  7204 00:F4C3: 01 11              ORA   (Itempl,X)        ; or with byte via temporary integer (addr)
  7205 00:F4C5: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7206                        LAB_2D04
  7207 00:F4C7: 60                 RTS
  7208                        
  7209                        ; perform BITCLR
  7210                        
  7211                        LAB_BITCLR
  7212 00:F4C8: 20 0A EC           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7213 00:F4CB: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7214 00:F4CD: B0 0C              BCS   FCError           ; branch if > 7
  7215                        
  7216 00:F4CF: A9 FF              LDA   #$FF              ; set A
  7217                        S_Bitc
  7218 00:F4D1: 2A                 ROL                     ; shift bit
  7219 00:F4D2: CA                 DEX                     ; decrement bit number
  7220 00:F4D3: 10 FC              BPL   S_Bitc            ; loop if still +ve
  7221                        
  7222 00:F4D5: E8                 INX                     ; make X = $00
  7223 00:F4D6: 21 11              AND   (Itempl,X)        ; and with byte via temporary integer (addr)
  7224 00:F4D8: 81 11              STA   (Itempl,X)        ; save byte via temporary integer (addr)
  7225 00:F4DA: 60                 RTS
  7226                        
  7227                        FCError
  7228 00:F4DB: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start
  7229                        
  7230                        ; perform BITTST()
  7231                        
  7232                        LAB_BTST
  7233 00:F4DE: 20 BC 00           JSR   LAB_IGBY          ; increment BASIC pointer
  7234 00:F4E1: 20 0A EC           JSR   LAB_GADB          ; get two parameters for POKE or WAIT
  7235 00:F4E4: E0 08              CPX   #$08              ; only 0 to 7 are allowed
  7236 00:F4E6: B0 F3              BCS   FCError           ; branch if > 7
  7237                        
  7238 00:F4E8: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7239 00:F4EB: C9 29              CMP   #')'              ; is next character ")"
  7240 00:F4ED: F0 03              BEQ   TST_OK            ; if ")" go do rest of function
  7241                        
  7242 00:F4EF: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7243                        
  7244                        TST_OK
  7245 00:F4F2: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7246 00:F4F5: A9 00              LDA   #$00              ; clear A
  7247 00:F4F7: 38                 SEC                     ; set the carry
  7248                        T_Bits
  7249 00:F4F8: 2A                 ROL                     ; shift bit
  7250 00:F4F9: CA                 DEX                     ; decrement bit number
  7251 00:F4FA: 10 FC              BPL   T_Bits            ; loop if still +ve
  7252                        
  7253 00:F4FC: E8                 INX                     ; make X = $00
  7254 00:F4FD: 21 11              AND   (Itempl,X)        ; AND with byte via temporary integer (addr)
  7255 00:F4FF: F0 02              BEQ   LAB_NOTT          ; branch if zero (already correct)
  7256                        
  7257 00:F501: A9 FF              LDA   #$FF              ; set for -1 result
  7258                        LAB_NOTT
  7259 00:F503: 4C 2C F0           JMP   LAB_27DB          ; go do SGN tail
  7260                        
  7261                        ; perform BIN$()
  7262                        
  7263                        LAB_BINS
  7264 00:F506: E0 19              CPX   #$19              ; max + 1
  7265 00:F508: B0 48              BCS   BinFErr           ; exit if too big ( > or = )
  7266                        
  7267 00:F50A: 86 78              STX   TempB             ; save # of characters ($00 = leading zero remove)
  7268 00:F50C: A9 18              LDA   #$18              ; need A byte long space
  7269 00:F50E: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long
  7270 00:F511: A0 17              LDY   #$17              ; set index
  7271 00:F513: A2 18              LDX   #$18              ; character count
  7272                        NextB1
  7273 00:F515: 46 11              LSR   nums_1            ; shift highest byte
  7274 00:F517: 66 12              ROR   nums_2            ; shift middle byte
  7275 00:F519: 66 13              ROR   nums_3            ; shift lowest byte bit 0 to carry
  7276 00:F51B: 8A                 TXA                     ; load with "0"/2
  7277 00:F51C: 2A                 ROL                     ; shift in carry
  7278 00:F51D: 91 AD              STA   (str_pl),Y        ; save to temp string + index
  7279 00:F51F: 88                 DEY                     ; decrement index
  7280 00:F520: 10 F3              BPL   NextB1            ; loop if not done
  7281                        
  7282 00:F522: A5 78              LDA   TempB             ; get # of characters
  7283 00:F524: F0 0A              BEQ   EndBHS            ; branch if truncate
  7284                        
  7285 00:F526: AA                 TAX                     ; copy length to X
  7286 00:F527: 38                 SEC                     ; set carry for add !
  7287 00:F528: 49 FF              EOR   #$FF              ; 1's complement
  7288 00:F52A: 69 18              ADC   #$18              ; add 24d
  7289 00:F52C: F0 1C              BEQ   GoPr2             ; if zero print whole string
  7290                        
  7291 00:F52E: D0 0F              BNE   GoPr1             ; else go make output string
  7292                              
  7293                        ; this is the exit code and is also used by HEX$()
  7294                        ; truncate string to remove leading "0"s
  7295                        
  7296                        EndBHS
  7297 00:F530: A8                 TAY                     ; clear index (A=0, X=length here)
  7298                        NextB2
  7299 00:F531: B1 AD              LDA   (str_pl),Y        ; get character from string
  7300 00:F533: C9 30              CMP   #'0'              ; compare with "0"
  7301 00:F535: D0 07              BNE   GoPr              ; if not "0" then go print string from here
  7302                        
  7303 00:F537: CA                 DEX                     ; decrement character count
  7304 00:F538: F0 03              BEQ   GoPr3             ; if zero then end of string so go print it
  7305                        
  7306 00:F53A: C8                 INY                     ; else increment index
  7307 00:F53B: 10 F4              BPL   NextB2            ; loop always
  7308                        
  7309                        ; make fixed length output string - ignore overflows!
  7310                        
  7311                        GoPr3
  7312 00:F53D: E8                 INX                     ; need at least 1 character
  7313                        GoPr
  7314 00:F53E: 98                 TYA                     ; copy result
  7315                        GoPr1
  7316 00:F53F: 18                 CLC                     ; clear carry for add
  7317 00:F540: 65 AD              ADC   str_pl            ; add low address
  7318 00:F542: 85 AD              STA   str_pl            ; save low address
  7319 00:F544: A9 00              LDA   #$00              ; do high byte
  7320 00:F546: 65 AE              ADC   str_ph            ; add high address
  7321 00:F548: 85 AE              STA   str_ph            ; save high address
  7322                        GoPr2
  7323 00:F54A: 86 AC              STX   str_ln            ; X holds string length
  7324 00:F54C: 20 BC 00           JSR   LAB_IGBY          ; update BASIC execute pointer (to character past ")")
  7325 00:F54F: 4C BA E8           JMP   LAB_RTST          ; check for space on descriptor stack then put address
  7326                                                      ; and length on descriptor stack and update stack pointers
  7327                        
  7328                        BinFErr
  7329 00:F552: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start
  7330                        
  7331                        ; perform HEX$()
  7332                        
  7333                        LAB_HEXS
  7334 00:F555: E0 07              CPX   #$07              ; max + 1
  7335 00:F557: B0 F9              BCS   BinFErr           ; exit if too big ( > or = )
  7336                        
  7337 00:F559: 86 78              STX   TempB             ; save # of characters
  7338                        
  7339 00:F55B: A9 06              LDA   #$06              ; need 6 bytes for string
  7340 00:F55D: 20 6D E8           JSR   LAB_MSSP          ; make string space A bytes long
  7341 00:F560: A0 05              LDY   #$05              ; set string index
  7342                        
  7343                        ; *** disable decimal mode patch - comment next line ***
  7344                        ;      SED                     ; need decimal mode for nibble convert
  7345 00:F562: A5 13              LDA   nums_3            ; get lowest byte
  7346 00:F564: 20 81 F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7347 00:F567: A5 12              LDA   nums_2            ; get middle byte
  7348 00:F569: 20 81 F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7349 00:F56C: A5 11              LDA   nums_1            ; get highest byte
  7350 00:F56E: 20 81 F5           JSR   LAB_A2HX          ; convert A to ASCII hex byte and output
  7351                        ; *** disable decimal mode patch - comment next line ***
  7352                        ;      CLD                     ; back to binary
  7353                        
  7354 00:F571: A2 06              LDX   #$06              ; character count
  7355 00:F573: A5 78              LDA   TempB             ; get # of characters
  7356 00:F575: F0 B9              BEQ   EndBHS            ; branch if truncate
  7357                        
  7358 00:F577: AA                 TAX                     ; copy length to X
  7359 00:F578: 38                 SEC                     ; set carry for add !
  7360 00:F579: 49 FF              EOR   #$FF              ; 1's complement
  7361 00:F57B: 69 06              ADC   #$06              ; add 6d
  7362 00:F57D: F0 CB              BEQ   GoPr2             ; if zero print whole string
  7363                        
  7364 00:F57F: D0 BE              BNE   GoPr1             ; else go make output string (branch always)
  7365                        
  7366                        ; convert A to ASCII hex byte and output .. note set decimal mode before calling
  7367                        
  7368                        LAB_A2HX
  7369 00:F581: AA                 TAX                     ; save byte
  7370 00:F582: 29 0F              AND   #$0F              ; mask off top bits
  7371 00:F584: 20 8C F5           JSR   LAB_AL2X          ; convert low nibble to ASCII and output
  7372 00:F587: 8A                 TXA                     ; get byte back
  7373 00:F588: 4A                 LSR                     ; /2  shift high nibble to low nibble
  7374 00:F589: 4A                 LSR                     ; /4
  7375 00:F58A: 4A                 LSR                     ; /8
  7376 00:F58B: 4A                 LSR                     ; /16
  7377                        LAB_AL2X
  7378 00:F58C: C9 0A              CMP   #$0A              ; set carry for +1 if >9
  7379                        ; *** begin disable decimal mode patch ***
  7380                        ; *** insert
  7381 00:F58E: 90 02              BCC   LAB_AL20          ; skip adjust if <= 9
  7382 00:F590: 69 06              ADC   #$06              ; adjust for A to F
  7383                        LAB_AL20
  7384                        ; *** end   disable decimal mode patch ***
  7385 00:F592: 69 30              ADC   #'0'              ; add ASCII "0"
  7386 00:F594: 91 AD              STA   (str_pl),Y        ; save to temp string
  7387 00:F596: 88                 DEY                     ; decrement counter
  7388 00:F597: 60                 RTS
  7389                        
  7390                        LAB_NLTO
  7391 00:F598: 85 AC              STA   FAC1_e            ; save FAC1 exponent
  7392 00:F59A: A9 00              LDA   #$00              ; clear sign compare
  7393                        LAB_MLTE
  7394 00:F59C: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7395 00:F59E: 8A                 TXA                     ; restore character
  7396 00:F59F: 20 77 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  7397                        
  7398                        ; gets here if the first character was "$" for hex
  7399                        ; get hex number
  7400                        
  7401                        LAB_CHEX
  7402 00:F5A2: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7403 00:F5A5: 90 0A              BCC   LAB_ISHN          ; branch if numeric character
  7404                        
  7405 00:F5A7: 09 20              ORA   #$20              ; case convert, allow "A" to "F" and "a" to "f"
  7406 00:F5A9: E9 61              SBC   #'a'              ; subtract "a" (carry set here)
  7407 00:F5AB: C9 06              CMP   #$06              ; compare normalised with $06 (max+1)
  7408 00:F5AD: B0 2A              BCS   LAB_EXCH          ; exit if >"f" or <"0"
  7409                        
  7410 00:F5AF: 69 0A              ADC   #$0A              ; convert to nibble
  7411                        LAB_ISHN
  7412 00:F5B1: 29 0F              AND   #$0F              ; convert to binary
  7413 00:F5B3: AA                 TAX                     ; save nibble
  7414 00:F5B4: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7415 00:F5B6: F0 E4              BEQ   LAB_MLTE          ; skip multiply if zero
  7416                        
  7417 00:F5B8: 69 04              ADC   #$04              ; add four to exponent (*16 - carry clear here)
  7418 00:F5BA: 90 DC              BCC   LAB_NLTO          ; if no overflow do evaluate digit
  7419                        
  7420                        LAB_MLTO
  7421 00:F5BC: 4C F5 ED           JMP   LAB_2564          ; do overflow error and warm start
  7422                        
  7423                        LAB_NXCH
  7424 00:F5BF: AA                 TAX                     ; save bit
  7425 00:F5C0: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7426 00:F5C2: F0 06              BEQ   LAB_MLBT          ; skip multiply if zero
  7427                        
  7428 00:F5C4: E6 AC              INC   FAC1_e            ; increment FAC1 exponent (*2)
  7429 00:F5C6: F0 F4              BEQ   LAB_MLTO          ; do overflow error if = $00
  7430                        
  7431 00:F5C8: A9 00              LDA   #$00              ; clear sign compare
  7432                        LAB_MLBT
  7433 00:F5CA: 85 B8              STA   FAC_sc            ; save sign compare (FAC1 EOR FAC2)
  7434 00:F5CC: 8A                 TXA                     ; restore bit
  7435 00:F5CD: 20 77 F1           JSR   LAB_2912          ; evaluate new ASCII digit
  7436                        
  7437                        ; gets here if the first character was  "%" for binary
  7438                        ; get binary number
  7439                        
  7440                        LAB_CBIN
  7441 00:F5D0: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7442 00:F5D3: 49 30              EOR   #'0'              ; convert "0" to 0 etc.
  7443 00:F5D5: C9 02              CMP   #$02              ; compare with max+1
  7444 00:F5D7: 90 E6              BCC   LAB_NXCH          ; branch exit if < 2
  7445                        
  7446                        LAB_EXCH
  7447 00:F5D9: 4C 5C F1           JMP   LAB_28F6          ; evaluate -ve flag and return
  7448                        
  7449                        ; ctrl-c check routine. includes limited "life" byte save for INGET routine
  7450                        ; now also the code that checks to see if an interrupt has occurred
  7451                        
  7452                        CTRLC
  7453 00:F5DC: AD 00 02           LDA   ccflag            ; get [CTRL-C] check flag
  7454 00:F5DF: D0 18              BNE   LAB_FBA2          ; exit if inhibited
  7455                        
  7456 00:F5E1: 20 1D F8           JSR   V_INPT            ; scan input device
  7457 00:F5E4: 90 0B              BCC   LAB_FBA0          ; exit if buffer empty
  7458                        
  7459 00:F5E6: 8D 01 02           STA   ccbyte            ; save received byte
  7460 00:F5E9: A2 20              LDX   #$20              ; "life" timer for bytes
  7461 00:F5EB: 8E 02 02           STX   ccnull            ; set countdown
  7462 00:F5EE: 4C 3E DC           JMP   LAB_1636          ; return to BASIC
  7463                        
  7464                        LAB_FBA0
  7465 00:F5F1: AE 02 02           LDX   ccnull            ; get countdown byte
  7466 00:F5F4: F0 03              BEQ   LAB_FBA2          ; exit if finished
  7467                        
  7468 00:F5F6: CE 02 02           DEC   ccnull            ; else decrement countdown
  7469                        LAB_FBA2
  7470 00:F5F9: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7471 00:F5FB: 20 04 F6           JSR   LAB_CKIN          ; go check interrupt
  7472 00:F5FE: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7473 00:F600: 20 04 F6           JSR   LAB_CKIN          ; go check interrupt
  7474                        LAB_CRTS
  7475 00:F603: 60                 RTS
  7476                        
  7477                        ; check whichever interrupt is indexed by X
  7478                        
  7479                        LAB_CKIN
  7480 00:F604: B5 00              LDA   PLUS_0,X          ; get interrupt flag byte
  7481 00:F606: 10 FB              BPL   LAB_CRTS          ; branch if interrupt not enabled
  7482                        
  7483                        ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
  7484                        ; automatically enable the interrupt when we exit
  7485                        
  7486 00:F608: 0A                 ASL                     ; move happened bit to setup bit
  7487 00:F609: 29 40              AND   #$40              ; mask happened bits
  7488 00:F60B: F0 F6              BEQ   LAB_CRTS          ; if no interrupt then exit
  7489                        
  7490 00:F60D: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7491                        
  7492 00:F60F: 8A                 TXA                     ; copy index ..
  7493 00:F610: A8                 TAY                     ; .. to Y
  7494                        
  7495 00:F611: 68                 PLA                     ; dump return address low byte, call from CTRL-C
  7496 00:F612: 68                 PLA                     ; dump return address high byte
  7497                        
  7498 00:F613: A9 05              LDA   #$05              ; need 5 bytes for GOSUB
  7499 00:F615: 20 28 D8           JSR   LAB_1212          ; check room on stack for A bytes
  7500 00:F618: A5 C4              LDA   Bpntrh            ; get BASIC execute pointer high byte
  7501 00:F61A: 48                 PHA                     ; push on stack
  7502 00:F61B: A5 C3              LDA   Bpntrl            ; get BASIC execute pointer low byte
  7503 00:F61D: 48                 PHA                     ; push on stack
  7504 00:F61E: A5 88              LDA   Clineh            ; get current line high byte
  7505 00:F620: 48                 PHA                     ; push on stack
  7506 00:F621: A5 87              LDA   Clinel            ; get current line low byte
  7507 00:F623: 48                 PHA                     ; push on stack
  7508 00:F624: A9 8D              LDA   #TK_GOSUB         ; token for GOSUB
  7509 00:F626: 48                 PHA                     ; push on stack
  7510                        
  7511 00:F627: B9 01 00           LDA   PLUS_1,Y          ; get interrupt code pointer low byte
  7512 00:F62A: 85 C3              STA   Bpntrl            ; save as BASIC execute pointer low byte
  7513 00:F62C: B9 02 00           LDA   PLUS_2,Y          ; get interrupt code pointer high byte
  7514 00:F62F: 85 C4              STA   Bpntrh            ; save as BASIC execute pointer high byte
  7515                        
  7516 00:F631: 4C E5 DB           JMP   LAB_15C2          ; go do interpreter inner loop
  7517                                                      ; can't RTS, we used the stack! the RTS from the ctrl-c
  7518                                                      ; check will be taken when the RETIRQ/RETNMI/RETURN is
  7519                                                      ; executed at the end of the subroutine
  7520                        
  7521                        ; get byte from input device, no waiting
  7522                        ; returns with carry set if byte in A
  7523                        
  7524                        INGET
  7525 00:F634: 20 1D F8           JSR   V_INPT            ; call scan input device
  7526 00:F637: B0 09              BCS   LAB_FB95          ; if byte go reset timer
  7527                        
  7528 00:F639: AD 02 02           LDA   ccnull            ; get countdown
  7529 00:F63C: F0 09              BEQ   LAB_FB96          ; exit if empty
  7530                        
  7531 00:F63E: AD 01 02           LDA   ccbyte            ; get last received byte
  7532 00:F641: 38                 SEC                     ; flag we got a byte
  7533                        LAB_FB95
  7534 00:F642: A2 00              LDX   #$00              ; clear X
  7535 00:F644: 8E 02 02           STX   ccnull            ; clear timer because we got a byte
  7536                        LAB_FB96
  7537 00:F647: 60                 RTS
  7538                        
  7539                        ; these routines only enable the interrupts if the set-up flag is set
  7540                        ; if not they have no effect
  7541                        
  7542                        ; perform IRQ {ON|OFF|CLEAR}
  7543                        
  7544                        LAB_IRQ
  7545 00:F648: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7546 00:F64A: 2C                 .byte $2C               ; make next line BIT abs.
  7547                        
  7548                        ; perform NMI {ON|OFF|CLEAR}
  7549                        
  7550                        LAB_NMI
  7551 00:F64B: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7552 00:F64D: C9 93              CMP   #TK_ON            ; compare with token for ON
  7553 00:F64F: F0 11              BEQ   LAB_INON          ; go turn on interrupt
  7554                        
  7555 00:F651: C9 B5              CMP   #TK_OFF           ; compare with token for OFF
  7556 00:F653: F0 07              BEQ   LAB_IOFF          ; go turn off interrupt
  7557                        
  7558 00:F655: 49 A2              EOR   #TK_CLEAR         ; compare with token for CLEAR, A = $00 if = TK_CLEAR
  7559 00:F657: F0 0E              BEQ   LAB_INEX          ; go clear interrupt flags and return
  7560                        
  7561 00:F659: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7562                        
  7563                        LAB_IOFF
  7564 00:F65C: A9 7F              LDA   #$7F              ; clear A
  7565 00:F65E: 35 00              AND   PLUS_0,X          ; AND with interrupt setup flag
  7566 00:F660: 10 05              BPL   LAB_INEX          ; go clear interrupt enabled flag and return
  7567                        
  7568                        LAB_INON
  7569 00:F662: B5 00              LDA   PLUS_0,X          ; get interrupt setup flag
  7570 00:F664: 0A                 ASL                     ; Shift bit to enabled flag
  7571 00:F665: 15 00              ORA   PLUS_0,X          ; OR with flag byte
  7572                        LAB_INEX
  7573 00:F667: 95 00              STA   PLUS_0,X          ; save interrupt flag byte
  7574 00:F669: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer and return
  7575                        
  7576                        ; these routines set up the pointers and flags for the interrupt routines
  7577                        ; note that the interrupts are also enabled by these commands
  7578                        
  7579                        ; perform ON IRQ
  7580                        
  7581                        LAB_SIRQ
  7582                        ;      CLI                     ; enable interrupts
  7583 00:F66C: A2 DF              LDX   #IrqBase          ; set pointer to IRQ values
  7584 00:F66E: 2C                 .byte $2C               ; make next line BIT abs.
  7585                        
  7586                        ; perform ON NMI
  7587                        
  7588                        LAB_SNMI
  7589 00:F66F: A2 DC              LDX   #NmiBase          ; set pointer to NMI values
  7590                        
  7591 00:F671: 86 78              STX   TempB             ; save interrupt pointer
  7592 00:F673: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory (past token)
  7593 00:F676: 20 7B DE           JSR   LAB_GFPN          ; get fixed-point number into temp integer
  7594 00:F679: A5 79              LDA   Smeml             ; get start of mem low byte
  7595 00:F67B: A6 7A              LDX   Smemh             ; get start of mem high byte
  7596 00:F67D: 20 50 DA           JSR   LAB_SHLN          ; search Basic for temp integer line number from AX
  7597 00:F680: B0 03              BCS   LAB_LFND          ; if carry set go set-up interrupt
  7598                        
  7599 00:F682: 4C 95 DD           JMP   LAB_16F7          ; else go do "Undefined statement" error and warm start
  7600                        
  7601                        LAB_LFND
  7602 00:F685: A6 78              LDX   TempB             ; get interrupt pointer
  7603 00:F687: A5 AA              LDA   Baslnl            ; get pointer low byte
  7604 00:F689: E9 01              SBC   #$01              ; -1 (carry already set for subtract)
  7605 00:F68B: 95 01              STA   PLUS_1,X          ; save as interrupt pointer low byte
  7606 00:F68D: A5 AB              LDA   Baslnh            ; get pointer high byte
  7607 00:F68F: E9 00              SBC   #$00              ; subtract carry
  7608 00:F691: 95 02              STA   PLUS_2,X          ; save as interrupt pointer high byte
  7609                        
  7610 00:F693: A9 C0              LDA   #$C0              ; set interrupt enabled/setup bits
  7611 00:F695: 95 00              STA   PLUS_0,X          ; set interrupt flags
  7612                        LAB_IRTS
  7613 00:F697: 60                 RTS
  7614                        
  7615                        ; return from IRQ service, restores the enabled flag.
  7616                        
  7617                        ; perform RETIRQ
  7618                        
  7619                        LAB_RETIRQ
  7620 00:F698: D0 FD              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7621                        
  7622 00:F69A: A5 DF              LDA   IrqBase           ; get interrupt flags
  7623 00:F69C: 0A                 ASL                     ; copy setup to enabled (b7)
  7624 00:F69D: 05 DF              ORA   IrqBase           ; OR in setup flag
  7625 00:F69F: 85 DF              STA   IrqBase           ; save enabled flag
  7626 00:F6A1: 4C 9C DD           JMP   LAB_16E8          ; go do rest of RETURN
  7627                        
  7628                        ; return from NMI service, restores the enabled flag.
  7629                        
  7630                        ; perform RETNMI
  7631                        
  7632                        LAB_RETNMI
  7633 00:F6A4: D0 F1              BNE   LAB_IRTS          ; exit if following token (to allow syntax error)
  7634                        
  7635 00:F6A6: A5 DC              LDA   NmiBase           ; get set-up flag
  7636 00:F6A8: 0A                 ASL                     ; copy setup to enabled (b7)
  7637 00:F6A9: 05 DC              ORA   NmiBase           ; OR in setup flag
  7638 00:F6AB: 85 DC              STA   NmiBase           ; save enabled flag
  7639 00:F6AD: 4C 9C DD           JMP   LAB_16E8          ; go do rest of RETURN
  7640                        
  7641                        ; MAX() MIN() pre process
  7642                        
  7643                        LAB_MMPP
  7644 00:F6B0: 20 0E E2           JSR   LAB_EVEZ          ; process expression
  7645 00:F6B3: 4C F5 E1           JMP   LAB_CTNM          ; check if source is numeric, else do type mismatch
  7646                        
  7647                        ; perform MAX()
  7648                        
  7649                        LAB_MAX
  7650 00:F6B6: 20 E4 F6           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7651                                                      ; pull FAC2 and compare with FAC1
  7652 00:F6B9: 10 FB              BPL   LAB_MAX           ; branch if no swap to do
  7653                        
  7654 00:F6BB: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7655 00:F6BD: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7656 00:F6BF: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7657 00:F6C1: 20 F5 EC           JSR   LAB_279B          ; copy FAC2 to FAC1
  7658 00:F6C4: F0 F0              BEQ   LAB_MAX           ; go do next (branch always)
  7659                        
  7660                        ; perform MIN()
  7661                        
  7662                        LAB_MIN
  7663 00:F6C6: 20 E4 F6           JSR   LAB_PHFA          ; push FAC1, evaluate expression,
  7664                                                      ; pull FAC2 and compare with FAC1
  7665 00:F6C9: 30 FB              BMI   LAB_MIN           ; branch if no swap to do
  7666                        
  7667 00:F6CB: F0 F9              BEQ   LAB_MIN           ; branch if no swap to do
  7668                        
  7669 00:F6CD: A5 B4              LDA   FAC2_1            ; get FAC2 mantissa1
  7670 00:F6CF: 09 80              ORA   #$80              ; set top bit (clear sign from compare)
  7671 00:F6D1: 85 B4              STA   FAC2_1            ; save FAC2 mantissa1
  7672 00:F6D3: 20 F5 EC           JSR   LAB_279B          ; copy FAC2 to FAC1
  7673 00:F6D6: F0 EE              BEQ   LAB_MIN           ; go do next (branch always)
  7674                        
  7675                        ; exit routine. don't bother returning to the loop code
  7676                        ; check for correct exit, else so syntax error
  7677                        
  7678                        LAB_MMEC
  7679 00:F6D8: C9 29              CMP   #')'              ; is it end of function?
  7680 00:F6DA: D0 05              BNE   LAB_MMSE          ; if not do MAX MIN syntax error
  7681                        
  7682 00:F6DC: 68                 PLA                     ; dump return address low byte
  7683 00:F6DD: 68                 PLA                     ; dump return address high byte
  7684 00:F6DE: 4C BC 00           JMP   LAB_IGBY          ; update BASIC execute pointer (to chr past ")")
  7685                        
  7686                        LAB_MMSE
  7687 00:F6E1: 4C 27 E3           JMP   LAB_SNER          ; do syntax error then warm start
  7688                        
  7689                        ; check for next, evaluate and return or exit
  7690                        ; this is the routine that does most of the work
  7691                        
  7692                        LAB_PHFA
  7693 00:F6E4: 20 C2 00           JSR   LAB_GBYT          ; get next BASIC byte
  7694 00:F6E7: C9 2C              CMP   #','              ; is there more ?
  7695 00:F6E9: D0 ED              BNE   LAB_MMEC          ; if not go do end check
  7696                        
  7697                                                      ; push FAC1
  7698 00:F6EB: 20 0B F0           JSR   LAB_27BA          ; round FAC1
  7699 00:F6EE: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7700 00:F6F0: 09 7F              ORA   #$7F              ; set all non sign bits
  7701 00:F6F2: 25 AD              AND   FAC1_1            ; AND FAC1 mantissa1 (AND in sign bit)
  7702 00:F6F4: 48                 PHA                     ; push on stack
  7703 00:F6F5: A5 AE              LDA   FAC1_2            ; get FAC1 mantissa2
  7704 00:F6F7: 48                 PHA                     ; push on stack
  7705 00:F6F8: A5 AF              LDA   FAC1_3            ; get FAC1 mantissa3
  7706 00:F6FA: 48                 PHA                     ; push on stack
  7707 00:F6FB: A5 AC              LDA   FAC1_e            ; get FAC1 exponent
  7708 00:F6FD: 48                 PHA                     ; push on stack
  7709                        
  7710 00:F6FE: 20 BC 00           JSR   LAB_IGBY          ; scan and get next BASIC byte (after ",")
  7711 00:F701: 20 F2 E1           JSR   LAB_EVNM          ; evaluate expression and check is numeric,
  7712                                                      ; else do type mismatch
  7713                        
  7714                                                      ; pop FAC2 (MAX/MIN expression so far)
  7715 00:F704: 68                 PLA                     ; pop exponent
  7716 00:F705: 85 B3              STA   FAC2_e            ; save FAC2 exponent
  7717 00:F707: 68                 PLA                     ; pop mantissa3
  7718 00:F708: 85 B6              STA   FAC2_3            ; save FAC2 mantissa3
  7719 00:F70A: 68                 PLA                     ; pop mantissa1
  7720 00:F70B: 85 B5              STA   FAC2_2            ; save FAC2 mantissa2
  7721 00:F70D: 68                 PLA                     ; pop sign/mantissa1
  7722 00:F70E: 85 B4              STA   FAC2_1            ; save FAC2 sign/mantissa1
  7723 00:F710: 85 B7              STA   FAC2_s            ; save FAC2 sign
  7724                        
  7725                                                      ; compare FAC1 with (packed) FAC2
  7726 00:F712: A9 B3              LDA   #<FAC2_e          ; set pointer low byte to FAC2
  7727 00:F714: A0 00              LDY   #>FAC2_e          ; set pointer high byte to FAC2
  7728 00:F716: 4C 49 F0           JMP   LAB_27F8          ; compare FAC1 with FAC2 (AY) and return
  7729                                                      ; returns A=$00 if FAC1 = (AY)
  7730                                                      ; returns A=$01 if FAC1 > (AY)
  7731                                                      ; returns A=$FF if FAC1 < (AY)
  7732                        
  7733                        ; perform WIDTH
  7734                        
  7735                        LAB_WDTH
  7736 00:F719: C9 2C              CMP   #','              ; is next byte ","
  7737 00:F71B: F0 1B              BEQ   LAB_TBSZ          ; if so do tab size
  7738                        
  7739 00:F71D: 20 C5 EB           JSR   LAB_GTBY          ; get byte parameter
  7740 00:F720: 8A                 TXA                     ; copy width to A
  7741 00:F721: F0 0A              BEQ   LAB_NSTT          ; branch if set for infinite line
  7742                        
  7743 00:F723: E0 10              CPX   #$10              ; else make min width = 16d
  7744 00:F725: 90 45              BCC   TabErr            ; if less do function call error and exit
  7745                        
  7746                        ; this next compare ensures that we can't exit WIDTH via an error leaving the
  7747                        ; tab size greater than the line length.
  7748                        
  7749 00:F727: E4 64              CPX   TabSiz            ; compare with tab size
  7750 00:F729: B0 02              BCS   LAB_NSTT          ; branch if >= tab size
  7751                        
  7752 00:F72B: 86 64              STX   TabSiz            ; else make tab size = terminal width
  7753                        LAB_NSTT
  7754 00:F72D: 86 0F              STX   TWidth            ; set the terminal width
  7755 00:F72F: 20 C2 00           JSR   LAB_GBYT          ; get BASIC byte back
  7756 00:F732: F0 1A              BEQ   WExit             ; exit if no following
  7757                        
  7758 00:F734: C9 2C              CMP   #','              ; else is it ","
  7759 00:F736: D0 A9              BNE   LAB_MMSE          ; if not do syntax error
  7760                        
  7761                        LAB_TBSZ
  7762 00:F738: 20 C2 EB           JSR   LAB_SGBY          ; scan and get byte parameter
  7763 00:F73B: 8A                 TXA                     ; copy TAB size
  7764 00:F73C: 30 2E              BMI   TabErr            ; if >127 do function call error and exit
  7765                        
  7766 00:F73E: E0 01              CPX   #$01              ; compare with min-1
  7767 00:F740: 90 2A              BCC   TabErr            ; if <=1 do function call error and exit
  7768                        
  7769 00:F742: A5 0F              LDA   TWidth            ; set flags for width
  7770 00:F744: F0 06              BEQ   LAB_SVTB          ; skip check if infinite line
  7771                        
  7772 00:F746: E4 0F              CPX   TWidth            ; compare TAB with width
  7773 00:F748: F0 02              BEQ   LAB_SVTB          ; ok if =
  7774                        
  7775 00:F74A: B0 20              BCS   TabErr            ; branch if too big
  7776                        
  7777                        LAB_SVTB
  7778 00:F74C: 86 64              STX   TabSiz            ; save TAB size
  7779                        
  7780                        ; calculate tab column limit from TAB size. The Iclim is set to the last tab
  7781                        ; position on a line that still has at least one whole tab width between it
  7782                        ; and the end of the line.
  7783                        
  7784                        WExit
  7785 00:F74E: A5 0F              LDA   TWidth            ; get width
  7786 00:F750: F0 06              BEQ   LAB_SULP          ; branch if infinite line
  7787                        
  7788 00:F752: C5 64              CMP   TabSiz            ; compare with tab size
  7789 00:F754: B0 03              BCS   LAB_WDLP          ; branch if >= tab size
  7790                        
  7791 00:F756: 85 64              STA   TabSiz            ; else make tab size = terminal width
  7792                        LAB_SULP
  7793 00:F758: 38                 SEC                     ; set carry for subtract
  7794                        LAB_WDLP
  7795 00:F759: E5 64              SBC   TabSiz            ; subtract tab size
  7796 00:F75B: B0 FC              BCS   LAB_WDLP          ; loop while no borrow
  7797                        
  7798 00:F75D: 65 64              ADC   TabSiz            ; add tab size back
  7799 00:F75F: 18                 CLC                     ; clear carry for add
  7800 00:F760: 65 64              ADC   TabSiz            ; add tab size back again
  7801 00:F762: 85 10              STA   Iclim             ; save for now
  7802 00:F764: A5 0F              LDA   TWidth            ; get width back
  7803 00:F766: 38                 SEC                     ; set carry for subtract
  7804 00:F767: E5 10              SBC   Iclim             ; subtract remainder
  7805 00:F769: 85 10              STA   Iclim             ; save tab column limit
  7806                        LAB_NOSQ
  7807 00:F76B: 60                 RTS
  7808                        
  7809                        TabErr
  7810 00:F76C: 4C 5C E6           JMP   LAB_FCER          ; do function call error then warm start
  7811                        
  7812                        ; perform SQR()
  7813                        
  7814                        LAB_SQR
  7815 00:F76F: A5 B0              LDA   FAC1_s            ; get FAC1 sign
  7816 00:F771: 30 F9              BMI   TabErr            ; if -ve do function call error
  7817                        
  7818 00:F773: A5 AC              LDA   FAC1_e            ; get exponent
  7819 00:F775: F0 F4              BEQ   LAB_NOSQ          ; if zero just return
  7820                        
  7821                                                      ; else do root
  7822 00:F777: 20 FC EF           JSR   LAB_27AB          ; round and copy FAC1 to FAC2
  7823 00:F77A: A9 00              LDA   #$00              ; clear A
  7824                        
  7825 00:F77C: 85 77              STA   FACt_3            ; clear remainder
  7826 00:F77E: 85 76              STA   FACt_2            ; ..
  7827 00:F780: 85 75              STA   FACt_1            ; ..
  7828 00:F782: 85 78              STA   TempB             ; ..
  7829                        
  7830 00:F784: 85 AF              STA   FAC1_3            ; clear root
  7831 00:F786: 85 AE              STA   FAC1_2            ; ..
  7832 00:F788: 85 AD              STA   FAC1_1            ; ..
  7833                        
  7834 00:F78A: A2 18              LDX   #$18              ; 24 pairs of bits to do
  7835 00:F78C: A5 B3              LDA   FAC2_e            ; get exponent
  7836 00:F78E: 4A                 LSR                     ; check odd/even
  7837 00:F78F: B0 0E              BCS   LAB_SQE2          ; if odd only 1 shift first time
  7838                        
  7839                        LAB_SQE1
  7840 00:F791: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7841 00:F793: 26 B5              ROL   FAC2_2            ; ..
  7842 00:F795: 26 B4              ROL   FAC2_1            ; ..
  7843 00:F797: 26 77              ROL   FACt_3            ; .. into remainder
  7844 00:F799: 26 76              ROL   FACt_2            ; ..
  7845 00:F79B: 26 75              ROL   FACt_1            ; ..
  7846 00:F79D: 26 78              ROL   TempB             ; .. never overflows
  7847                        LAB_SQE2
  7848 00:F79F: 06 B6              ASL   FAC2_3            ; shift highest bit of number ..
  7849 00:F7A1: 26 B5              ROL   FAC2_2            ; ..
  7850 00:F7A3: 26 B4              ROL   FAC2_1            ; ..
  7851 00:F7A5: 26 77              ROL   FACt_3            ; .. into remainder
  7852 00:F7A7: 26 76              ROL   FACt_2            ; ..
  7853 00:F7A9: 26 75              ROL   FACt_1            ; ..
  7854 00:F7AB: 26 78              ROL   TempB             ; .. never overflows
  7855                        
  7856 00:F7AD: 06 AF              ASL   FAC1_3            ; root = root * 2
  7857 00:F7AF: 26 AE              ROL   FAC1_2            ; ..
  7858 00:F7B1: 26 AD              ROL   FAC1_1            ; .. never overflows
  7859                        
  7860 00:F7B3: A5 AF              LDA   FAC1_3            ; get root low byte
  7861 00:F7B5: 2A                 ROL                     ; *2
  7862 00:F7B6: 85 5B              STA   Temp3             ; save partial low byte
  7863 00:F7B8: A5 AE              LDA   FAC1_2            ; get root low mid byte
  7864 00:F7BA: 2A                 ROL                     ; *2
  7865 00:F7BB: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7866 00:F7BD: A5 AD              LDA   FAC1_1            ; get root high mid byte
  7867 00:F7BF: 2A                 ROL                     ; *2
  7868 00:F7C0: 85 5D              STA   Temp3+2           ; save partial high mid byte
  7869 00:F7C2: A9 00              LDA   #$00              ; get root high byte (always $00)
  7870 00:F7C4: 2A                 ROL                     ; *2
  7871 00:F7C5: 85 5E              STA   Temp3+3           ; save partial high byte
  7872                        
  7873                                                      ; carry clear for subtract +1
  7874 00:F7C7: A5 77              LDA   FACt_3            ; get remainder low byte
  7875 00:F7C9: E5 5B              SBC   Temp3             ; subtract partial low byte
  7876 00:F7CB: 85 5B              STA   Temp3             ; save partial low byte
  7877                        
  7878 00:F7CD: A5 76              LDA   FACt_2            ; get remainder low mid byte
  7879 00:F7CF: E5 5C              SBC   Temp3+1           ; subtract partial low mid byte
  7880 00:F7D1: 85 5C              STA   Temp3+1           ; save partial low mid byte
  7881                        
  7882 00:F7D3: A5 75              LDA   FACt_1            ; get remainder high mid byte
  7883 00:F7D5: E5 5D              SBC   Temp3+2           ; subtract partial high mid byte
  7884 00:F7D7: A8                 TAY                     ; copy partial high mid byte
  7885                        
  7886 00:F7D8: A5 78              LDA   TempB             ; get remainder high byte
  7887 00:F7DA: E5 5E              SBC   Temp3+3           ; subtract partial high byte
  7888 00:F7DC: 90 0E              BCC   LAB_SQNS          ; skip sub if remainder smaller
  7889                        
  7890 00:F7DE: 85 78              STA   TempB             ; save remainder high byte
  7891                        
  7892 00:F7E0: 84 75              STY   FACt_1            ; save remainder high mid byte
  7893                        
  7894 00:F7E2: A5 5C              LDA   Temp3+1           ; get remainder low mid byte
  7895 00:F7E4: 85 76              STA   FACt_2            ; save remainder low mid byte
  7896                        
  7897 00:F7E6: A5 5B              LDA   Temp3             ; get partial low byte
  7898 00:F7E8: 85 77              STA   FACt_3            ; save remainder low byte
  7899                        
  7900 00:F7EA: E6 AF              INC   FAC1_3            ; increment root low byte (never any rollover)
  7901                        LAB_SQNS
  7902 00:F7EC: CA                 DEX                     ; decrement bit pair count
  7903 00:F7ED: D0 A2              BNE   LAB_SQE1          ; loop if not all done
  7904                        
  7905 00:F7EF: 38                 SEC                     ; set carry for subtract
  7906 00:F7F0: A5 B3              LDA   FAC2_e            ; get exponent
  7907 00:F7F2: E9 80              SBC   #$80              ; normalise
  7908 00:F7F4: 6A                 ROR                     ; /2 and re-bias to $80
  7909 00:F7F5: 69 00              ADC   #$00              ; add bit zero back in (allow for half shift)
  7910 00:F7F7: 85 AC              STA   FAC1_e            ; save it
  7911 00:F7F9: 4C 66 ED           JMP   LAB_24D5          ; normalise FAC1 and return
  7912                        
  7913                        ; perform VARPTR()
  7914                        
  7915                        LAB_VARPTR
  7916 00:F7FC: 20 BC 00           JSR   LAB_IGBY          ; increment and scan memory
  7917 00:F7FF: 20 DD E4           JSR   LAB_GVAR          ; get var address
  7918 00:F802: 20 14 E3           JSR   LAB_1BFB          ; scan for ")" , else do syntax error then warm start
  7919 00:F805: A4 95              LDY   Cvaral            ; get var address low byte
  7920 00:F807: A5 96              LDA   Cvarah            ; get var address high byte
  7921 00:F809: 4C 8C E7           JMP   LAB_AYFC          ; save and convert integer AY to FAC1 and return
  7922                        
  7923                        ; perform PI
  7924                        
  7925                        LAB_PI
  7926 00:F80C: A9 F0              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7927 00:F80E: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7928 00:F810: 20 AF EF           JSR   LAB_UFAC          ; unpack memory (AY) into FAC1
  7929 00:F813: C6 AC              DEC   FAC1_e            ; make result = PI
  7930 00:F815: 60                 RTS
  7931                        
  7932                        ; perform TWOPI
  7933                        
  7934                        LAB_TWOPI
  7935 00:F816: A9 F0              LDA   #<LAB_2C7C        ; set (2*pi) pointer low byte
  7936 00:F818: A0 F8              LDY   #>LAB_2C7C        ; set (2*pi) pointer high byte
  7937 00:F81A: 4C AF EF           JMP   LAB_UFAC          ; unpack memory (AY) into FAC1 and return
  7938                        
  7939                        ; system dependant i/o vectors
  7940                        ; these are in RAM and are set by the monitor at start-up
  7941                        
  7942                        V_INPT
  7943 00:F81D: 6C 05 02           JMP   (VEC_IN)          ; non halting scan input device
  7944                        V_OUTP
  7945 00:F820: 6C 07 02           JMP   (VEC_OUT)         ; send byte to output device
  7946                        V_LOAD
  7947 00:F823: 6C 09 02           JMP   (VEC_LD)          ; load BASIC program
  7948                        V_SAVE
  7949 00:F826: 6C 0B 02           JMP   (VEC_SV)          ; save BASIC program
  7950                        
  7951                        ; The rest are tables messages and code for RAM
  7952                        
  7953                        ; the rest of the code is tables and BASIC start-up code
  7954                        
  7955                        PG2_TABS
  7956 00:F829: 00                 .byte $00               ; ctrl-c flag           -     $00 = enabled
  7957 00:F82A: 00                 .byte $00               ; ctrl-c byte           -     GET needs this
  7958 00:F82B: 00                 .byte $00               ; ctrl-c byte timeout   -     GET needs this
  7959 00:F82C: DC F5              .word CTRLC             ; ctrl c check vector
  7960                        ;     .word xxxx              ; non halting key input -     monitor to set this
  7961                        ;     .word xxxx              ; output vector         -     monitor to set this
  7962                        ;     .word xxxx              ; load vector           -     monitor to set this
  7963                        ;     .word xxxx              ; save vector           -     monitor to set this
  7964                        PG2_TABE
  7965                        
  7966                        ; character get subroutine for zero page
  7967                        
  7968                        ; For a 1.8432MHz 6502 including the JSR and RTS
  7969                        ; fastest (>=":") =  29 cycles =  15.7uS
  7970                        ; slowest (<":")  =  40 cycles =  21.7uS
  7971                        ; space skip      = +21 cycles = +11.4uS
  7972                        ; inc across page =  +4 cycles =  +2.2uS
  7973                        
  7974                        ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
  7975                        ; block is copied to it's destination, any non zero page address will do at assembly
  7976                        ; time, to assemble a three byte instruction.
  7977                        
  7978                        ; page 0 initialisation table from $BC
  7979                        ; increment and scan memory
  7980                        
  7981                        LAB_2CEE
  7982 00:F82E: E6 C3              INC   Bpntrl            ; increment BASIC execute pointer low byte
  7983 00:F830: D0 02              BNE   LAB_2CF4          ; branch if no carry
  7984                                                      ; else
  7985 00:F832: E6 C4              INC   Bpntrh            ; increment BASIC execute pointer high byte
  7986                        
  7987                        ; page 0 initialisation table from $C2
  7988                        ; scan memory
  7989                        
  7990                        LAB_2CF4
  7991 00:F834: AD FF FF           LDA   $FFFF             ; get byte to scan (addr set by call routine)
  7992 00:F837: C9 AC              CMP   #TK_ELSE          ; compare with the token for ELSE
  7993 00:F839: F0 0E              BEQ   LAB_2D05          ; exit if ELSE, not numeric, carry set
  7994                        
  7995 00:F83B: C9 3A              CMP   #':'              ; compare with ":"
  7996 00:F83D: B0 0A              BCS   LAB_2D05          ; exit if >= ":", not numeric, carry set
  7997                        
  7998 00:F83F: C9 20              CMP   #' '              ; compare with " "
  7999 00:F841: F0 EB              BEQ   LAB_2CEE          ; if " " go do next
  8000                        
  8001 00:F843: 38                 SEC                     ; set carry for SBC
  8002 00:F844: E9 30              SBC   #'0'              ; subtract "0"
  8003 00:F846: 38                 SEC                     ; set carry for SBC
  8004 00:F847: E9 D0              SBC   #$D0              ; subtract -"0"
  8005                                                      ; clear carry if byte = "0"-"9"
  8006                        LAB_2D05
  8007 00:F849: 60                 RTS
  8008                        
  8009                        ; page zero initialisation table $00-$12 inclusive
  8010                        
  8011                        StrTab
  8012 00:F84A: 4C                 .byte $4C               ; JMP opcode
  8013 00:F84B: 00 D7              .word LAB_COLD          ; initial warm start vector (cold start)
  8014                        
  8015 00:F84D: 00                 .byte $00               ; these bytes are not used by BASIC
  8016 00:F84E: 00 00              .word $0000             ; 
  8017 00:F850: 00 00              .word $0000             ; 
  8018 00:F852: 00 00              .word $0000             ; 
  8019                        
  8020 00:F854: 4C                 .byte $4C               ; JMP opcode
  8021 00:F855: 5C E6              .word LAB_FCER          ; initial user function vector ("Function call" error)
  8022 00:F857: 00                 .byte $00               ; default NULL count
  8023 00:F858: 00                 .byte $00               ; clear terminal position
  8024 00:F859: 00                 .byte $00               ; default terminal width byte
  8025 00:F85A: F2                 .byte $F2               ; default limit for TAB = 14
  8026 00:F85B: 00 03              .word Ram_base          ; start of user RAM
  8027                        EndTab
  8028                        
  8029                        LAB_MSZM
  8030 00:F85D: 0D 0A 4D 65        .byte $0D,$0A,"Memory size ",$00
       00:F861: 6D 6F 72 79 
       00:F865: 20 73 69 7A 
       00:F869: 65 20 00 
  8031                        
  8032                        LAB_SMSG
  8033 00:F86C: 20 42 79 74        .byte " Bytes free",$0D,$0A,$0A
       00:F870: 65 73 20 66 
       00:F874: 72 65 65 0D 
       00:F878: 0A 0A 
  8034 00:F87A: 45 6E 68 61        .byte "Enhanced BASIC 2.22p5",$0A,$00
       00:F87E: 6E 63 65 64 
       00:F882: 20 42 41 53 
       00:F886: 49 43 20 32 
       00:F88A: 2E 32 32 70 
       00:F88E: 35 0A 00 
  8035                        
  8036                        ; numeric constants and series
  8037                        
  8038                                                      ; constants and series for LOG(n)
  8039                        LAB_25A0
  8040 00:F891: 02                 .byte $02               ; counter
  8041 00:F892: 80 19 56 62        .byte $80,$19,$56,$62   ; 0.59898
  8042 00:F896: 80 76 22 F3        .byte $80,$76,$22,$F3   ; 0.96147
  8043                        ;##   .byte $80,$76,$22,$F1   ; 0.96147
  8044 00:F89A: 82 38 AA 40        .byte $82,$38,$AA,$40   ; 2.88539
  8045                        ;##   .byte $82,$38,$AA,$45   ; 2.88539
  8046                        
  8047                        LAB_25AD
  8048 00:F89E: 80 35 04 F3        .byte $80,$35,$04,$F3   ; 0.70711   1/root 2
  8049                        LAB_25B1
  8050 00:F8A2: 81 35 04 F3        .byte $81,$35,$04,$F3   ; 1.41421   root 2
  8051                        LAB_25B5
  8052 00:F8A6: 80 80 00 00        .byte $80,$80,$00,$00   ; -0.5
  8053                        LAB_25B9
  8054 00:F8AA: 80 31 72 18        .byte $80,$31,$72,$18   ; 0.69315   LOG(2)
  8055                        
  8056                                                      ; numeric PRINT constants
  8057                        LAB_2947
  8058 00:F8AE: 91 43 4F F8        .byte $91,$43,$4F,$F8   ; 99999.9375 (max value with at least one decimal)
  8059                        LAB_294B
  8060 00:F8B2: 94 74 23 F7        .byte $94,$74,$23,$F7   ; 999999.4375 (max value before scientific notation)
  8061                        LAB_294F
  8062 00:F8B6: 94 74 24 00        .byte $94,$74,$24,$00   ; 1000000
  8063                        
  8064                                                      ; EXP(n) constants and series
  8065                        LAB_2AFA
  8066 00:F8BA: 81 38 AA 3B        .byte $81,$38,$AA,$3B   ; 1.4427    (1/LOG base 2 e)
  8067                        LAB_2AFE
  8068 00:F8BE: 06                 .byte $06               ; counter
  8069 00:F8BF: 74 63 90 8C        .byte $74,$63,$90,$8C   ; 2.17023e-4
  8070 00:F8C3: 77 23 0C AB        .byte $77,$23,$0C,$AB   ; 0.00124
  8071 00:F8C7: 7A 1E 94 00        .byte $7A,$1E,$94,$00   ; 0.00968
  8072 00:F8CB: 7C 63 42 80        .byte $7C,$63,$42,$80   ; 0.05548
  8073 00:F8CF: 7E 75 FE D0        .byte $7E,$75,$FE,$D0   ; 0.24023
  8074 00:F8D3: 80 31 72 15        .byte $80,$31,$72,$15   ; 0.69315
  8075 00:F8D7: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.00000
  8076                        
  8077                        ;##   .byte $07               ; counter
  8078                        ;##   .byte $74,$94,$2E,$40   ; -1/7! (-1/5040)
  8079                        ;##   .byte $77,$2E,$4F,$70   ;  1/6! ( 1/720)
  8080                        ;##   .byte $7A,$88,$02,$6E   ; -1/5! (-1/120)
  8081                        ;##   .byte $7C,$2A,$A0,$E6   ;  1/4! ( 1/24)
  8082                        ;##   .byte $7E,$AA,$AA,$50   ; -1/3! (-1/6)
  8083                        ;##   .byte $7F,$7F,$FF,$FF   ;  1/2! ( 1/2)
  8084                        ;##   .byte $81,$80,$00,$00   ; -1/1! (-1/1)
  8085                        ;##   .byte $81,$00,$00,$00   ;  1/0! ( 1/1)
  8086                        
  8087                                                      ; trigonometric constants and series
  8088                        LAB_2C78
  8089 00:F8DB: 81 49 0F DB        .byte $81,$49,$0F,$DB   ; 1.570796371 (pi/2) as floating #
  8090                        LAB_2C84
  8091 00:F8DF: 04                 .byte $04               ; counter
  8092 00:F8E0: 86 1E D7 FB        .byte $86,$1E,$D7,$FB   ; 39.7109
  8093                        ;##   .byte $86,$1E,$D7,$BA   ; 39.7109
  8094 00:F8E4: 87 99 26 65        .byte $87,$99,$26,$65   ;-76.575
  8095                        ;##   .byte $87,$99,$26,$64   ;-76.575
  8096 00:F8E8: 87 23 34 58        .byte $87,$23,$34,$58   ; 81.6022
  8097 00:F8EC: 86 A5 5D E1        .byte $86,$A5,$5D,$E1   ;-41.3417
  8098                        ;##   .byte $86,$A5,$5D,$E0   ;-41.3417
  8099                        LAB_2C7C
  8100 00:F8F0: 83 49 0F DB        .byte $83,$49,$0F,$DB   ; 6.28319 (2*pi) as floating #
  8101                        ;##   .byte $83,$49,$0F,$DA   ; 6.28319 (2*pi) as floating #
  8102                        
  8103                        LAB_2CC9
  8104 00:F8F4: 08                 .byte $08               ; counter
  8105 00:F8F5: 78 3A C5 37        .byte $78,$3A,$C5,$37   ; 0.00285
  8106 00:F8F9: 7B 83 A2 5C        .byte $7B,$83,$A2,$5C   ;-0.0160686
  8107 00:F8FD: 7C 2E DD 4D        .byte $7C,$2E,$DD,$4D   ; 0.0426915
  8108 00:F901: 7D 99 B0 1E        .byte $7D,$99,$B0,$1E   ;-0.0750429
  8109 00:F905: 7D 59 ED 24        .byte $7D,$59,$ED,$24   ; 0.106409
  8110 00:F909: 7E 91 72 00        .byte $7E,$91,$72,$00   ;-0.142036
  8111 00:F90D: 7E 4C B9 73        .byte $7E,$4C,$B9,$73   ; 0.199926
  8112 00:F911: 7F AA AA 53        .byte $7F,$AA,$AA,$53   ;-0.333331
  8113                        
  8114                        ;##   .byte $08               ; counter
  8115                        ;##   .byte $78,$3B,$D7,$4A   ; 1/17
  8116                        ;##   .byte $7B,$84,$6E,$02   ;-1/15
  8117                        ;##   .byte $7C,$2F,$C1,$FE   ; 1/13
  8118                        ;##   .byte $7D,$9A,$31,$74   ;-1/11
  8119                        ;##   .byte $7D,$5A,$3D,$84   ; 1/9
  8120                        ;##   .byte $7E,$91,$7F,$C8   ;-1/7
  8121                        ;##   .byte $7E,$4C,$BB,$E4   ; 1/5
  8122                        ;##   .byte $7F,$AA,$AA,$6C   ;-1/3
  8123                        
  8124             0000F916   LAB_1D96    equ *+1             ; $00,$00 used for undefined variables
  8125                        LAB_259C
  8126 00:F915: 81 00 00 00        .byte $81,$00,$00,$00   ; 1.000000, used for INC
  8127                        LAB_2AFD
  8128 00:F919: 81 80 00 00        .byte $81,$80,$00,$00   ; -1.00000, used for DEC. must be on the same page as +1.00
  8129                        
  8130                                                      ; misc constants
  8131                        LAB_1DF7
  8132 00:F91D: 90                 .byte $90               ;-32768 (uses first three bytes from 0.5)
  8133                        LAB_2A96
  8134 00:F91E: 80 00 00 00        .byte $80,$00,$00,$00   ; 0.5
  8135                        LAB_2C80
  8136 00:F922: 7F 00 00 00        .byte $7F,$00,$00,$00   ; 0.25
  8137                        LAB_26B5
  8138 00:F926: 84 20 00 00        .byte $84,$20,$00,$00   ; 10.0000 divide by 10 constant
  8139                        
  8140                        ; This table is used in converting numbers to ASCII.
  8141                        
  8142                        LAB_2A9A
  8143             0000F92B   LAB_2A9B equ LAB_2A9A+1
  8144             0000F92C   LAB_2A9C equ LAB_2A9B+1
  8145 00:F92A: FE 79 60           .byte $FE,$79,$60       ; -100000
  8146 00:F92D: 00 27 10           .byte $00,$27,$10       ; 10000
  8147 00:F930: FF FC 18           .byte $FF,$FC,$18       ; -1000
  8148 00:F933: 00 00 64           .byte $00,$00,$64       ; 100
  8149 00:F936: FF FF F6           .byte $FF,$FF,$F6       ; -10
  8150 00:F939: 00 00 01           .byte $00,$00,$01       ; 1
  8151                        
  8152                        LAB_CTBL
  8153 00:F93C: 41 DC              .word LAB_END-1         ; END
  8154 00:F93E: 7D DB              .word LAB_FOR-1         ; FOR
  8155 00:F940: 89 E1              .word LAB_NEXT-1        ; NEXT
  8156 00:F942: AE DD              .word LAB_DATA-1        ; DATA
  8157 00:F944: 6C E0              .word LAB_INPUT-1       ; INPUT
  8158 00:F946: 91 E4              .word LAB_DIM-1         ; DIM
  8159 00:F948: 8B E0              .word LAB_READ-1        ; READ
  8160 00:F94A: D9 DE              .word LAB_LET-1         ; LET
  8161 00:F94C: AB DE              .word LAB_DEC-1         ; DEC             new command
  8162 00:F94E: 0D DD              .word LAB_GOTO-1        ; GOTO
  8163 00:F950: CC DC              .word LAB_RUN-1         ; RUN
  8164 00:F952: DC DD              .word LAB_IF-1          ; IF
  8165 00:F954: 62 DC              .word LAB_RESTORE-1     ; RESTORE         modified command
  8166 00:F956: F0 DC              .word LAB_GOSUB-1       ; GOSUB
  8167 00:F958: 97 F6              .word LAB_RETIRQ-1      ; RETIRQ          new command
  8168 00:F95A: A3 F6              .word LAB_RETNMI-1      ; RETNMI          new command
  8169 00:F95C: 99 DD              .word LAB_RETURN-1      ; RETURN
  8170 00:F95E: 43 DE              .word LAB_REM-1         ; REM
  8171 00:F960: 3F DC              .word LAB_STOP-1        ; STOP
  8172 00:F962: 4C DE              .word LAB_ON-1          ; ON              modified command
  8173 00:F964: A0 DC              .word LAB_NULL-1        ; NULL            modified command
  8174 00:F966: AE DE              .word LAB_INC-1         ; INC             new command
  8175 00:F968: BA EC              .word LAB_WAIT-1        ; WAIT
  8176 00:F96A: 22 F8              .word V_LOAD-1          ; LOAD
  8177 00:F96C: 25 F8              .word V_SAVE-1          ; SAVE
  8178 00:F96E: A6 E7              .word LAB_DEF-1         ; DEF
  8179 00:F970: 3F EC              .word LAB_POKE-1        ; POKE
  8180 00:F972: 5B EC              .word LAB_DOKE-1        ; DOKE            new command
  8181 00:F974: A8 EC              .word LAB_CALL-1        ; CALL            new command
  8182 00:F976: D6 DC              .word LAB_DO-1          ; DO              new command
  8183 00:F978: 3F DD              .word LAB_LOOP-1        ; LOOP            new command
  8184 00:F97A: 7A DF              .word LAB_PRINT-1       ; PRINT
  8185 00:F97C: A6 DC              .word LAB_CONT-1        ; CONT
  8186 00:F97E: C8 DA              .word LAB_LIST-1        ; LIST
  8187 00:F980: C5 DA              .word LAB_CLEAR-1       ; CLEAR
  8188 00:F982: 75 DA              .word LAB_NEW-1         ; NEW
  8189 00:F984: 18 F7              .word LAB_WDTH-1        ; WIDTH           new command
  8190 00:F986: 49 DF              .word LAB_GET-1         ; GET             new command
  8191 00:F988: 80 EC              .word LAB_SWAP-1        ; SWAP            new command
  8192 00:F98A: B3 F4              .word LAB_BITSET-1      ; BITSET          new command
  8193 00:F98C: C7 F4              .word LAB_BITCLR-1      ; BITCLR          new command
  8194 00:F98E: 47 F6              .word LAB_IRQ-1         ; IRQ             new command
  8195 00:F990: 4A F6              .word LAB_NMI-1         ; NMI             new command
  8196                        
  8197                        ; function pre process routine table
  8198                        
  8199                        LAB_FTPL
  8200             0000F993   LAB_FTPM    equ LAB_FTPL+$01
  8201 00:F992: 97 E3              .word LAB_PPFN-1        ; SGN(n)    process numeric expression in ()
  8202 00:F994: 97 E3              .word LAB_PPFN-1        ; INT(n)          "
  8203 00:F996: 97 E3              .word LAB_PPFN-1        ; ABS(n)          "
  8204 00:F998: 0D E2              .word LAB_EVEZ-1        ; USR(x)    process any expression
  8205 00:F99A: 10 E3              .word LAB_1BF7-1        ; FRE(x)          "
  8206 00:F99C: 10 E3              .word LAB_1BF7-1        ; POS(x)          "
  8207 00:F99E: 97 E3              .word LAB_PPFN-1        ; SQR(n)    process numeric expression in ()
  8208 00:F9A0: 97 E3              .word LAB_PPFN-1        ; RND(n)          "
  8209 00:F9A2: 97 E3              .word LAB_PPFN-1        ; LOG(n)          "
  8210 00:F9A4: 97 E3              .word LAB_PPFN-1        ; EXP(n)          "
  8211 00:F9A6: 97 E3              .word LAB_PPFN-1        ; COS(n)          "
  8212 00:F9A8: 97 E3              .word LAB_PPFN-1        ; SIN(n)          "
  8213 00:F9AA: 97 E3              .word LAB_PPFN-1        ; TAN(n)          "
  8214 00:F9AC: 97 E3              .word LAB_PPFN-1        ; ATN(n)          "
  8215 00:F9AE: 97 E3              .word LAB_PPFN-1        ; PEEK(n)         "
  8216 00:F9B0: 97 E3              .word LAB_PPFN-1        ; DEEK(n)         "
  8217 00:F9B2: 00 00              .word $0000             ; SADD()    none
  8218 00:F9B4: 91 E3              .word LAB_PPFS-1        ; LEN($)    process string expression in ()
  8219 00:F9B6: 97 E3              .word LAB_PPFN-1        ; STR$(n)   process numeric expression in ()
  8220 00:F9B8: 91 E3              .word LAB_PPFS-1        ; VAL($)    process string expression in ()
  8221 00:F9BA: 91 E3              .word LAB_PPFS-1        ; ASC($)          "
  8222 00:F9BC: 91 E3              .word LAB_PPFS-1        ; UCASE$($)       "
  8223 00:F9BE: 91 E3              .word LAB_PPFS-1        ; LCASE$($)       "
  8224 00:F9C0: 97 E3              .word LAB_PPFN-1        ; CHR$(n)   process numeric expression in ()
  8225 00:F9C2: BE E3              .word LAB_BHSS-1        ; HEX$(n)         "
  8226 00:F9C4: BE E3              .word LAB_BHSS-1        ; BIN$(n)         "
  8227 00:F9C6: 00 00              .word $0000             ; BITTST()  none
  8228 00:F9C8: AF F6              .word LAB_MMPP-1        ; MAX()     process numeric expression
  8229 00:F9CA: AF F6              .word LAB_MMPP-1        ; MIN()           "
  8230 00:F9CC: 9D E3              .word LAB_PPBI-1        ; PI        advance pointer
  8231 00:F9CE: 9D E3              .word LAB_PPBI-1        ; TWOPI           "
  8232 00:F9D0: 00 00              .word $0000             ; VARPTR()  none
  8233 00:F9D2: A2 E3              .word LAB_LRMS-1        ; LEFT$()   process string expression
  8234 00:F9D4: A2 E3              .word LAB_LRMS-1        ; RIGHT$()        "
  8235 00:F9D6: A2 E3              .word LAB_LRMS-1        ; MID$()          "
  8236                        
  8237                        ; action addresses for functions
  8238                        
  8239                        LAB_FTBL
  8240             0000F9D9   LAB_FTBM    equ LAB_FTBL+$01
  8241 00:F9D8: 28 F0              .word LAB_SGN-1         ; SGN()
  8242 00:F9DA: B2 F0              .word LAB_INT-1         ; INT()
  8243 00:F9DC: 45 F0              .word LAB_ABS-1         ; ABS()
  8244 00:F9DE: 7E F4              .word LAB_USR-1         ; USR()
  8245 00:F9E0: 77 E7              .word LAB_FRE-1         ; FRE()
  8246 00:F9E2: 96 E7              .word LAB_POS-1         ; POS()
  8247 00:F9E4: 6E F7              .word LAB_SQR-1         ; SQR()
  8248 00:F9E6: CE F3              .word LAB_RND-1         ; RND()           modified function
  8249 00:F9E8: 2C EE              .word LAB_LOG-1         ; LOG()
  8250 00:F9EA: 30 F3              .word LAB_EXP-1         ; EXP()
  8251 00:F9EC: 02 F4              .word LAB_COS-1         ; COS()
  8252 00:F9EE: 09 F4              .word LAB_SIN-1         ; SIN()
  8253 00:F9F0: 52 F4              .word LAB_TAN-1         ; TAN()
  8254 00:F9F2: 84 F4              .word LAB_ATN-1         ; ATN()
  8255 00:F9F4: 34 EC              .word LAB_PEEK-1        ; PEEK()
  8256 00:F9F6: 48 EC              .word LAB_DEEK-1        ; DEEK()          new function
  8257 00:F9F8: 8D EB              .word LAB_SADD-1        ; SADD()          new function
  8258 00:F9FA: A6 EB              .word LAB_LENS-1        ; LEN()
  8259 00:F9FC: 58 E8              .word LAB_STRS-1        ; STR$()
  8260 00:F9FE: D3 EB              .word LAB_VAL-1         ; VAL()
  8261 00:FA00: B1 EB              .word LAB_ASC-1         ; ASC()
  8262 00:FA02: 6B EB              .word LAB_UCASE-1       ; UCASE$()        new function
  8263 00:FA04: 4A EB              .word LAB_LCASE-1       ; LCASE$()        new function
  8264 00:FA06: BC EA              .word LAB_CHRS-1        ; CHR$()
  8265 00:FA08: 54 F5              .word LAB_HEXS-1        ; HEX$()          new function
  8266 00:FA0A: 05 F5              .word LAB_BINS-1        ; BIN$()          new function
  8267 00:FA0C: DD F4              .word LAB_BTST-1        ; BITTST()        new function
  8268 00:FA0E: B5 F6              .word LAB_MAX-1         ; MAX()           new function
  8269 00:FA10: C5 F6              .word LAB_MIN-1         ; MIN()           new function
  8270 00:FA12: 0B F8              .word LAB_PI-1          ; PI              new function
  8271 00:FA14: 15 F8              .word LAB_TWOPI-1       ; TWOPI           new function
  8272 00:FA16: FB F7              .word LAB_VARPTR-1      ; VARPTR()        new function
  8273 00:FA18: CE EA              .word LAB_LEFT-1        ; LEFT$()
  8274 00:FA1A: D7 EA              .word LAB_RIGHT-1       ; RIGHT$()
  8275 00:FA1C: 06 EB              .word LAB_MIDS-1        ; MID$()
  8276                        
  8277                        ; hierarchy and action addresses for operator
  8278                        
  8279                        LAB_OPPT
  8280 00:FA1E: 79                 .byte $79               ; +
  8281 00:FA1F: F2 EC              .word LAB_ADD-1
  8282 00:FA21: 79                 .byte $79               ; -
  8283 00:FA22: D7 EC              .word LAB_SUBTRACT-1
  8284 00:FA24: 7B                 .byte $7B               ; *
  8285 00:FA25: 6D EE              .word LAB_MULTIPLY-1
  8286 00:FA27: 7B                 .byte $7B               ; /
  8287 00:FA28: 35 EF              .word LAB_DIVIDE-1
  8288 00:FA2A: 7F                 .byte $7F               ; ^
  8289 00:FA2B: EC F2              .word LAB_POWER-1
  8290 00:FA2D: 50                 .byte $50               ; AND
  8291 00:FA2E: 07 E4              .word LAB_AND-1
  8292 00:FA30: 46                 .byte $46               ; EOR             new operator
  8293 00:FA31: ED E3              .word LAB_EOR-1
  8294 00:FA33: 46                 .byte $46               ; OR
  8295 00:FA34: FA E3              .word LAB_OR-1
  8296 00:FA36: 56                 .byte $56               ; >>              new operator
  8297 00:FA37: B3 E4              .word LAB_RSHIFT-1
  8298 00:FA39: 56                 .byte $56               ; <<              new operator
  8299 00:FA3A: 9B E4              .word LAB_LSHIFT-1
  8300 00:FA3C: 7D                 .byte $7D               ; >
  8301 00:FA3D: 25 F3              .word LAB_GTHAN-1
  8302 00:FA3F: 5A                 .byte $5A               ; =
  8303 00:FA40: 3B E3              .word LAB_EQUAL-1
  8304 00:FA42: 64                 .byte $64               ; <
  8305 00:FA43: 28 E4              .word LAB_LTHAN-1
  8306                        
  8307                        ; keywords start with ..
  8308                        ; this is the first character table and must be in alphabetic order
  8309                        
  8310                        TAB_1STC
  8311 00:FA45: 2A                 .byte "*"
  8312 00:FA46: 2B                 .byte "+"
  8313 00:FA47: 2D                 .byte "-"
  8314 00:FA48: 2F                 .byte "/"
  8315 00:FA49: 3C                 .byte "<"
  8316 00:FA4A: 3D                 .byte "="
  8317 00:FA4B: 3E                 .byte ">"
  8318 00:FA4C: 3F                 .byte "?"
  8319 00:FA4D: 41                 .byte "A"
  8320 00:FA4E: 42                 .byte "B"
  8321 00:FA4F: 43                 .byte "C"
  8322 00:FA50: 44                 .byte "D"
  8323 00:FA51: 45                 .byte "E"
  8324 00:FA52: 46                 .byte "F"
  8325 00:FA53: 47                 .byte "G"
  8326 00:FA54: 48                 .byte "H"
  8327 00:FA55: 49                 .byte "I"
  8328 00:FA56: 4C                 .byte "L"
  8329 00:FA57: 4D                 .byte "M"
  8330 00:FA58: 4E                 .byte "N"
  8331 00:FA59: 4F                 .byte "O"
  8332 00:FA5A: 50                 .byte "P"
  8333 00:FA5B: 52                 .byte "R"
  8334 00:FA5C: 53                 .byte "S"
  8335 00:FA5D: 54                 .byte "T"
  8336 00:FA5E: 55                 .byte "U"
  8337 00:FA5F: 56                 .byte "V"
  8338 00:FA60: 57                 .byte "W"
  8339 00:FA61: 5E                 .byte "^"
  8340 00:FA62: 00                 .byte $00               ; table terminator
  8341                        
  8342                        ; pointers to keyword tables
  8343                        
  8344                        TAB_CHRT
  8345 00:FA63: 9D FA              .word TAB_STAR          ; table for "*"
  8346 00:FA65: 9F FA              .word TAB_PLUS          ; table for "+"
  8347 00:FA67: A1 FA              .word TAB_MNUS          ; table for "-"
  8348 00:FA69: A3 FA              .word TAB_SLAS          ; table for "/"
  8349 00:FA6B: A5 FA              .word TAB_LESS          ; table for "<"
  8350 00:FA6D: A9 FA              .word TAB_EQUL          ; table for "="
  8351 00:FA6F: AB FA              .word TAB_MORE          ; table for ">"
  8352 00:FA71: AF FA              .word TAB_QEST          ; table for "?"
  8353 00:FA73: B1 FA              .word TAB_ASCA          ; table for "A"
  8354 00:FA75: C1 FA              .word TAB_ASCB          ; table for "B"
  8355 00:FA77: DA FA              .word TAB_ASCC          ; table for "C"
  8356 00:FA79: F1 FA              .word TAB_ASCD          ; table for "D"
  8357 00:FA7B: 0A FB              .word TAB_ASCE          ; table for "E"
  8358 00:FA7D: 19 FB              .word TAB_ASCF          ; table for "F"
  8359 00:FA7F: 23 FB              .word TAB_ASCG          ; table for "G"
  8360 00:FA81: 30 FB              .word TAB_ASCH          ; table for "H"
  8361 00:FA83: 36 FB              .word TAB_ASCI          ; table for "I"
  8362 00:FA85: 48 FB              .word TAB_ASCL          ; table for "L"
  8363 00:FA87: 6D FB              .word TAB_ASCM          ; table for "M"
  8364 00:FA89: 7B FB              .word TAB_ASCN          ; table for "N"
  8365 00:FA8B: 8D FB              .word TAB_ASCO          ; table for "O"
  8366 00:FA8D: 95 FB              .word TAB_ASCP          ; table for "P"
  8367 00:FA8F: AA FB              .word TAB_ASCR          ; table for "R"
  8368 00:FA91: D9 FB              .word TAB_ASCS          ; table for "S"
  8369 00:FA93: 04 FC              .word TAB_ASCT          ; table for "T"
  8370 00:FA95: 18 FC              .word TAB_ASCU          ; table for "U"
  8371 00:FA97: 29 FC              .word TAB_ASCV          ; table for "V"
  8372 00:FA99: 35 FC              .word TAB_ASCW          ; table for "W"
  8373 00:FA9B: 44 FC              .word TAB_POWR          ; table for "^"
  8374                        
  8375                        ; tables for each start character, note if a longer keyword with the same start
  8376                        ; letters as a shorter one exists then it must come first, else the list is in
  8377                        ; alphabetical order as follows ..
  8378                        
  8379                        ; [keyword,token
  8380                        ; [keyword,token]]
  8381                        ; end marker (#$00)
  8382                        
  8383                        TAB_STAR
  8384 00:FA9D: B8 00              .byte TK_MUL,$00        ; *
  8385                        TAB_PLUS
  8386 00:FA9F: B6 00              .byte TK_PLUS,$00       ; +
  8387                        TAB_MNUS
  8388 00:FAA1: B7 00              .byte TK_MINUS,$00      ; -
  8389                        TAB_SLAS
  8390 00:FAA3: B9 00              .byte TK_DIV,$00        ; /
  8391                        TAB_LESS
  8392                        LBB_LSHIFT
  8393 00:FAA5: 3C BF              .byte "<",TK_LSHIFT     ; <<  note - "<<" must come before "<"
  8394 00:FAA7: C2                 .byte TK_LT             ; <
  8395 00:FAA8: 00                 .byte $00
  8396                        TAB_EQUL
  8397 00:FAA9: C1 00              .byte TK_EQUAL,$00      ; =
  8398                        TAB_MORE
  8399                        LBB_RSHIFT
  8400 00:FAAB: 3E BE              .byte ">",TK_RSHIFT     ; >>  note - ">>" must come before ">"
  8401 00:FAAD: C0                 .byte TK_GT             ; >
  8402 00:FAAE: 00                 .byte $00
  8403                        TAB_QEST
  8404 00:FAAF: 9F 00              .byte TK_PRINT,$00      ; ?
  8405                        TAB_ASCA
  8406                        LBB_ABS
  8407 00:FAB1: 42 53 28 C5        .byte "BS(",TK_ABS      ; ABS(
  8408                        LBB_AND
  8409 00:FAB5: 4E 44 BB           .byte "ND",TK_AND       ; AND
  8410                        LBB_ASC
  8411 00:FAB8: 53 43 28 D7        .byte "SC(",TK_ASC      ; ASC(
  8412                        LBB_ATN
  8413 00:FABC: 54 4E 28 D0        .byte "TN(",TK_ATN      ; ATN(
  8414 00:FAC0: 00                 .byte $00
  8415                        TAB_ASCB
  8416                        LBB_BINS
  8417 00:FAC1: 49 4E 24 28        .byte "IN$(",TK_BINS    ; BIN$(
       00:FAC5: DC 
  8418                        LBB_BITCLR
  8419 00:FAC6: 49 54 43 4C        .byte "ITCLR",TK_BITCLR ; BITCLR
       00:FACA: 52 A8 
  8420                        LBB_BITSET
  8421 00:FACC: 49 54 53 45        .byte "ITSET",TK_BITSET ; BITSET
       00:FAD0: 54 A7 
  8422                        LBB_BITTST
  8423 00:FAD2: 49 54 54 53        .byte "ITTST(",TK_BITTST
       00:FAD6: 54 28 DD 
  8424                                                      ; BITTST(
  8425 00:FAD9: 00                 .byte $00
  8426                        TAB_ASCC
  8427                        LBB_CALL
  8428 00:FADA: 41 4C 4C 9C        .byte "ALL",TK_CALL     ; CALL
  8429                        LBB_CHRS
  8430 00:FADE: 48 52 24 28        .byte "HR$(",TK_CHRS    ; CHR$(
       00:FAE2: DA 
  8431                        LBB_CLEAR
  8432 00:FAE3: 4C 45 41 52        .byte "LEAR",TK_CLEAR   ; CLEAR
       00:FAE7: A2 
  8433                        LBB_CONT
  8434 00:FAE8: 4F 4E 54 A0        .byte "ONT",TK_CONT     ; CONT
  8435                        LBB_COS
  8436 00:FAEC: 4F 53 28 CD        .byte "OS(",TK_COS      ; COS(
  8437 00:FAF0: 00                 .byte $00
  8438                        TAB_ASCD
  8439                        LBB_DATA
  8440 00:FAF1: 41 54 41 83        .byte "ATA",TK_DATA     ; DATA
  8441                        LBB_DEC
  8442 00:FAF5: 45 43 88           .byte "EC",TK_DEC       ; DEC
  8443                        LBB_DEEK
  8444 00:FAF8: 45 45 4B 28        .byte "EEK(",TK_DEEK    ; DEEK(
       00:FAFC: D2 
  8445                        LBB_DEF
  8446 00:FAFD: 45 46 99           .byte "EF",TK_DEF       ; DEF
  8447                        LBB_DIM
  8448 00:FB00: 49 4D 85           .byte "IM",TK_DIM       ; DIM
  8449                        LBB_DOKE
  8450 00:FB03: 4F 4B 45 9B        .byte "OKE",TK_DOKE     ; DOKE note - "DOKE" must come before "DO"
  8451                        LBB_DO
  8452 00:FB07: 4F 9D              .byte "O",TK_DO         ; DO
  8453 00:FB09: 00                 .byte $00
  8454                        TAB_ASCE
  8455                        LBB_ELSE
  8456 00:FB0A: 4C 53 45 AC        .byte "LSE",TK_ELSE     ; ELSE
  8457                        LBB_END
  8458 00:FB0E: 4E 44 80           .byte "ND",TK_END       ; END
  8459                        LBB_EOR
  8460 00:FB11: 4F 52 BC           .byte "OR",TK_EOR       ; EOR
  8461                        LBB_EXP
  8462 00:FB14: 58 50 28 CC        .byte "XP(",TK_EXP      ; EXP(
  8463 00:FB18: 00                 .byte $00
  8464                        TAB_ASCF
  8465                        LBB_FN
  8466 00:FB19: 4E AE              .byte "N",TK_FN         ; FN
  8467                        LBB_FOR
  8468 00:FB1B: 4F 52 81           .byte "OR",TK_FOR       ; FOR
  8469                        LBB_FRE
  8470 00:FB1E: 52 45 28 C7        .byte "RE(",TK_FRE      ; FRE(
  8471 00:FB22: 00                 .byte $00
  8472                        TAB_ASCG
  8473                        LBB_GET
  8474 00:FB23: 45 54 A5           .byte "ET",TK_GET       ; GET
  8475                        LBB_GOSUB
  8476 00:FB26: 4F 53 55 42        .byte "OSUB",TK_GOSUB   ; GOSUB
       00:FB2A: 8D 
  8477                        LBB_GOTO
  8478 00:FB2B: 4F 54 4F 89        .byte "OTO",TK_GOTO     ; GOTO
  8479 00:FB2F: 00                 .byte $00
  8480                        TAB_ASCH
  8481                        LBB_HEXS
  8482 00:FB30: 45 58 24 28        .byte "EX$(",TK_HEXS    ; HEX$(
       00:FB34: DB 
  8483 00:FB35: 00                 .byte $00
  8484                        TAB_ASCI
  8485                        LBB_IF
  8486 00:FB36: 46 8B              .byte "F",TK_IF         ; IF
  8487                        LBB_INC
  8488 00:FB38: 4E 43 95           .byte "NC",TK_INC       ; INC
  8489                        LBB_INPUT
  8490 00:FB3B: 4E 50 55 54        .byte "NPUT",TK_INPUT   ; INPUT
       00:FB3F: 84 
  8491                        LBB_INT
  8492 00:FB40: 4E 54 28 C4        .byte "NT(",TK_INT      ; INT(
  8493                        LBB_IRQ
  8494 00:FB44: 52 51 A9           .byte "RQ",TK_IRQ       ; IRQ
  8495 00:FB47: 00                 .byte $00
  8496                        TAB_ASCL
  8497                        LBB_LCASES
  8498 00:FB48: 43 41 53 45        .byte "CASE$(",TK_LCASES
       00:FB4C: 24 28 D9 
  8499                                                      ; LCASE$(
  8500                        LBB_LEFTS
  8501 00:FB4F: 45 46 54 24        .byte "EFT$(",TK_LEFTS  ; LEFT$(
       00:FB53: 28 E3 
  8502                        LBB_LEN
  8503 00:FB55: 45 4E 28 D4        .byte "EN(",TK_LEN      ; LEN(
  8504                        LBB_LET
  8505 00:FB59: 45 54 87           .byte "ET",TK_LET       ; LET
  8506                        LBB_LIST
  8507 00:FB5C: 49 53 54 A1        .byte "IST",TK_LIST     ; LIST
  8508                        LBB_LOAD
  8509 00:FB60: 4F 41 44 97        .byte "OAD",TK_LOAD     ; LOAD
  8510                        LBB_LOG
  8511 00:FB64: 4F 47 28 CB        .byte "OG(",TK_LOG      ; LOG(
  8512                        LBB_LOOP
  8513 00:FB68: 4F 4F 50 9E        .byte "OOP",TK_LOOP     ; LOOP
  8514 00:FB6C: 00                 .byte $00
  8515                        TAB_ASCM
  8516                        LBB_MAX
  8517 00:FB6D: 41 58 28 DE        .byte "AX(",TK_MAX      ; MAX(
  8518                        LBB_MIDS
  8519 00:FB71: 49 44 24 28        .byte "ID$(",TK_MIDS    ; MID$(
       00:FB75: E5 
  8520                        LBB_MIN
  8521 00:FB76: 49 4E 28 DF        .byte "IN(",TK_MIN      ; MIN(
  8522 00:FB7A: 00                 .byte $00
  8523                        TAB_ASCN
  8524                        LBB_NEW
  8525 00:FB7B: 45 57 A3           .byte "EW",TK_NEW       ; NEW
  8526                        LBB_NEXT
  8527 00:FB7E: 45 58 54 82        .byte "EXT",TK_NEXT     ; NEXT
  8528                        LBB_NMI
  8529 00:FB82: 4D 49 AA           .byte "MI",TK_NMI       ; NMI
  8530                        LBB_NOT
  8531 00:FB85: 4F 54 B1           .byte "OT",TK_NOT       ; NOT
  8532                        LBB_NULL
  8533 00:FB88: 55 4C 4C 94        .byte "ULL",TK_NULL     ; NULL
  8534 00:FB8C: 00                 .byte $00
  8535                        TAB_ASCO
  8536                        LBB_OFF
  8537 00:FB8D: 46 46 B5           .byte "FF",TK_OFF       ; OFF
  8538                        LBB_ON
  8539 00:FB90: 4E 93              .byte "N",TK_ON         ; ON
  8540                        LBB_OR
  8541 00:FB92: 52 BD              .byte "R",TK_OR         ; OR
  8542 00:FB94: 00                 .byte $00
  8543                        TAB_ASCP
  8544                        LBB_PEEK
  8545 00:FB95: 45 45 4B 28        .byte "EEK(",TK_PEEK    ; PEEK(
       00:FB99: D1 
  8546                        LBB_PI
  8547 00:FB9A: 49 E0              .byte "I",TK_PI         ; PI
  8548                        LBB_POKE
  8549 00:FB9C: 4F 4B 45 9A        .byte "OKE",TK_POKE     ; POKE
  8550                        LBB_POS
  8551 00:FBA0: 4F 53 28 C8        .byte "OS(",TK_POS      ; POS(
  8552                        LBB_PRINT
  8553 00:FBA4: 52 49 4E 54        .byte "RINT",TK_PRINT   ; PRINT
       00:FBA8: 9F 
  8554 00:FBA9: 00                 .byte $00
  8555                        TAB_ASCR
  8556                        LBB_READ
  8557 00:FBAA: 45 41 44 86        .byte "EAD",TK_READ     ; READ
  8558                        LBB_REM
  8559 00:FBAE: 45 4D 91           .byte "EM",TK_REM       ; REM
  8560                        LBB_RESTORE
  8561 00:FBB1: 45 53 54 4F        .byte "ESTORE",TK_RESTORE
       00:FBB5: 52 45 8C 
  8562                                                      ; RESTORE
  8563                        LBB_RETIRQ
  8564 00:FBB8: 45 54 49 52        .byte "ETIRQ",TK_RETIRQ ; RETIRQ
       00:FBBC: 51 8E 
  8565                        LBB_RETNMI
  8566 00:FBBE: 45 54 4E 4D        .byte "ETNMI",TK_RETNMI ; RETNMI
       00:FBC2: 49 8F 
  8567                        LBB_RETURN
  8568 00:FBC4: 45 54 55 52        .byte "ETURN",TK_RETURN ; RETURN
       00:FBC8: 4E 90 
  8569                        LBB_RIGHTS
  8570 00:FBCA: 49 47 48 54        .byte "IGHT$(",TK_RIGHTS
       00:FBCE: 24 28 E4 
  8571                                                      ; RIGHT$(
  8572                        LBB_RND
  8573 00:FBD1: 4E 44 28 CA        .byte "ND(",TK_RND      ; RND(
  8574                        LBB_RUN
  8575 00:FBD5: 55 4E 8A           .byte "UN",TK_RUN       ; RUN
  8576 00:FBD8: 00                 .byte $00
  8577                        TAB_ASCS
  8578                        LBB_SADD
  8579 00:FBD9: 41 44 44 28        .byte "ADD(",TK_SADD    ; SADD(
       00:FBDD: D3 
  8580                        LBB_SAVE
  8581 00:FBDE: 41 56 45 98        .byte "AVE",TK_SAVE     ; SAVE
  8582                        LBB_SGN
  8583 00:FBE2: 47 4E 28 C3        .byte "GN(",TK_SGN      ; SGN(
  8584                        LBB_SIN
  8585 00:FBE6: 49 4E 28 CE        .byte "IN(",TK_SIN      ; SIN(
  8586                        LBB_SPC
  8587 00:FBEA: 50 43 28 AF        .byte "PC(",TK_SPC      ; SPC(
  8588                        LBB_SQR
  8589 00:FBEE: 51 52 28 C9        .byte "QR(",TK_SQR      ; SQR(
  8590                        LBB_STEP
  8591 00:FBF2: 54 45 50 B2        .byte "TEP",TK_STEP     ; STEP
  8592                        LBB_STOP
  8593 00:FBF6: 54 4F 50 92        .byte "TOP",TK_STOP     ; STOP
  8594                        LBB_STRS
  8595 00:FBFA: 54 52 24 28        .byte "TR$(",TK_STRS    ; STR$(
       00:FBFE: D5 
  8596                        LBB_SWAP
  8597 00:FBFF: 57 41 50 A6        .byte "WAP",TK_SWAP     ; SWAP
  8598 00:FC03: 00                 .byte $00
  8599                        TAB_ASCT
  8600                        LBB_TAB
  8601 00:FC04: 41 42 28 AB        .byte "AB(",TK_TAB      ; TAB(
  8602                        LBB_TAN
  8603 00:FC08: 41 4E 28 CF        .byte "AN(",TK_TAN      ; TAN(
  8604                        LBB_THEN
  8605 00:FC0C: 48 45 4E B0        .byte "HEN",TK_THEN     ; THEN
  8606                        LBB_TO
  8607 00:FC10: 4F AD              .byte "O",TK_TO         ; TO
  8608                        LBB_TWOPI
  8609 00:FC12: 57 4F 50 49        .byte "WOPI",TK_TWOPI   ; TWOPI
       00:FC16: E1 
  8610 00:FC17: 00                 .byte $00
  8611                        TAB_ASCU
  8612                        LBB_UCASES
  8613 00:FC18: 43 41 53 45        .byte "CASE$(",TK_UCASES
       00:FC1C: 24 28 D8 
  8614                                                      ; UCASE$(
  8615                        LBB_UNTIL
  8616 00:FC1F: 4E 54 49 4C        .byte "NTIL",TK_UNTIL   ; UNTIL
       00:FC23: B3 
  8617                        LBB_USR
  8618 00:FC24: 53 52 28 C6        .byte "SR(",TK_USR      ; USR(
  8619 00:FC28: 00                 .byte $00
  8620                        TAB_ASCV
  8621                        LBB_VAL
  8622 00:FC29: 41 4C 28 D6        .byte "AL(",TK_VAL      ; VAL(
  8623                        LBB_VPTR
  8624 00:FC2D: 41 52 50 54        .byte "ARPTR(",TK_VPTR  ; VARPTR(
       00:FC31: 52 28 E2 
  8625 00:FC34: 00                 .byte $00
  8626                        TAB_ASCW
  8627                        LBB_WAIT
  8628 00:FC35: 41 49 54 96        .byte "AIT",TK_WAIT     ; WAIT
  8629                        LBB_WHILE
  8630 00:FC39: 48 49 4C 45        .byte "HILE",TK_WHILE   ; WHILE
       00:FC3D: B4 
  8631                        LBB_WIDTH
  8632 00:FC3E: 49 44 54 48        .byte "IDTH",TK_WIDTH   ; WIDTH
       00:FC42: A4 
  8633 00:FC43: 00                 .byte $00
  8634                        TAB_POWR
  8635 00:FC44: BA 00              .byte TK_POWER,$00      ; ^
  8636                        
  8637                        ; new decode table for LIST
  8638                        ; Table is ..
  8639                        ; byte - keyword length, keyword first character
  8640                        ; word - pointer to rest of keyword from dictionary
  8641                        
  8642                        ; note if length is 1 then the pointer is ignored
  8643                        
  8644                        LAB_KEYT
  8645 00:FC46: 03 45              .byte 3,'E'
  8646 00:FC48: 0E FB              .word LBB_END           ; END
  8647 00:FC4A: 03 46              .byte 3,'F'
  8648 00:FC4C: 1B FB              .word LBB_FOR           ; FOR
  8649 00:FC4E: 04 4E              .byte 4,'N'
  8650 00:FC50: 7E FB              .word LBB_NEXT          ; NEXT
  8651 00:FC52: 04 44              .byte 4,'D'
  8652 00:FC54: F1 FA              .word LBB_DATA          ; DATA
  8653 00:FC56: 05 49              .byte 5,'I'
  8654 00:FC58: 3B FB              .word LBB_INPUT         ; INPUT
  8655 00:FC5A: 03 44              .byte 3,'D'
  8656 00:FC5C: 00 FB              .word LBB_DIM           ; DIM
  8657 00:FC5E: 04 52              .byte 4,'R'
  8658 00:FC60: AA FB              .word LBB_READ          ; READ
  8659 00:FC62: 03 4C              .byte 3,'L'
  8660 00:FC64: 59 FB              .word LBB_LET           ; LET
  8661 00:FC66: 03 44              .byte 3,'D'
  8662 00:FC68: F5 FA              .word LBB_DEC           ; DEC
  8663 00:FC6A: 04 47              .byte 4,'G'
  8664 00:FC6C: 2B FB              .word LBB_GOTO          ; GOTO
  8665 00:FC6E: 03 52              .byte 3,'R'
  8666 00:FC70: D5 FB              .word LBB_RUN           ; RUN
  8667 00:FC72: 02 49              .byte 2,'I'
  8668 00:FC74: 36 FB              .word LBB_IF            ; IF
  8669 00:FC76: 07 52              .byte 7,'R'
  8670 00:FC78: B1 FB              .word LBB_RESTORE       ; RESTORE
  8671 00:FC7A: 05 47              .byte 5,'G'
  8672 00:FC7C: 26 FB              .word LBB_GOSUB         ; GOSUB
  8673 00:FC7E: 06 52              .byte 6,'R'
  8674 00:FC80: B8 FB              .word LBB_RETIRQ        ; RETIRQ
  8675 00:FC82: 06 52              .byte 6,'R'
  8676 00:FC84: BE FB              .word LBB_RETNMI        ; RETNMI
  8677 00:FC86: 06 52              .byte 6,'R'
  8678 00:FC88: C4 FB              .word LBB_RETURN        ; RETURN
  8679 00:FC8A: 03 52              .byte 3,'R'
  8680 00:FC8C: AE FB              .word LBB_REM           ; REM
  8681 00:FC8E: 04 53              .byte 4,'S'
  8682 00:FC90: F6 FB              .word LBB_STOP          ; STOP
  8683 00:FC92: 02 4F              .byte 2,'O'
  8684 00:FC94: 90 FB              .word LBB_ON            ; ON
  8685 00:FC96: 04 4E              .byte 4,'N'
  8686 00:FC98: 88 FB              .word LBB_NULL          ; NULL
  8687 00:FC9A: 03 49              .byte 3,'I'
  8688 00:FC9C: 38 FB              .word LBB_INC           ; INC
  8689 00:FC9E: 04 57              .byte 4,'W'
  8690 00:FCA0: 35 FC              .word LBB_WAIT          ; WAIT
  8691 00:FCA2: 04 4C              .byte 4,'L'
  8692 00:FCA4: 60 FB              .word LBB_LOAD          ; LOAD
  8693 00:FCA6: 04 53              .byte 4,'S'
  8694 00:FCA8: DE FB              .word LBB_SAVE          ; SAVE
  8695 00:FCAA: 03 44              .byte 3,'D'
  8696 00:FCAC: FD FA              .word LBB_DEF           ; DEF
  8697 00:FCAE: 04 50              .byte 4,'P'
  8698 00:FCB0: 9C FB              .word LBB_POKE          ; POKE
  8699 00:FCB2: 04 44              .byte 4,'D'
  8700 00:FCB4: 03 FB              .word LBB_DOKE          ; DOKE
  8701 00:FCB6: 04 43              .byte 4,'C'
  8702 00:FCB8: DA FA              .word LBB_CALL          ; CALL
  8703 00:FCBA: 02 44              .byte 2,'D'
  8704 00:FCBC: 07 FB              .word LBB_DO            ; DO
  8705 00:FCBE: 04 4C              .byte 4,'L'
  8706 00:FCC0: 68 FB              .word LBB_LOOP          ; LOOP
  8707 00:FCC2: 05 50              .byte 5,'P'
  8708 00:FCC4: A4 FB              .word LBB_PRINT         ; PRINT
  8709 00:FCC6: 04 43              .byte 4,'C'
  8710 00:FCC8: E8 FA              .word LBB_CONT          ; CONT
  8711 00:FCCA: 04 4C              .byte 4,'L'
  8712 00:FCCC: 5C FB              .word LBB_LIST          ; LIST
  8713 00:FCCE: 05 43              .byte 5,'C'
  8714 00:FCD0: E3 FA              .word LBB_CLEAR         ; CLEAR
  8715 00:FCD2: 03 4E              .byte 3,'N'
  8716 00:FCD4: 7B FB              .word LBB_NEW           ; NEW
  8717 00:FCD6: 05 57              .byte 5,'W'
  8718 00:FCD8: 3E FC              .word LBB_WIDTH         ; WIDTH
  8719 00:FCDA: 03 47              .byte 3,'G'
  8720 00:FCDC: 23 FB              .word LBB_GET           ; GET
  8721 00:FCDE: 04 53              .byte 4,'S'
  8722 00:FCE0: FF FB              .word LBB_SWAP          ; SWAP
  8723 00:FCE2: 06 42              .byte 6,'B'
  8724 00:FCE4: CC FA              .word LBB_BITSET        ; BITSET
  8725 00:FCE6: 06 42              .byte 6,'B'
  8726 00:FCE8: C6 FA              .word LBB_BITCLR        ; BITCLR
  8727 00:FCEA: 03 49              .byte 3,'I'
  8728 00:FCEC: 44 FB              .word LBB_IRQ           ; IRQ
  8729 00:FCEE: 03 4E              .byte 3,'N'
  8730 00:FCF0: 82 FB              .word LBB_NMI           ; NMI
  8731                        
  8732                        ; secondary commands (can't start a statement)
  8733                        
  8734 00:FCF2: 04 54              .byte 4,'T'
  8735 00:FCF4: 04 FC              .word LBB_TAB           ; TAB
  8736 00:FCF6: 04 45              .byte 4,'E'
  8737 00:FCF8: 0A FB              .word LBB_ELSE          ; ELSE
  8738 00:FCFA: 02 54              .byte 2,'T'
  8739 00:FCFC: 10 FC              .word LBB_TO            ; TO
  8740 00:FCFE: 02 46              .byte 2,'F'
  8741 00:FD00: 19 FB              .word LBB_FN            ; FN
  8742 00:FD02: 04 53              .byte 4,'S'
  8743 00:FD04: EA FB              .word LBB_SPC           ; SPC
  8744 00:FD06: 04 54              .byte 4,'T'
  8745 00:FD08: 0C FC              .word LBB_THEN          ; THEN
  8746 00:FD0A: 03 4E              .byte 3,'N'
  8747 00:FD0C: 85 FB              .word LBB_NOT           ; NOT
  8748 00:FD0E: 04 53              .byte 4,'S'
  8749 00:FD10: F2 FB              .word LBB_STEP          ; STEP
  8750 00:FD12: 05 55              .byte 5,'U'
  8751 00:FD14: 1F FC              .word LBB_UNTIL         ; UNTIL
  8752 00:FD16: 05 57              .byte 5,'W'
  8753 00:FD18: 39 FC              .word LBB_WHILE         ; WHILE
  8754 00:FD1A: 03 4F              .byte 3,'O'
  8755 00:FD1C: 8D FB              .word LBB_OFF           ; OFF
  8756                        
  8757                        ; opperators
  8758                        
  8759 00:FD1E: 01 2B              .byte 1,'+'
  8760 00:FD20: 00 00              .word $0000             ; +
  8761 00:FD22: 01 2D              .byte 1,'-'
  8762 00:FD24: 00 00              .word $0000             ; -
  8763 00:FD26: 01 2A              .byte 1,'*'
  8764 00:FD28: 00 00              .word $0000             ; *
  8765 00:FD2A: 01 2F              .byte 1,'/'
  8766 00:FD2C: 00 00              .word $0000             ; /
  8767 00:FD2E: 01 5E              .byte 1,'^'
  8768 00:FD30: 00 00              .word $0000             ; ^
  8769 00:FD32: 03 41              .byte 3,'A'
  8770 00:FD34: B5 FA              .word LBB_AND           ; AND
  8771 00:FD36: 03 45              .byte 3,'E'
  8772 00:FD38: 11 FB              .word LBB_EOR           ; EOR
  8773 00:FD3A: 02 4F              .byte 2,'O'
  8774 00:FD3C: 92 FB              .word LBB_OR            ; OR
  8775 00:FD3E: 02 3E              .byte 2,'>'
  8776 00:FD40: AB FA              .word LBB_RSHIFT        ; >>
  8777 00:FD42: 02 3C              .byte 2,'<'
  8778 00:FD44: A5 FA              .word LBB_LSHIFT        ; <<
  8779 00:FD46: 01 3E              .byte 1,'>'
  8780 00:FD48: 00 00              .word $0000             ; >
  8781 00:FD4A: 01 3D              .byte 1,'='
  8782 00:FD4C: 00 00              .word $0000             ; =
  8783 00:FD4E: 01 3C              .byte 1,'<'
  8784 00:FD50: 00 00              .word $0000             ; <
  8785                        
  8786                        ; functions
  8787                        
  8788 00:FD52: 04 53              .byte 4,'S'             ;
  8789 00:FD54: E2 FB              .word LBB_SGN           ; SGN
  8790 00:FD56: 04 49              .byte 4,'I'             ;
  8791 00:FD58: 40 FB              .word LBB_INT           ; INT
  8792 00:FD5A: 04 41              .byte 4,'A'             ;
  8793 00:FD5C: B1 FA              .word LBB_ABS           ; ABS
  8794 00:FD5E: 04 55              .byte 4,'U'             ;
  8795 00:FD60: 24 FC              .word LBB_USR           ; USR
  8796 00:FD62: 04 46              .byte 4,'F'             ;
  8797 00:FD64: 1E FB              .word LBB_FRE           ; FRE
  8798 00:FD66: 04 50              .byte 4,'P'             ;
  8799 00:FD68: A0 FB              .word LBB_POS           ; POS
  8800 00:FD6A: 04 53              .byte 4,'S'             ;
  8801 00:FD6C: EE FB              .word LBB_SQR           ; SQR
  8802 00:FD6E: 04 52              .byte 4,'R'             ;
  8803 00:FD70: D1 FB              .word LBB_RND           ; RND
  8804 00:FD72: 04 4C              .byte 4,'L'             ;
  8805 00:FD74: 64 FB              .word LBB_LOG           ; LOG
  8806 00:FD76: 04 45              .byte 4,'E'             ;
  8807 00:FD78: 14 FB              .word LBB_EXP           ; EXP
  8808 00:FD7A: 04 43              .byte 4,'C'             ;
  8809 00:FD7C: EC FA              .word LBB_COS           ; COS
  8810 00:FD7E: 04 53              .byte 4,'S'             ;
  8811 00:FD80: E6 FB              .word LBB_SIN           ; SIN
  8812 00:FD82: 04 54              .byte 4,'T'             ;
  8813 00:FD84: 08 FC              .word LBB_TAN           ; TAN
  8814 00:FD86: 04 41              .byte 4,'A'             ;
  8815 00:FD88: BC FA              .word LBB_ATN           ; ATN
  8816 00:FD8A: 05 50              .byte 5,'P'             ;
  8817 00:FD8C: 95 FB              .word LBB_PEEK          ; PEEK
  8818 00:FD8E: 05 44              .byte 5,'D'             ;
  8819 00:FD90: F8 FA              .word LBB_DEEK          ; DEEK
  8820 00:FD92: 05 53              .byte 5,'S'             ;
  8821 00:FD94: D9 FB              .word LBB_SADD          ; SADD
  8822 00:FD96: 04 4C              .byte 4,'L'             ;
  8823 00:FD98: 55 FB              .word LBB_LEN           ; LEN
  8824 00:FD9A: 05 53              .byte 5,'S'             ;
  8825 00:FD9C: FA FB              .word LBB_STRS          ; STR$
  8826 00:FD9E: 04 56              .byte 4,'V'             ;
  8827 00:FDA0: 29 FC              .word LBB_VAL           ; VAL
  8828 00:FDA2: 04 41              .byte 4,'A'             ;
  8829 00:FDA4: B8 FA              .word LBB_ASC           ; ASC
  8830 00:FDA6: 07 55              .byte 7,'U'             ;
  8831 00:FDA8: 18 FC              .word LBB_UCASES        ; UCASE$
  8832 00:FDAA: 07 4C              .byte 7,'L'             ;
  8833 00:FDAC: 48 FB              .word LBB_LCASES        ; LCASE$
  8834 00:FDAE: 05 43              .byte 5,'C'             ;
  8835 00:FDB0: DE FA              .word LBB_CHRS          ; CHR$
  8836 00:FDB2: 05 48              .byte 5,'H'             ;
  8837 00:FDB4: 30 FB              .word LBB_HEXS          ; HEX$
  8838 00:FDB6: 05 42              .byte 5,'B'             ;
  8839 00:FDB8: C1 FA              .word LBB_BINS          ; BIN$
  8840 00:FDBA: 07 42              .byte 7,'B'             ;
  8841 00:FDBC: D2 FA              .word LBB_BITTST        ; BITTST
  8842 00:FDBE: 04 4D              .byte 4,'M'             ;
  8843 00:FDC0: 6D FB              .word LBB_MAX           ; MAX
  8844 00:FDC2: 04 4D              .byte 4,'M'             ;
  8845 00:FDC4: 76 FB              .word LBB_MIN           ; MIN
  8846 00:FDC6: 02 50              .byte 2,'P'             ;
  8847 00:FDC8: 9A FB              .word LBB_PI            ; PI
  8848 00:FDCA: 05 54              .byte 5,'T'             ;
  8849 00:FDCC: 12 FC              .word LBB_TWOPI         ; TWOPI
  8850 00:FDCE: 07 56              .byte 7,'V'             ;
  8851 00:FDD0: 2D FC              .word LBB_VPTR          ; VARPTR
  8852 00:FDD2: 06 4C              .byte 6,'L'             ;
  8853 00:FDD4: 4F FB              .word LBB_LEFTS         ; LEFT$
  8854 00:FDD6: 07 52              .byte 7,'R'             ;
  8855 00:FDD8: CA FB              .word LBB_RIGHTS        ; RIGHT$
  8856 00:FDDA: 05 4D              .byte 5,'M'             ;
  8857 00:FDDC: 71 FB              .word LBB_MIDS          ; MID$
  8858                        
  8859                        ; BASIC messages, mostly error messages
  8860                        
  8861                        LAB_BAER
  8862 00:FDDE: 02 FE              .word ERR_NF            ;$00 NEXT without FOR
  8863 00:FDE0: 13 FE              .word ERR_SN            ;$02 syntax
  8864 00:FDE2: 1A FE              .word ERR_RG            ;$04 RETURN without GOSUB
  8865 00:FDE4: 2F FE              .word ERR_OD            ;$06 out of data
  8866 00:FDE6: 3B FE              .word ERR_FC            ;$08 function call
  8867 00:FDE8: 49 FE              .word ERR_OV            ;$0A overflow
  8868 00:FDEA: 52 FE              .word ERR_OM            ;$0C out of memory
  8869 00:FDEC: 60 FE              .word ERR_US            ;$0E undefined statement
  8870 00:FDEE: 74 FE              .word ERR_BS            ;$10 array bounds
  8871 00:FDF0: 81 FE              .word ERR_DD            ;$12 double dimension array
  8872 00:FDF2: 92 FE              .word ERR_D0            ;$14 divide by 0
  8873 00:FDF4: A1 FE              .word ERR_ID            ;$16 illegal direct
  8874 00:FDF6: B0 FE              .word ERR_TM            ;$18 type mismatch
  8875 00:FDF8: BE FE              .word ERR_LS            ;$1A long string
  8876 00:FDFA: CE FE              .word ERR_ST            ;$1C string too complex
  8877 00:FDFC: E1 FE              .word ERR_CN            ;$1E continue error
  8878 00:FDFE: F0 FE              .word ERR_UF            ;$20 undefined function
  8879 00:FE00: 03 FF              .word ERR_LD            ;$22 LOOP without DO
  8880                        
  8881                        ; I may implement these two errors to force definition of variables and
  8882                        ; dimensioning of arrays before use.
  8883                        
  8884                        ;     .word ERR_UV            ;$24 undefined variable
  8885                        
  8886                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8887                        
  8888                        ;     .word ERR_UA            ;$26 undimensioned array
  8889                        
  8890 00:FE02: 4E 45 58 54  ERR_NF      .byte "NEXT without FOR",$00
       00:FE06: 20 77 69 74 
       00:FE0A: 68 6F 75 74 
       00:FE0E: 20 46 4F 52 
       00:FE12: 00 
  8891 00:FE13: 53 79 6E 74  ERR_SN      .byte "Syntax",$00
       00:FE17: 61 78 00 
  8892 00:FE1A: 52 45 54 55  ERR_RG      .byte "RETURN without GOSUB",$00
       00:FE1E: 52 4E 20 77 
       00:FE22: 69 74 68 6F 
       00:FE26: 75 74 20 47 
       00:FE2A: 4F 53 55 42 
       00:FE2E: 00 
  8893 00:FE2F: 4F 75 74 20  ERR_OD      .byte "Out of DATA",$00
       00:FE33: 6F 66 20 44 
       00:FE37: 41 54 41 00 
  8894 00:FE3B: 46 75 6E 63  ERR_FC      .byte "Function call",$00
       00:FE3F: 74 69 6F 6E 
       00:FE43: 20 63 61 6C 
       00:FE47: 6C 00 
  8895 00:FE49: 4F 76 65 72  ERR_OV      .byte "Overflow",$00
       00:FE4D: 66 6C 6F 77 
       00:FE51: 00 
  8896 00:FE52: 4F 75 74 20  ERR_OM      .byte "Out of memory",$00
       00:FE56: 6F 66 20 6D 
       00:FE5A: 65 6D 6F 72 
       00:FE5E: 79 00 
  8897 00:FE60: 55 6E 64 65  ERR_US      .byte "Undefined statement",$00
       00:FE64: 66 69 6E 65 
       00:FE68: 64 20 73 74 
       00:FE6C: 61 74 65 6D 
       00:FE70: 65 6E 74 00 
  8898 00:FE74: 41 72 72 61  ERR_BS      .byte "Array bounds",$00
       00:FE78: 79 20 62 6F 
       00:FE7C: 75 6E 64 73 
       00:FE80: 00 
  8899 00:FE81: 44 6F 75 62  ERR_DD      .byte "Double dimension",$00
       00:FE85: 6C 65 20 64 
       00:FE89: 69 6D 65 6E 
       00:FE8D: 73 69 6F 6E 
       00:FE91: 00 
  8900 00:FE92: 44 69 76 69  ERR_D0      .byte "Divide by zero",$00
       00:FE96: 64 65 20 62 
       00:FE9A: 79 20 7A 65 
       00:FE9E: 72 6F 00 
  8901 00:FEA1: 49 6C 6C 65  ERR_ID      .byte "Illegal direct",$00
       00:FEA5: 67 61 6C 20 
       00:FEA9: 64 69 72 65 
       00:FEAD: 63 74 00 
  8902 00:FEB0: 54 79 70 65  ERR_TM      .byte "Type mismatch",$00
       00:FEB4: 20 6D 69 73 
       00:FEB8: 6D 61 74 63 
       00:FEBC: 68 00 
  8903 00:FEBE: 53 74 72 69  ERR_LS      .byte "String too long",$00
       00:FEC2: 6E 67 20 74 
       00:FEC6: 6F 6F 20 6C 
       00:FECA: 6F 6E 67 00 
  8904 00:FECE: 53 74 72 69  ERR_ST      .byte "String too complex",$00
       00:FED2: 6E 67 20 74 
       00:FED6: 6F 6F 20 63 
       00:FEDA: 6F 6D 70 6C 
       00:FEDE: 65 78 00 
  8905 00:FEE1: 43 61 6E 27  ERR_CN      .byte "Can't continue",$00
       00:FEE5: 74 20 63 6F 
       00:FEE9: 6E 74 69 6E 
       00:FEED: 75 65 00 
  8906 00:FEF0: 55 6E 64 65  ERR_UF      .byte "Undefined function",$00
       00:FEF4: 66 69 6E 65 
       00:FEF8: 64 20 66 75 
       00:FEFC: 6E 63 74 69 
       00:FF00: 6F 6E 00 
  8907 00:FF03: 4C 4F 4F 50  ERR_LD      .byte "LOOP without DO",$00
       00:FF07: 20 77 69 74 
       00:FF0B: 68 6F 75 74 
       00:FF0F: 20 44 4F 00 
  8908                        
  8909                        ;ERR_UV     .byte "Undefined variable",$00
  8910                        
  8911                        ; the above error has been tested and works (see code and comments below LAB_1D8B)
  8912                        
  8913                        ;ERR_UA     .byte "Undimensioned array",$00
  8914                        
  8915 00:FF13: 0D 0A 42 72  LAB_BMSG    .byte $0D,$0A,"Break",$00
       00:FF17: 65 61 6B 00 
  8916 00:FF1B: 20 45 72 72  LAB_EMSG    .byte " Error",$00
       00:FF1F: 6F 72 00 
  8917 00:FF22: 20 69 6E 20  LAB_LMSG    .byte " in line ",$00
       00:FF26: 6C 69 6E 65 
       00:FF2A: 20 00 
  8918 00:FF2C: 0D 0A 52 65  LAB_RMSG    .byte $0D,$0A,"Ready",$0D,$0A,$00
       00:FF30: 61 64 79 0D 
       00:FF34: 0A 00 
  8919                        
  8920 00:FF36: 20 45 78 74  LAB_IMSG    .byte " Extra ignored",$0D,$0A,$00
       00:FF3A: 72 61 20 69 
       00:FF3E: 67 6E 6F 72 
       00:FF42: 65 64 0D 0A 
       00:FF46: 00 
  8921 00:FF47: 20 52 65 64  LAB_REDO    .byte " Redo from start",$0D,$0A,$00
       00:FF4B: 6F 20 66 72 
       00:FF4F: 6F 6D 20 73 
       00:FF53: 74 61 72 74 
       00:FF57: 0D 0A 00 
  8922                        
  8923                        ;;;
  8924                        ;;;     Console Driver
  8925                        ;;;
  8926                        
  8927             00000001   CONIN_REQ     equ       $01
  8928             00000002   CONOUT_REQ    equ       $02
  8929             00000003   CONST_REQ     equ       $03
  8930             00000004   STROUT_REQ    equ       $04
  8931                        
  8932                        ;  ---- request command to PIC
  8933                        ; UREQ_COM = 1 ; CONIN  : return char in UNI_CHR
  8934                        ;          = 2 ; CONOUT : UNI_CHR = output char
  8935                        ;          = 3 ; CONST  : return status in UNI_CHR
  8936                        ;                       : ( 0: no key, 1 : key exist )
  8937                        ;
  8938                        ; PIC18F47QXX I/F( zero page )
  8939                        ; adr :
  8940                        ;  18 : UREQ_COM        rmb     1       ; unimon CONIN/CONOUT request command
  8941                        ;  19 : UNI_CHR         rmb     1       ; charcter (CONIN/CONOUT) or number of strings
  8942                        ;  1A : CREQ_COM        rmb     1       ; unimon CONIN/CONOUT request command
  8943                        ;  1B : CBI_CHR         rmb     1       ; charcter (CONIN/CONOUT) or number of strings
  8944                        
  8945                        
  8946                        INIT_RPB
  8947                                ; clear Reqest Parameter Block
  8948 00:FF5A: A9 00                lda     #0
  8949 00:FF5C: 85 18                sta     UREQ_COM
  8950 00:FF5E: 85 1A                sta     CREQ_COM
  8951                        no_load                         ; empty load vector for EhBASIC
  8952                        no_save                         ; empty save vector for EhBASIC
  8953 00:FF60: 60                   RTS
  8954                        
  8955                        no_key
  8956 00:FF61: 18                   clc
  8957 00:FF62: 60                   RTS
  8958                        
  8959                        CONIN
  8960 00:FF63: A9 03                lda     #CONST_REQ
  8961 00:FF65: 20 6C FF             jsr     wup_pic
  8962 00:FF68: F0 F7                beq     no_key
  8963                        
  8964 00:FF6A: A9 01                lda     #CONIN_REQ
  8965                        
  8966                        wup_pic
  8967 00:FF6C: 85 1A                sta     CREQ_COM
  8968 00:FF6E: CB                   wai                     ; RDY = 0, wait /IRQ detect
  8969                        
  8970 00:FF6F: A5 1B                lda     CBI_CHR
  8971 00:FF71: 38                   sec
  8972 00:FF72: 60                   RTS
  8973                        
  8974                        CONOUT
  8975 00:FF73: 85 1B                sta     CBI_CHR         ; set char
  8976 00:FF75: 48                   pha
  8977 00:FF76: A9 02                lda     #CONOUT_REQ
  8978 00:FF78: 20 6C FF             jsr     wup_pic
  8979 00:FF7B: 68                   pla
  8980 00:FF7C: 60                   rts
  8981                        
  8982                        ; vector tables
  8983                        
  8984                        LAB_vec
  8985 00:FF7D: 63 FF                .word   CONIN           ; byte in from simulated ACIA
  8986 00:FF7F: 73 FF                .word   CONOUT          ; byte out to simulated ACIA
  8987 00:FF81: 60 FF                .word   no_load         ; null load vector for EhBASIC
  8988 00:FF83: 60 FF                .word   no_save         ; null save vector for EhBASIC
  8989                        
  8990                        ; EhBASIC IRQ support
  8991                        
  8992                        IRQ_CODE
  8993 00:FF85: 48                   PHA                     ; save A
  8994 00:FF86: A5 DF                LDA     IrqBase         ; get the IRQ flag byte
  8995 00:FF88: 4A                   LSR                     ; shift the set b7 to b6, and on down ...
  8996 00:FF89: 05 DF                ORA     IrqBase         ; OR the original back in
  8997 00:FF8B: 85 DF                STA     IrqBase         ; save the new IRQ flag byte
  8998 00:FF8D: 68                   PLA                             ; restore A
  8999 00:FF8E: 40                   RTI
  9000                        
  9001                        ; EhBASIC NMI support
  9002                        
  9003                        NMI_CODE
  9004 00:FF8F: 48                   PHA                     ; save A
  9005 00:FF90: A5 DC                LDA     NmiBase         ; get the NMI flag byte
  9006 00:FF92: 4A                   LSR                     ; shift the set b7 to b6, and on down ...
  9007 00:FF93: 05 DC                ORA     NmiBase         ; OR the original back in
  9008 00:FF95: 85 DC                STA     NmiBase         ; save the new NMI flag byte
  9009 00:FF97: 68                   PLA                     ; restore A
  9010 00:FF98: 40                   RTI
  9011                        
  9012                        END_CODE
  9013                        
  9014                        AA_end_basic
  9015                        
  9016             0000020D   IRQ_vec equ VEC_SV+2              ; IRQ code vector
  9017             00000217   NMI_vec equ IRQ_vec+$0A   ; NMI code vector
  9018                        
  9019                        ; system vectors
  9020                        
  9021                        ;        .dsb    $FFFA - *, $FF
  9022                                org $FFFA
  9023                        
  9024 00:FFFA: 17 02                .word   NMI_vec         ; NMI vector
  9025 00:FFFC: 20 D7                .word   COLD_START      ; RESET vector
  9026 00:FFFE: 0D 02                .word   IRQ_vec         ; IRQ vector
  9027                        


      Lines assembled: 9027
      Errors: 0
