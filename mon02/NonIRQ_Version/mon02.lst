     1                        ;;;
     2                        ;;; Universal Monitor 6502 Copyright (C) 2019 Haruo Asano
     3                        ;;; https://electrelic.com/electrelic/node/1317
     4                        ;;;
     5                        ;;; -- original disassemble sorce code --
     6                        ;:; https://github.com/zuiko21/minimOS/blob/master/OS/shell/miniMoDA.s
     7                        ;;;
     8                        ;;;    Monitor-debugger-assembler shell for minimOS!
     9                        ;;;    v0.6rc3
    10                        ;;;    last modified 20220104-1122
    11                        ;;;    (c) 2016-2022 Carlos J. Santisteban
    12                        ;;;
    13                        ;;; This program is based on Universal Monitor 6502
    14                        ;;; Programed by Akihito Honda. 2024.10
    15                        ;;;
    16                        ;;; Thanks all.
    17                        ;;;
    18                        
    19                        	pl	0
    20                        	pw      132
    21                        	chip    65C02
    22                        ;                inclist on
    23                        ;;;
    24                        ;;; MEZW65C_RAM Monitor for WDC65C02
    25                        ;;;
    26                        
    27                        ;;;
    28                        ;;; Memory
    29                        ;;;
    30                        
    31                        ;PRG_B	EQU	$EE00
    32             0000E000   PRG_B	EQU	$E000
    33             0000DF00   WORK_B	equ	PRG_B-$100	; $ED00
    34             00000200   USER_M	equ	$200
    35                        
    36             00000018   ZERO_B	EQU	$0018		; Must fit in ZERO page
    37                        
    38             000001FF   STACK	EQU	$01FF
    39             000001BF   USER_SP	equ	$01BF
    40                        
    41             00000010   BUFLEN	EQU	16		; Buffer length ( 16 or above )
    42             00000000   cpu_id	equ	$00		; memory address $0000 is written CPU ID by PIC
    43                        
    44                        ; PIC function code
    45                        
    46             00000001   CONIN_REQ	EQU	$01
    47             00000002   CONOUT_REQ	EQU	$02
    48             00000003   CONST_REQ	EQU	$03
    49             00000004   STROUT_REQ	equ	$04
    50             00000007   STRIN_REQ	equ	$07
    51             000000FF   WUP_REQ		equ	$ff
    52                        
    53                        ;;; Constants
    54             0000000D   CR	EQU	$0D
    55             0000000A   LF	EQU	$0A
    56             00000008   BS	EQU	$08
    57             00000009   TAB	EQU	$09
    58             0000007F   DEL	EQU	$7F
    59             00000000   NULL	EQU	$00
    60                        
    61                        	.if 0
    62                        ;--------------------------------------
    63                        ;ZERO page
    64                        ;--------------------------------------
    65                        	;;
    66                        	;; Work Area
    67                        	;;
    68                        
    69                        	.page0
    70                        	ORG	ZERO_B
    71                        
    72                        ; PIC18F47QXX I/F
    73                        UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
    74                        UNI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
    75                        CREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
    76                        CBI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
    77                        disk_drive	rmb	1	;
    78                        disk_track	rmb	2	;
    79                        disk_sector	rmb	2	;
    80                        data_adr	rmb	2	;
    81                        bank		rmb	1	;
    82                        reserve		rmb	1	;
    83                        
    84                        PT0	RMB	2		; Generic Pointer 0
    85                        PT1	RMB	2		; Generic Pointer 1
    86                        CNT	RMB	1		; Generic Counter
    87                        bk_no	rmb	2
    88                        ;Go command variable
    89                        sav_adr	rmb	2
    90                        
    91                        oper		RMB	2
    92                        scan		RMB	2
    93                        	.endif
    94                        
    95                        	.data
    96                        	org	WORK_B
    97                        
    98                        ; PIC18F47QXX I/F
    99 00:DF00:              UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
   100 00:DF01:              UNI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
   101 00:DF02:              CREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
   102 00:DF03:              CBI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
   103 00:DF04:              disk_drive	rmb	1	;
   104 00:DF05:              disk_track	rmb	2	;
   105 00:DF07:              disk_sector	rmb	2	;
   106 00:DF09:              data_adr	rmb	2	;
   107 00:DF0B:              bank		rmb	1	;
   108 00:DF0C:              reserve		rmb	1	;
   109                        
   110 00:DF0D:              PT0	RMB	2		; Generic Pointer 0
   111 00:DF0F:              PT1	RMB	2		; Generic Pointer 1
   112 00:DF11:              CNT	RMB	1		; Generic Counter
   113 00:DF12:              bk_no	rmb	2
   114                        ;Go command variable
   115 00:DF14:              sav_adr	rmb	2
   116                        
   117 00:DF16:              oper		RMB	2
   118 00:DF18:              scan		RMB	2
   119                        
   120 00:DF1A:              SADDR	RMB	2		; Set address
   121 00:DF1C:              DMPPT	RMB	2
   122                        reg_tbls
   123 00:DF1E:              REGA	RMB	1		; Accumulator A
   124 00:DF1F:              REGX	RMB	1		; Index register X
   125 00:DF20:              REGY	RMB	1		; Index register Y
   126 00:DF21:              REGSP	RMB	1		; Stack pointer SP
   127 00:DF22:              REGPC	RMB	2		; Program counter PC
   128 00:DF24:              REGPSR	RMB	1		; Processor status register PSR
   129                        reg_tble
   130             00000007   reg_size	equ reg_tble-reg_tbls
   131                        
   132                        
   133 00:DF25:              INBUF	RMB	BUFLEN		; Line input buffer
   134 00:DF35:              DSADDR	RMB	2		; Dump start address
   135 00:DF37:              DEADDR	RMB	2		; Dump end address
   136 00:DF39:              DSTATE	RMB	1		; Dump state
   137 00:DF3A:              GADDR	RMB	2		; Go address
   138 00:DF3C:              HEXMOD	RMB	1		; HEX file mode
   139 00:DF3D:              RECTYP	RMB	1		; Record type
   140                        
   141 00:DF3E:              ILL_PC	RMB	2
   142                        
   143 00:DF40:              REGSIZ	RMB	1		; Register size
   144                        	
   145 00:DF41:              CKSUM	RMB	1		; Checksum
   146 00:DF42:              HITMP	RMB	1		; Temporary (used in HEXIN)
   147                        
   148                        
   149                        ; disassemble variable
   150 00:DF43:              temp		RMB	1
   151 00:DF44:              lines		RMB	1
   152 00:DF45:              bytes		RMB	1
   153 00:DF46:              s_value		RMB	2
   154 00:DF48:              e_value		RMB	2
   155 00:DF4A:              count		RMB	1
   156 00:DF4B:              vnim_buf	RMB	16	;virtual console buffer for mnemonic
   157                        
   158                        ;Go command variable
   159 00:DF5B:              stp_flg		rmb	1
   160 00:DF5C:              sav_dat		rmb	2
   161 00:DF5E:              hit_reg		rmb	2
   162                        
   163                        ;;;
   164                        ;;; Program area
   165                        ;;;	
   166                        	.code
   167                        	ORG	PRG_B
   168                        
   169                        CSTART:
   170                        ;--------- MEZW65C_RAM file header --------------------------
   171 00:E000: 4C 20 E0     	jmp	COLD_START
   172 00:E003: 4C 94 E0     	jmp	WSTART
   173                        
   174                        	; uinimon config data
   175                        	;
   176 00:E006: 00 00        	db	0,0
   177                        	; Unique ID
   178 00:E008: 4D 45 5A 57  mezID:	db	"MEZW65C",0
       00:E00C: 36 35 43 00 
   179                        	;start program address
   180 00:E010: 00 E0        start_p:	dw	PRG_B		; start address (Low)
   181 00:E012: 00 00        	dw	0		; (high)
   182                        
   183                        	; define Common memory address
   184 00:E014: 00 DF        PIC_IF:	dw	UREQ_COM	;  Common memory address for PIC (Low)
   185 00:E016: 00 00        	dw	0		; (high)
   186                        
   187 00:E018: 00           SW_816:	db	0	; 0 : W65C02
   188                        			; 1 : W65C816 native mode 
   189 00:E019: 00           irq_sw	db	0	; 0 : no use IRQ console I/O
   190                        			; 1 : use IRQ timer interrupt driven console I/O
   191 00:E01A: 1E DF        reg_tp	dw	reg_tbls	; register save pointer
   192 00:E01C: 07 00        reg_ts	dw	reg_size	; register table size
   193 00:E01E: 01           nmi_sw	db	1	; 0 : No NMI support, 1: NMI support
   194 00:E01F: 02           bios_sw	db	2	; 0 : standalone program
   195                        			; 1 : program call bios command
   196                        			; 2 : monitor program (.SYS)
   197                        COLD_START:
   198                        ;--------- MEZW65C_RAM file header --------------------------
   199                        
   200                        ; user program infomation pointer
   201             0000E008   u_sw	equ	mezID+0
   202             0000E009   u_addr	equ	mezID+1
   203                        
   204 00:E020: 78           	sei			; disable interrupt
   205 00:E021: A2 FF        	LDX	#STACK & $ff
   206 00:E023: 9A           	TXS
   207                        
   208 00:E024: 20 5C F3     	JSR	INIT
   209 00:E027: A9 00        	LDA	#$00
   210 00:E029: 8D 35 DF     	STA	DSADDR
   211 00:E02C: 8D 36 DF     	STA	DSADDR+1
   212 00:E02F: 8D 1A DF     	STA	SADDR
   213 00:E032: 8D 1B DF     	STA	SADDR+1
   214 00:E035: 8D 3A DF     	STA	GADDR
   215 00:E038: 8D 3B DF     	STA	GADDR+1
   216 00:E03B: A9 53        	LDA	#'S'
   217 00:E03D: 8D 3C DF     	STA	HEXMOD
   218                        
   219 00:E040: A9 00        	LDA	#$00
   220 00:E042: 8D 1E DF     	STA	REGA
   221 00:E045: 8D 1F DF     	STA	REGX
   222 00:E048: 8D 20 DF     	STA	REGY
   223 00:E04B: A9 20        	lda	#$20
   224 00:E04D: 8D 24 DF     	STA	REGPSR
   225 00:E050: A2 BF        	ldx	#USER_SP
   226 00:E052: 8E 21 DF     	STX	REGSP
   227 00:E055: A9 00        	lda	#USER_M
   228 00:E057: 8D 22 DF     	STA	REGPC
   229 00:E05A: 9C 23 DF     	stz	REGPC+1
   230 00:E05D: 8D 46 DF     	sta	s_value
   231 00:E060: 9C 47 DF     	stz	s_value+1
   232 00:E063: 9C 48 DF     	stz	e_value
   233 00:E066: 9C 49 DF     	stz	e_value+1
   234 00:E069: 9C 5B DF     	stz	stp_flg
   235                        
   236 00:E06C: AD 08 E0     	lda	u_sw
   237 00:E06F: F0 14        	beq	wup_umon
   238 00:E071: C9 01        	cmp	#1
   239 00:E073: F0 0A        	beq	apli_start
   240                        ;
   241                        ; sleep moniotr
   242                        ;
   243                        wup
   244 00:E075: A9 01        	lda	#1
   245 00:E077: 8D 01 DF     	sta	UNI_CHR		; sleep signal
   246 00:E07A: 20 88 F3     	jsr	NMI_SIG
   247 00:E07D: 80 F6        	bra	wup
   248                        
   249                        apli_start
   250 00:E07F: A2 BF        	LDX	#USER_SP & $ff
   251 00:E081: 9A           	TXS
   252 00:E082: 6C 09 E0     	jmp	(u_addr)	; application cold start
   253                        
   254                        	;; Opening message
   255                        wup_umon
   256 00:E085: A9 59        	LDA	#$FF&OPNMSG
   257 00:E087: 8D 0D DF     	STA	PT0
   258 00:E08A: A9 F2        	LDA	#OPNMSG>>8
   259 00:E08C: 8D 0E DF     	STA	PT0+1
   260 00:E08F: 20 FD EF     	JSR	STROUT
   261 00:E092: 80 03        	bra	prt_prompt
   262                        
   263                        WSTART
   264 00:E094: A2 FF        	LDX	#STACK & $ff
   265 00:E096: 9A           	TXS
   266                        
   267                        prt_prompt
   268 00:E097: A9 78        	LDA	#$FF&PROMPT
   269 00:E099: 8D 0D DF     	STA	PT0
   270 00:E09C: A9 F2        	LDA	#PROMPT>>8
   271 00:E09E: 8D 0E DF     	STA	PT0+1
   272 00:E0A1: 20 FD EF     	JSR	STROUT
   273 00:E0A4: 20 67 F0     	JSR	GETLIN
   274 00:E0A7: A2 00        	LDX	#0
   275 00:E0A9: 20 B2 F0     	JSR	SKIPSP
   276 00:E0AC: 20 BE F0     	JSR	UPPER
   277 00:E0AF: C9 00        	CMP	#0
   278 00:E0B1: F0 E1        	BEQ	WSTART
   279                        
   280 00:E0B3: C9 44        	CMP	#'D'
   281 00:E0B5: D0 03        	BNE	M00
   282 00:E0B7: 4C 0D E1     	JMP	DUMP
   283                        M00
   284 00:E0BA: C9 47        	CMP	#'G'
   285 00:E0BC: D0 03        	BNE	M01
   286 00:E0BE: 4C DD E9     	JMP	GO
   287                        M01
   288 00:E0C1: C9 53        	CMP	#'S'
   289 00:E0C3: D0 03        	BNE	M02
   290 00:E0C5: 4C 65 EA     	JMP	SETM
   291                        M02
   292 00:E0C8: C9 4C        	CMP	#'L'
   293 00:E0CA: D0 03        	BNE	M03
   294 00:E0CC: 4C 21 EB     	JMP	LOADH
   295                        M03
   296                        	
   297 00:E0CF: C9 52        	CMP	#'R'
   298 00:E0D1: D0 03        	BNE	M05
   299 00:E0D3: 4C 67 EC     	JMP	REG
   300                        M05	
   301 00:E0D6: C9 3F        	CMP	#'?'
   302 00:E0D8: D0 03        	BNE	M06
   303 00:E0DA: 4C 2E EE     	jmp	prt_help
   304                        
   305                        M06
   306 00:E0DD: C9 42        	cmp	#'B'
   307 00:E0DF: D0 1C        	bne	ERR
   308 00:E0E1: E8           	inx
   309 00:E0E2: BD 25 DF     	LDA	INBUF,X
   310 00:E0E5: 20 BE F0     	JSR	UPPER
   311 00:E0E8: C9 59        	CMP	#'Y'
   312 00:E0EA: D0 11        	bne	ERR
   313 00:E0EC: E8           	inx
   314 00:E0ED: BD 25 DF     	LDA	INBUF,X
   315 00:E0F0: 20 BE F0     	JSR	UPPER
   316 00:E0F3: C9 45        	CMP	#'E'
   317 00:E0F5: D0 06        	bne	ERR
   318 00:E0F7: 20 5D F0     	jsr	CRLF
   319 00:E0FA: 4C 75 E0     	jmp	wup
   320                        ERR
   321 00:E0FD: A9 95        	LDA	#$FF&ERRMSG
   322 00:E0FF: 8D 0D DF     	STA	PT0
   323 00:E102: A9 F2        	LDA	#ERRMSG>>8
   324 00:E104: 8D 0E DF     	STA	PT0+1
   325 00:E107: 20 FD EF     	JSR	STROUT
   326 00:E10A: 4C 94 E0     	JMP	WSTART
   327                        
   328                        ;;;
   329                        ;;; Dump memory
   330                        ;;;
   331                        DUMP
   332 00:E10D: E8           	INX
   333 00:E10E: 20 B2 F0     	JSR	SKIPSP
   334 00:E111: 20 BE F0     	JSR	UPPER
   335 00:E114: C9 49        	cmp	#'I'
   336 00:E116: D0 03        	bne	dmp1
   337 00:E118: 4C 80 E2     	jmp	disassemble
   338                        dmp1
   339 00:E11B: 20 C9 F0     	JSR	RDHEX
   340 00:E11E: AD 11 DF     	LDA	CNT
   341 00:E121: D0 1C        	BNE	DP0	; jmp 1st arg.
   342                        
   343                        	; check remain string
   344                        
   345 00:E123: 20 B2 F0     	JSR	SKIPSP
   346 00:E126: BD 25 DF     	LDA	INBUF,X
   347 00:E129: D0 26        	BNE	DP01	; jmp if string exist
   348                        
   349                        	;; No arg.
   350                        
   351                        DP00	; set end address (DSADDR + 128 bytes)
   352                        
   353 00:E12B: AD 35 DF     	LDA	DSADDR
   354 00:E12E: 18           	CLC
   355 00:E12F: 69 80        	ADC	#128
   356 00:E131: 8D 37 DF     	STA	DEADDR
   357 00:E134: AD 36 DF     	LDA	DSADDR+1
   358 00:E137: 69 00        	ADC	#0
   359 00:E139: 8D 38 DF     	STA	DEADDR+1
   360 00:E13C: 4C 7B E1     	JMP	DPM
   361                        
   362                        DP0	;; 1st arg. found
   363                        
   364 00:E13F: AD 0F DF     	LDA	PT1
   365 00:E142: 8D 35 DF     	STA	DSADDR		; set start address(low)
   366 00:E145: AD 10 DF     	LDA	PT1+1
   367 00:E148: 8D 36 DF     	STA	DSADDR+1	; set start address(high)
   368                        
   369 00:E14B: 20 B2 F0     	JSR	SKIPSP
   370 00:E14E: BD 25 DF     	LDA	INBUF,X		; get next string
   371                        	
   372                        DP01	; check exist 2nd arg.
   373                        
   374 00:E151: C9 2C        	CMP	#','
   375 00:E153: F0 06        	BEQ	DP1		; yes, jmp and chk 2nd arg
   376 00:E155: C9 00        	CMP	#0
   377 00:E157: F0 D2        	BEQ	DP00		; jmp if no 2nd arg.(set end address)
   378 00:E159: 80 A2        	BRA	ERR
   379                        
   380                        DP1	; chk 2nd arg
   381                        
   382 00:E15B: E8           	INX
   383 00:E15C: 20 B2 F0     	JSR	SKIPSP
   384 00:E15F: 20 C9 F0     	JSR	RDHEX
   385 00:E162: 20 B2 F0     	JSR	SKIPSP
   386 00:E165: AD 11 DF     	LDA	CNT
   387 00:E168: F0 93        	BEQ	ERR
   388                        
   389                        	;; set 2nd arg.
   390                        
   391 00:E16A: AD 0F DF     	LDA	PT1
   392 00:E16D: 38           	SEC
   393 00:E16E: 69 00        	ADC	#0
   394 00:E170: 8D 37 DF     	STA	DEADDR
   395 00:E173: AD 10 DF     	LDA	PT1+1
   396 00:E176: 69 00        	ADC	#0
   397 00:E178: 8D 38 DF     	STA	DEADDR+1
   398                        
   399                        	;; DUMP main
   400                        DPM	
   401 00:E17B: AD 35 DF     	LDA	DSADDR
   402 00:E17E: 29 F0        	AND	#$F0
   403 00:E180: 8D 0F DF     	STA	PT1
   404 00:E183: AD 36 DF     	LDA	DSADDR+1
   405 00:E186: 8D 10 DF     	STA	PT1+1
   406 00:E189: A9 00        	LDA	#0
   407 00:E18B: 8D 39 DF     	STA	DSTATE
   408                        DPM0
   409 00:E18E: 20 CF E1     	JSR	DPL
   410 00:E191: AD 0F DF     	LDA	PT1
   411 00:E194: 18           	CLC
   412 00:E195: 69 10        	ADC	#16
   413 00:E197: 8D 0F DF     	STA	PT1
   414 00:E19A: AD 10 DF     	LDA	PT1+1
   415 00:E19D: 69 00        	ADC	#0
   416 00:E19F: 8D 10 DF     	STA	PT1+1
   417 00:E1A2: 20 75 F3     	JSR	CONST
   418 00:E1A5: D0 16        	BNE	DPM1
   419 00:E1A7: AD 39 DF     	LDA	DSTATE
   420 00:E1AA: C9 02        	CMP	#2
   421 00:E1AC: 90 E0        	BCC	DPM0
   422 00:E1AE: AD 37 DF     	LDA	DEADDR
   423 00:E1B1: 8D 35 DF     	STA	DSADDR
   424 00:E1B4: AD 38 DF     	LDA	DEADDR+1
   425 00:E1B7: 8D 36 DF     	STA	DSADDR+1
   426 00:E1BA: 4C 94 E0     	JMP	WSTART
   427                        DPM1
   428 00:E1BD: AD 0F DF     	LDA	PT1
   429 00:E1C0: 8D 35 DF     	STA	DSADDR
   430 00:E1C3: AD 10 DF     	LDA	PT1+1
   431 00:E1C6: 8D 36 DF     	STA	DSADDR+1
   432 00:E1C9: 20 6B F3     	JSR	CONIN
   433 00:E1CC: 4C 94 E0     	JMP	WSTART
   434                        
   435                        	;; Dump line
   436                        DPL
   437 00:E1CF: AD 10 DF     	LDA	PT1+1
   438 00:E1D2: 20 18 F0     	JSR	HEXOUT2
   439 00:E1D5: AD 0F DF     	LDA	PT1
   440 00:E1D8: 20 18 F0     	JSR	HEXOUT2
   441 00:E1DB: A9 9D        	LDA	#$FF&DSEP0
   442 00:E1DD: 8D 0D DF     	STA	PT0
   443 00:E1E0: A9 F2        	LDA	#DSEP0>>8
   444 00:E1E2: 8D 0E DF     	STA	PT0+1
   445 00:E1E5: 20 FD EF     	JSR	STROUT
   446 00:E1E8: A2 00        	LDX	#0
   447 00:E1EA: A0 00        	LDY	#0
   448                        DPL0
   449 00:E1EC: 20 20 E2     	JSR	DPB
   450 00:E1EF: E0 10        	CPX	#16
   451 00:E1F1: D0 F9        	BNE	DPL0
   452                        
   453 00:E1F3: A9 A0        	LDA	#$FF&DSEP1
   454 00:E1F5: 8D 0D DF     	STA	PT0
   455 00:E1F8: A9 F2        	LDA	#DSEP1>>8
   456 00:E1FA: 8D 0E DF     	STA	PT0+1
   457 00:E1FD: 20 FD EF     	JSR	STROUT
   458                        
   459                        	;; Print ASCII area
   460 00:E200: A2 00        	LDX	#0
   461                        DPL1
   462 00:E202: BD 25 DF     	LDA	INBUF,X
   463 00:E205: C9 20        	CMP	#' '
   464 00:E207: 90 0A        	BCC	DPL2
   465 00:E209: C9 7F        	CMP	#$7F
   466 00:E20B: B0 06        	BCS	DPL2
   467 00:E20D: 20 7D F3     	JSR	CONOUT
   468 00:E210: 4C 18 E2     	JMP	DPL3
   469                        DPL2
   470 00:E213: A9 2E        	LDA	#'.'
   471 00:E215: 20 7D F3     	JSR	CONOUT
   472                        DPL3
   473 00:E218: E8           	INX
   474 00:E219: E0 10        	CPX	#16
   475 00:E21B: D0 E5        	BNE	DPL1
   476 00:E21D: 4C 5D F0     	JMP	CRLF
   477                        
   478                        	;; Dump byte
   479                        DPB
   480 00:E220: A9 20        	LDA	#' '
   481 00:E222: 20 7D F3     	JSR	CONOUT
   482 00:E225: AD 39 DF     	LDA	DSTATE
   483 00:E228: D0 1E        	BNE	DPB2
   484                        	;; Dump state 0
   485 00:E22A: 98           	TYA
   486 00:E22B: 38           	SEC
   487 00:E22C: ED 35 DF     	SBC	DSADDR
   488 00:E22F: 29 0F        	AND	#$0F
   489 00:E231: F0 10        	BEQ	DPB1
   490                        	;; Still 0 or 2
   491                        DPB0
   492 00:E233: A9 20        	LDA	#' '
   493 00:E235: 9D 25 DF     	STA	INBUF,X
   494 00:E238: 20 7D F3     	JSR	CONOUT
   495 00:E23B: A9 20        	LDA	#' '
   496 00:E23D: 20 7D F3     	JSR	CONOUT
   497 00:E240: E8           	INX
   498 00:E241: C8           	INY
   499 00:E242: 60           	RTS
   500                        	;; Found start address
   501                        DPB1
   502 00:E243: A9 01        	LDA	#1
   503 00:E245: 8D 39 DF     	STA	DSTATE
   504                        DPB2
   505 00:E248: AD 39 DF     	LDA	DSTATE
   506 00:E24B: C9 01        	CMP	#1
   507 00:E24D: D0 E4        	BNE	DPB0
   508                        	;; Dump state 1
   509                        
   510                        ;	LDA	(PT1),Y
   511 00:E24F: 20 87 EF     	jsr	lda_pt1
   512                        
   513 00:E252: 9D 25 DF     	STA	INBUF,X
   514 00:E255: 20 18 F0     	JSR	HEXOUT2
   515 00:E258: E8           	INX
   516 00:E259: C8           	INY
   517 00:E25A: 98           	TYA
   518 00:E25B: 18           	CLC
   519 00:E25C: 6D 0F DF     	ADC	PT1
   520 00:E25F: 8D 0D DF     	STA	PT0
   521 00:E262: AD 10 DF     	LDA	PT1+1
   522 00:E265: 69 00        	ADC	#0
   523 00:E267: 8D 0E DF     	STA	PT0+1
   524 00:E26A: AD 0D DF     	LDA	PT0
   525 00:E26D: CD 37 DF     	CMP	DEADDR
   526 00:E270: D0 0D        	BNE	DPBE
   527 00:E272: AD 0E DF     	LDA	PT0+1
   528 00:E275: CD 38 DF     	CMP	DEADDR+1
   529 00:E278: D0 05        	BNE	DPBE
   530                        	;; Found end address
   531 00:E27A: A9 02        	LDA	#2
   532 00:E27C: 8D 39 DF     	STA	DSTATE
   533                        DPBE
   534 00:E27F: 60           	RTS
   535                        
   536                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   537                        ;
   538                        ; disassemble 
   539                        ;
   540                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   541                        disassemble:
   542 00:E280: E8           	INX
   543 00:E281: 20 B2 F0     	JSR	SKIPSP
   544 00:E284: 20 C9 F0     	JSR	RDHEX
   545 00:E287: AD 11 DF     	LDA	CNT
   546                        
   547 00:E28A: D0 10        	BNE	PP0	; jmp, if 1st arg. exist
   548                        
   549                        	;; No arg.
   550 00:E28C: 20 B2 F0     	JSR	SKIPSP
   551 00:E28F: BD 25 DF     	LDA	INBUF,X
   552 00:E292: D0 1A        	BNE	PP01	; jmp, if remain strings exist
   553                        
   554                        	; no arg.
   555                        
   556                        PP00	; set end parameter
   557 00:E294: A9 10        	lda	#16
   558 00:E296: 8D 44 DF     	sta	lines
   559 00:E299: 4C DE E2     	jmp	dis_next
   560                        
   561                        	;; 1st arg. found
   562                        
   563                        PP0	; set start parameter
   564 00:E29C: AD 0F DF     	LDA	PT1
   565 00:E29F: 8D 46 DF     	sta	s_value		; save start address(low)
   566 00:E2A2: AD 10 DF     	LDA	PT1+1
   567 00:E2A5: 8D 47 DF     	STA	s_value+1	; save start address(high)
   568                        
   569                        	; check 2nd parameter exist
   570                        
   571 00:E2A8: 20 B2 F0     	JSR	SKIPSP
   572 00:E2AB: BD 25 DF     	LDA	INBUF,X
   573                        PP01
   574 00:E2AE: C9 2C        	CMP	#','
   575 00:E2B0: F0 07        	BEQ	PP1		; jmp if 2nd parameter exist
   576 00:E2B2: C9 00        	cmp	#0
   577 00:E2B4: F0 DE        	beq	PP00		; jmp if no 2nd parameter
   578                        
   579                        D_ERR
   580 00:E2B6: 4C FD E0     	JMP	ERR
   581                        
   582                        PP1	;; check 2nd arg.
   583                        
   584 00:E2B9: E8           	INX
   585 00:E2BA: 20 B2 F0     	JSR	SKIPSP
   586 00:E2BD: 20 C9 F0     	JSR	RDHEX
   587 00:E2C0: 20 B2 F0     	JSR	SKIPSP
   588 00:E2C3: AD 11 DF     	LDA	CNT
   589 00:E2C6: F0 EE        	BEQ	D_ERR
   590 00:E2C8: BD 25 DF     	LDA	INBUF,X
   591 00:E2CB: D0 E9        	BNE	D_ERR
   592 00:E2CD: AD 0F DF     	LDA	PT1
   593 00:E2D0: 8D 48 DF     	STA	e_value
   594 00:E2D3: AD 10 DF     	LDA	PT1+1
   595 00:E2D6: 69 00        	ADC	#0
   596 00:E2D8: 8D 49 DF     	STA	e_value+1
   597 00:E2DB: 9C 44 DF     	stz	lines
   598                        
   599                        dis_next:
   600                        
   601 00:E2DE: AC 46 DF     	LDY	s_value
   602 00:E2E1: AD 47 DF     	LDA	s_value+1
   603 00:E2E4: 8C 16 DF     	STY	oper
   604 00:E2E7: 8D 17 DF     	STA	oper+1
   605                        
   606                        das_l:
   607                        
   608                        ; time to show the opcode and trailing spaces until 20 chars
   609                        
   610 00:E2EA: 20 42 E3     	JSR	disOpcode	; disassemble one opcode @oper (will print it)
   611 00:E2ED: 20 75 F3     	JSR	CONST
   612 00:E2F0: D0 1E        	BNE	das_end
   613                        
   614 00:E2F2: AD 44 DF     	lda	lines
   615 00:E2F5: F0 07        	beq	chk_diadr
   616 00:E2F7: CE 44 DF     	dec	lines
   617 00:E2FA: F0 14        	beq	das_end		; continue until done
   618 00:E2FC: 80 EC        	bra	das_l
   619                        
   620                        chk_diadr:
   621 00:E2FE: AD 48 DF     	lda	e_value
   622 00:E301: CD 16 DF     	cmp	oper
   623 00:E304: B0 E4        	bcs	das_l
   624                        
   625 00:E306: AD 49 DF     	lda	e_value+1
   626 00:E309: CD 17 DF     	cmp	oper+1
   627 00:E30C: F0 02        	beq	das_end
   628 00:E30E: B0 DA        	bcs	das_l
   629                        
   630                        das_end
   631 00:E310: AC 16 DF     	ldy	oper
   632 00:E313: AD 17 DF     	lda	oper+1
   633 00:E316: 8C 46 DF     	sty	s_value
   634 00:E319: 8D 47 DF     	sta	s_value+1
   635                        
   636 00:E31C: 4C 94 E0     	JMP	WSTART
   637                        
   638                        ; virtual console output for mnemonic characters
   639                        
   640                        vPUT_CH	; input A
   641 00:E31F: DA           	phx
   642 00:E320: AE 4A DF     	ldx	count
   643 00:E323: 9D 4B DF     	sta	vnim_buf,x
   644 00:E326: EE 4A DF     	inc	count
   645 00:E329: FA           	plx
   646 00:E32A: 60           	rts
   647                        
   648                        vHEXOUT2
   649 00:E32B: 48           	PHA
   650 00:E32C: 4A           	LSR	A
   651 00:E32D: 4A           	LSR	A
   652 00:E32E: 4A           	LSR	A
   653 00:E32F: 4A           	LSR	A
   654 00:E330: 20 34 E3     	JSR	vHEXOUT1
   655 00:E333: 68           	PLA
   656                        vHEXOUT1
   657 00:E334: 29 0F        	AND	#$0F
   658 00:E336: 18           	CLC
   659 00:E337: 69 30        	ADC	#'0'
   660 00:E339: C9 3A        	CMP	#'9'+1
   661 00:E33B: 90 03        	BCC	vHEXOUTE
   662 00:E33D: 18           	CLC
   663 00:E33E: 69 07        	ADC	#'A'-'9'-1
   664                        vHEXOUTE
   665 00:E340: 80 DD        	bra	vPUT_CH
   666                        
   667                        ;------------------------------------------------------
   668                        ; disassemble one opcode and print it
   669                        ;------------------------------------------------------
   670                        disOpcode:
   671                        ;	LDA	(oper)		; check pointed opcode
   672 00:E342: 20 ED EF     	jsr	lda_d_oper
   673                        
   674 00:E345: 8D 4A DF     	STA	count		; keep for comparisons
   675 00:E348: A0 6D        	LDY	#<da_oclist	; get address of opcode list
   676 00:E34A: A9 E4        	LDA	#>da_oclist
   677 00:E34C: 9C 18 DF     	stz	scan		; indirect-indexed pointer
   678 00:E34F: 8D 19 DF     	STA	scan+1
   679                        
   680                        ; proceed normally now
   681                        
   682 00:E352: A2 00        	LDX	#0		; counter of skipped opcodes
   683                        do_chkopc:
   684 00:E354: EC 4A DF     	CPX	count		; check if desired opcode already pointed
   685 00:E357: F0 16        	BEQ	do_found		; no more to skip
   686                        
   687                        do_skip:
   688                        ;	LDA	(scan),Y		; get char in list
   689 00:E359: 20 97 EF     	jsr	lda_scan
   690                        
   691 00:E35C: 30 08        	BMI	do_other		; found end-of-opcode mark (bit 7)
   692 00:E35E: C8           	INY
   693 00:E35F: D0 F8        	BNE	do_skip		; next char in list if not crossed
   694 00:E361: EE 19 DF     	INC	scan+1		; otherwise correct MSB
   695 00:E364: 80 F3        	bra	do_skip
   696                        
   697                        do_other:
   698 00:E366: C8           	INY			; needs to point to actual opcode, not previous end eeeeeek!
   699 00:E367: D0 03        	BNE	do_set		; if not crossed
   700 00:E369: EE 19 DF     	INC	scan+1		; otherwise correct MSB
   701                        
   702                        do_set:
   703 00:E36C: E8           	INX			; yet another opcode skipped
   704 00:E36D: D0 E5        	BNE	do_chkopc	; until list is done ***should not arrive here***
   705                        
   706                        do_found:
   707 00:E36F: 8C 18 DF     	STY	scan		; restore pointer
   708                        
   709                        ;
   710                        ; decode opcode and print hex dump
   711                        ;
   712                        prnOpcode: ; first goes the current address in label style
   713                        
   714 00:E372: A9 20        	LDA	#' '		; make it self-hosting
   715 00:E374: 20 7D F3     	JSR	CONOUT
   716 00:E377: AD 17 DF     	LDA	oper+1		; address MSB
   717 00:E37A: 20 18 F0     	JSR	HEXOUT2	; print it
   718 00:E37D: AD 16 DF     	LDA	oper		; same for LSB
   719 00:E380: 20 18 F0     	JSR	HEXOUT2
   720                        
   721                        ; then extract the opcode string from scan
   722                        
   723 00:E383: A0 00        	LDY	#0		; scan increase, temporarily stored in temp
   724 00:E385: 8C 45 DF     	STY	bytes		; number of bytes to be dumped (-1)
   725 00:E388: 8C 4A DF     	STY	count		; printed chars for virtual console buffe
   726                        
   727                        po_loop:
   728                        ;	LDA	(scan),Y	; get char in opcode list
   729 00:E38B: 20 97 EF     	jsr	lda_scan
   730                        
   731 00:E38E: 8C 43 DF     	STY	temp		; keep index as will be destroyed
   732 00:E391: 29 7F        	AND	#$7F		; filter out possible end mark
   733 00:E393: C9 25        	CMP	#'%'		; relative addressing
   734 00:E395: D0 39        	BNE	po_nrel		; currently the same as single byte!
   735                        
   736                        ; put here specific code for relative arguments!
   737                        
   738 00:E397: A9 24        	LDA	#'$'		; hex radix
   739 00:E399: 20 1F E3     	JSR	vPUT_CH
   740                        
   741                        ;	lda	(oper)		; check opocde for a moment
   742 00:E39C: 20 ED EF     	jsr	lda_d_oper
   743                        
   744 00:E39F: A0 01        	LDY	#1		; standard branch offset
   745 00:E3A1: A2 00        	LDX	#0		; reset offset sign extention
   746 00:E3A3: 29 0F        	AND	#$0F		; watch low-nibble on opcode
   747 00:E3A5: C9 0F        	CMP	#$0F		; is it BBR/BBS?
   748 00:E3A7: D0 01        	BNE	po_nobbx		; if not, keep standard offset
   749                        
   750 00:E3A9: C8           	INY			; otherwise needs one more byte!
   751                        po_nobbx:
   752 00:E3AA: 8C 46 DF     	STY	s_value		; store now as will be added later
   753 00:E3AD: AC 45 DF     	LDY	bytes		; retrieve instruction index
   754 00:E3B0: C8           	INY			; point to operand!
   755                        
   756                        ;	LDA	(oper),Y	; get offset!
   757 00:E3B1: 20 A7 EF     	jsr	lda_oper
   758                        	
   759 00:E3B4: 8C 45 DF     	STY	bytes		; correct index
   760 00:E3B7: 10 01        	BPL	po_fwd		; forward jump does not extend sign
   761 00:E3B9: CA           	DEX			; puts $FF otherwise
   762                        
   763                        po_fwd:
   764 00:E3BA: 1A           	inc	a		; plus opcode...
   765 00:E3BB: 18           	CLC			; (will this and the above instead of SEC fix the error?)
   766 00:E3BC: 6D 46 DF     	ADC	s_value		; ...and displacement...
   767 00:E3BF: 6D 16 DF     	ADC	oper		; ...from current position
   768 00:E3C2: 48           	PHA			; this is the LSB, now check for the MSB
   769 00:E3C3: 8A           	TXA			; get sign extention
   770 00:E3C4: 6D 17 DF     	ADC	oper+1		; add current position MSB plus ocassional carry
   771 00:E3C7: 20 2B E3     	JSR	vHEXOUT2	; show as two ciphers
   772 00:E3CA: 68           	PLA			; previously computed LSB
   773 00:E3CB: 20 2B E3     	JSR	vHEXOUT2	; another two
   774 00:E3CE: 80 30        	bra	po_done		; update and continue
   775                        
   776                        po_nrel:
   777 00:E3D0: C9 40        	CMP	#'@'		; single byte operand
   778 00:E3D2: D0 04        	BNE	po_nbyt		; otherwise check word-sized operand
   779                        
   780                        ; *** unified 1 and 2-byte operand management ***
   781                        
   782 00:E3D4: A0 01        	LDY	#1		; number of bytes minus one
   783 00:E3D6: 80 06        	bra	po_disp		; display value
   784                        
   785                        po_nbyt:
   786 00:E3D8: C9 26        	CMP	#'&'		; word operand
   787 00:E3DA: D0 1F        	BNE	po_nwd		; otherwise is normal char
   788 00:E3DC: A0 02        	LDY	#2		; number of bytes minus one
   789                        
   790                        po_disp:
   791                        ; could check HERE for undefined references!!!
   792 00:E3DE: 5A           	phy			; these are the operand bytes
   793 00:E3DF: 8C 45 DF     	STY	bytes		; set counter
   794 00:E3E2: A9 24        	LDA	#'$'		; hex radix
   795 00:E3E4: 20 1F E3     	JSR	vPUT_CH
   796                        
   797                        po_dloop:
   798 00:E3E7: AC 45 DF     	LDY	bytes		; retrieve operand index
   799                        
   800                        ;	LDA	(oper),Y		; get whatever byte
   801 00:E3EA: 20 A7 EF     	jsr	lda_oper
   802                        
   803 00:E3ED: 20 2B E3     	JSR	vHEXOUT2	; show in hex
   804 00:E3F0: CE 45 DF     	DEC	bytes		; go back one byte
   805 00:E3F3: D0 F2        	BNE	po_dloop
   806 00:E3F5: 7A           	ply			; restore original operand size
   807 00:E3F6: 8C 45 DF     	STY	bytes
   808 00:E3F9: 80 05        	bra	po_adv		; update count (direct from A) and continue
   809                        
   810                        po_nwd:
   811 00:E3FB: 20 1F E3     	JSR	vPUT_CH		; just print it
   812 00:E3FE: 80 00        	bra	po_char
   813                        
   814                        po_done:
   815                        po_adv:
   816                        po_char:
   817 00:E400: AC 43 DF     	LDY	temp		; get scan index
   818                        
   819                        ;	LDA	(scan),Y		; get current char again
   820 00:E403: 20 97 EF     	jsr	lda_scan
   821                        
   822 00:E406: 30 04        	BMI	po_end		; opcode ended, no more to show
   823 00:E408: C8           	INY			; go for next char otherwise
   824 00:E409: 4C 8B E3     	JMP	po_loop		; BNE would work as no opcode string near 256 bytes long, but too far...
   825                        
   826                        po_end: ; output binary code
   827                        
   828 00:E40C: AE 4A DF     	ldx	count
   829 00:E40F: 9E 4B DF     	stz	vnim_buf,x	; set mnemonic string termination
   830                        
   831                        ; print hex dump as a comment!
   832                        
   833                        po_dump:
   834 00:E412: A9 09        	lda	#9		; **
   835 00:E414: 8D 4A DF     	sta	count		; **
   836 00:E417: A0 00        	LDY	#0		; reset index
   837 00:E419: 8C 43 DF     	STY	temp		; save index (no longer scan)
   838                        
   839                        po_dbyt:
   840 00:E41C: A9 20        	LDA	#' '		; leading space
   841 00:E41E: 20 7D F3     	JSR	CONOUT
   842 00:E421: AC 43 DF     	LDY	temp		; retrieve index
   843                        
   844                        ;	LDA	(oper),Y	; get current byte in instruction
   845 00:E424: 20 A7 EF     	jsr	lda_oper
   846                        
   847 00:E427: 20 18 F0     	JSR	HEXOUT2		; show as hex
   848 00:E42A: AD 4A DF     	lda	count		; **
   849 00:E42D: 38           	sec			; **
   850 00:E42E: E9 03        	sbc	#3		; **
   851 00:E430: 8D 4A DF     	sta	count		; **
   852 00:E433: EE 43 DF     	INC	temp		; next
   853 00:E436: AE 45 DF     	LDX	bytes		; get limit (-1)
   854 00:E439: E8           	INX			; correct for post-increased
   855 00:E43A: EC 43 DF     	CPX	temp		; compare current count
   856 00:E43D: D0 DD        	BNE	po_dbyt		; loop until done
   857                        
   858                        ; skip all bytes and point to next opcode
   859                        
   860                        post_end:			; **
   861 00:E43F: A9 20        	LDA	#' '		; **
   862 00:E441: 20 7D F3     	JSR	CONOUT		; **
   863                        				; **
   864 00:E444: AD 4A DF     	lda	count		; **
   865 00:E447: F0 05        	beq	end_prnt	; **
   866 00:E449: CE 4A DF     	dec	count		; **
   867 00:E44C: 80 F1        	bra	post_end	; **
   868                        
   869                        end_prnt:			; **
   870                        ;	LDA	#']'		; **
   871                        ;	JSR	CONOUT		; **
   872                        
   873 00:E44E: AD 16 DF     	LDA 	oper		; address LSB
   874 00:E451: 38           	SEC			; skip current opcode...
   875 00:E452: 6D 45 DF     	ADC	bytes		; ...plus number of operands
   876 00:E455: 8D 16 DF     	STA	oper
   877 00:E458: 90 03        	BCC	po_cr		; in case of page crossing
   878 00:E45A: EE 17 DF     	INC	oper+1
   879                        po_cr:
   880                        
   881 00:E45D: A9 4B        	LDA	#$FF&vnim_buf
   882 00:E45F: 8D 0D DF     	STA	PT0
   883 00:E462: A9 DF        	LDA	#vnim_buf>>8
   884 00:E464: 8D 0E DF     	STA	PT0+1
   885 00:E467: 20 FD EF     	jsr	STROUT		; output mnemonic to console
   886 00:E46A: 4C 5D F0     	JMP	CRLF		; print it and return
   887                        
   888                        ; minimOS opcode list for (dis)assembler modules
   889                        ; (c) 2015-2022 Carlos J. Santisteban
   890                        ; last modified 20200222-1341
   891                        
   892                        ; Opcode list as bit-7 terminated strings
   893                        ; @ expects single byte, & expects word
   894                        ; NEW % expects RELATIVE addressing
   895                        ; Rockwell 65C02 version (plus STP & WAI)
   896                        ; will be used by the assembler module too
   897                        
   898                        da_oclist
   899 00:E46D: 42 52 4B 20  	db	"BRK #", $80+'@'	; $00=BRK #zp
       00:E471: 23 C0 
   900 00:E473: 4F 52 41 20  	db	"ORA (@, X", $80+')'	; $01=ORA (zp,X)
       00:E477: 28 40 2C 20 
       00:E47B: 58 A9 
   901 00:E47D: 3F C0        	db	"?", $80+'@'		; $02=?
   902 00:E47F: BF           	db	$80+'?'			; $03=?
   903 00:E480: 54 53 42 20  	db	"TSB ", $80+'@'		; $04=TSB zp		CMOS
       00:E484: C0 
   904 00:E485: 4F 52 41 20  	db	"ORA ", $80+'@'		; $05=ORA zp
       00:E489: C0 
   905 00:E48A: 41 53 4C 20  	db	"ASL ", $80+'@'		; $06=ASL zp
       00:E48E: C0 
   906 00:E48F: 52 4D 42 30  	db	"RMB0 ", $80+'@'	; $07=RMB0 zp		CMOS Rockwell
       00:E493: 20 C0 
   907 00:E495: 50 48 D0     	db	"PH", $80+'P'		; $08=PHP
   908 00:E498: 4F 52 41 20  	db	"ORA #", $80+'@'	; $09=ORA #
       00:E49C: 23 C0 
   909 00:E49E: 41 53 CC     	db	"AS", $80+'L'		; $0A=ASL
   910 00:E4A1: BF           	db	$80+'?'			; $0B=?
   911 00:E4A2: 54 53 42 20  	db	"TSB ", $80+'&'		; $0C=TSB abs		CMOS
       00:E4A6: A6 
   912 00:E4A7: 4F 52 41 20  	db	"ORA ", $80+'&'		; $0D=ORA abs
       00:E4AB: A6 
   913 00:E4AC: 41 53 4C 20  	db	"ASL ", $80+'&'		; $0E=ASL abs
       00:E4B0: A6 
   914 00:E4B1: 42 42 52 30  	db	"BBR0 @,", $80+'%'	; $0F=BBR0 zp, rel	CMOS Rockwell
       00:E4B5: 20 40 2C A5 
   915 00:E4B9: 42 50 4C 20  	db	"BPL ", $80+'%'		; $10=BPL rel
       00:E4BD: A5 
   916 00:E4BE: 4F 52 41 20  	db	"ORA (@), ", $80+'Y'	; $11=ORA (zp),Y
       00:E4C2: 28 40 29 2C 
       00:E4C6: 20 D9 
   917 00:E4C8: 4F 52 41 20  	db	"ORA (@", $80+')'	; $12=ORA (zp)		CMOS
       00:E4CC: 28 40 A9 
   918 00:E4CF: BF           	db	$80+'?'			; $13=?
   919 00:E4D0: 54 52 42 20  	db	"TRB ", $80+'@'		; $14=TRB zp		CMOS
       00:E4D4: C0 
   920 00:E4D5: 4F 52 41 20  	db	"ORA @, ", $80+'X'	; $15=ORA zp,X
       00:E4D9: 40 2C 20 D8 
   921 00:E4DD: 41 53 4C 20  	db	"ASL @, ", $80+'X'	; $16=ASL zp,X
       00:E4E1: 40 2C 20 D8 
   922 00:E4E5: 52 4D 42 31  	db	"RMB1 ", $80+'@'	; $17=RMB1 zp		CMOS Rockwell
       00:E4E9: 20 C0 
   923 00:E4EB: 43 4C C3     	db	"CL", $80+'C'		; $18=CLC
   924 00:E4EE: 4F 52 41 20  	db	"ORA &, ", $80+'Y'	; $19=ORA abs,Y
       00:E4F2: 26 2C 20 D9 
   925 00:E4F6: 49 4E C3     	db	"IN", $80+'C'		; $1A=INC		CMOS
   926 00:E4F9: BF           	db	$80+'?'			; $1B=?
   927 00:E4FA: 54 52 42 20  	db	"TRB ", $80+'&'		; $1C=TRB abs		CMOS
       00:E4FE: A6 
   928 00:E4FF: 4F 52 41 20  	db	"ORA &, ", $80+'X'	; $1D=ORA abs,X
       00:E503: 26 2C 20 D8 
   929 00:E507: 41 53 4C 20  	db	"ASL &, ", $80+'X'	; $1E=ASL abs,X
       00:E50B: 26 2C 20 D8 
   930 00:E50F: 42 42 52 31  	db	"BBR1 @,", $80+'%'	; $1F=BBR1 zp, rel	CMOS Rockwell
       00:E513: 20 40 2C A5 
   931 00:E517: 4A 53 52 20  	db	"JSR ", $80+'&'		; $20=JSR abs
       00:E51B: A6 
   932 00:E51C: 41 4E 44 20  	db	"AND (@, X", $80+')'	; $21=AND (zp,X)
       00:E520: 28 40 2C 20 
       00:E524: 58 A9 
   933 00:E526: 3F C0        	db	"?", $80+'@'		; $22=?
   934 00:E528: BF           	db	$80+'?'			; $23=?
   935 00:E529: 42 49 54 20  	db	"BIT ", $80+'@'		; $24=BIT zp
       00:E52D: C0 
   936 00:E52E: 41 4E 44 20  	db	"AND ", $80+'@'		; $25=AND zp
       00:E532: C0 
   937 00:E533: 52 4F 4C 20  	db	"ROL ", $80+'@'		; $26=ROL zp
       00:E537: C0 
   938 00:E538: 52 4D 42 32  	db	"RMB2 ", $80+'@'	; $27=RMB2 zp		CMOS Rockwell
       00:E53C: 20 C0 
   939 00:E53E: 50 4C D0     	db	"PL", $80+'P'		; $28=PLP
   940 00:E541: 41 4E 44 20  	db	"AND #", $80+'@'	; $29=AND #
       00:E545: 23 C0 
   941 00:E547: 52 4F CC     	db	"RO", $80+'L'		; $2A=ROL
   942 00:E54A: BF           	db	$80+'?'			; $2B=?
   943 00:E54B: 42 49 54 20  	db	"BIT ", $80+'&'		; $2C=BIT abs
       00:E54F: A6 
   944 00:E550: 41 4E 44 20  	db	"AND ", $80+'&'		; $2D=AND abs
       00:E554: A6 
   945 00:E555: 52 4F 4C 20  	db	"ROL ", $80+'&'		; $2E=ROL abs
       00:E559: A6 
   946 00:E55A: 42 42 52 32  	db	"BBR2 @,", $80+'%'	; $2F=BBR2 zp, rel	CMOS Rockwell
       00:E55E: 20 40 2C A5 
   947 00:E562: 42 4D 49 20  	db	"BMI ", $80+'%'		; $30=BMI rel
       00:E566: A5 
   948 00:E567: 41 4E 44 20  	db	"AND (@), ", $80+'Y'	; $31=AND (zp),Y
       00:E56B: 28 40 29 2C 
       00:E56F: 20 D9 
   949 00:E571: 41 4E 44 20  	db	"AND (@", $80+')'	; $32=AND (zp)		CMOS
       00:E575: 28 40 A9 
   950 00:E578: BF           	db	$80+'?'			; $33=?
   951 00:E579: 42 49 54 20  	db	"BIT @, ", $80+'X'	; $34=BIT zp,X		CMOS
       00:E57D: 40 2C 20 D8 
   952 00:E581: 41 4E 44 20  	db	"AND @, ", $80+'X'	; $35=AND zp,X
       00:E585: 40 2C 20 D8 
   953 00:E589: 52 4F 4C 20  	db	"ROL @, ", $80+'X'	; $36=ROL zp,X
       00:E58D: 40 2C 20 D8 
   954 00:E591: 52 4D 42 33  	db	"RMB3 ", $80+'@'	; $37=RMB3 zp		CMOS Rockwell
       00:E595: 20 C0 
   955 00:E597: 53 45 C3     	db	"SE", $80+'C'		; $38=SEC
   956 00:E59A: 41 4E 44 20  	db	"AND &, ", $80+'Y'	; $39=AND abs,Y
       00:E59E: 26 2C 20 D9 
   957 00:E5A2: 44 45 C3     	db	"DE", $80+'C'		; $3A=DEC		CMOS
   958 00:E5A5: BF           	db	$80+'?'			; $3B=?
   959 00:E5A6: 42 49 54 20  	db	"BIT &, ", $80+'X'	; $3C=BIT abs,X		CMOS
       00:E5AA: 26 2C 20 D8 
   960 00:E5AE: 41 4E 44 20  	db	"AND &, ", $80+'X'	; $3D=AND abs,X
       00:E5B2: 26 2C 20 D8 
   961 00:E5B6: 52 4F 4C 20  	db	"ROL &, ", $80+'X'	; $3E=ROL abs,X
       00:E5BA: 26 2C 20 D8 
   962 00:E5BE: 42 42 52 33  	db	"BBR3 @,", $80+'%'	; $3F=BBR3 zp, rel	CMOS Rockwell
       00:E5C2: 20 40 2C A5 
   963 00:E5C6: 52 54 C9     	db	"RT", $80+'I'		; $40=RTI
   964 00:E5C9: 45 4F 52 20  	db	"EOR (@, X", $80+')'	; $41=EOR (zp,X)
       00:E5CD: 28 40 2C 20 
       00:E5D1: 58 A9 
   965 00:E5D3: 3F C0        	db	"?", $80+'@'		; $42=?
   966 00:E5D5: BF           	db	$80+'?'			; $43=?
   967 00:E5D6: 3F 28 33 29  	db	"?(3)", $80+'@'		; $44=?
       00:E5DA: C0 
   968 00:E5DB: 45 4F 52 20  	db	"EOR ", $80+'@'		; $45=EOR zp
       00:E5DF: C0 
   969 00:E5E0: 4C 53 52 20  	db	"LSR ", $80+'@'		; $46=LSR zp
       00:E5E4: C0 
   970 00:E5E5: 52 4D 42 34  	db	"RMB4 ", $80+'@'	; $47=RMB4 zp		CMOS Rockwell
       00:E5E9: 20 C0 
   971 00:E5EB: 50 48 C1     	db	"PH", $80+'A'		; $48=PHA
   972 00:E5EE: 45 4F 52 20  	db	"EOR #", $80+'@'	; $49=EOR #
       00:E5F2: 23 C0 
   973 00:E5F4: 4C 53 D2     	db	"LS", $80+'R'		; $4A=LSR
   974 00:E5F7: BF           	db	$80+'?'			; $4B=?
   975 00:E5F8: 4A 4D 50 20  	db	"JMP ", $80+'&'		; $4C=JMP abs
       00:E5FC: A6 
   976 00:E5FD: 45 4F 52 20  	db	"EOR ", $80+'&'		; $4D=EOR abs
       00:E601: A6 
   977 00:E602: 4C 53 52 20  	db	"LSR ", $80+'&'		; $4E=LSR abs
       00:E606: A6 
   978 00:E607: 42 42 52 34  	db	"BBR4 @,", $80+'%'	; $4F=BBR4 zp, rel	CMOS Rockwell
       00:E60B: 20 40 2C A5 
   979 00:E60F: 42 56 43 20  	db	"BVC ", $80+'%'		; $50=BVC rel
       00:E613: A5 
   980 00:E614: 45 4F 52 20  	db	"EOR (@), ", $80+'Y'	; $51=EOR (zp),Y
       00:E618: 28 40 29 2C 
       00:E61C: 20 D9 
   981 00:E61E: 45 4F 52 20  	db	"EOR (@", $80+')'	; $52=EOR (zp)		CMOS
       00:E622: 28 40 A9 
   982 00:E625: BF           	db	$80+'?'			; $53=?
   983 00:E626: 3F 28 34 29  	db	"?(4)", $80+'@'		; $54=?
       00:E62A: C0 
   984 00:E62B: 45 4F 52 20  	db	"EOR @, ", $80+'X'	; $55=EOR zp,X
       00:E62F: 40 2C 20 D8 
   985 00:E633: 4C 53 52 20  	db	"LSR @, ", $80+'X'	; $56=LSR zp,X
       00:E637: 40 2C 20 D8 
   986 00:E63B: 52 4D 42 35  	db	"RMB5 ", $80+'@'	; $57=RMB5 zp		CMOS Rockwell
       00:E63F: 20 C0 
   987 00:E641: 43 4C C9     	db	"CL", $80+'I'		; $58=CLI
   988 00:E644: 45 4F 52 20  	db	"EOR &, ", $80+'Y'	; $59=EOR abs,Y
       00:E648: 26 2C 20 D9 
   989 00:E64C: 50 48 D9     	db	"PH", $80+'Y'		; $5A=PHY		CMOS
   990 00:E64F: BF           	db	$80+'?'			; $5B=?
   991 00:E650: 3F 28 38 29  	db	"?(8)", $80+'&'		; $5C=?
       00:E654: A6 
   992 00:E655: 45 4F 52 20  	db	"EOR &, ", $80+'X'	; $5D=EOR abs,X
       00:E659: 26 2C 20 D8 
   993 00:E65D: 4C 53 52 20  	db	"LSR &, ", $80+'X'	; $5E=LSR abs,X
       00:E661: 26 2C 20 D8 
   994 00:E665: 42 42 52 35  	db	"BBR5 @,", $80+'%'	; $5F=BBR5 zp, rel	CMOS Rockwell
       00:E669: 20 40 2C A5 
   995 00:E66D: 52 54 D3     	db	"RT", $80+'S'		; $60=RTS
   996 00:E670: 41 44 43 20  	db	"ADC (@, X", $80+')'	; $61=ADC (zp,X)
       00:E674: 28 40 2C 20 
       00:E678: 58 A9 
   997 00:E67A: 3F C0        	db	"?", $80+'@'		; $62=?
   998 00:E67C: BF           	db	$80+'?'			; $63=?
   999 00:E67D: 53 54 5A 20  	db	"STZ ", $80+'@'		; $64=STZ zp		CMOS
       00:E681: C0 
  1000 00:E682: 41 44 43 20  	db	"ADC ", $80+'@'		; $65=ADC zp
       00:E686: C0 
  1001 00:E687: 52 4F 52 20  	db	"ROR ", $80+'@'		; $66=ROR zp
       00:E68B: C0 
  1002 00:E68C: 52 4D 42 36  	db	"RMB6 ", $80+'@'	; $67=RMB6 zp		CMOS Rockwell
       00:E690: 20 C0 
  1003 00:E692: 50 4C C1     	db	"PL", $80+'A'		; $68=PLA
  1004 00:E695: 41 44 43 20  	db	"ADC #", $80+'@'	; $69=ADC #
       00:E699: 23 C0 
  1005 00:E69B: 52 4F D2     	db	"RO", $80+'R'		; $6A=ROR
  1006 00:E69E: BF           	db	$80+'?'			; $6B=?
  1007 00:E69F: 4A 4D 50 20  	db	"JMP (&", $80+')'	; $6C=JMP (abs)
       00:E6A3: 28 26 A9 
  1008 00:E6A6: 41 44 43 20  	db	"ADC ", $80+'&'		; $6D=ADC abs
       00:E6AA: A6 
  1009 00:E6AB: 52 4F 52 20  	db	"ROR ", $80+'&'		; $6E=ROR abs
       00:E6AF: A6 
  1010 00:E6B0: 42 42 52 36  	db	"BBR6 @,", $80+'%'	; $6F=BBR6 zp, rel	CMOS Rockwell
       00:E6B4: 20 40 2C A5 
  1011 00:E6B8: 42 56 53 20  	db	"BVS ", $80+'%'		; $70=BVS rel
       00:E6BC: A5 
  1012 00:E6BD: 41 44 43 20  	db	"ADC (@), ", $80+'Y'	; $71=ADC (zp),Y
       00:E6C1: 28 40 29 2C 
       00:E6C5: 20 D9 
  1013 00:E6C7: 41 44 43 20  	db	"ADC (@", $80+')'	; $72=ADC (zp)		CMOS
       00:E6CB: 28 40 A9 
  1014 00:E6CE: BF           	db	$80+'?'			; $73=?
  1015 00:E6CF: 53 54 5A 20  	db	"STZ @, ", $80+'X'	; $74=STZ zp,X		CMOS
       00:E6D3: 40 2C 20 D8 
  1016 00:E6D7: 41 44 43 20  	db	"ADC @, ", $80+'X'	; $75=ADC zp,X
       00:E6DB: 40 2C 20 D8 
  1017 00:E6DF: 52 4F 52 20  	db	"ROR @, ", $80+'X'	; $76=ROR zp,X
       00:E6E3: 40 2C 20 D8 
  1018 00:E6E7: 52 4D 42 37  	db	"RMB7 ", $80+'@'	; $77=RMB7 zp		CMOS Rockwell
       00:E6EB: 20 C0 
  1019 00:E6ED: 53 45 C9     	db	"SE", $80+'I'		; $78=SEI
  1020 00:E6F0: 41 44 43 20  	db	"ADC &, ", $80+'Y'	; $79=ADC abs, Y
       00:E6F4: 26 2C 20 D9 
  1021 00:E6F8: 50 4C D9     	db	"PL", $80+'Y'		; $7A=PLY		CMOS
  1022 00:E6FB: BF           	db	$80+'?'			; $7B=?
  1023 00:E6FC: 4A 4D 50 20  	db	"JMP (&, X", $80+')'	; $7C=JMP (abs,X)
       00:E700: 28 26 2C 20 
       00:E704: 58 A9 
  1024 00:E706: 41 44 43 20  	db	"ADC &, ", $80+'X'	; $7D=ADC abs, X
       00:E70A: 26 2C 20 D8 
  1025 00:E70E: 52 4F 52 20  	db	"ROR &, ", $80+'X'	; $7E=ROR abs, X
       00:E712: 26 2C 20 D8 
  1026 00:E716: 42 42 52 37  	db	"BBR7 @,", $80+'%'	; $7F=BBR7 zp, rel	CMOS Rockwell
       00:E71A: 20 40 2C A5 
  1027 00:E71E: 42 52 41 20  	db	"BRA ", $80+'%'		; $80=BRA rel		CMOS
       00:E722: A5 
  1028 00:E723: 53 54 41 20  	db	"STA (@, X", $80+')'	; $81=STA (zp,X)
       00:E727: 28 40 2C 20 
       00:E72B: 58 A9 
  1029 00:E72D: 3F C0        	db	"?", $80+'@'		; $82=?
  1030 00:E72F: BF           	db	$80+'?'			; $83=?
  1031 00:E730: 53 54 59 20  	db	"STY ", $80+'@'		; $84=STY zp
       00:E734: C0 
  1032 00:E735: 53 54 41 20  	db	"STA ", $80+'@'		; $85=STA zp
       00:E739: C0 
  1033 00:E73A: 53 54 58 20  	db	"STX ", $80+'@'		; $86=STX zp		CMOS
       00:E73E: C0 
  1034 00:E73F: 53 4D 42 30  	db	"SMB0 ", $80+'@'	; $87=SMB0 zp		CMOS Rockwell
       00:E743: 20 C0 
  1035 00:E745: 44 45 D9     	db	"DE", $80+'Y'		; $88=DEY
  1036 00:E748: 42 49 54 20  	db	"BIT #", $80+'@'	; $89=BIT #
       00:E74C: 23 C0 
  1037 00:E74E: 54 58 C1     	db	"TX", $80+'A'		; $8A=TXA
  1038 00:E751: BF           	db	$80+'?'			; $8B=?
  1039 00:E752: 53 54 59 20  	db	"STY ", $80+'&'		; $8C=STY abs
       00:E756: A6 
  1040 00:E757: 53 54 41 20  	db	"STA ", $80+'&'		; $8D=STA abs
       00:E75B: A6 
  1041 00:E75C: 53 54 58 20  	db	"STX ", $80+'&'		; $8E=STX abs
       00:E760: A6 
  1042 00:E761: 42 42 53 30  	db	"BBS0 @, ", $80+'%'	; $8F=BBS0 zp, rel	CMOS Rockwell
       00:E765: 20 40 2C 20 
       00:E769: A5 
  1043 00:E76A: 42 43 43 20  	db	"BCC ", $80+'%'		; $90=BCC rel
       00:E76E: A5 
  1044 00:E76F: 53 54 41 20  	db	"STA (@), ", $80+'Y'	; $91=STA (zp),Y
       00:E773: 28 40 29 2C 
       00:E777: 20 D9 
  1045 00:E779: 53 54 41 20  	db	"STA (@", $80+')'	; $92=STA (zp)		CMOS
       00:E77D: 28 40 A9 
  1046 00:E780: BF           	db	$80+'?'			; $93=?
  1047 00:E781: 53 54 59 20  	db	"STY @, ", $80+'X'	; $94=STY zp,X
       00:E785: 40 2C 20 D8 
  1048 00:E789: 53 54 41 20  	db	"STA @, ", $80+'X'	; $95=STA zp,X
       00:E78D: 40 2C 20 D8 
  1049 00:E791: 53 54 58 20  	db	"STX @, ", $80+'Y'	; $96=STX zp,Y
       00:E795: 40 2C 20 D9 
  1050 00:E799: 53 4D 42 31  	db	"SMB1 ", $80+'@'	; $97=SMB1 zp		CMOS Rockwell
       00:E79D: 20 C0 
  1051 00:E79F: 54 59 C1     	db	"TY", $80+'A'		; $98=TYA
  1052 00:E7A2: 53 54 41 20  	db	"STA &, ", $80+'Y'	; $99=STA abs, Y
       00:E7A6: 26 2C 20 D9 
  1053 00:E7AA: 54 58 D3     	db	"TX", $80+'S'		; $9A=TXS
  1054 00:E7AD: BF           	db	$80+'?'			; $9B=?
  1055 00:E7AE: 53 54 5A 20  	db	"STZ ", $80+'&'		; $9C=STZ abs		CMOS
       00:E7B2: A6 
  1056 00:E7B3: 53 54 41 20  	db	"STA &, ", $80+'X'	; $9D=STA abs,X
       00:E7B7: 26 2C 20 D8 
  1057 00:E7BB: 53 54 5A 20  	db	"STZ &, ", $80+'X'	; $9E=STZ abs,X		CMOS
       00:E7BF: 26 2C 20 D8 
  1058 00:E7C3: 42 42 53 31  	db	"BBS1 @, ", $80+'%'	; $9F=BBS1 zp, rel	CMOS Rockwell
       00:E7C7: 20 40 2C 20 
       00:E7CB: A5 
  1059 00:E7CC: 4C 44 59 20  	db	"LDY #", $80+'@'	; $A0=LDY #
       00:E7D0: 23 C0 
  1060 00:E7D2: 4C 44 41 20  	db	"LDA (@, X", $80+')'	; $A1=LDA (zp,X)
       00:E7D6: 28 40 2C 20 
       00:E7DA: 58 A9 
  1061 00:E7DC: 4C 44 58 20  	db	"LDX #", $80+'@'	; $A2=LDX #
       00:E7E0: 23 C0 
  1062 00:E7E2: BF           	db	$80+'?'			; $A3=?
  1063 00:E7E3: 4C 44 59 20  	db	"LDY ", $80+'@'		; $A4=LDY zp
       00:E7E7: C0 
  1064 00:E7E8: 4C 44 41 20  	db	"LDA ", $80+'@'		; $A5=LDA zp
       00:E7EC: C0 
  1065 00:E7ED: 4C 44 58 20  	db	"LDX ", $80+'@'		; $A6=LDX zp
       00:E7F1: C0 
  1066 00:E7F2: 53 4D 42 32  	db	"SMB2 ", $80+'@'	; $A7=SMB2 zp		CMOS Rockwell
       00:E7F6: 20 C0 
  1067 00:E7F8: 54 41 D9     	db	"TA", $80+'Y'		; $A8=TAY
  1068 00:E7FB: 4C 44 41 20  	db	"LDA #", $80+'@'	; $A9=LDA #
       00:E7FF: 23 C0 
  1069 00:E801: 54 41 D8     	db	"TA", $80+'X'		; $AA=TAX
  1070 00:E804: BF           	db	$80+'?'			; $AB=?
  1071 00:E805: 4C 44 59 20  	db	"LDY ", $80+'&'		; $AC=LDY abs
       00:E809: A6 
  1072 00:E80A: 4C 44 41 20  	db	"LDA ", $80+'&'		; $AD=LDA abs
       00:E80E: A6 
  1073 00:E80F: 4C 44 58 20  	db	"LDX ", $80+'&'		; $AE=LDX abs
       00:E813: A6 
  1074 00:E814: 42 42 53 32  	db	"BBS2 @, ", $80+'%'	; $AF=BBS2 zp, rel	CMOS Rockwell
       00:E818: 20 40 2C 20 
       00:E81C: A5 
  1075 00:E81D: 42 43 53 20  	db	"BCS ", $80+'%'		; $B0=BCS rel
       00:E821: A5 
  1076 00:E822: 4C 44 41 20  	db	"LDA (@), ", $80+'Y'	; $B1=LDA (zp),Y
       00:E826: 28 40 29 2C 
       00:E82A: 20 D9 
  1077 00:E82C: 4C 44 41 20  	db	"LDA (@", $80+')'	; $B2=LDA (zp)		CMOS
       00:E830: 28 40 A9 
  1078 00:E833: BF           	db	$80+'?'			; $B3=?
  1079 00:E834: 4C 44 59 20  	db	"LDY @, ", $80+'X'	; $B4=LDY zp,X
       00:E838: 40 2C 20 D8 
  1080 00:E83C: 4C 44 41 20  	db	"LDA @, ", $80+'X'	; $B5=LDA zp,X
       00:E840: 40 2C 20 D8 
  1081 00:E844: 4C 44 58 20  	db	"LDX @,", $80+'Y'	; $B6=LDX zp,Y
       00:E848: 40 2C D9 
  1082 00:E84B: 53 4D 42 33  	db	"SMB3 ", $80+'@'	; $B7=SMB3 zp		CMOS Rockwell
       00:E84F: 20 C0 
  1083 00:E851: 43 4C D6     	db	"CL", $80+'V'		; $B8=CLV
  1084 00:E854: 4C 44 41 20  	db	"LDA &, ", $80+'Y'	; $B9=LDA abs, Y
       00:E858: 26 2C 20 D9 
  1085 00:E85C: 54 53 D8     	db	"TS", $80+'X'		; $BA=TSX
  1086 00:E85F: BF           	db	$80+'?'			; $BB=?
  1087 00:E860: 4C 44 59 20  	db	"LDY &, ", $80+'X'	; $BC=LDY abs,X
       00:E864: 26 2C 20 D8 
  1088 00:E868: 4C 44 41 20  	db	"LDA &, ", $80+'X'	; $BD=LDA abs,X
       00:E86C: 26 2C 20 D8 
  1089 00:E870: 4C 44 58 20  	db	"LDX &, ", $80+'Y'	; $BE=LDX abs,Y
       00:E874: 26 2C 20 D9 
  1090 00:E878: 42 42 53 33  	db	"BBS3 @, ", $80+'%'	; $BF=BBS3 zp, rel	CMOS Rockwell
       00:E87C: 20 40 2C 20 
       00:E880: A5 
  1091 00:E881: 43 50 59 20  	db	"CPY #", $80+'@'	; $C0=CPY #
       00:E885: 23 C0 
  1092 00:E887: 43 4D 50 20  	db	"CMP (@, X", $80+')'	; $C1=CMP (zp,X)
       00:E88B: 28 40 2C 20 
       00:E88F: 58 A9 
  1093 00:E891: 3F C0        	db	"?", $80+'@'		; $C2=?
  1094 00:E893: BF           	db	$80+'?'			; $C3=?
  1095 00:E894: 43 50 59 20  	db	"CPY ", $80+'@'		; $C4=CPY zp
       00:E898: C0 
  1096 00:E899: 43 4D 50 20  	db	"CMP ", $80+'@'		; $C5=CMP zp
       00:E89D: C0 
  1097 00:E89E: 44 45 43 20  	db	"DEC ", $80+'@'		; $C6=DEC zp
       00:E8A2: C0 
  1098 00:E8A3: 53 4D 42 34  	db	"SMB4 ", $80+'@'	; $C7=SMB4 zp		CMOS Rockwell
       00:E8A7: 20 C0 
  1099 00:E8A9: 49 4E D9     	db	"IN", $80+'Y'		; $C8=INY
  1100 00:E8AC: 43 4D 50 20  	db	"CMP #", $80+'@'	; $C9=CMP #
       00:E8B0: 23 C0 
  1101 00:E8B2: 44 45 D8     	db	"DE", $80+'X'		; $CA=DEX
  1102 00:E8B5: 57 41 C9     	db	"WA", $80+'I'		; $CB=WAI		CMOS WDC
  1103 00:E8B8: 43 50 59 20  	db	"CPY ", $80+'&'		; $CC=CPY abs
       00:E8BC: A6 
  1104 00:E8BD: 43 4D 50 20  	db	"CMP ", $80+'&'		; $CD=CMP abs
       00:E8C1: A6 
  1105 00:E8C2: 44 45 43 20  	db	"DEC ", $80+'&'		; $CE=DEC abs
       00:E8C6: A6 
  1106 00:E8C7: 42 42 53 34  	db	"BBS4 @, ", $80+'%'	; $CF=BBS4 zp, rel	CMOS Rockwell
       00:E8CB: 20 40 2C 20 
       00:E8CF: A5 
  1107 00:E8D0: 42 4E 45 20  	db	"BNE ", $80+'%'		; $D0=BNE rel
       00:E8D4: A5 
  1108 00:E8D5: 43 4D 50 20  	db	"CMP (@), ", $80+'Y'	; $D1=CMP (zp),Y
       00:E8D9: 28 40 29 2C 
       00:E8DD: 20 D9 
  1109 00:E8DF: 43 4D 50 20  	db	"CMP (@", $80+')'	; $D2=CMP (zp)		CMOS
       00:E8E3: 28 40 A9 
  1110 00:E8E6: BF           	db	$80+'?'			; $D3=?
  1111 00:E8E7: 3F 28 34 29  	db	"?(4)", $80+'@'		; $D4=?
       00:E8EB: C0 
  1112 00:E8EC: 43 4D 50 20  	db	"CMP @, ", $80+'X'	; $D5=CMP zp,X
       00:E8F0: 40 2C 20 D8 
  1113 00:E8F4: 44 45 43 20  	db	"DEC @, ", $80+'X'	; $D6=DEC zp,X
       00:E8F8: 40 2C 20 D8 
  1114 00:E8FC: 53 4D 42 35  	db	"SMB5 ", $80+'@'	; $D7=SMB5 zp		CMOS Rockwell
       00:E900: 20 C0 
  1115 00:E902: 43 4C C4     	db	"CL", $80+'D'		; $D8=CLD
  1116 00:E905: 43 4D 50 20  	db	"CMP &, ", $80+'Y'	; $D9=CMP abs, Y
       00:E909: 26 2C 20 D9 
  1117 00:E90D: 50 48 D8     	db	"PH", $80+'X'		; $DA=PHX		CMOS
  1118 00:E910: 53 54 D0     	db	"ST", $80+'P'		; $DB=STP		CMOS WDC
  1119 00:E913: 3F 28 34 29  	db	"?(4)", $80+'&'		; $DC=?
       00:E917: A6 
  1120 00:E918: 43 4D 50 20  	db	"CMP &, ", $80+'X'	; $DD=CMP abs,X
       00:E91C: 26 2C 20 D8 
  1121 00:E920: 44 45 43 20  	db	"DEC &, ", $80+'X'	; $DE=DEC abs,X
       00:E924: 26 2C 20 D8 
  1122 00:E928: 42 42 53 35  	db	"BBS5 @, ", $80+'%'	; $DF=BBS5 zp, rel	CMOS Rockwell
       00:E92C: 20 40 2C 20 
       00:E930: A5 
  1123 00:E931: 43 50 58 20  	db	"CPX #", $80+'@'	; $E0=CPX #
       00:E935: 23 C0 
  1124 00:E937: 53 42 43 20  	db	"SBC (@, X", $80+')'	; $E1=SBC (zp,X)
       00:E93B: 28 40 2C 20 
       00:E93F: 58 A9 
  1125 00:E941: 3F C0        	db	"?", $80+'@'		; $E2=?
  1126 00:E943: BF           	db	$80+'?'			; $E3=?
  1127 00:E944: 43 50 58 20  	db	"CPX ", $80+'@'		; $E4=CPX zp
       00:E948: C0 
  1128 00:E949: 53 42 43 20  	db	"SBC ", $80+'@'		; $E5=SBC zp
       00:E94D: C0 
  1129 00:E94E: 49 4E 43 20  	db	"INC ", $80+'@'		; $E6=INC zp
       00:E952: C0 
  1130 00:E953: 53 4D 42 36  	db	"SMB6 ", $80+'@'	; $E7=SMB6 zp		CMOS Rockwell
       00:E957: 20 C0 
  1131 00:E959: 49 4E D8     	db	"IN", $80+'X'		; $E8=INX
  1132 00:E95C: 53 42 43 20  	db	"SBC #", $80+'@'	; $E9=SBC #
       00:E960: 23 C0 
  1133 00:E962: 4E 4F D0     	db	"NO", $80+'P'		; $EA=NOP
  1134 00:E965: BF           	db	$80+'?'			; $EB=?
  1135 00:E966: 43 50 58 20  	db	"CPX ", $80+'&'		; $EC=CPX abs
       00:E96A: A6 
  1136 00:E96B: 53 42 43 20  	db	"SBC ", $80+'&'		; $ED=SBC abs
       00:E96F: A6 
  1137 00:E970: 49 4E 43 20  	db	"INC ", $80+'&'		; $EE=INC abs
       00:E974: A6 
  1138 00:E975: 42 42 53 36  	db	"BBS6 @, ", $80+'%'	; $EF=BBS6 zp, rel	CMOS Rockwell
       00:E979: 20 40 2C 20 
       00:E97D: A5 
  1139 00:E97E: 42 45 51 20  	db	"BEQ ", $80+'%'		; $F0=BEQ rel
       00:E982: A5 
  1140 00:E983: 53 42 43 20  	db	"SBC (@), ", $80+'Y'	; $F1=SBC (zp),Y
       00:E987: 28 40 29 2C 
       00:E98B: 20 D9 
  1141 00:E98D: 53 42 43 20  	db	"SBC (@", $80+')'	; $F2=SBC (zp)		CMOS
       00:E991: 28 40 A9 
  1142 00:E994: BF           	db	$80+'?'			; $F3=?
  1143 00:E995: 3F 28 34 29  	db	"?(4)", $80+'@'		; $F4=?
       00:E999: C0 
  1144 00:E99A: 53 42 43 20  	db	"SBC @, ", $80+'X'	; $F5=SBC zp,X
       00:E99E: 40 2C 20 D8 
  1145 00:E9A2: 49 4E 43 20  	db	"INC @, ", $80+'X'	; $F6=INC zp,X
       00:E9A6: 40 2C 20 D8 
  1146 00:E9AA: 53 4D 42 37  	db	"SMB7 ", $80+'@'	; $F7=SMB7 zp		CMOS Rockwell
       00:E9AE: 20 C0 
  1147 00:E9B0: 53 45 C4     	db	"SE", $80+'D'		; $F8=SED
  1148 00:E9B3: 53 42 43 20  	db	"SBC &, ", $80+'Y'	; $F9=SBC abs,Y
       00:E9B7: 26 2C 20 D9 
  1149 00:E9BB: 50 4C D8     	db	"PL", $80+'X'		; $FA=PLX		CMOS
  1150 00:E9BE: BF           	db	$80+'?'			; $FB=?
  1151 00:E9BF: 3F 28 34 29  	db	"?(4)", $80+'&'		; $FC=?
       00:E9C3: A6 
  1152 00:E9C4: 53 42 43 20  	db	"SBC &, ", $80+'X'	; $FD=SBC abs,X
       00:E9C8: 26 2C 20 D8 
  1153 00:E9CC: 49 4E 43 20  	db	"INC &, ", $80+'X'	; $FE=INC abs,X
       00:E9D0: 26 2C 20 D8 
  1154 00:E9D4: 42 42 53 37  	db	"BBS7 @, ", $80+'%'	; $FF=BBS7 zp, rel	CMOS Rockwell
       00:E9D8: 20 40 2C 20 
       00:E9DC: A5 
  1155                        
  1156                        ;;;
  1157                        ;;;  Go address
  1158                        ;;;
  1159                        GO
  1160 00:E9DD: E8           	INX
  1161 00:E9DE: 20 B2 F0     	JSR	SKIPSP
  1162 00:E9E1: 20 C9 F0     	JSR	RDHEX
  1163 00:E9E4: AD 11 DF     	LDA	CNT
  1164 00:E9E7: D0 0E        	BNE	GP0		; jmp if 1st arg. exist
  1165                        
  1166 00:E9E9: 20 B2 F0     	JSR	SKIPSP
  1167 00:E9EC: BD 25 DF     	LDA	INBUF,X
  1168 00:E9EF: D0 1C        	bne	GP01		; jmp if remain strings exist
  1169                        
  1170                        	;; No arg.
  1171                        
  1172                        G00
  1173 00:E9F1: 9C 5B DF     	stz	stp_flg		; clear stop flag
  1174 00:E9F4: 4C 4B EA     	jmp	G0
  1175                        
  1176                        GP0	;; 1st arg. found
  1177 00:E9F7: AD 0F DF     	LDA	PT1
  1178 00:E9FA: 8D 22 DF     	STA	REGPC		; set start address(low)
  1179 00:E9FD: AD 10 DF     	LDA	PT1+1
  1180 00:EA00: 8D 23 DF     	STA	REGPC+1		; set start address(high)
  1181                        
  1182                        	; check 2nd arg.
  1183 00:EA03: 20 B2 F0     	JSR	SKIPSP
  1184 00:EA06: BD 25 DF     	LDA	INBUF,X
  1185 00:EA09: C9 00        	CMP	#0
  1186 00:EA0B: F0 E4        	BEQ	G00		; jmp if no 2nd arg.
  1187                        GP01
  1188 00:EA0D: C9 2C        	CMP	#','
  1189 00:EA0F: F0 03        	BEQ	GP1		; chk 2nd arg
  1190                        
  1191                        G_ERR
  1192 00:EA11: 4C FD E0     	JMP	ERR
  1193                        
  1194                        GP1	;; check 2nd arg.
  1195 00:EA14: E8           	INX
  1196 00:EA15: 20 B2 F0     	JSR	SKIPSP
  1197 00:EA18: 20 C9 F0     	JSR	RDHEX
  1198 00:EA1B: 20 B2 F0     	JSR	SKIPSP
  1199 00:EA1E: AD 11 DF     	LDA	CNT
  1200 00:EA21: F0 EE        	BEQ	G_ERR
  1201                        
  1202                        	;; set 2nd arg.
  1203                        
  1204 00:EA23: EE 5B DF     	inc	stp_flg		; set stop flag
  1205                        
  1206                        	; save original binary at break point
  1207 00:EA26: A0 00        	ldy	#0
  1208                        
  1209                        ;	lda	(PT1),y		; get first binary at stop address
  1210 00:EA28: 20 87 EF     	jsr	lda_pt1
  1211                        
  1212 00:EA2B: 8D 5C DF     	sta	sav_dat		; save original binary
  1213 00:EA2E: C8           	iny
  1214                        
  1215                        ;	lda	(PT1),y		; get second binary at stop address
  1216 00:EA2F: 20 87 EF     	jsr	lda_pt1
  1217                        
  1218 00:EA32: 8D 5D DF     	sta	sav_dat+1	; save original binary
  1219                        
  1220                        	; set break point
  1221 00:EA35: A9 00        	lda	#0		; BRK 
  1222 00:EA37: A8           	tay
  1223                        ;	sta	(PT1),y		; set BRK opecode
  1224 00:EA38: 20 B7 EF     	jsr	sta_pt1
  1225                        	
  1226 00:EA3B: C8           	iny
  1227                        ;	sta	(PT1),y		; set BRK operand(#0)
  1228 00:EA3C: 20 B7 EF     	jsr	sta_pt1
  1229                        	
  1230 00:EA3F: AD 0F DF     	lda	PT1
  1231 00:EA42: 8D 14 DF     	sta	sav_adr		; save break point addr(L)
  1232 00:EA45: AD 10 DF     	lda	PT1+1
  1233 00:EA48: 8D 15 DF     	sta	sav_adr+1	; save break point addr(H)
  1234                        
  1235                        G0
  1236 00:EA4B: AE 21 DF     	LDX	REGSP
  1237 00:EA4E: 9A           	TXS			; SP
  1238 00:EA4F: AD 23 DF     	LDA	REGPC+1
  1239 00:EA52: 48           	PHA			; PC(H)
  1240 00:EA53: AD 22 DF     	LDA	REGPC
  1241 00:EA56: 48           	PHA			; PC(L)
  1242 00:EA57: AD 24 DF     	LDA	REGPSR
  1243 00:EA5A: 48           	PHA			; PSR
  1244 00:EA5B: AD 1E DF     	LDA	REGA
  1245 00:EA5E: AE 1F DF     	LDX	REGX
  1246 00:EA61: AC 20 DF     	LDY	REGY
  1247 00:EA64: 40           	RTI
  1248                        
  1249                        ;;;
  1250                        ;;; Set memory
  1251                        ;;;
  1252                        SETM
  1253 00:EA65: E8           	INX
  1254 00:EA66: 20 B2 F0     	JSR	SKIPSP
  1255 00:EA69: 20 C9 F0     	JSR	RDHEX
  1256 00:EA6C: 20 B2 F0     	JSR	SKIPSP
  1257 00:EA6F: BD 25 DF     	LDA	INBUF,X
  1258 00:EA72: F0 03        	BEQ	SM0
  1259 00:EA74: 4C FD E0     	JMP	ERR
  1260                        SM0
  1261 00:EA77: AD 11 DF     	LDA	CNT
  1262 00:EA7A: F0 0C        	BEQ	SM1
  1263 00:EA7C: AD 0F DF     	LDA	PT1
  1264 00:EA7F: 8D 1A DF     	STA	SADDR
  1265 00:EA82: AD 10 DF     	LDA	PT1+1
  1266 00:EA85: 8D 1B DF     	STA	SADDR+1
  1267                        SM1:
  1268 00:EA88: AD 1B DF     	LDA	SADDR+1
  1269 00:EA8B: 20 18 F0     	JSR	HEXOUT2
  1270 00:EA8E: AD 1A DF     	LDA	SADDR
  1271 00:EA91: 20 18 F0     	JSR	HEXOUT2
  1272 00:EA94: A9 A0        	LDA	#$FF&DSEP1
  1273 00:EA96: 8D 0D DF     	STA	PT0
  1274 00:EA99: A9 F2        	LDA	#DSEP1>>8
  1275 00:EA9B: 8D 0E DF     	STA	PT0+1
  1276 00:EA9E: 20 FD EF     	JSR	STROUT
  1277 00:EAA1: A0 00        	LDY	#0
  1278                        
  1279                        ;	LDA	(SADDR),Y
  1280 00:EAA3: AD 1A DF     	lda	SADDR
  1281 00:EAA6: 8D B0 EA     	sta	opr12
  1282 00:EAA9: AD 1B DF     	lda	SADDR+1
  1283 00:EAAC: 8D B1 EA     	sta	opr12+1
  1284 00:EAAF: B9           	db	$B9		; LDA $xxxx,y
  1285 00:EAB0: 00 00        opr12	dw	0		; operand Absolute Indexed Y
  1286                        
  1287 00:EAB2: 20 18 F0     	JSR	HEXOUT2
  1288 00:EAB5: A9 20        	LDA	#' '
  1289 00:EAB7: 20 7D F3     	JSR	CONOUT
  1290 00:EABA: 20 67 F0     	JSR	GETLIN
  1291 00:EABD: A2 00        	LDX	#0
  1292 00:EABF: 20 B2 F0     	JSR	SKIPSP
  1293 00:EAC2: BD 25 DF     	LDA	INBUF,X
  1294 00:EAC5: D0 14        	BNE	SM2
  1295                        SM10	
  1296                        	;; Empty (Increment address)
  1297 00:EAC7: AD 1A DF     	LDA	SADDR
  1298 00:EACA: 18           	CLC
  1299 00:EACB: 69 01        	ADC	#1
  1300 00:EACD: 8D 1A DF     	STA	SADDR
  1301 00:EAD0: AD 1B DF     	LDA	SADDR+1
  1302 00:EAD3: 69 00        	ADC	#0
  1303 00:EAD5: 8D 1B DF     	STA	SADDR+1
  1304 00:EAD8: 4C 88 EA     	JMP	SM1
  1305                        SM2
  1306 00:EADB: C9 2D        	CMP	#'-'
  1307 00:EADD: D0 14        	BNE	SM3
  1308                        	;; '-' (Decrement address)
  1309 00:EADF: AD 1A DF     	LDA	SADDR
  1310 00:EAE2: 38           	SEC
  1311 00:EAE3: E9 01        	SBC	#1
  1312 00:EAE5: 8D 1A DF     	STA	SADDR
  1313 00:EAE8: AD 1B DF     	LDA	SADDR+1
  1314 00:EAEB: E9 00        	SBC	#0
  1315 00:EAED: 8D 1B DF     	STA	SADDR+1
  1316 00:EAF0: 4C 88 EA     	JMP	SM1
  1317                        SM3
  1318 00:EAF3: C9 2E        	CMP	#'.'
  1319 00:EAF5: D0 03        	BNE	SM4
  1320                        	;; '.' (Quit)
  1321 00:EAF7: 4C 94 E0     	JMP	WSTART
  1322                        SM4
  1323 00:EAFA: 20 C9 F0     	JSR	RDHEX
  1324 00:EAFD: AD 11 DF     	LDA	CNT
  1325 00:EB00: D0 03        	BNE	SM40
  1326                        SMER
  1327 00:EB02: 4C FD E0     	JMP	ERR
  1328                        SM40
  1329                        	; repar original bug -------
  1330 00:EB05: BD 25 DF     	LDA	INBUF,X
  1331 00:EB08: D0 F8        	bne	SMER
  1332                        	; repar original bug -------
  1333                        
  1334                        ;	LDA	PT1
  1335                        ;	LDY	#0
  1336                        ;	STA	(SADDR),Y
  1337 00:EB0A: AD 1A DF     	lda	SADDR
  1338 00:EB0D: 8D 1C EB     	sta	opr13
  1339 00:EB10: AD 1B DF     	lda	SADDR+1
  1340 00:EB13: 8D 1D EB     	sta	opr13+1
  1341 00:EB16: AD 0F DF     	LDA	PT1
  1342 00:EB19: A0 00        	LDY	#0
  1343 00:EB1B: 99           	db	$99		; STA $xxxx,y
  1344 00:EB1C: 00 00        opr13	dw	0		; operand Absolute Indexed Y
  1345                        
  1346 00:EB1E: 4C C7 EA     	JMP	SM10
  1347                        
  1348                        ;;;
  1349                        ;;; LOAD HEX file
  1350                        ;;;
  1351                        LOADH
  1352 00:EB21: E8           	INX
  1353 00:EB22: 20 B2 F0     	JSR	SKIPSP
  1354 00:EB25: 20 C9 F0     	JSR	RDHEX
  1355 00:EB28: 20 B2 F0     	JSR	SKIPSP
  1356 00:EB2B: BD 25 DF     	LDA	INBUF,X
  1357 00:EB2E: D0 D2        	BNE	SMER
  1358                        LH0
  1359 00:EB30: 20 6B F3     	JSR	CONIN
  1360 00:EB33: 20 BE F0     	JSR	UPPER
  1361 00:EB36: C9 53        	CMP	#'S'
  1362 00:EB38: D0 03        	Bne	LH1a
  1363 00:EB3A: 4C D6 EB     	jmp	LHS0
  1364                        LH1a
  1365 00:EB3D: C9 3A        	CMP	#':'
  1366 00:EB3F: F0 0E        	BEQ	LHI0
  1367                        LH2
  1368                        	;; Skip to EOL
  1369 00:EB41: C9 0D        	CMP	#CR
  1370 00:EB43: F0 EB        	BEQ	LH0
  1371 00:EB45: C9 0A        	CMP	#LF
  1372 00:EB47: F0 E7        	BEQ	LH0
  1373                        LH3
  1374 00:EB49: 20 6B F3     	JSR	CONIN
  1375 00:EB4C: 4C 41 EB     	JMP	LH2
  1376                        
  1377                        LHI0
  1378 00:EB4F: 20 30 F0     	JSR	HEXIN
  1379 00:EB52: 8D 41 DF     	STA	CKSUM
  1380 00:EB55: 8D 11 DF     	STA	CNT		; Length
  1381                        
  1382 00:EB58: 20 30 F0     	JSR	HEXIN
  1383 00:EB5B: 8D 1D DF     	STA	DMPPT+1		; Address H
  1384 00:EB5E: 18           	CLC
  1385 00:EB5F: 6D 41 DF     	ADC	CKSUM
  1386 00:EB62: 8D 41 DF     	STA	CKSUM
  1387                        
  1388 00:EB65: 20 30 F0     	JSR	HEXIN
  1389 00:EB68: 8D 1C DF     	STA	DMPPT		; Address L
  1390 00:EB6B: 18           	CLC
  1391 00:EB6C: 6D 41 DF     	ADC	CKSUM
  1392 00:EB6F: 8D 41 DF     	STA	CKSUM
  1393                        
  1394                        	;; Add offset
  1395 00:EB72: AD 1C DF     	LDA	DMPPT
  1396 00:EB75: 18           	CLC
  1397 00:EB76: 6D 0F DF     	ADC	PT1
  1398 00:EB79: 8D 1C DF     	STA	DMPPT
  1399 00:EB7C: AD 1D DF     	LDA	DMPPT+1
  1400 00:EB7F: 6D 10 DF     	ADC	PT1+1
  1401 00:EB82: 8D 1D DF     	STA	DMPPT+1
  1402 00:EB85: A0 00        	LDY	#0
  1403                        	
  1404 00:EB87: 20 30 F0     	JSR	HEXIN
  1405 00:EB8A: 8D 3D DF     	STA	RECTYP		; Record Type
  1406 00:EB8D: 18           	CLC
  1407 00:EB8E: 6D 41 DF     	ADC	CKSUM
  1408 00:EB91: 8D 41 DF     	STA	CKSUM
  1409                        
  1410 00:EB94: AD 11 DF     	LDA	CNT
  1411 00:EB97: F0 1C        	BEQ	LHI3
  1412                        LHI1
  1413 00:EB99: 20 30 F0     	JSR	HEXIN
  1414 00:EB9C: 48           	PHA
  1415 00:EB9D: 18           	CLC
  1416 00:EB9E: 6D 41 DF     	ADC	CKSUM
  1417 00:EBA1: 8D 41 DF     	STA	CKSUM
  1418                        
  1419 00:EBA4: AD 3D DF     	LDA	RECTYP
  1420 00:EBA7: D0 06        	BNE	LHI2
  1421                        
  1422 00:EBA9: 68           	PLA
  1423                        ;	STA	(DMPPT),Y
  1424 00:EBAA: 20 C9 EF     	jsr	sta_dmppt
  1425                        	
  1426 00:EBAD: C8           	INY
  1427 00:EBAE: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1428                        LHI2
  1429 00:EBAF: 68           	PLA
  1430 00:EBB0: CE 11 DF     	DEC	CNT
  1431 00:EBB3: D0 E4        	BNE	LHI1
  1432                        LHI3
  1433 00:EBB5: 20 30 F0     	JSR	HEXIN
  1434 00:EBB8: 18           	CLC
  1435 00:EBB9: 6D 41 DF     	ADC	CKSUM
  1436 00:EBBC: D0 08        	BNE	LHIE		; Checksum error
  1437 00:EBBE: AD 3D DF     	LDA	RECTYP
  1438                        ;	BEQ	LH3
  1439 00:EBC1: D0 10        	bne	LH3_1
  1440 00:EBC3: 4C 49 EB     	jmp	LH3
  1441                        
  1442                        LHIE
  1443 00:EBC6: A9 7B        	LDA	#$FF&IHEMSG
  1444 00:EBC8: 8D 0D DF     	STA	PT0
  1445 00:EBCB: A9 F2        	LDA	#IHEMSG>>8
  1446 00:EBCD: 8D 0E DF     	STA	PT0+1
  1447 00:EBD0: 20 FD EF     	JSR	STROUT
  1448                        LH3_1
  1449 00:EBD3: 4C 94 E0     	JMP	WSTART
  1450                        
  1451                        LHS0
  1452 00:EBD6: A9 2E        	lda	#'.'
  1453 00:EBD8: 20 7D F3     	jsr	CONOUT
  1454                        
  1455 00:EBDB: 20 6B F3     	JSR	CONIN
  1456 00:EBDE: 8D 3D DF     	STA	RECTYP		; Record Type
  1457                        
  1458 00:EBE1: 20 30 F0     	JSR	HEXIN
  1459 00:EBE4: 8D 11 DF     	STA	CNT		; (CNT) = Length+3
  1460 00:EBE7: 8D 41 DF     	STA	CKSUM
  1461                        
  1462 00:EBEA: 20 30 F0     	JSR	HEXIN
  1463 00:EBED: 8D 1D DF     	STA	DMPPT+1		; Address H
  1464 00:EBF0: 18           	CLC
  1465 00:EBF1: 6D 41 DF     	ADC	CKSUM
  1466 00:EBF4: 8D 41 DF     	STA	CKSUM
  1467                        	
  1468 00:EBF7: 20 30 F0     	JSR	HEXIN
  1469 00:EBFA: 8D 1C DF     	STA	DMPPT		; Address L
  1470 00:EBFD: 18           	CLC
  1471 00:EBFE: 6D 41 DF     	ADC	CKSUM
  1472 00:EC01: 8D 41 DF     	STA	CKSUM
  1473                        
  1474                        	;; Add offset
  1475 00:EC04: AD 1C DF     	LDA	DMPPT
  1476 00:EC07: 18           	CLC
  1477 00:EC08: 6D 0F DF     	ADC	PT1
  1478 00:EC0B: 8D 1C DF     	STA	DMPPT
  1479 00:EC0E: AD 1D DF     	LDA	DMPPT+1
  1480 00:EC11: 6D 10 DF     	ADC	PT1+1
  1481 00:EC14: 8D 1D DF     	STA	DMPPT+1
  1482 00:EC17: A0 00        	LDY	#0
  1483                        
  1484 00:EC19: CE 11 DF     	DEC	CNT
  1485 00:EC1C: CE 11 DF     	DEC	CNT
  1486 00:EC1F: CE 11 DF     	DEC	CNT
  1487 00:EC22: F0 1E        	BEQ	LHS3
  1488                        LHS1
  1489 00:EC24: 20 30 F0     	JSR	HEXIN
  1490 00:EC27: 48           	PHA
  1491 00:EC28: 18           	CLC
  1492 00:EC29: 6D 41 DF     	ADC	CKSUM
  1493 00:EC2C: 8D 41 DF     	STA	CKSUM		; Checksum
  1494                        
  1495 00:EC2F: AD 3D DF     	LDA	RECTYP
  1496 00:EC32: C9 31        	CMP	#'1'
  1497 00:EC34: D0 06        	BNE	LHS2
  1498                        
  1499 00:EC36: 68           	PLA
  1500                        ;	STA	(DMPPT),Y
  1501 00:EC37: 20 C9 EF     	jsr	sta_dmppt
  1502                        
  1503 00:EC3A: C8           	INY
  1504 00:EC3B: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1505                        LHS2
  1506 00:EC3C: 68           	PLA
  1507 00:EC3D: CE 11 DF     	DEC	CNT
  1508 00:EC40: D0 E2        	BNE	LHS1
  1509                        LHS3
  1510 00:EC42: 20 30 F0     	JSR	HEXIN
  1511 00:EC45: 18           	CLC
  1512 00:EC46: 6D 41 DF     	ADC	CKSUM
  1513 00:EC49: C9 FF        	CMP	#$FF
  1514 00:EC4B: D0 0A        	BNE	LHSE		; Checksum error
  1515                        
  1516 00:EC4D: AD 3D DF     	LDA	RECTYP
  1517 00:EC50: C9 39        	CMP	#'9'
  1518 00:EC52: F0 10        	BEQ	LHSR
  1519 00:EC54: 4C 49 EB     	JMP	LH3
  1520                        LHSE
  1521 00:EC57: A9 88        	LDA	#$FF&SHEMSG
  1522 00:EC59: 8D 0D DF     	STA	PT0
  1523 00:EC5C: A9 F2        	LDA	#SHEMSG>>8
  1524 00:EC5E: 8D 0E DF     	STA	PT0+1
  1525 00:EC61: 20 FD EF     	JSR	STROUT
  1526                        LHSR	
  1527 00:EC64: 4C 94 E0     	JMP	WSTART
  1528                        
  1529                        ;;;
  1530                        ;;; Register
  1531                        ;;;
  1532                        REG
  1533 00:EC67: E8           	INX
  1534 00:EC68: 20 B2 F0     	JSR	SKIPSP
  1535 00:EC6B: 20 BE F0     	JSR	UPPER
  1536 00:EC6E: C9 00        	CMP	#0
  1537 00:EC70: D0 06        	BNE	RG0
  1538 00:EC72: 20 88 ED     	JSR	RDUMP
  1539 00:EC75: 4C 94 E0     	JMP	WSTART
  1540                        RG0
  1541 00:EC78: A0 FE        	LDY	#$FF&RNTAB
  1542 00:EC7A: 8C 0F DF     	STY	PT1
  1543 00:EC7D: A0 F2        	LDY	#RNTAB>>8
  1544 00:EC7F: 8C 10 DF     	STY	PT1+1
  1545 00:EC82: A0 00        	LDY	#0
  1546                        RG1
  1547                        ;	CMP	(PT1),Y
  1548 00:EC84: 48           	pha
  1549 00:EC85: AD 0F DF     	lda	PT1
  1550 00:EC88: 8D 93 EC     	sta	opr16
  1551 00:EC8B: AD 10 DF     	lda	PT1+1
  1552 00:EC8E: 8D 94 EC     	sta	opr16+1
  1553 00:EC91: 68           	pla
  1554 00:EC92: D9           	db	$D9		; CMP $xxxx,y
  1555 00:EC93: 00 00        opr16	dw	0		; operand Absolute Indexed Y
  1556                        
  1557 00:EC95: F0 14        	BEQ	RG2
  1558 00:EC97: C8           	INY
  1559 00:EC98: 48           	PHA
  1560                        
  1561                        ;	LDA	(PT1),Y
  1562 00:EC99: 20 87 EF     	jsr	lda_pt1
  1563                        
  1564 00:EC9C: F0 09        	BEQ	RGE
  1565 00:EC9E: 68           	PLA
  1566 00:EC9F: C8           	INY
  1567 00:ECA0: C8           	INY
  1568 00:ECA1: C8           	INY
  1569 00:ECA2: C8           	INY
  1570 00:ECA3: C8           	INY
  1571 00:ECA4: 4C 84 EC     	JMP	RG1
  1572                        RGE
  1573 00:ECA7: 68           	PLA
  1574                        RGE0_0
  1575 00:ECA8: 4C FD E0     	JMP	ERR
  1576                        RG2
  1577 00:ECAB: C8           	INY
  1578                        
  1579                        ;	LDA	(PT1),Y
  1580 00:ECAC: 20 87 EF     	jsr	lda_pt1
  1581                        
  1582 00:ECAF: C9 80        	CMP	#$80
  1583 00:ECB1: D0 20        	BNE	RG3
  1584                        	;; Next table
  1585 00:ECB3: C8           	INY
  1586                        
  1587                        ;	LDA	(PT1),Y
  1588 00:ECB4: 20 87 EF     	jsr	lda_pt1
  1589                        
  1590 00:ECB7: 8D 11 DF     	STA	CNT		; Temporary
  1591 00:ECBA: C8           	INY
  1592                        
  1593                        ;	LDA	(PT1),Y
  1594 00:ECBB: 20 87 EF     	jsr	lda_pt1
  1595                        
  1596 00:ECBE: 8D 10 DF     	STA	PT1+1
  1597 00:ECC1: AD 11 DF     	LDA	CNT
  1598 00:ECC4: 8D 0F DF     	STA	PT1
  1599 00:ECC7: A0 00        	LDY	#0
  1600 00:ECC9: E8           	INX
  1601 00:ECCA: BD 25 DF     	LDA	INBUF,X
  1602 00:ECCD: 20 BE F0     	JSR	UPPER
  1603 00:ECD0: 4C 84 EC     	JMP	RG1
  1604                        RG3
  1605 00:ECD3: C9 00        	CMP	#0
  1606 00:ECD5: F0 D1        	BEQ	RGE0_0
  1607                        
  1608 00:ECD7: C8           	INY			; +2
  1609                        
  1610                        ;	LDA	(PT1),Y
  1611 00:ECD8: 20 87 EF     	jsr	lda_pt1
  1612                        
  1613                        ;	TAX
  1614                        	; save hit register address
  1615 00:ECDB: 8D 5E DF     	sta	hit_reg
  1616 00:ECDE: C8           	INY
  1617 00:ECDF: 20 87 EF     	jsr	lda_pt1
  1618 00:ECE2: 8D 5F DF     	sta	hit_reg+1
  1619                        
  1620 00:ECE5: C8           	INY			; +4
  1621                        ;	LDA	(PT1),Y
  1622 00:ECE6: 20 87 EF     	jsr	lda_pt1
  1623                        
  1624 00:ECE9: 8D 0D DF     	STA	PT0
  1625 00:ECEC: C8           	INY
  1626                        
  1627                        ;	LDA	(PT1),Y
  1628 00:ECED: 20 87 EF     	jsr	lda_pt1
  1629                        
  1630 00:ECF0: 8D 0E DF     	STA	PT0+1
  1631 00:ECF3: 8C 11 DF     	STY	CNT		; Save Y (STROUT destroys Y)
  1632 00:ECF6: 20 FD EF     	JSR	STROUT
  1633 00:ECF9: A9 3D        	LDA	#'='
  1634 00:ECFB: 20 7D F3     	JSR	CONOUT
  1635 00:ECFE: AC 11 DF     	LDY	CNT		; Restore Y
  1636 00:ED01: 88           	DEY
  1637 00:ED02: 88           	DEY
  1638 00:ED03: 88           	DEY
  1639 00:ED04: 88           	DEY
  1640                        
  1641                        ;	LDA	(PT1),Y
  1642 00:ED05: 20 87 EF     	jsr	lda_pt1
  1643                        
  1644 00:ED08: 8D 40 DF     	STA	REGSIZ
  1645 00:ED0B: C9 01        	CMP	#1
  1646 00:ED0D: D0 1A        	BNE	RG4
  1647                        
  1648                        	;; 8 bit register
  1649                        ;	LDA	0,X
  1650 00:ED0F: A2 00        	ldx	#0
  1651 00:ED11: 20 19 ED     	jsr	get_hit_r
  1652                        
  1653 00:ED14: 20 18 F0     	JSR	HEXOUT2
  1654 00:ED17: 80 1F        	bra	RG5
  1655                        
  1656                        get_hit_r
  1657 00:ED19: AD 5E DF     	lda	hit_reg
  1658 00:ED1C: 8D 26 ED     	sta	opr232
  1659 00:ED1F: AD 5F DF     	lda	hit_reg+1
  1660 00:ED22: 8D 27 ED     	sta	opr232+1
  1661 00:ED25: BD           	db	$BD		; lda $xxxx,x
  1662                        opr232
  1663 00:ED26: 00 00        	dw	0
  1664 00:ED28: 60           	rts
  1665                        
  1666                        RG4
  1667                        	;; 16 bit register
  1668                        ;	LDA	1,X
  1669 00:ED29: A2 01        	ldx	#1
  1670 00:ED2B: 20 19 ED     	jsr	get_hit_r
  1671 00:ED2E: 20 18 F0     	JSR	HEXOUT2
  1672                        
  1673                        ;	LDA	0,X
  1674 00:ED31: CA           	dex
  1675 00:ED32: 20 19 ED     	jsr	get_hit_r
  1676 00:ED35: 20 18 F0     	JSR	HEXOUT2
  1677                        RG5
  1678 00:ED38: A9 20        	LDA	#' '
  1679 00:ED3A: 20 7D F3     	JSR	CONOUT
  1680 00:ED3D: 8E 41 DF     	STX	CKSUM		; Save X (GETLIN destroys X)
  1681 00:ED40: 20 67 F0     	JSR	GETLIN
  1682 00:ED43: A2 00        	LDX	#0
  1683 00:ED45: 20 C9 F0     	JSR	RDHEX
  1684 00:ED48: AD 11 DF     	LDA	CNT
  1685 00:ED4B: F0 35        	BEQ	RGR
  1686 00:ED4D: AE 41 DF     	LDX	CKSUM		; Restore X
  1687 00:ED50: AD 40 DF     	LDA	REGSIZ
  1688 00:ED53: C9 01        	CMP	#1
  1689 00:ED55: D0 1C        	BNE	RG6
  1690                        	;; 8 bit register
  1691 00:ED57: AD 0F DF     	LDA	PT1
  1692                        ;	STA	0,X
  1693 00:ED5A: A2 00        	ldx	#0
  1694 00:ED5C: 20 61 ED     	jsr	set_hit_r
  1695 00:ED5F: 80 21        	bra	RG7
  1696                        
  1697                        set_hit_r:
  1698 00:ED61: 48           	pha
  1699 00:ED62: AD 5E DF     	lda	hit_reg
  1700 00:ED65: 8D 70 ED     	sta	opr235
  1701 00:ED68: AD 5F DF     	lda	hit_reg+1
  1702 00:ED6B: 8D 71 ED     	sta	opr235+1
  1703 00:ED6E: 68           	pla
  1704 00:ED6F: 9D           	db	$9D		; sta $xxxx,x
  1705                        opr235:
  1706 00:ED70: 00 00        	dw	0
  1707 00:ED72: 60           	rts
  1708                        
  1709                        RG6
  1710                        	;; 16 bit address
  1711 00:ED73: AD 0F DF     	LDA	PT1
  1712                        ;	STA	0,X		; (L)
  1713 00:ED76: A2 00        	ldx	#0
  1714 00:ED78: 20 61 ED     	jsr	set_hit_r
  1715                        
  1716 00:ED7B: AD 10 DF     	LDA	PT1+1
  1717 00:ED7E: E8           	inx
  1718                        ;	STA	1,X		; (H)
  1719 00:ED7F: 20 61 ED     	jsr	set_hit_r
  1720                        RG7	
  1721                        RGR	
  1722 00:ED82: 4C 94 E0     	JMP	WSTART
  1723                        	
  1724                        RGE0	
  1725 00:ED85: 4C FD E0     	JMP	ERR
  1726                        	
  1727                        ;
  1728                        ; print all registers
  1729                        ;
  1730                        RDUMP
  1731 00:ED88: A0 22        	ldy	#34
  1732 00:ED8A: A9 20        	lda	#' '
  1733                        spc_out
  1734 00:ED8C: 20 7D F3     	jsr	CONOUT
  1735 00:ED8F: 88           	dey
  1736 00:ED90: D0 FA        	bne	spc_out
  1737                        
  1738 00:ED92: A9 F1        	LDA	#$FF&psr_bm
  1739 00:ED94: 8D 0D DF     	STA	PT0
  1740 00:ED97: A9 F2        	LDA	#psr_bm>>8
  1741 00:ED99: 8D 0E DF     	STA	PT0+1
  1742 00:ED9C: 20 FD EF     	jsr	STROUT
  1743                        
  1744 00:ED9F: A9 D4        	LDA	#$FF&RDSA	; A
  1745 00:EDA1: 8D 0D DF     	STA	PT0
  1746 00:EDA4: A9 F2        	LDA	#RDSA>>8
  1747 00:EDA6: 8D 0E DF     	STA	PT0+1
  1748 00:EDA9: 20 FD EF     	JSR	STROUT
  1749 00:EDAC: AD 1E DF     	LDA	REGA
  1750 00:EDAF: 20 18 F0     	JSR	HEXOUT2
  1751                        
  1752 00:EDB2: A9 D7        	LDA	#$FF&RDSX	; X
  1753 00:EDB4: 8D 0D DF     	STA	PT0
  1754 00:EDB7: A9 F2        	LDA	#RDSX>>8
  1755 00:EDB9: 8D 0E DF     	STA	PT0+1
  1756 00:EDBC: 20 FD EF     	JSR	STROUT
  1757 00:EDBF: AD 1F DF     	LDA	REGX
  1758 00:EDC2: 20 18 F0     	JSR	HEXOUT2
  1759                        
  1760 00:EDC5: A9 DB        	LDA	#$FF&RDSY	; Y
  1761 00:EDC7: 8D 0D DF     	STA	PT0
  1762 00:EDCA: A9 F2        	LDA	#RDSY>>8
  1763 00:EDCC: 8D 0E DF     	STA	PT0+1
  1764 00:EDCF: 20 FD EF     	JSR	STROUT
  1765 00:EDD2: AD 20 DF     	LDA	REGY
  1766 00:EDD5: 20 18 F0     	JSR	HEXOUT2
  1767                        
  1768 00:EDD8: A9 DF        	LDA	#$FF&RDSSP	; SP
  1769 00:EDDA: 8D 0D DF     	STA	PT0
  1770 00:EDDD: A9 F2        	LDA	#RDSSP>>8
  1771 00:EDDF: 8D 0E DF     	STA	PT0+1
  1772 00:EDE2: 20 FD EF     	JSR	STROUT
  1773 00:EDE5: AD 21 DF     	LDA	REGSP
  1774 00:EDE8: 20 18 F0     	JSR	HEXOUT2
  1775                        
  1776 00:EDEB: A9 E6        	LDA	#$FF&RDSPC	; PC
  1777 00:EDED: 8D 0D DF     	STA	PT0
  1778 00:EDF0: A9 F2        	LDA	#RDSPC>>8
  1779 00:EDF2: 8D 0E DF     	STA	PT0+1
  1780 00:EDF5: 20 FD EF     	JSR	STROUT
  1781 00:EDF8: AD 23 DF     	LDA	REGPC+1		; PC(H)
  1782 00:EDFB: 20 18 F0     	JSR	HEXOUT2
  1783 00:EDFE: AD 22 DF     	LDA	REGPC		; PC(L)
  1784 00:EE01: 20 18 F0     	JSR	HEXOUT2
  1785                        
  1786 00:EE04: A9 EB        	LDA	#$FF&RDSPSR	; PSR
  1787 00:EE06: 8D 0D DF     	STA	PT0
  1788 00:EE09: A9 F2        	LDA	#RDSPSR>>8
  1789 00:EE0B: 8D 0E DF     	STA	PT0+1
  1790 00:EE0E: 20 FD EF     	JSR	STROUT
  1791                        
  1792 00:EE11: A0 08        	LDY	#8
  1793 00:EE13: AD 24 DF     	LDA	REGPSR
  1794                        	
  1795                        psr_bloop
  1796 00:EE16: 0A           	asl	a
  1797 00:EE17: 90 0D        	bcc	set_31
  1798 00:EE19: AA           	tax			; save
  1799 00:EE1A: A9 31        	lda	#'1'
  1800 00:EE1C: 20 7D F3     	jsr	CONOUT
  1801                        set_30
  1802 00:EE1F: 8A           	txa
  1803 00:EE20: 88           	dey
  1804 00:EE21: D0 F3        	bne	psr_bloop
  1805 00:EE23: 4C 5D F0     	JMP	CRLF
  1806                        
  1807                        set_31
  1808 00:EE26: AA           	tax			; save
  1809 00:EE27: A9 30        	lda	#'0'
  1810 00:EE29: 20 7D F3     	jsr	CONOUT
  1811 00:EE2C: 80 F1        	bra	set_30
  1812                        
  1813                        ;
  1814                        ; command help
  1815                        ;
  1816                        prt_help:
  1817 00:EE2E: E8           	INX
  1818 00:EE2F: 20 B2 F0     	JSR	SKIPSP
  1819 00:EE32: BD 25 DF     	LDA	INBUF,X
  1820 00:EE35: F0 03        	BEQ	ph_1	; jmp if string exist
  1821 00:EE37: 4C FD E0     	JMP	ERR
  1822                        ph_1
  1823                        	; must strings <= 255 : Y = 8 bit
  1824                        
  1825 00:EE3A: A9 57        	LDA	#$FF&hlp_meg1
  1826 00:EE3C: 8D 0D DF     	STA	PT0
  1827 00:EE3F: A9 EE        	LDA	#hlp_meg1>>8
  1828 00:EE41: 8D 0E DF     	STA	PT0+1
  1829 00:EE44: 20 FD EF     	JSR	STROUT
  1830                        
  1831 00:EE47: A9 1B        	LDA	#$FF&hlp_meg2
  1832 00:EE49: 8D 0D DF     	STA	PT0
  1833 00:EE4C: A9 EF        	LDA	#hlp_meg2>>8
  1834 00:EE4E: 8D 0E DF     	STA	PT0+1
  1835 00:EE51: 20 FD EF     	JSR	STROUT
  1836 00:EE54: 4C 94 E0     	JMP	WSTART
  1837                        
  1838                        hlp_meg1
  1839 00:EE57: 2D 2D 2D 2D  	db	"--------     Command Summary     --------",CR,LF
       00:EE5B: 2D 2D 2D 2D 
       00:EE5F: 20 20 20 20 
       00:EE63: 20 43 6F 6D 
       00:EE67: 6D 61 6E 64 
       00:EE6B: 20 53 75 6D 
       00:EE6F: 6D 61 72 79 
       00:EE73: 20 20 20 20 
       00:EE77: 20 2D 2D 2D 
       00:EE7B: 2D 2D 2D 2D 
       00:EE7F: 2D 0D 0A 
  1840 00:EE82: 3F 20 20 3A  	db	"?  : Command Summary", CR, LF
       00:EE86: 20 43 6F 6D 
       00:EE8A: 6D 61 6E 64 
       00:EE8E: 20 53 75 6D 
       00:EE92: 6D 61 72 79 
       00:EE96: 0D 0A 
  1841 00:EE98: 44 20 20 5B  	db	"D  [start addr][, end addr] : Dump Memory", CR, LF
       00:EE9C: 73 74 61 72 
       00:EEA0: 74 20 61 64 
       00:EEA4: 64 72 5D 5B 
       00:EEA8: 2C 20 65 6E 
       00:EEAC: 64 20 61 64 
       00:EEB0: 64 72 5D 20 
       00:EEB4: 3A 20 44 75 
       00:EEB8: 6D 70 20 4D 
       00:EEBC: 65 6D 6F 72 
       00:EEC0: 79 0D 0A 
  1842 00:EEC3: 44 49 20 5B  	db	"DI [start addr][, end addr] : Disassembler", CR, LF
       00:EEC7: 73 74 61 72 
       00:EECB: 74 20 61 64 
       00:EECF: 64 72 5D 5B 
       00:EED3: 2C 20 65 6E 
       00:EED7: 64 20 61 64 
       00:EEDB: 64 72 5D 20 
       00:EEDF: 3A 20 44 69 
       00:EEE3: 73 61 73 73 
       00:EEE7: 65 6D 62 6C 
       00:EEEB: 65 72 0D 0A 
  1843 00:EEEF: 47 20 20 5B  	db	"G  [start addr][, end addr] : Go and Stop", CR, LF,0
       00:EEF3: 73 74 61 72 
       00:EEF7: 74 20 61 64 
       00:EEFB: 64 72 5D 5B 
       00:EEFF: 2C 20 65 6E 
       00:EF03: 64 20 61 64 
       00:EF07: 64 72 5D 20 
       00:EF0B: 3A 20 47 6F 
       00:EF0F: 20 61 6E 64 
       00:EF13: 20 53 74 6F 
       00:EF17: 70 0D 0A 00 
  1844                        hlp_meg2
  1845 00:EF1B: 4C 20 20 5B  	db	"L  [offset] : Load HexFile", CR, LF
       00:EF1F: 6F 66 66 73 
       00:EF23: 65 74 5D 20 
       00:EF27: 3A 20 4C 6F 
       00:EF2B: 61 64 20 48 
       00:EF2F: 65 78 46 69 
       00:EF33: 6C 65 0D 0A 
  1846 00:EF37: 52 20 20 5B  	db	"R  [register] : Show or Set register", CR, LF
       00:EF3B: 72 65 67 69 
       00:EF3F: 73 74 65 72 
       00:EF43: 5D 20 3A 20 
       00:EF47: 53 68 6F 77 
       00:EF4B: 20 6F 72 20 
       00:EF4F: 53 65 74 20 
       00:EF53: 72 65 67 69 
       00:EF57: 73 74 65 72 
       00:EF5B: 0D 0A 
  1847 00:EF5D: 53 20 20 5B  	db	"S  [addr] : Set Memory", CR, LF
       00:EF61: 61 64 64 72 
       00:EF65: 5D 20 3A 20 
       00:EF69: 53 65 74 20 
       00:EF6D: 4D 65 6D 6F 
       00:EF71: 72 79 0D 0A 
  1848 00:EF75: 42 59 45 20  	db	"BYE : Terminate",CR,LF,0
       00:EF79: 3A 20 54 65 
       00:EF7D: 72 6D 69 6E 
       00:EF81: 61 74 65 0D 
       00:EF85: 0A 00 
  1849                        ;;;
  1850                        ;;; Other support routines
  1851                        ;;;
  1852                        
  1853                        ;-----------------------------------------------------------
  1854                        ; alternative Direct Page Indirect Indexed, Y
  1855                        ;
  1856                        lda_pt1:
  1857 00:EF87: AD 0F DF     	lda	PT1
  1858 00:EF8A: 8D 94 EF     	sta	lda_pt2
  1859 00:EF8D: AD 10 DF     	lda	PT1+1
  1860 00:EF90: 8D 95 EF     	sta	lda_pt2+1
  1861 00:EF93: B9           	db	$B9		; LDA $xxxx,y
  1862                        lda_pt2:
  1863 00:EF94: 00 00        	dw	0		; operand Absolute Indexed Y
  1864 00:EF96: 60           	rts
  1865                        
  1866                        lda_scan:
  1867 00:EF97: AD 18 DF     	lda	scan
  1868 00:EF9A: 8D A4 EF     	sta	lda_scan1
  1869 00:EF9D: AD 19 DF     	lda	scan+1
  1870 00:EFA0: 8D A5 EF     	sta	lda_scan1+1
  1871 00:EFA3: B9           	db	$B9		; LDA $xxxx,y
  1872                        lda_scan1:
  1873 00:EFA4: 00 00        	dw	0		; operand Absolute Indexed Y
  1874 00:EFA6: 60           	rts
  1875                        
  1876                        lda_oper:
  1877 00:EFA7: AD 16 DF     	lda	oper
  1878 00:EFAA: 8D B4 EF     	sta	lda_oper1
  1879 00:EFAD: AD 17 DF     	lda	oper+1
  1880 00:EFB0: 8D B5 EF     	sta	lda_oper1+1
  1881 00:EFB3: B9           	db	$B9		; LDA $xxxx,y
  1882                        lda_oper1:
  1883 00:EFB4: 00 00        	dw	0		; operand Absolute Indexed Y
  1884 00:EFB6: 60           	rts
  1885                        
  1886                        sta_pt1:
  1887 00:EFB7: 48           	pha
  1888 00:EFB8: AD 0F DF     	lda	PT1
  1889 00:EFBB: 8D C6 EF     	sta	sta_pt2
  1890 00:EFBE: AD 10 DF     	lda	PT1+1
  1891 00:EFC1: 8D C7 EF     	sta	sta_pt2+1
  1892 00:EFC4: 68           	pla
  1893 00:EFC5: 99           	db	$99		; STA $xxxx,y
  1894                        sta_pt2:
  1895 00:EFC6: 00 00        	dw	0		; operand Absolute Indexed Y
  1896 00:EFC8: 60           	rts
  1897                        
  1898                        sta_dmppt:
  1899 00:EFC9: 48           	pha
  1900 00:EFCA: AD 1C DF     	lda	DMPPT
  1901 00:EFCD: 8D D8 EF     	sta	sta_dmppt1
  1902 00:EFD0: AD 1D DF     	lda	DMPPT+1
  1903 00:EFD3: 8D D9 EF     	sta	sta_dmppt1+1
  1904 00:EFD6: 68           	PLA
  1905 00:EFD7: 99           	db	$99		; STA $xxxx,y
  1906                        sta_dmppt1:
  1907 00:EFD8: 00 00        	dw	0		; operand Absolute Indexed Y
  1908 00:EFDA: 60           	rts
  1909                        
  1910                        sta_sav_adr:
  1911 00:EFDB: 48           	pha
  1912 00:EFDC: AD 14 DF     	lda	sav_adr
  1913 00:EFDF: 8D EA EF     	sta	opr25
  1914 00:EFE2: AD 15 DF     	lda	sav_adr+1
  1915 00:EFE5: 8D EB EF     	sta	opr25+1
  1916 00:EFE8: 68           	pla
  1917 00:EFE9: 99           	db	$99		; STA $xxxx,y
  1918 00:EFEA: 00 00        opr25	dw	0		; operand Absolute Indexed Y
  1919 00:EFEC: 60           	rts
  1920                        ;------------------------------------------------------------
  1921                        ; LDA (oper)
  1922                        ; alternative Direct Page Indirect
  1923                        ;------------------------------------------------------------
  1924                        lda_d_oper:
  1925 00:EFED: AD 16 DF     	lda	oper
  1926 00:EFF0: 8D FA EF     	sta	opr2_2
  1927 00:EFF3: AD 17 DF     	lda	oper+1
  1928 00:EFF6: 8D FB EF     	sta	opr2_2+1
  1929 00:EFF9: AD           	db	$AD		; LDA $xxxx
  1930                        opr2_2
  1931 00:EFFA: 00 00        	dw	0
  1932 00:EFFC: 60           	rts
  1933                        ;------------------------------------------------------------
  1934                        
  1935                        STROUT
  1936 00:EFFD: A0 00        	LDY	#0
  1937                        STRO0
  1938                        ;	LDA	(PT0),Y
  1939 00:EFFF: AD 0D DF     	lda	PT0
  1940 00:F002: 8D 0C F0     	sta	opr24
  1941 00:F005: AD 0E DF     	lda	PT0+1
  1942 00:F008: 8D 0D F0     	sta	opr24+1
  1943 00:F00B: B9           	db	$B9		; LDA $xxxx,y
  1944 00:F00C: 00 00        opr24	dw	0		; operand Absolute Indexed Y
  1945                        
  1946 00:F00E: F0 07        	BEQ	STROE
  1947 00:F010: 20 7D F3     	JSR	CONOUT
  1948 00:F013: C8           	INY
  1949 00:F014: 4C FF EF     	JMP	STRO0
  1950                        STROE
  1951 00:F017: 60           	RTS
  1952                        
  1953                        HEXOUT2
  1954 00:F018: 48           	PHA
  1955 00:F019: 4A           	LSR	A
  1956 00:F01A: 4A           	LSR	A
  1957 00:F01B: 4A           	LSR	A
  1958 00:F01C: 4A           	LSR	A
  1959 00:F01D: 20 21 F0     	JSR	HEXOUT1
  1960 00:F020: 68           	PLA
  1961                        HEXOUT1
  1962 00:F021: 29 0F        	AND	#$0F
  1963 00:F023: 18           	CLC
  1964 00:F024: 69 30        	ADC	#'0'
  1965 00:F026: C9 3A        	CMP	#'9'+1
  1966 00:F028: 90 03        	BCC	HEXOUTE
  1967 00:F02A: 18           	CLC
  1968 00:F02B: 69 07        	ADC	#'A'-'9'-1
  1969                        HEXOUTE
  1970 00:F02D: 4C 7D F3     	JMP	CONOUT
  1971                        
  1972                        HEXIN
  1973 00:F030: A9 00        	LDA	#0
  1974 00:F032: 20 39 F0     	JSR	HI0
  1975 00:F035: 0A           	ASL
  1976 00:F036: 0A           	ASL
  1977 00:F037: 0A           	ASL
  1978 00:F038: 0A           	ASL
  1979                        HI0
  1980 00:F039: 8D 42 DF     	STA	HITMP
  1981 00:F03C: 20 6B F3     	JSR	CONIN
  1982 00:F03F: 20 BE F0     	JSR	UPPER
  1983 00:F042: C9 30        	CMP	#'0'
  1984 00:F044: 90 16        	BCC	HIR
  1985 00:F046: C9 3A        	CMP	#'9'+1
  1986 00:F048: 90 0B        	BCC	HI1
  1987 00:F04A: C9 41        	CMP	#'A'
  1988 00:F04C: 90 0E        	BCC	HIR
  1989 00:F04E: C9 47        	CMP	#'F'+1
  1990 00:F050: B0 0A        	BCS	HIR
  1991 00:F052: 38           	SEC
  1992 00:F053: E9 07        	SBC	#'A'-'9'-1
  1993                        HI1
  1994 00:F055: 38           	SEC
  1995 00:F056: E9 30        	SBC	#'0'
  1996 00:F058: 18           	CLC
  1997 00:F059: 6D 42 DF     	ADC	HITMP
  1998                        HIR
  1999 00:F05C: 60           	RTS
  2000                        	
  2001                        CRLF
  2002 00:F05D: A9 0D        	LDA	#CR
  2003 00:F05F: 20 7D F3     	JSR	CONOUT
  2004 00:F062: A9 0A        	LDA	#LF
  2005 00:F064: 4C 7D F3     	JMP	CONOUT
  2006                        
  2007                        GETLIN
  2008 00:F067: A2 00        	LDX	#0
  2009                        GL0
  2010 00:F069: 20 6B F3     	JSR	CONIN
  2011 00:F06C: C9 0D        	CMP	#CR
  2012 00:F06E: F0 39        	BEQ	GLE
  2013 00:F070: C9 0A        	CMP	#LF
  2014 00:F072: F0 35        	BEQ	GLE
  2015 00:F074: C9 08        	CMP	#BS
  2016 00:F076: F0 1A        	BEQ	GLB
  2017 00:F078: C9 7F        	CMP	#DEL
  2018 00:F07A: F0 16        	BEQ	GLB
  2019 00:F07C: C9 20        	CMP	#' '
  2020 00:F07E: 90 E9        	BCC	GL0
  2021 00:F080: C9 80        	CMP	#$80
  2022 00:F082: B0 E5        	BCS	GL0
  2023 00:F084: E0 0F        	CPX	#BUFLEN-1
  2024 00:F086: B0 E1        	BCS	GL0		; Too long
  2025 00:F088: 9D 25 DF     	STA	INBUF,X
  2026 00:F08B: E8           	INX
  2027 00:F08C: 20 7D F3     	JSR	CONOUT
  2028 00:F08F: 4C 69 F0     	JMP	GL0
  2029                        GLB
  2030 00:F092: E0 00        	CPX	#0
  2031 00:F094: F0 D3        	BEQ	GL0
  2032 00:F096: CA           	DEX
  2033 00:F097: A9 08        	LDA	#BS
  2034 00:F099: 20 7D F3     	JSR	CONOUT
  2035 00:F09C: A9 20        	LDA	#' '
  2036 00:F09E: 20 7D F3     	JSR	CONOUT
  2037 00:F0A1: A9 08        	LDA	#BS
  2038 00:F0A3: 20 7D F3     	JSR	CONOUT
  2039 00:F0A6: 4C 69 F0     	JMP	GL0
  2040                        GLE
  2041 00:F0A9: 20 5D F0     	JSR	CRLF
  2042 00:F0AC: A9 00        	LDA	#0
  2043 00:F0AE: 9D 25 DF     	STA	INBUF,X
  2044 00:F0B1: 60           	RTS
  2045                        
  2046                        SKIPSP
  2047 00:F0B2: BD 25 DF     	LDA	INBUF,X
  2048 00:F0B5: C9 20        	CMP	#' '
  2049 00:F0B7: D0 04        	BNE	SSE
  2050 00:F0B9: E8           	INX
  2051 00:F0BA: 4C B2 F0     	JMP	SKIPSP
  2052                        SSE
  2053 00:F0BD: 60           	RTS
  2054                        
  2055                        UPPER
  2056 00:F0BE: C9 61        	CMP	#'a'
  2057 00:F0C0: 90 06        	BCC	UPE
  2058 00:F0C2: C9 7B        	CMP	#'z'+1
  2059 00:F0C4: B0 02        	BCS	UPE
  2060 00:F0C6: 69 E0        	ADC	#'A'-'a'
  2061                        UPE
  2062 00:F0C8: 60           	RTS
  2063                        
  2064                        RDHEX
  2065 00:F0C9: A9 00        	LDA	#0
  2066 00:F0CB: 8D 0F DF     	STA	PT1
  2067 00:F0CE: 8D 10 DF     	STA	PT1+1
  2068 00:F0D1: 8D 11 DF     	STA	CNT
  2069                        RH0
  2070 00:F0D4: BD 25 DF     	LDA	INBUF,X
  2071 00:F0D7: 20 BE F0     	JSR	UPPER
  2072 00:F0DA: C9 30        	CMP	#'0'
  2073 00:F0DC: 90 38        	BCC	RHE
  2074 00:F0DE: C9 3A        	CMP	#'9'+1
  2075 00:F0E0: 90 0B        	BCC	RH1
  2076 00:F0E2: C9 41        	CMP	#'A'
  2077 00:F0E4: 90 30        	BCC	RHE
  2078 00:F0E6: C9 47        	CMP	#'F'+1
  2079 00:F0E8: B0 2C        	BCS	RHE
  2080 00:F0EA: 38           	SEC
  2081 00:F0EB: E9 07        	SBC	#'A'-'9'-1
  2082                        RH1
  2083 00:F0ED: 38           	SEC
  2084 00:F0EE: E9 30        	SBC	#'0'
  2085 00:F0F0: 0E 0F DF     	ASL	PT1
  2086 00:F0F3: 2E 10 DF     	ROL	PT1+1
  2087 00:F0F6: 0E 0F DF     	ASL	PT1
  2088 00:F0F9: 2E 10 DF     	ROL	PT1+1
  2089 00:F0FC: 0E 0F DF     	ASL	PT1
  2090 00:F0FF: 2E 10 DF     	ROL	PT1+1
  2091 00:F102: 0E 0F DF     	ASL	PT1
  2092 00:F105: 2E 10 DF     	ROL	PT1+1
  2093 00:F108: 18           	CLC
  2094 00:F109: 6D 0F DF     	ADC	PT1
  2095 00:F10C: 8D 0F DF     	STA	PT1
  2096 00:F10F: EE 11 DF     	INC	CNT
  2097 00:F112: E8           	INX
  2098 00:F113: 4C D4 F0     	JMP	RH0
  2099                        RHE
  2100 00:F116: 60           	RTS
  2101                        
  2102                        ;;;
  2103                        ;;; Interrupt handler
  2104                        ;;;
  2105                        
  2106                        	; NMI
  2107                        NMI_VEC
  2108 00:F117: D8           	CLD
  2109 00:F118: 8D 1E DF     	STA	REGA
  2110 00:F11B: 8A           	TXA			; X
  2111 00:F11C: 8D 1F DF     	STA	REGX
  2112 00:F11F: 98           	TYA			; Y
  2113 00:F120: 8D 20 DF     	STA	REGY
  2114 00:F123: 68           	PLA			; PSR (Pushed by NMI)
  2115 00:F124: 8D 24 DF     	STA	REGPSR		; save status register
  2116 00:F127: 68           	PLA			; PC(L) (Pushed by NMI)
  2117 00:F128: 8D 22 DF     	STA	REGPC
  2118 00:F12B: 68           	PLA			; PC(H) (Pushed by NMI)
  2119 00:F12C: 8D 23 DF     	STA	REGPC+1
  2120 00:F12F: BA           	TSX			; get SP
  2121 00:F130: 8E 21 DF     	STX	REGSP
  2122                        
  2123 00:F133: A9 FF        	lda	#$ff		; NMI signal
  2124 00:F135: 8D 01 DF     	sta	UNI_CHR
  2125 00:F138: 20 88 F3     	jsr	NMI_SIG
  2126                        
  2127 00:F13B: 4C 4B EA     	jmp	G0
  2128                        
  2129                        ;	    sp->      : sp+0
  2130                        ;	  push x      : sp+1
  2131                        ;	  push a      : sp+2
  2132                        ;	  push P      : sp+3
  2133                        ;	  push PC(L)  : sp+4
  2134                        ;	  push PC(H)  : sp+5
  2135                        ;	which BRK or IRQ?
  2136                        ;	need status condhition check (SP+3)
  2137                        
  2138                        IRQBRK
  2139 00:F13E: 48           	pha
  2140 00:F13F: DA           	phx
  2141                        
  2142                        ;	php	; check B flag
  2143                        ;	pla	; this way is NG. B flag allways 1
  2144                        
  2145 00:F140: BA           	tsx
  2146 00:F141: E8           	inx			; ($100 + sp +1) : stacked X register
  2147 00:F142: E8           	inx			; ($100 + sp + 2): stacked A register
  2148 00:F143: E8           	inx			; ($100 + sp + 3): p (status register)
  2149 00:F144: BD 00 01     	lda	$100,x		; check status register
  2150                        
  2151 00:F147: 29 10        	AND	#$10		; Check B flag
  2152 00:F149: D0 03        	bne	code_brk
  2153 00:F14B: 4C 2F F2     	jmp	irq_int
  2154                        
  2155                        code_brk
  2156 00:F14E: E8           	inx			; ($100 + sp + 4): pc (L)
  2157 00:F14F: BD 00 01     	lda	$100,x		; PC(L)
  2158 00:F152: 38           	SEC
  2159 00:F153: E9 01        	SBC	#1		; Adjust to #n address (BRK #n)
  2160 00:F155: 8D 12 DF     	sta	bk_no
  2161 00:F158: E8           	inx			; ($100 + sp + 5): pc (H)
  2162 00:F159: BD 00 01     	lda	$100,x		; PC(H)
  2163 00:F15C: E9 00        	SBC	#0
  2164 00:F15E: 8D 13 DF     	sta	bk_no+1
  2165                        
  2166                        ;	lda	(bk_no)		; get command request #$xx (BRK #$xx)
  2167 00:F161: AD 12 DF     	lda	bk_no
  2168 00:F164: 8D 6E F1     	sta	bk_00
  2169 00:F167: AD 13 DF     	lda	bk_no+1
  2170 00:F16A: 8D 6F F1     	sta	bk_00+1
  2171 00:F16D: AD           	db	$AD		; lda $xxxx
  2172                        bk_00
  2173 00:F16E: 00 00        	dw	0
  2174                        
  2175 00:F170: C9 FF        	cmp	#$ff		; program end?
  2176 00:F172: D0 03        	bne	bk_n
  2177 00:F174: 4C 75 E0     	jmp	wup		; user program terminate
  2178                        bk_n
  2179 00:F177: C9 00        	cmp	#0
  2180 00:F179: F0 39        	beq	go_brk
  2181 00:F17B: C9 05        	cmp	#5
  2182 00:F17D: 10 35        	bpl	go_brk
  2183                        
  2184 00:F17F: 5A           	phy
  2185                        ;  sp->        : sp+0
  2186                        ;  push y      : sp+1
  2187                        ;  push x      : sp+2
  2188                        ;  push a      : sp+3
  2189                        ;  push P      : sp+4
  2190                        ;  push PC(L)  : sp+5
  2191                        ;  push PC(H)  : sp+6
  2192                        	
  2193 00:F180: BA           	tsx
  2194 00:F181: DA           	phx
  2195 00:F182: 7A           	ply	; sp -> y
  2196 00:F183: 20 A8 F1     	jsr	bios_call
  2197 00:F186: BA           	tsx
  2198 00:F187: E8           	inx	; Y
  2199 00:F188: E8           	inx	; x
  2200 00:F189: E8           	inx	; a
  2201 00:F18A: 9D 00 01     	sta	$100, x		; set return code
  2202 00:F18D: 7A           	ply
  2203                        
  2204 00:F18E: FA           	plx
  2205 00:F18F: 68           	pla
  2206 00:F190: 40           	rti
  2207                        
  2208                        creq_p
  2209 00:F191: 6B F3        	dw	CONIN
  2210 00:F193: 7D F3        	dw	CONOUT
  2211 00:F195: 75 F3        	dw	CONST
  2212 00:F197: 99 F1        	dw	prt_str
  2213                        ;
  2214                        ; input A : string address Low
  2215                        ;       Y : string address High
  2216                        ;
  2217                        prt_str
  2218 00:F199: 8D 0D DF     	STA	PT0
  2219 00:F19C: 88           	dey
  2220 00:F19D: 88           	dey	; Y
  2221 00:F19E: B9 00 01     	lda	$100, y		; get Y
  2222 00:F1A1: 8D 0E DF     	sta	PT0+1
  2223 00:F1A4: 20 FD EF     	jsr	STROUT
  2224 00:F1A7: 60           	rts
  2225                        
  2226                        bios_call
  2227 00:F1A8: 3A           	dec	A
  2228 00:F1A9: 0A           	asl	A		; A = A * 2
  2229 00:F1AA: AA           	tax
  2230 00:F1AB: C8           	iny	; Y
  2231 00:F1AC: C8           	iny	; X
  2232 00:F1AD: C8           	iny	; A
  2233 00:F1AE: B9 00 01     	lda	$100,y		; get input data to A
  2234 00:F1B1: 7C 91 F1     	jmp	(creq_p,x)
  2235                        
  2236                        	; BRK instruction
  2237                        go_brk
  2238 00:F1B4: FA           	plx
  2239 00:F1B5: D8           	CLD
  2240 00:F1B6: 68           	PLA			; A
  2241 00:F1B7: 8D 1E DF     	STA	REGA
  2242 00:F1BA: 8A           	TXA			; X
  2243 00:F1BB: 8D 1F DF     	STA	REGX
  2244 00:F1BE: 98           	TYA			; Y
  2245 00:F1BF: 8D 20 DF     	STA	REGY
  2246 00:F1C2: 68           	PLA			; PSR (Pushed by BRK)
  2247 00:F1C3: 8D 24 DF     	STA	REGPSR		; save status register
  2248 00:F1C6: 68           	PLA			; PC(L) (Pushed by BRK)
  2249 00:F1C7: 8D 3E DF     	sta	ILL_PC
  2250 00:F1CA: 38           	SEC
  2251 00:F1CB: E9 02        	SBC	#2		; Adjust PC to point BRK instruction
  2252 00:F1CD: 8D 22 DF     	STA	REGPC
  2253 00:F1D0: 68           	PLA			; PC(H) (Pushed by BRK)
  2254 00:F1D1: 8D 3F DF     	sta	ILL_PC+1
  2255 00:F1D4: E9 00        	SBC	#0
  2256 00:F1D6: 8D 23 DF     	STA	REGPC+1
  2257 00:F1D9: BA           	TSX			; get SP
  2258 00:F1DA: 8E 21 DF     	STX	REGSP
  2259                        
  2260                        	; check break point
  2261 00:F1DD: AD 5B DF     	lda	stp_flg
  2262 00:F1E0: F0 2E        	beq	ill_stop
  2263                        
  2264                        	; restore original code
  2265 00:F1E2: 9C 5B DF     	stz	stp_flg
  2266 00:F1E5: A0 00        	ldy	#0
  2267                        
  2268 00:F1E7: AD 5C DF     	lda	sav_dat
  2269                        ;	sta	(sav_adr),y
  2270 00:F1EA: 20 DB EF     	jsr	sta_sav_adr
  2271                        
  2272 00:F1ED: C8           	iny
  2273 00:F1EE: AD 5D DF     	lda	sav_dat+1
  2274                        
  2275                        ;	sta	(sav_adr),y
  2276 00:F1F1: 20 DB EF     	jsr	sta_sav_adr
  2277                        	
  2278 00:F1F4: AD 14 DF     	lda	sav_adr
  2279 00:F1F7: CD 22 DF     	cmp	REGPC
  2280 00:F1FA: D0 14        	bne	ill_stop
  2281                        	
  2282 00:F1FC: AD 15 DF     	lda	sav_adr+1
  2283 00:F1FF: CD 23 DF     	cmp	REGPC+1
  2284 00:F202: D0 0C        	bne	ill_stop
  2285                        
  2286 00:F204: A9 C0        	lda	#$FF&stpmsg
  2287 00:F206: 8D 0D DF     	STA	PT0
  2288 00:F209: A9 F2        	LDA	#stpmsg>>8
  2289 00:F20B: 8D 0E DF     	STA	PT0+1
  2290 00:F20E: 80 16        	bra	b_outmsg
  2291                        
  2292                        ill_stop
  2293                        	; re-adjust PC
  2294 00:F210: AD 3E DF     	lda	ILL_PC
  2295 00:F213: 8D 22 DF     	sta	REGPC
  2296 00:F216: AD 3F DF     	lda	ILL_PC+1
  2297 00:F219: 8D 23 DF     	sta	REGPC+1
  2298                        	
  2299 00:F21C: A9 A4        	LDA	#$FF&BRKMSG
  2300 00:F21E: 8D 0D DF     	STA	PT0
  2301 00:F221: A9 F2        	LDA	#BRKMSG>>8
  2302 00:F223: 8D 0E DF     	STA	PT0+1
  2303                        b_outmsg
  2304 00:F226: 20 FD EF     	JSR	STROUT
  2305 00:F229: 20 88 ED     	JSR	RDUMP
  2306 00:F22C: 4C 94 E0     	JMP	WSTART
  2307                        
  2308                        ;--------------------------------------
  2309                        ; IRQ interrupt driver
  2310                        ;--------------------------------------
  2311                        irq_int
  2312 00:F22F: FA           	plx
  2313 00:F230: D8           	CLD
  2314 00:F231: 68           	PLA			; A
  2315 00:F232: 8D 1E DF     	STA	REGA
  2316 00:F235: 8A           	TXA			; X
  2317 00:F236: 8D 1F DF     	STA	REGX
  2318 00:F239: 98           	TYA			; Y
  2319 00:F23A: 8D 20 DF     	STA	REGY
  2320 00:F23D: 68           	PLA			; PSR (Pushed by BRK)
  2321 00:F23E: 8D 24 DF     	STA	REGPSR		; save status register
  2322 00:F241: 68           	PLA			; PC(L) (Pushed by BRK)
  2323 00:F242: 8D 22 DF     	sta	REGPC
  2324 00:F245: 68           	PLA			; PC(H) (Pushed by BRK)
  2325 00:F246: 8D 23 DF     	sta	REGPC+1
  2326 00:F249: BA           	TSX			; get SP
  2327 00:F24A: 8E 21 DF     	STX	REGSP
  2328                        
  2329 00:F24D: A9 B2        	LDA	#$FF&IRQMSG
  2330 00:F24F: 8D 0D DF     	STA	PT0
  2331 00:F252: A9 F2        	LDA	#IRQMSG>>8
  2332 00:F254: 8D 0E DF     	STA	PT0+1
  2333 00:F257: 80 CD        	bra	b_outmsg
  2334                        
  2335                        ;---------- unimon message data ---------------
  2336                        OPNMSG
  2337 00:F259: 0D 0A 4D 45  	FCB	CR,LF,"MEZW65C_RAM Monitor W65C02",CR,LF,$00
       00:F25D: 5A 57 36 35 
       00:F261: 43 5F 52 41 
       00:F265: 4D 20 4D 6F 
       00:F269: 6E 69 74 6F 
       00:F26D: 72 20 57 36 
       00:F271: 35 43 30 32 
       00:F275: 0D 0A 00 
  2338                        PROMPT
  2339 00:F278: 5D 20 00     	FCB	"] ",$00
  2340                        IHEMSG
  2341 00:F27B: 45 72 72 6F  	FCB	"Error ihex",CR,LF,$00
       00:F27F: 72 20 69 68 
       00:F283: 65 78 0D 0A 
       00:F287: 00 
  2342                        
  2343                        SHEMSG
  2344 00:F288: 45 72 72 6F  	FCB	"Error srec",CR,LF,$00
       00:F28C: 72 20 73 72 
       00:F290: 65 63 0D 0A 
       00:F294: 00 
  2345                        
  2346                        ERRMSG
  2347 00:F295: 45 72 72 6F  	FCB	"Error",CR,LF,$00
       00:F299: 72 0D 0A 00 
  2348                        
  2349                        DSEP0
  2350 00:F29D: 20 3A 00     	FCB	" :",$00
  2351                        DSEP1
  2352 00:F2A0: 20 3A 20 00  	FCB	" : ",$00
  2353                        ;IHEXER
  2354                        ;        FCB	":00000001FF",CR,LF,$00
  2355                        ;SRECER
  2356                        ;        FCB	"S9030000FC",CR,LF,$00
  2357                        
  2358 00:F2A4: 44 65 74 65  BRKMSG	FCB	"Detect BRK!",CR,LF,$00
       00:F2A8: 63 74 20 42 
       00:F2AC: 52 4B 21 0D 
       00:F2B0: 0A 00 
  2359 00:F2B2: 44 65 74 65  IRQMSG	FCB	"Detect IRQ!",CR,LF,$00
       00:F2B6: 63 74 20 49 
       00:F2BA: 52 51 21 0D 
       00:F2BE: 0A 00 
  2360 00:F2C0: 53 54 4F 50  stpmsg	FCB	"STOP!(User break)",CR,LF,$00
       00:F2C4: 21 28 55 73 
       00:F2C8: 65 72 20 62 
       00:F2CC: 72 65 61 6B 
       00:F2D0: 29 0D 0A 00 
  2361                        
  2362 00:F2D4: 41 3D 00     RDSA	FCB	"A=",$00
  2363 00:F2D7: 20 58 3D 00  RDSX	FCB	" X=",$00
  2364 00:F2DB: 20 59 3D 00  RDSY	FCB	" Y=",$00
  2365 00:F2DF: 20 53 50 3D  RDSSP	FCB	" SP=01",$00
       00:F2E3: 30 31 00 
  2366 00:F2E6: 20 50 43 3D  RDSPC	FCB	" PC=",$00
       00:F2EA: 00 
  2367 00:F2EB: 20 50 53 52  RDSPSR	FCB	" PSR=",$00
       00:F2EF: 3D 00 
  2368 00:F2F1: 28 4E 56 31  psr_bm	fcb	"(NV1BDIZC)",CR,LF,0
       00:F2F5: 42 44 49 5A 
       00:F2F9: 43 29 0D 0A 
       00:F2FD: 00 
  2369                        
  2370                        RNTAB
  2371 00:F2FE: 41 01        	FCB	'A',1
  2372 00:F300: 1E DF 4C F3  	FDB	REGA,RNA
  2373 00:F304: 58 01        	FCB	'X',1
  2374 00:F306: 1F DF 4E F3  	FDB	REGX,RNX
  2375 00:F30A: 59 01        	FCB	'Y',1
  2376 00:F30C: 20 DF 50 F3  	FDB	REGY,RNY
  2377 00:F310: 53 80        	FCB	'S',$80
  2378 00:F312: 22 F3 00 00  	FDB	RNTABS,0
  2379 00:F316: 50 80        	FCB	'P',$80
  2380 00:F318: 2E F3 00 00  	FDB	RNTABP,0
  2381                        	
  2382 00:F31C: 00 00        	FCB	$00,0		; End mark
  2383 00:F31E: 00 00 00 00  	FDB	0,0
  2384                        
  2385                        RNTABS
  2386 00:F322: 50 01        	FCB	'P',1
  2387 00:F324: 21 DF 52 F3  	FDB	REGSP,RNSP
  2388                        	
  2389 00:F328: 00 00        	FCB	$00,0		; End mark
  2390 00:F32A: 00 00 00 00  	FDB	0,0
  2391                        
  2392                        RNTABP
  2393 00:F32E: 43 02        	FCB	'C',2
  2394 00:F330: 22 DF 55 F3  	FDB	REGPC,RNPC
  2395 00:F334: 53 80        	FCB	'S',$80
  2396 00:F336: 40 F3 00 00  	FDB	RNTABPS,0
  2397                        
  2398 00:F33A: 00 00        	FCB	$00,0		; End mark
  2399 00:F33C: 00 00 00 00  	FDB	0,0
  2400                        
  2401                        RNTABPS
  2402 00:F340: 52 01        	FCB	'R',1
  2403 00:F342: 24 DF 58 F3  	FDB	REGPSR,RNPSR
  2404                        
  2405 00:F346: 00 00        	FCB	$00,0		; End mark
  2406 00:F348: 00 00 00 00  	FDB	0,0
  2407                        	
  2408 00:F34C: 41 00        RNA	FCB	"A",$00
  2409 00:F34E: 58 00        RNX	FCB	"X",$00
  2410 00:F350: 59 00        RNY	FCB	"Y",$00
  2411 00:F352: 53 50 00     RNSP	FCB	"SP",$00
  2412 00:F355: 50 43 00     RNPC	FCB	"PC",$00
  2413 00:F358: 50 53 52 00  RNPSR	FCB	"PSR",$00
  2414                        	
  2415                        ;;;
  2416                        ;;;	Console Driver
  2417                        ;;;
  2418                        
  2419                        ;CONIN_REQ	EQU	0x01
  2420                        ;CONOUT_REQ	EQU	0x02
  2421                        ;CONST_REQ	EQU	0x03
  2422                        ;STROUT_REQ	equ	$04
  2423                        ;WUP_REQ	equ	$ff
  2424                        ;  ---- request command to PIC
  2425                        ; UREQ_COM = 1   ; CONIN  : return char in UNI_CHR
  2426                        ;          = 2   ; CONOUT : UNI_CHR = output char
  2427                        ;          = 3   ; CONST  : return status in UNI_CHR
  2428                        ;                       : ( 0: no key, 1 : key exist )
  2429                        ;          = 4   ; STROUT : string address = (PTRSAV, PTRSAV_SEG)
  2430                        ;          = $FF ; wakeup firmware ( NMI interrupt )
  2431                        ;
  2432                        ;UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
  2433                        ;UNI_CHR	rmb	1	; charcter (CONIN/CONOUT) or number of strings
  2434                        
  2435                        INIT
  2436                        	; clear Reqest Parameter Block
  2437 00:F35C: A9 00        	lda	#0
  2438 00:F35E: 8D 00 DF     	sta	UREQ_COM
  2439 00:F361: 8D 02 DF     	sta	CREQ_COM
  2440 00:F364: 8D 0B DF     	sta	bank
  2441 00:F367: 8D 0C DF     	sta	reserve
  2442 00:F36A: 60           	RTS
  2443                        
  2444                        ;
  2445                        ; request CONIN, CONST CONOUT to PIC18F47QXX
  2446                        ;
  2447                        
  2448                        CONIN
  2449 00:F36B: A9 01        	lda	#CONIN_REQ
  2450                        
  2451                        wup_pic
  2452 00:F36D: 8D 00 DF     	sta	UREQ_COM
  2453                        ;wait_again
  2454 00:F370: CB           	wai			; RDY = 0, wait /IRQ detect	
  2455                        	
  2456 00:F371: AD 01 DF     	lda	UNI_CHR
  2457 00:F374: 60           	RTS
  2458                        
  2459                        CONST
  2460 00:F375: A9 03        	lda	#CONST_REQ
  2461 00:F377: 20 6D F3     	jsr	wup_pic
  2462 00:F37A: 29 01        	AND	#$01
  2463 00:F37C: 60           	RTS
  2464                        
  2465                        CONOUT
  2466 00:F37D: 48           	pha
  2467 00:F37E: 8D 01 DF     	sta	UNI_CHR		; set char
  2468 00:F381: A9 02        	lda	#CONOUT_REQ
  2469 00:F383: 20 6D F3     	jsr	wup_pic
  2470 00:F386: 68           	pla
  2471 00:F387: 60           	rts
  2472                        
  2473                        NMI_SIG
  2474 00:F388: A9 FF        	lda	#WUP_REQ
  2475 00:F38A: 80 E1        	bra	wup_pic
  2476                        
  2477                        	;;
  2478                        	;; Vector area
  2479                        	;; 
  2480                        
  2481                        	ORG	$FFFA
  2482                        
  2483 00:FFFA: 17 F1        	FDB	NMI_VEC		; NMI
  2484                        
  2485 00:FFFC: 00 E0        	FDB	CSTART		; RESET
  2486                        
  2487 00:FFFE: 3E F1        	FDB	IRQBRK		; IRQ/BRK
  2488                        
  2489                        	END


      Lines assembled: 2489
      Errors: 0
