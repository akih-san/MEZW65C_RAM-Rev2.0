     1                        ;;;
     2                        ;;; Universal Monitor 6502 Copyright (C) 2019 Haruo Asano
     3                        ;;; https://electrelic.com/electrelic/node/1317
     4                        ;;;
     5                        ;;; -- original disassemble sorce code --
     6                        ;:; https://github.com/zuiko21/minimOS/blob/master/OS/shell/miniMoDA.s
     7                        ;;;
     8                        ;;;    Monitor-debugger-assembler shell for minimOS!
     9                        ;;;    v0.6rc3
    10                        ;;;    last modified 20220104-1122
    11                        ;;;    (c) 2016-2022 Carlos J. Santisteban
    12                        ;;;
    13                        ;;; This program is based on Universal Monitor 6502
    14                        ;;; Programed by Akihito Honda. 2024.10
    15                        ;;;
    16                        ;;; Thanks all.
    17                        ;;;
    18                        
    19                        	pl	0
    20                        	pw      132
    21                        	chip    65C02
    22                        ;                inclist on
    23                        ;;;
    24                        ;;; MEZW65C_RAM Monitor for WDC65C02
    25                        ;;;
    26                        
    27                        ;;;
    28                        ;;; Memory
    29                        ;;;
    30                        
    31                        ;PRG_B	EQU	$ED00
    32             0000EB00   PRG_B	EQU	$EB00
    33             0000E900   WORK_B	equ	PRG_B-$200	; $EB00
    34             00000200   USER_M	equ	$200
    35             00000080   COUT_SIZE	equ $80		; 128byte console output buffer
    36             00000080   CIN_SIZE	equ COUT_SIZE
    37                        
    38             00000018   ZERO_B	EQU	$0018		; Must fit in ZERO page
    39                        
    40             0000013F   STACK	EQU	$013F
    41             000001FF   USER_SP	equ	$01FF
    42                        
    43             00000010   BUFLEN	EQU	16		; Buffer length ( 16 or above )
    44             00000000   cpu_id	equ	$00		; memory address $0000 is written CPU ID by PIC
    45                        
    46                        ; PIC function code
    47                        
    48             00000001   CONIN_REQ	EQU	$01
    49             00000002   CONOUT_REQ	EQU	$02
    50             00000003   CONST_REQ	EQU	$03
    51             00000004   STROUT_REQ	equ	$04
    52             00000007   STRIN_REQ	equ	$07
    53             000000FF   WUP_REQ		equ	$ff
    54                        
    55                        ;;; Constants
    56             0000000D   CR	EQU	$0D
    57             0000000A   LF	EQU	$0A
    58             00000008   BS	EQU	$08
    59             00000009   TAB	EQU	$09
    60             0000007F   DEL	EQU	$7F
    61             00000000   NULL	EQU	$00
    62                        
    63                        	.if 0
    64                        ;--------------------------------------
    65                        ;ZERO page
    66                        ;--------------------------------------
    67                        	;;
    68                        	;; Work Area
    69                        	;;
    70                        
    71                        	.page0
    72                        	ORG	ZERO_B
    73                        
    74                        ; PIC18F47QXX I/F
    75                        UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
    76                        UNI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
    77                        CREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
    78                        CBI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
    79                        disk_drive	rmb	1	;
    80                        disk_track	rmb	2	;
    81                        disk_sector	rmb	2	;
    82                        data_adr	rmb	2	;
    83                        bank		rmb	1	;
    84                        reserve		rmb	1	;
    85                        irq_tgl		rmb	1
    86                        ZCIN_BP		rmb	2	; Indirect Index conin buffer pointer
    87                        ZCOUT_BP	rmb	2	; Indirect Index conout buffer pointer
    88                        
    89                        PT0	RMB	2		; Generic Pointer 0
    90                        PT1	RMB	2		; Generic Pointer 1
    91                        CNT	RMB	1		; Generic Counter
    92                        bk_no	rmb	2
    93                        ;Go command variable
    94                        sav_adr	rmb	2
    95                        
    96                        oper		RMB	2
    97                        scan		RMB	2
    98                        
    99                        SADDR	RMB	2		; Set address
   100                        DMPPT	RMB	2
   101                        reg_tbls
   102                        REGA	RMB	1		; Accumulator A
   103                        REGX	RMB	1		; Index register X
   104                        REGY	RMB	1		; Index register Y
   105                        REGSP	RMB	1		; Stack pointer SP
   106                        REGPC	RMB	2		; Program counter PC
   107                        REGPSR	RMB	1		; Processor status register PSR
   108                        reg_tble
   109                        reg_size	equ reg_tble-reg_tbls
   110                        	.endif
   111                        
   112                        	.data
   113                        	org	WORK_B
   114                        ; PIC18F47QXX I/F
   115 00:E900:              UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
   116 00:E901:              UNI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
   117 00:E902:              CREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
   118 00:E903:              CBI_CHR		rmb	1	; charcter (CONIN/CONOUT) or number of strings
   119 00:E904:              disk_drive	rmb	1	;
   120 00:E905:              disk_track	rmb	2	;
   121 00:E907:              disk_sector	rmb	2	;
   122 00:E909:              data_adr	rmb	2	;
   123 00:E90B:              bank		rmb	1	;
   124 00:E90C:              reserve		rmb	1	;
   125 00:E90D:              irq_tgl		rmb	1
   126 00:E90E:              ZCIN_BP		rmb	2	; Indirect Index conin buffer pointer
   127 00:E910:              ZCOUT_BP	rmb	2	; Indirect Index conout buffer pointer
   128                        
   129 00:E912:              PT0	RMB	2		; Generic Pointer 0
   130 00:E914:              PT1	RMB	2		; Generic Pointer 1
   131 00:E916:              CNT	RMB	1		; Generic Counter
   132 00:E917:              bk_no	rmb	2
   133                        ;Go command variable
   134 00:E919:              sav_adr	rmb	2
   135                        
   136 00:E91B:              oper		RMB	2
   137 00:E91D:              scan		RMB	2
   138                        
   139 00:E91F:              SADDR	RMB	2		; Set address
   140 00:E921:              DMPPT	RMB	2
   141                        reg_tbls
   142 00:E923:              REGA	RMB	1		; Accumulator A
   143 00:E924:              REGX	RMB	1		; Index register X
   144 00:E925:              REGY	RMB	1		; Index register Y
   145 00:E926:              REGSP	RMB	1		; Stack pointer SP
   146 00:E927:              REGPC	RMB	2		; Program counter PC
   147 00:E929:              REGPSR	RMB	1		; Processor status register PSR
   148                        reg_tble
   149             00000007   reg_size	equ reg_tble-reg_tbls
   150                        
   151                        
   152 00:E92A:              COUT_BUF	rmb	COUT_SIZE	; 128byte console output buffer
   153 00:E9AA:              CIN_BUF		rmb	CIN_SIZE
   154 00:EA2A:              CIN_CT		rmb	1		; CIN buffer counter
   155 00:EA2B:              CIN_RP		rmb	1		; CIN buffer Read pointer
   156 00:EA2C:              CIN_WP		rmb	1		; CIN buffer Write pointer
   157 00:EA2D:              COUT_CT		rmb	1		; COUT buffer counter
   158 00:EA2E:              COUT_RP		rmb	1		; COUT buffer Read pointer
   159 00:EA2F:              COUT_WP		rmb	1		; COUT buffer Write pointer
   160 00:EA30:              CONTMP_BUF	rmb	COUT_SIZE
   161 00:EAB0:              STRIN_CNT	rmb	1
   162                        
   163 00:EAB1:              INBUF	RMB	BUFLEN		; Line input buffer
   164 00:EAC1:              DSADDR	RMB	2		; Dump start address
   165 00:EAC3:              DEADDR	RMB	2		; Dump end address
   166 00:EAC5:              DSTATE	RMB	1		; Dump state
   167 00:EAC6:              GADDR	RMB	2		; Go address
   168 00:EAC8:              HEXMOD	RMB	1		; HEX file mode
   169 00:EAC9:              RECTYP	RMB	1		; Record type
   170                        
   171 00:EACA:              ILL_PC	RMB	2
   172                        
   173 00:EACC:              REGSIZ	RMB	1		; Register size
   174                        	
   175 00:EACD:              CKSUM	RMB	1		; Checksum
   176 00:EACE:              HITMP	RMB	1		; Temporary (used in HEXIN)
   177                        
   178                        
   179                        ; disassemble variable
   180 00:EACF:              temp		RMB	1
   181 00:EAD0:              lines		RMB	1
   182 00:EAD1:              bytes		RMB	1
   183 00:EAD2:              s_value		RMB	2
   184 00:EAD4:              e_value		RMB	2
   185 00:EAD6:              count		RMB	1
   186 00:EAD7:              vnim_buf	RMB	16	;virtual console buffer for mnemonic
   187                        
   188                        ;Go command variable
   189 00:EAE7:              stp_flg		rmb	1
   190 00:EAE8:              sav_dat		rmb	2
   191 00:EAEA:              hit_reg		rmb	2
   192                        
   193                        ;;;
   194                        ;;; Program area
   195                        ;;;	
   196                        	.code
   197                        	ORG	PRG_B
   198                        
   199                        CSTART:
   200                        ;--------- MEZW65C_RAM file header --------------------------
   201 00:EB00: 4C 20 EB     	jmp	COLD_START
   202 00:EB03: 4C 9B EB     	jmp	WSTART
   203                        
   204                        	; uinimon config data
   205                        	;
   206 00:EB06: 00 00        	db	0,0
   207                        	; Unique ID
   208 00:EB08: 4D 45 5A 57  mezID:	db	"MEZW65C",0
       00:EB0C: 36 35 43 00 
   209                        	;start program address
   210 00:EB10: 00 EB        start_p:	dw	PRG_B		; start address (Low)
   211 00:EB12: 00 00        	dw	0		; (high)
   212                        
   213                        	; define Common memory address
   214 00:EB14: 00 E9        PIC_IF:	dw	UREQ_COM	;  Common memory address for PIC (Low)
   215 00:EB16: 00 00        	dw	0		; (high)
   216                        
   217 00:EB18: 00           SW_816:	db	0	; 0 : W65C02
   218                        			; 1 : W65C816 native mode 
   219 00:EB19: 01           irq_sw	db	1	; 0 : no use IRQ console I/O
   220                        			; 1 : use IRQ timer interrupt driven console I/O
   221 00:EB1A: 23 E9        reg_tp	dw	reg_tbls	; register save pointer
   222 00:EB1C: 07 00        reg_ts	dw	reg_size	; register table size
   223 00:EB1E: 01           nmi_sw	db	1	; 0 : No NMI support, 1: NMI support
   224 00:EB1F: 02           bios_sw	db	2	; 0 : standalone program
   225                        			; 1 : program call bios command
   226                        			; 2 : monitor program (.SYS)
   227                        COLD_START:
   228                        ;--------- MEZW65C_RAM file header --------------------------
   229                        
   230                        ; user program infomation pointer
   231             0000EB08   u_sw	equ	mezID+0
   232             0000EB09   u_addr	equ	mezID+1
   233                        
   234 00:EB20: 78           	sei			; disable interrupt
   235 00:EB21: A2 3F        	LDX	#STACK & $ff
   236 00:EB23: 9A           	TXS
   237                        
   238 00:EB24: 20 31 FF     	JSR	INIT
   239 00:EB27: A9 00        	LDA	#$00
   240 00:EB29: 8D C1 EA     	STA	DSADDR
   241 00:EB2C: 8D C2 EA     	STA	DSADDR+1
   242 00:EB2F: 8D 1F E9     	STA	SADDR
   243 00:EB32: 8D 20 E9     	STA	SADDR+1
   244 00:EB35: 8D C6 EA     	STA	GADDR
   245 00:EB38: 8D C7 EA     	STA	GADDR+1
   246 00:EB3B: A9 53        	LDA	#'S'
   247 00:EB3D: 8D C8 EA     	STA	HEXMOD
   248                        
   249 00:EB40: A9 00        	LDA	#$00
   250 00:EB42: 8D 23 E9     	STA	REGA
   251 00:EB45: 8D 24 E9     	STA	REGX
   252 00:EB48: 8D 25 E9     	STA	REGY
   253 00:EB4B: A9 20        	lda	#$20
   254 00:EB4D: 8D 29 E9     	STA	REGPSR
   255 00:EB50: A2 FF        	ldx	#USER_SP
   256 00:EB52: 8E 26 E9     	STX	REGSP
   257 00:EB55: A9 00        	lda	#USER_M
   258 00:EB57: 8D 27 E9     	STA	REGPC
   259 00:EB5A: 9C 28 E9     	stz	REGPC+1
   260 00:EB5D: 8D D2 EA     	sta	s_value
   261 00:EB60: 9C D3 EA     	stz	s_value+1
   262 00:EB63: 9C D4 EA     	stz	e_value
   263 00:EB66: 9C D5 EA     	stz	e_value+1
   264 00:EB69: 9C E7 EA     	stz	stp_flg
   265                        
   266 00:EB6C: 58           	CLI
   267                        
   268 00:EB6D: AD 08 EB     	lda	u_sw
   269 00:EB70: F0 1A        	beq	wup_umon
   270 00:EB72: C9 01        	cmp	#1
   271 00:EB74: F0 10        	beq	apli_start
   272                        ;
   273                        ; sleep moniotr
   274                        ;
   275                        wup
   276 00:EB76: 58           	cli			; enable interrupt
   277                        wai_conout
   278 00:EB77: AD 2D EA     	lda	COUT_CT
   279 00:EB7A: D0 FB        	bne	wai_conout	; wait conout buffer empty
   280 00:EB7C: A9 01        	lda	#1
   281 00:EB7E: 8D 01 E9     	sta	UNI_CHR		; sleep signal
   282 00:EB81: 20 86 FF     	jsr	NMI_SIG
   283 00:EB84: 80 F0        	bra	wup
   284                        
   285                        apli_start
   286 00:EB86: A2 FF        	LDX	#USER_SP & $ff
   287 00:EB88: 9A           	TXS
   288 00:EB89: 6C 09 EB     	jmp	(u_addr)	; application cold start
   289                        
   290                        	;; Opening message
   291                        wup_umon
   292 00:EB8C: A9 DB        	LDA	#$FF&OPNMSG
   293 00:EB8E: 8D 12 E9     	STA	PT0
   294 00:EB91: A9 FD        	LDA	#OPNMSG>>8
   295 00:EB93: 8D 13 E9     	STA	PT0+1
   296 00:EB96: 20 0E FB     	JSR	STROUT
   297 00:EB99: 80 04        	bra	prt_prompt
   298                        
   299                        WSTART
   300 00:EB9B: 58           	CLI
   301 00:EB9C: A2 3F        	LDX	#STACK & $ff
   302 00:EB9E: 9A           	TXS
   303                        
   304                        prt_prompt
   305 00:EB9F: A9 FA        	LDA	#$FF&PROMPT
   306 00:EBA1: 8D 12 E9     	STA	PT0
   307 00:EBA4: A9 FD        	LDA	#PROMPT>>8
   308 00:EBA6: 8D 13 E9     	STA	PT0+1
   309 00:EBA9: 20 0E FB     	JSR	STROUT
   310 00:EBAC: 20 78 FB     	JSR	GETLIN
   311 00:EBAF: A2 00        	LDX	#0
   312 00:EBB1: 20 C3 FB     	JSR	SKIPSP
   313 00:EBB4: 20 CF FB     	JSR	UPPER
   314 00:EBB7: C9 00        	CMP	#0
   315 00:EBB9: F0 E0        	BEQ	WSTART
   316                        
   317 00:EBBB: C9 44        	CMP	#'D'
   318 00:EBBD: D0 03        	BNE	M00
   319 00:EBBF: 4C 15 EC     	JMP	DUMP
   320                        M00
   321 00:EBC2: C9 47        	CMP	#'G'
   322 00:EBC4: D0 03        	BNE	M01
   323 00:EBC6: 4C EF F4     	JMP	GO
   324                        M01
   325 00:EBC9: C9 53        	CMP	#'S'
   326 00:EBCB: D0 03        	BNE	M02
   327 00:EBCD: 4C 76 F5     	JMP	SETM
   328                        M02
   329 00:EBD0: C9 4C        	CMP	#'L'
   330 00:EBD2: D0 03        	BNE	M03
   331 00:EBD4: 4C 32 F6     	JMP	LOADH
   332                        M03
   333                        	
   334 00:EBD7: C9 52        	CMP	#'R'
   335 00:EBD9: D0 03        	BNE	M05
   336 00:EBDB: 4C 78 F7     	JMP	REG
   337                        M05	
   338 00:EBDE: C9 3F        	CMP	#'?'
   339 00:EBE0: D0 03        	BNE	M06
   340 00:EBE2: 4C 3F F9     	jmp	prt_help
   341                        
   342                        M06
   343 00:EBE5: C9 42        	cmp	#'B'
   344 00:EBE7: D0 1C        	bne	ERR
   345 00:EBE9: E8           	inx
   346 00:EBEA: BD B1 EA     	LDA	INBUF,X
   347 00:EBED: 20 CF FB     	JSR	UPPER
   348 00:EBF0: C9 59        	CMP	#'Y'
   349 00:EBF2: D0 11        	bne	ERR
   350 00:EBF4: E8           	inx
   351 00:EBF5: BD B1 EA     	LDA	INBUF,X
   352 00:EBF8: 20 CF FB     	JSR	UPPER
   353 00:EBFB: C9 45        	CMP	#'E'
   354 00:EBFD: D0 06        	bne	ERR
   355 00:EBFF: 20 6E FB     	jsr	CRLF
   356 00:EC02: 4C 76 EB     	jmp	wup
   357                        ERR
   358 00:EC05: A9 17        	LDA	#$FF&ERRMSG
   359 00:EC07: 8D 12 E9     	STA	PT0
   360 00:EC0A: A9 FE        	LDA	#ERRMSG>>8
   361 00:EC0C: 8D 13 E9     	STA	PT0+1
   362 00:EC0F: 20 0E FB     	JSR	STROUT
   363 00:EC12: 4C 9B EB     	JMP	WSTART
   364                        
   365                        ;;;
   366                        ;;; Dump memory
   367                        ;;;
   368                        DUMP
   369 00:EC15: E8           	INX
   370 00:EC16: 20 C3 FB     	JSR	SKIPSP
   371 00:EC19: 20 CF FB     	JSR	UPPER
   372 00:EC1C: C9 49        	cmp	#'I'
   373 00:EC1E: D0 03        	bne	dmp1
   374 00:EC20: 4C 88 ED     	jmp	disassemble
   375                        dmp1
   376 00:EC23: 20 DA FB     	JSR	RDHEX
   377 00:EC26: AD 16 E9     	LDA	CNT
   378 00:EC29: D0 1C        	BNE	DP0	; jmp 1st arg.
   379                        
   380                        	; check remain string
   381                        
   382 00:EC2B: 20 C3 FB     	JSR	SKIPSP
   383 00:EC2E: BD B1 EA     	LDA	INBUF,X
   384 00:EC31: D0 26        	BNE	DP01	; jmp if string exist
   385                        
   386                        	;; No arg.
   387                        
   388                        DP00	; set end address (DSADDR + 128 bytes)
   389                        
   390 00:EC33: AD C1 EA     	LDA	DSADDR
   391 00:EC36: 18           	CLC
   392 00:EC37: 69 80        	ADC	#128
   393 00:EC39: 8D C3 EA     	STA	DEADDR
   394 00:EC3C: AD C2 EA     	LDA	DSADDR+1
   395 00:EC3F: 69 00        	ADC	#0
   396 00:EC41: 8D C4 EA     	STA	DEADDR+1
   397 00:EC44: 4C 83 EC     	JMP	DPM
   398                        
   399                        DP0	;; 1st arg. found
   400                        
   401 00:EC47: AD 14 E9     	LDA	PT1
   402 00:EC4A: 8D C1 EA     	STA	DSADDR		; set start address(low)
   403 00:EC4D: AD 15 E9     	LDA	PT1+1
   404 00:EC50: 8D C2 EA     	STA	DSADDR+1	; set start address(high)
   405                        
   406 00:EC53: 20 C3 FB     	JSR	SKIPSP
   407 00:EC56: BD B1 EA     	LDA	INBUF,X		; get next string
   408                        	
   409                        DP01	; check exist 2nd arg.
   410                        
   411 00:EC59: C9 2C        	CMP	#','
   412 00:EC5B: F0 06        	BEQ	DP1		; yes, jmp and chk 2nd arg
   413 00:EC5D: C9 00        	CMP	#0
   414 00:EC5F: F0 D2        	BEQ	DP00		; jmp if no 2nd arg.(set end address)
   415 00:EC61: 80 A2        	BRA	ERR
   416                        
   417                        DP1	; chk 2nd arg
   418                        
   419 00:EC63: E8           	INX
   420 00:EC64: 20 C3 FB     	JSR	SKIPSP
   421 00:EC67: 20 DA FB     	JSR	RDHEX
   422 00:EC6A: 20 C3 FB     	JSR	SKIPSP
   423 00:EC6D: AD 16 E9     	LDA	CNT
   424 00:EC70: F0 93        	BEQ	ERR
   425                        
   426                        	;; set 2nd arg.
   427                        
   428 00:EC72: AD 14 E9     	LDA	PT1
   429 00:EC75: 38           	SEC
   430 00:EC76: 69 00        	ADC	#0
   431 00:EC78: 8D C3 EA     	STA	DEADDR
   432 00:EC7B: AD 15 E9     	LDA	PT1+1
   433 00:EC7E: 69 00        	ADC	#0
   434 00:EC80: 8D C4 EA     	STA	DEADDR+1
   435                        
   436                        	;; DUMP main
   437                        DPM	
   438 00:EC83: AD C1 EA     	LDA	DSADDR
   439 00:EC86: 29 F0        	AND	#$F0
   440 00:EC88: 8D 14 E9     	STA	PT1
   441 00:EC8B: AD C2 EA     	LDA	DSADDR+1
   442 00:EC8E: 8D 15 E9     	STA	PT1+1
   443 00:EC91: A9 00        	LDA	#0
   444 00:EC93: 8D C5 EA     	STA	DSTATE
   445                        DPM0
   446 00:EC96: 20 D7 EC     	JSR	DPL
   447 00:EC99: AD 14 E9     	LDA	PT1
   448 00:EC9C: 18           	CLC
   449 00:EC9D: 69 10        	ADC	#16
   450 00:EC9F: 8D 14 E9     	STA	PT1
   451 00:ECA2: AD 15 E9     	LDA	PT1+1
   452 00:ECA5: 69 00        	ADC	#0
   453 00:ECA7: 8D 15 E9     	STA	PT1+1
   454 00:ECAA: 20 FB FE     	JSR	KEY_CHK
   455 00:ECAD: D0 16        	BNE	DPM1
   456 00:ECAF: AD C5 EA     	LDA	DSTATE
   457 00:ECB2: C9 02        	CMP	#2
   458 00:ECB4: 90 E0        	BCC	DPM0
   459 00:ECB6: AD C3 EA     	LDA	DEADDR
   460 00:ECB9: 8D C1 EA     	STA	DSADDR
   461 00:ECBC: AD C4 EA     	LDA	DEADDR+1
   462 00:ECBF: 8D C2 EA     	STA	DSADDR+1
   463 00:ECC2: 4C 9B EB     	JMP	WSTART
   464                        DPM1
   465 00:ECC5: AD 14 E9     	LDA	PT1
   466 00:ECC8: 8D C1 EA     	STA	DSADDR
   467 00:ECCB: AD 15 E9     	LDA	PT1+1
   468 00:ECCE: 8D C2 EA     	STA	DSADDR+1
   469 00:ECD1: 20 D0 FE     	JSR	KEY_IN
   470 00:ECD4: 4C 9B EB     	JMP	WSTART
   471                        
   472                        	;; Dump line
   473                        DPL
   474 00:ECD7: AD 15 E9     	LDA	PT1+1
   475 00:ECDA: 20 29 FB     	JSR	HEXOUT2
   476 00:ECDD: AD 14 E9     	LDA	PT1
   477 00:ECE0: 20 29 FB     	JSR	HEXOUT2
   478 00:ECE3: A9 1F        	LDA	#$FF&DSEP0
   479 00:ECE5: 8D 12 E9     	STA	PT0
   480 00:ECE8: A9 FE        	LDA	#DSEP0>>8
   481 00:ECEA: 8D 13 E9     	STA	PT0+1
   482 00:ECED: 20 0E FB     	JSR	STROUT
   483 00:ECF0: A2 00        	LDX	#0
   484 00:ECF2: A0 00        	LDY	#0
   485                        DPL0
   486 00:ECF4: 20 28 ED     	JSR	DPB
   487 00:ECF7: E0 10        	CPX	#16
   488 00:ECF9: D0 F9        	BNE	DPL0
   489                        
   490 00:ECFB: A9 22        	LDA	#$FF&DSEP1
   491 00:ECFD: 8D 12 E9     	STA	PT0
   492 00:ED00: A9 FE        	LDA	#DSEP1>>8
   493 00:ED02: 8D 13 E9     	STA	PT0+1
   494 00:ED05: 20 0E FB     	JSR	STROUT
   495                        
   496                        	;; Print ASCII area
   497 00:ED08: A2 00        	LDX	#0
   498                        DPL1
   499 00:ED0A: BD B1 EA     	LDA	INBUF,X
   500 00:ED0D: C9 20        	CMP	#' '
   501 00:ED0F: 90 0A        	BCC	DPL2
   502 00:ED11: C9 7F        	CMP	#$7F
   503 00:ED13: B0 06        	BCS	DPL2
   504 00:ED15: 20 04 FF     	JSR	PUT_CH
   505 00:ED18: 4C 20 ED     	JMP	DPL3
   506                        DPL2
   507 00:ED1B: A9 2E        	LDA	#'.'
   508 00:ED1D: 20 04 FF     	JSR	PUT_CH
   509                        DPL3
   510 00:ED20: E8           	INX
   511 00:ED21: E0 10        	CPX	#16
   512 00:ED23: D0 E5        	BNE	DPL1
   513 00:ED25: 4C 6E FB     	JMP	CRLF
   514                        
   515                        	;; Dump byte
   516                        DPB
   517 00:ED28: A9 20        	LDA	#' '
   518 00:ED2A: 20 04 FF     	JSR	PUT_CH
   519 00:ED2D: AD C5 EA     	LDA	DSTATE
   520 00:ED30: D0 1E        	BNE	DPB2
   521                        	;; Dump state 0
   522 00:ED32: 98           	TYA
   523 00:ED33: 38           	SEC
   524 00:ED34: ED C1 EA     	SBC	DSADDR
   525 00:ED37: 29 0F        	AND	#$0F
   526 00:ED39: F0 10        	BEQ	DPB1
   527                        	;; Still 0 or 2
   528                        DPB0
   529 00:ED3B: A9 20        	LDA	#' '
   530 00:ED3D: 9D B1 EA     	STA	INBUF,X
   531 00:ED40: 20 04 FF     	JSR	PUT_CH
   532 00:ED43: A9 20        	LDA	#' '
   533 00:ED45: 20 04 FF     	JSR	PUT_CH
   534 00:ED48: E8           	INX
   535 00:ED49: C8           	INY
   536 00:ED4A: 60           	RTS
   537                        	;; Found start address
   538                        DPB1
   539 00:ED4B: A9 01        	LDA	#1
   540 00:ED4D: 8D C5 EA     	STA	DSTATE
   541                        DPB2
   542 00:ED50: AD C5 EA     	LDA	DSTATE
   543 00:ED53: C9 01        	CMP	#1
   544 00:ED55: D0 E4        	BNE	DPB0
   545                        	;; Dump state 1
   546                        ;	LDA	(PT1),Y
   547 00:ED57: 20 98 FA     	jsr	lda_pt1
   548                        
   549 00:ED5A: 9D B1 EA     	STA	INBUF,X
   550 00:ED5D: 20 29 FB     	JSR	HEXOUT2
   551 00:ED60: E8           	INX
   552 00:ED61: C8           	INY
   553 00:ED62: 98           	TYA
   554 00:ED63: 18           	CLC
   555 00:ED64: 6D 14 E9     	ADC	PT1
   556 00:ED67: 8D 12 E9     	STA	PT0
   557 00:ED6A: AD 15 E9     	LDA	PT1+1
   558 00:ED6D: 69 00        	ADC	#0
   559 00:ED6F: 8D 13 E9     	STA	PT0+1
   560 00:ED72: AD 12 E9     	LDA	PT0
   561 00:ED75: CD C3 EA     	CMP	DEADDR
   562 00:ED78: D0 0D        	BNE	DPBE
   563 00:ED7A: AD 13 E9     	LDA	PT0+1
   564 00:ED7D: CD C4 EA     	CMP	DEADDR+1
   565 00:ED80: D0 05        	BNE	DPBE
   566                        	;; Found end address
   567 00:ED82: A9 02        	LDA	#2
   568 00:ED84: 8D C5 EA     	STA	DSTATE
   569                        DPBE
   570 00:ED87: 60           	RTS
   571                        
   572                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   573                        ;
   574                        ; disassemble 
   575                        ;
   576                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   577                        disassemble:
   578 00:ED88: E8           	INX
   579 00:ED89: 20 C3 FB     	JSR	SKIPSP
   580 00:ED8C: 20 DA FB     	JSR	RDHEX
   581 00:ED8F: AD 16 E9     	LDA	CNT
   582                        
   583 00:ED92: D0 10        	BNE	PP0	; jmp, if 1st arg. exist
   584                        
   585                        	;; No arg.
   586 00:ED94: 20 C3 FB     	JSR	SKIPSP
   587 00:ED97: BD B1 EA     	LDA	INBUF,X
   588 00:ED9A: D0 1A        	BNE	PP01	; jmp, if remain strings exist
   589                        
   590                        	; no arg.
   591                        
   592                        PP00	; set end parameter
   593 00:ED9C: A9 10        	lda	#16
   594 00:ED9E: 8D D0 EA     	sta	lines
   595 00:EDA1: 4C E6 ED     	jmp	dis_next
   596                        
   597                        	;; 1st arg. found
   598                        
   599                        PP0	; set start parameter
   600 00:EDA4: AD 14 E9     	LDA	PT1
   601 00:EDA7: 8D D2 EA     	sta	s_value		; save start address(low)
   602 00:EDAA: AD 15 E9     	LDA	PT1+1
   603 00:EDAD: 8D D3 EA     	STA	s_value+1	; save start address(high)
   604                        
   605                        	; check 2nd parameter exist
   606                        
   607 00:EDB0: 20 C3 FB     	JSR	SKIPSP
   608 00:EDB3: BD B1 EA     	LDA	INBUF,X
   609                        PP01
   610 00:EDB6: C9 2C        	CMP	#','
   611 00:EDB8: F0 07        	BEQ	PP1		; jmp if 2nd parameter exist
   612 00:EDBA: C9 00        	cmp	#0
   613 00:EDBC: F0 DE        	beq	PP00		; jmp if no 2nd parameter
   614                        
   615                        D_ERR
   616 00:EDBE: 4C 05 EC     	JMP	ERR
   617                        
   618                        PP1	;; check 2nd arg.
   619                        
   620 00:EDC1: E8           	INX
   621 00:EDC2: 20 C3 FB     	JSR	SKIPSP
   622 00:EDC5: 20 DA FB     	JSR	RDHEX
   623 00:EDC8: 20 C3 FB     	JSR	SKIPSP
   624 00:EDCB: AD 16 E9     	LDA	CNT
   625 00:EDCE: F0 EE        	BEQ	D_ERR
   626 00:EDD0: BD B1 EA     	LDA	INBUF,X
   627 00:EDD3: D0 E9        	BNE	D_ERR
   628 00:EDD5: AD 14 E9     	LDA	PT1
   629 00:EDD8: 8D D4 EA     	STA	e_value
   630 00:EDDB: AD 15 E9     	LDA	PT1+1
   631 00:EDDE: 69 00        	ADC	#0
   632 00:EDE0: 8D D5 EA     	STA	e_value+1
   633 00:EDE3: 9C D0 EA     	stz	lines
   634                        
   635                        dis_next:
   636                        
   637 00:EDE6: AC D2 EA     	LDY	s_value
   638 00:EDE9: AD D3 EA     	LDA	s_value+1
   639 00:EDEC: 8C 1B E9     	STY	oper
   640 00:EDEF: 8D 1C E9     	STA	oper+1
   641                        
   642                        das_l:
   643                        
   644                        ; time to show the opcode and trailing spaces until 20 chars
   645                        
   646 00:EDF2: 20 4A EE     	JSR	disOpcode	; disassemble one opcode @oper (will print it)
   647 00:EDF5: 20 FB FE     	JSR	KEY_CHK
   648 00:EDF8: D0 1E        	BNE	das_end
   649                        
   650 00:EDFA: AD D0 EA     	lda	lines
   651 00:EDFD: F0 07        	beq	chk_diadr
   652 00:EDFF: CE D0 EA     	dec	lines
   653 00:EE02: F0 14        	beq	das_end		; continue until done
   654 00:EE04: 80 EC        	bra	das_l
   655                        
   656                        chk_diadr:
   657 00:EE06: AD D4 EA     	lda	e_value
   658 00:EE09: CD 1B E9     	cmp	oper
   659 00:EE0C: B0 E4        	bcs	das_l
   660                        
   661 00:EE0E: AD D5 EA     	lda	e_value+1
   662 00:EE11: CD 1C E9     	cmp	oper+1
   663 00:EE14: F0 02        	beq	das_end
   664 00:EE16: B0 DA        	bcs	das_l
   665                        
   666                        das_end
   667 00:EE18: AC 1B E9     	ldy	oper
   668 00:EE1B: AD 1C E9     	lda	oper+1
   669 00:EE1E: 8C D2 EA     	sty	s_value
   670 00:EE21: 8D D3 EA     	sta	s_value+1
   671                        
   672 00:EE24: 4C 9B EB     	JMP	WSTART
   673                        
   674                        ; virtual console output for mnemonic characters
   675                        
   676                        vPUT_CH	; input A
   677 00:EE27: DA           	phx
   678 00:EE28: AE D6 EA     	ldx	count
   679 00:EE2B: 9D D7 EA     	sta	vnim_buf,x
   680 00:EE2E: EE D6 EA     	inc	count
   681 00:EE31: FA           	plx
   682 00:EE32: 60           	rts
   683                        
   684                        vHEXOUT2
   685 00:EE33: 48           	PHA
   686 00:EE34: 4A           	LSR	A
   687 00:EE35: 4A           	LSR	A
   688 00:EE36: 4A           	LSR	A
   689 00:EE37: 4A           	LSR	A
   690 00:EE38: 20 3C EE     	JSR	vHEXOUT1
   691 00:EE3B: 68           	PLA
   692                        vHEXOUT1
   693 00:EE3C: 29 0F        	AND	#$0F
   694 00:EE3E: 18           	CLC
   695 00:EE3F: 69 30        	ADC	#'0'
   696 00:EE41: C9 3A        	CMP	#'9'+1
   697 00:EE43: 90 03        	BCC	vHEXOUTE
   698 00:EE45: 18           	CLC
   699 00:EE46: 69 07        	ADC	#'A'-'9'-1
   700                        vHEXOUTE
   701 00:EE48: 80 DD        	bra	vPUT_CH
   702                        
   703                        ;------------------------------------------------------
   704                        ; disassemble one opcode and print it
   705                        ;------------------------------------------------------
   706                        disOpcode:
   707                        ;	LDA	(oper)		; check pointed opcode
   708 00:EE4A: 20 FE FA     	jsr	lda_d_oper
   709                        
   710 00:EE4D: 8D D6 EA     	STA	count		; keep for comparisons
   711 00:EE50: A0 7F        	LDY	#<da_oclist	; get address of opcode list
   712 00:EE52: A9 EF        	LDA	#>da_oclist
   713 00:EE54: 9C 1D E9     	stz	scan		; indirect-indexed pointer
   714 00:EE57: 8D 1E E9     	STA	scan+1
   715                        
   716                        ; proceed normally now
   717                        
   718 00:EE5A: A2 00        	LDX	#0		; counter of skipped opcodes
   719                        do_chkopc:
   720 00:EE5C: EC D6 EA     	CPX	count		; check if desired opcode already pointed
   721 00:EE5F: F0 16        	BEQ	do_found		; no more to skip
   722                        
   723                        do_skip:
   724                        ;	LDA	(scan),Y		; get char in list
   725 00:EE61: 20 A8 FA     	jsr	lda_scan
   726                        
   727 00:EE64: 30 08        	BMI	do_other		; found end-of-opcode mark (bit 7)
   728 00:EE66: C8           	INY
   729 00:EE67: D0 F8        	BNE	do_skip		; next char in list if not crossed
   730 00:EE69: EE 1E E9     	INC	scan+1		; otherwise correct MSB
   731 00:EE6C: 80 F3        	bra	do_skip
   732                        
   733                        do_other:
   734 00:EE6E: C8           	INY			; needs to point to actual opcode, not previous end eeeeeek!
   735 00:EE6F: D0 03        	BNE	do_set		; if not crossed
   736 00:EE71: EE 1E E9     	INC	scan+1		; otherwise correct MSB
   737                        
   738                        do_set:
   739 00:EE74: E8           	INX			; yet another opcode skipped
   740 00:EE75: D0 E5        	BNE	do_chkopc	; until list is done ***should not arrive here***
   741                        
   742                        do_found:
   743 00:EE77: 8C 1D E9     	STY	scan		; restore pointer
   744                        
   745                        ;
   746                        ; decode opcode and print hex dump
   747                        ;
   748                        prnOpcode: ; first goes the current address in label style
   749                        
   750 00:EE7A: A9 20        	LDA	#' '		; make it self-hosting
   751 00:EE7C: 20 04 FF     	JSR	PUT_CH
   752 00:EE7F: AD 1C E9     	LDA	oper+1		; address MSB
   753 00:EE82: 20 29 FB     	JSR	HEXOUT2	; print it
   754 00:EE85: AD 1B E9     	LDA	oper		; same for LSB
   755 00:EE88: 20 29 FB     	JSR	HEXOUT2
   756                        
   757                        ; then extract the opcode string from scan
   758                        
   759 00:EE8B: A0 00        	LDY	#0		; scan increase, temporarily stored in temp
   760 00:EE8D: 8C D1 EA     	STY	bytes		; number of bytes to be dumped (-1)
   761 00:EE90: 8C D6 EA     	STY	count		; printed chars for virtual console buffe
   762                        
   763                        po_loop:
   764                        ;	LDA	(scan),Y	; get char in opcode list
   765 00:EE93: 20 A8 FA     	jsr	lda_scan
   766                        
   767 00:EE96: 8C CF EA     	STY	temp		; keep index as will be destroyed
   768 00:EE99: 29 7F        	AND	#$7F		; filter out possible end mark
   769 00:EE9B: C9 25        	CMP	#'%'		; relative addressing
   770 00:EE9D: D0 39        	BNE	po_nrel		; currently the same as single byte!
   771                        
   772                        ; put here specific code for relative arguments!
   773                        
   774 00:EE9F: A9 24        	LDA	#'$'		; hex radix
   775 00:EEA1: 20 27 EE     	JSR	vPUT_CH
   776                        
   777                        ;	lda	(oper)		; check opocde for a moment
   778 00:EEA4: 20 FE FA     	jsr	lda_d_oper
   779                        
   780 00:EEA7: A0 01        	LDY	#1		; standard branch offset
   781 00:EEA9: A2 00        	LDX	#0		; reset offset sign extention
   782 00:EEAB: 29 0F        	AND	#$0F		; watch low-nibble on opcode
   783 00:EEAD: C9 0F        	CMP	#$0F		; is it BBR/BBS?
   784 00:EEAF: D0 01        	BNE	po_nobbx		; if not, keep standard offset
   785                        
   786 00:EEB1: C8           	INY			; otherwise needs one more byte!
   787                        po_nobbx:
   788 00:EEB2: 8C D2 EA     	STY	s_value		; store now as will be added later
   789 00:EEB5: AC D1 EA     	LDY	bytes		; retrieve instruction index
   790 00:EEB8: C8           	INY			; point to operand!
   791                        
   792                        ;	LDA	(oper),Y	; get offset!
   793 00:EEB9: 20 B8 FA     	jsr	lda_oper
   794                        	
   795 00:EEBC: 8C D1 EA     	STY	bytes		; correct index
   796 00:EEBF: 10 01        	BPL	po_fwd		; forward jump does not extend sign
   797 00:EEC1: CA           	DEX			; puts $FF otherwise
   798                        
   799                        po_fwd:
   800 00:EEC2: 1A           	inc	a		; plus opcode...
   801 00:EEC3: 18           	CLC			; (will this and the above instead of SEC fix the error?)
   802 00:EEC4: 6D D2 EA     	ADC	s_value		; ...and displacement...
   803 00:EEC7: 6D 1B E9     	ADC	oper		; ...from current position
   804 00:EECA: 48           	PHA			; this is the LSB, now check for the MSB
   805 00:EECB: 8A           	TXA			; get sign extention
   806 00:EECC: 6D 1C E9     	ADC	oper+1		; add current position MSB plus ocassional carry
   807 00:EECF: 20 33 EE     	JSR	vHEXOUT2	; show as two ciphers
   808 00:EED2: 68           	PLA			; previously computed LSB
   809 00:EED3: 20 33 EE     	JSR	vHEXOUT2	; another two
   810 00:EED6: 80 30        	bra	po_done		; update and continue
   811                        
   812                        po_nrel:
   813 00:EED8: C9 40        	CMP	#'@'		; single byte operand
   814 00:EEDA: D0 04        	BNE	po_nbyt		; otherwise check word-sized operand
   815                        
   816                        ; *** unified 1 and 2-byte operand management ***
   817                        
   818 00:EEDC: A0 01        	LDY	#1		; number of bytes minus one
   819 00:EEDE: 80 06        	bra	po_disp		; display value
   820                        
   821                        po_nbyt:
   822 00:EEE0: C9 26        	CMP	#'&'		; word operand
   823 00:EEE2: D0 1F        	BNE	po_nwd		; otherwise is normal char
   824 00:EEE4: A0 02        	LDY	#2		; number of bytes minus one
   825                        
   826                        po_disp:
   827                        ; could check HERE for undefined references!!!
   828 00:EEE6: 5A           	phy			; these are the operand bytes
   829 00:EEE7: 8C D1 EA     	STY	bytes		; set counter
   830 00:EEEA: A9 24        	LDA	#'$'		; hex radix
   831 00:EEEC: 20 27 EE     	JSR	vPUT_CH
   832                        
   833                        po_dloop:
   834 00:EEEF: AC D1 EA     	LDY	bytes		; retrieve operand index
   835                        
   836                        ;	LDA	(oper),Y		; get whatever byte
   837 00:EEF2: 20 B8 FA     	jsr	lda_oper
   838                        
   839 00:EEF5: 20 33 EE     	JSR	vHEXOUT2	; show in hex
   840 00:EEF8: CE D1 EA     	DEC	bytes		; go back one byte
   841 00:EEFB: D0 F2        	BNE	po_dloop
   842 00:EEFD: 7A           	ply			; restore original operand size
   843 00:EEFE: 8C D1 EA     	STY	bytes
   844 00:EF01: 80 05        	bra	po_adv		; update count (direct from A) and continue
   845                        
   846                        po_nwd:
   847 00:EF03: 20 27 EE     	JSR	vPUT_CH		; just print it
   848 00:EF06: 80 00        	bra	po_char
   849                        
   850                        po_done:
   851                        po_adv:
   852                        po_char:
   853 00:EF08: AC CF EA     	LDY	temp		; get scan index
   854                        
   855                        ;	LDA	(scan),Y		; get current char again
   856 00:EF0B: 20 A8 FA     	jsr	lda_scan
   857                        
   858 00:EF0E: 30 04        	BMI	po_end		; opcode ended, no more to show
   859 00:EF10: C8           	INY			; go for next char otherwise
   860 00:EF11: 4C 93 EE     	JMP	po_loop		; BNE would work as no opcode string near 256 bytes long, but too far...
   861                        
   862                        po_end: ; output binary code
   863                        
   864 00:EF14: AE D6 EA     	ldx	count
   865 00:EF17: 9E D7 EA     	stz	vnim_buf,x	; set mnemonic string termination
   866                        
   867                        ; print hex dump as a comment!
   868                        
   869                        po_dump:
   870 00:EF1A: A9 09        	lda	#9		; **
   871 00:EF1C: 8D D6 EA     	sta	count		; **
   872 00:EF1F: A0 00        	LDY	#0		; reset index
   873 00:EF21: 8C CF EA     	STY	temp		; save index (no longer scan)
   874                        
   875                        po_dbyt:
   876 00:EF24: A9 20        	LDA	#' '		; leading space
   877 00:EF26: 20 04 FF     	JSR	PUT_CH
   878 00:EF29: AC CF EA     	LDY	temp		; retrieve index
   879                        
   880                        ;	LDA	(oper),Y	; get current byte in instruction
   881 00:EF2C: 20 B8 FA     	jsr	lda_oper
   882                        
   883 00:EF2F: 20 29 FB     	JSR	HEXOUT2		; show as hex
   884 00:EF32: AD D6 EA     	lda	count		; **
   885 00:EF35: 38           	sec			; **
   886 00:EF36: E9 03        	sbc	#3		; **
   887 00:EF38: 8D D6 EA     	sta	count		; **
   888 00:EF3B: EE CF EA     	INC	temp		; next
   889 00:EF3E: AE D1 EA     	LDX	bytes		; get limit (-1)
   890 00:EF41: E8           	INX			; correct for post-increased
   891 00:EF42: EC CF EA     	CPX	temp		; compare current count
   892 00:EF45: D0 DD        	BNE	po_dbyt		; loop until done
   893                        
   894                        ; skip all bytes and point to next opcode
   895                        
   896                        post_end:			; **
   897 00:EF47: A9 20        	LDA	#' '		; **
   898 00:EF49: 20 04 FF     	JSR	PUT_CH		; **
   899                        				; **
   900 00:EF4C: AD D6 EA     	lda	count		; **
   901 00:EF4F: F0 05        	beq	end_prnt	; **
   902 00:EF51: CE D6 EA     	dec	count		; **
   903 00:EF54: 80 F1        	bra	post_end	; **
   904                        
   905                        end_prnt:			; **
   906                        ;	LDA	#']'		; **
   907                        ;	JSR	PUT_CH		; **
   908                        
   909 00:EF56: AD 1B E9     	LDA 	oper		; address LSB
   910 00:EF59: 38           	SEC			; skip current opcode...
   911 00:EF5A: 6D D1 EA     	ADC	bytes		; ...plus number of operands
   912 00:EF5D: 8D 1B E9     	STA	oper
   913 00:EF60: 90 03        	BCC	po_cr		; in case of page crossing
   914 00:EF62: EE 1C E9     	INC	oper+1
   915                        po_cr:
   916                        
   917 00:EF65: A9 20        	LDA	#' '		; **
   918 00:EF67: 20 04 FF     	JSR	PUT_CH		; **
   919 00:EF6A: A9 20        	LDA	#' '		; **
   920 00:EF6C: 20 04 FF     	JSR	PUT_CH		; **
   921 00:EF6F: A9 D7        	LDA	#$FF&vnim_buf
   922 00:EF71: 8D 12 E9     	STA	PT0
   923 00:EF74: A9 EA        	LDA	#vnim_buf>>8
   924 00:EF76: 8D 13 E9     	STA	PT0+1
   925 00:EF79: 20 0E FB     	jsr	STROUT		; output mnemonic to console
   926 00:EF7C: 4C 6E FB     	JMP	CRLF		; print it and return
   927                        
   928                        ; minimOS opcode list for (dis)assembler modules
   929                        ; (c) 2015-2022 Carlos J. Santisteban
   930                        ; last modified 20200222-1341
   931                        
   932                        ; Opcode list as bit-7 terminated strings
   933                        ; @ expects single byte, & expects word
   934                        ; NEW % expects RELATIVE addressing
   935                        ; Rockwell 65C02 version (plus STP & WAI)
   936                        ; will be used by the assembler module too
   937                        
   938                        da_oclist
   939 00:EF7F: 42 52 4B 20  	db	"BRK #", $80+'@'	; $00=BRK #zp
       00:EF83: 23 C0 
   940 00:EF85: 4F 52 41 20  	db	"ORA (@, X", $80+')'	; $01=ORA (zp,X)
       00:EF89: 28 40 2C 20 
       00:EF8D: 58 A9 
   941 00:EF8F: 3F C0        	db	"?", $80+'@'		; $02=?
   942 00:EF91: BF           	db	$80+'?'			; $03=?
   943 00:EF92: 54 53 42 20  	db	"TSB ", $80+'@'		; $04=TSB zp		CMOS
       00:EF96: C0 
   944 00:EF97: 4F 52 41 20  	db	"ORA ", $80+'@'		; $05=ORA zp
       00:EF9B: C0 
   945 00:EF9C: 41 53 4C 20  	db	"ASL ", $80+'@'		; $06=ASL zp
       00:EFA0: C0 
   946 00:EFA1: 52 4D 42 30  	db	"RMB0 ", $80+'@'	; $07=RMB0 zp		CMOS Rockwell
       00:EFA5: 20 C0 
   947 00:EFA7: 50 48 D0     	db	"PH", $80+'P'		; $08=PHP
   948 00:EFAA: 4F 52 41 20  	db	"ORA #", $80+'@'	; $09=ORA #
       00:EFAE: 23 C0 
   949 00:EFB0: 41 53 CC     	db	"AS", $80+'L'		; $0A=ASL
   950 00:EFB3: BF           	db	$80+'?'			; $0B=?
   951 00:EFB4: 54 53 42 20  	db	"TSB ", $80+'&'		; $0C=TSB abs		CMOS
       00:EFB8: A6 
   952 00:EFB9: 4F 52 41 20  	db	"ORA ", $80+'&'		; $0D=ORA abs
       00:EFBD: A6 
   953 00:EFBE: 41 53 4C 20  	db	"ASL ", $80+'&'		; $0E=ASL abs
       00:EFC2: A6 
   954 00:EFC3: 42 42 52 30  	db	"BBR0 @,", $80+'%'	; $0F=BBR0 zp, rel	CMOS Rockwell
       00:EFC7: 20 40 2C A5 
   955 00:EFCB: 42 50 4C 20  	db	"BPL ", $80+'%'		; $10=BPL rel
       00:EFCF: A5 
   956 00:EFD0: 4F 52 41 20  	db	"ORA (@), ", $80+'Y'	; $11=ORA (zp),Y
       00:EFD4: 28 40 29 2C 
       00:EFD8: 20 D9 
   957 00:EFDA: 4F 52 41 20  	db	"ORA (@", $80+')'	; $12=ORA (zp)		CMOS
       00:EFDE: 28 40 A9 
   958 00:EFE1: BF           	db	$80+'?'			; $13=?
   959 00:EFE2: 54 52 42 20  	db	"TRB ", $80+'@'		; $14=TRB zp		CMOS
       00:EFE6: C0 
   960 00:EFE7: 4F 52 41 20  	db	"ORA @, ", $80+'X'	; $15=ORA zp,X
       00:EFEB: 40 2C 20 D8 
   961 00:EFEF: 41 53 4C 20  	db	"ASL @, ", $80+'X'	; $16=ASL zp,X
       00:EFF3: 40 2C 20 D8 
   962 00:EFF7: 52 4D 42 31  	db	"RMB1 ", $80+'@'	; $17=RMB1 zp		CMOS Rockwell
       00:EFFB: 20 C0 
   963 00:EFFD: 43 4C C3     	db	"CL", $80+'C'		; $18=CLC
   964 00:F000: 4F 52 41 20  	db	"ORA &, ", $80+'Y'	; $19=ORA abs,Y
       00:F004: 26 2C 20 D9 
   965 00:F008: 49 4E C3     	db	"IN", $80+'C'		; $1A=INC		CMOS
   966 00:F00B: BF           	db	$80+'?'			; $1B=?
   967 00:F00C: 54 52 42 20  	db	"TRB ", $80+'&'		; $1C=TRB abs		CMOS
       00:F010: A6 
   968 00:F011: 4F 52 41 20  	db	"ORA &, ", $80+'X'	; $1D=ORA abs,X
       00:F015: 26 2C 20 D8 
   969 00:F019: 41 53 4C 20  	db	"ASL &, ", $80+'X'	; $1E=ASL abs,X
       00:F01D: 26 2C 20 D8 
   970 00:F021: 42 42 52 31  	db	"BBR1 @,", $80+'%'	; $1F=BBR1 zp, rel	CMOS Rockwell
       00:F025: 20 40 2C A5 
   971 00:F029: 4A 53 52 20  	db	"JSR ", $80+'&'		; $20=JSR abs
       00:F02D: A6 
   972 00:F02E: 41 4E 44 20  	db	"AND (@, X", $80+')'	; $21=AND (zp,X)
       00:F032: 28 40 2C 20 
       00:F036: 58 A9 
   973 00:F038: 3F C0        	db	"?", $80+'@'		; $22=?
   974 00:F03A: BF           	db	$80+'?'			; $23=?
   975 00:F03B: 42 49 54 20  	db	"BIT ", $80+'@'		; $24=BIT zp
       00:F03F: C0 
   976 00:F040: 41 4E 44 20  	db	"AND ", $80+'@'		; $25=AND zp
       00:F044: C0 
   977 00:F045: 52 4F 4C 20  	db	"ROL ", $80+'@'		; $26=ROL zp
       00:F049: C0 
   978 00:F04A: 52 4D 42 32  	db	"RMB2 ", $80+'@'	; $27=RMB2 zp		CMOS Rockwell
       00:F04E: 20 C0 
   979 00:F050: 50 4C D0     	db	"PL", $80+'P'		; $28=PLP
   980 00:F053: 41 4E 44 20  	db	"AND #", $80+'@'	; $29=AND #
       00:F057: 23 C0 
   981 00:F059: 52 4F CC     	db	"RO", $80+'L'		; $2A=ROL
   982 00:F05C: BF           	db	$80+'?'			; $2B=?
   983 00:F05D: 42 49 54 20  	db	"BIT ", $80+'&'		; $2C=BIT abs
       00:F061: A6 
   984 00:F062: 41 4E 44 20  	db	"AND ", $80+'&'		; $2D=AND abs
       00:F066: A6 
   985 00:F067: 52 4F 4C 20  	db	"ROL ", $80+'&'		; $2E=ROL abs
       00:F06B: A6 
   986 00:F06C: 42 42 52 32  	db	"BBR2 @,", $80+'%'	; $2F=BBR2 zp, rel	CMOS Rockwell
       00:F070: 20 40 2C A5 
   987 00:F074: 42 4D 49 20  	db	"BMI ", $80+'%'		; $30=BMI rel
       00:F078: A5 
   988 00:F079: 41 4E 44 20  	db	"AND (@), ", $80+'Y'	; $31=AND (zp),Y
       00:F07D: 28 40 29 2C 
       00:F081: 20 D9 
   989 00:F083: 41 4E 44 20  	db	"AND (@", $80+')'	; $32=AND (zp)		CMOS
       00:F087: 28 40 A9 
   990 00:F08A: BF           	db	$80+'?'			; $33=?
   991 00:F08B: 42 49 54 20  	db	"BIT @, ", $80+'X'	; $34=BIT zp,X		CMOS
       00:F08F: 40 2C 20 D8 
   992 00:F093: 41 4E 44 20  	db	"AND @, ", $80+'X'	; $35=AND zp,X
       00:F097: 40 2C 20 D8 
   993 00:F09B: 52 4F 4C 20  	db	"ROL @, ", $80+'X'	; $36=ROL zp,X
       00:F09F: 40 2C 20 D8 
   994 00:F0A3: 52 4D 42 33  	db	"RMB3 ", $80+'@'	; $37=RMB3 zp		CMOS Rockwell
       00:F0A7: 20 C0 
   995 00:F0A9: 53 45 C3     	db	"SE", $80+'C'		; $38=SEC
   996 00:F0AC: 41 4E 44 20  	db	"AND &, ", $80+'Y'	; $39=AND abs,Y
       00:F0B0: 26 2C 20 D9 
   997 00:F0B4: 44 45 C3     	db	"DE", $80+'C'		; $3A=DEC		CMOS
   998 00:F0B7: BF           	db	$80+'?'			; $3B=?
   999 00:F0B8: 42 49 54 20  	db	"BIT &, ", $80+'X'	; $3C=BIT abs,X		CMOS
       00:F0BC: 26 2C 20 D8 
  1000 00:F0C0: 41 4E 44 20  	db	"AND &, ", $80+'X'	; $3D=AND abs,X
       00:F0C4: 26 2C 20 D8 
  1001 00:F0C8: 52 4F 4C 20  	db	"ROL &, ", $80+'X'	; $3E=ROL abs,X
       00:F0CC: 26 2C 20 D8 
  1002 00:F0D0: 42 42 52 33  	db	"BBR3 @,", $80+'%'	; $3F=BBR3 zp, rel	CMOS Rockwell
       00:F0D4: 20 40 2C A5 
  1003 00:F0D8: 52 54 C9     	db	"RT", $80+'I'		; $40=RTI
  1004 00:F0DB: 45 4F 52 20  	db	"EOR (@, X", $80+')'	; $41=EOR (zp,X)
       00:F0DF: 28 40 2C 20 
       00:F0E3: 58 A9 
  1005 00:F0E5: 3F C0        	db	"?", $80+'@'		; $42=?
  1006 00:F0E7: BF           	db	$80+'?'			; $43=?
  1007 00:F0E8: 3F 28 33 29  	db	"?(3)", $80+'@'		; $44=?
       00:F0EC: C0 
  1008 00:F0ED: 45 4F 52 20  	db	"EOR ", $80+'@'		; $45=EOR zp
       00:F0F1: C0 
  1009 00:F0F2: 4C 53 52 20  	db	"LSR ", $80+'@'		; $46=LSR zp
       00:F0F6: C0 
  1010 00:F0F7: 52 4D 42 34  	db	"RMB4 ", $80+'@'	; $47=RMB4 zp		CMOS Rockwell
       00:F0FB: 20 C0 
  1011 00:F0FD: 50 48 C1     	db	"PH", $80+'A'		; $48=PHA
  1012 00:F100: 45 4F 52 20  	db	"EOR #", $80+'@'	; $49=EOR #
       00:F104: 23 C0 
  1013 00:F106: 4C 53 D2     	db	"LS", $80+'R'		; $4A=LSR
  1014 00:F109: BF           	db	$80+'?'			; $4B=?
  1015 00:F10A: 4A 4D 50 20  	db	"JMP ", $80+'&'		; $4C=JMP abs
       00:F10E: A6 
  1016 00:F10F: 45 4F 52 20  	db	"EOR ", $80+'&'		; $4D=EOR abs
       00:F113: A6 
  1017 00:F114: 4C 53 52 20  	db	"LSR ", $80+'&'		; $4E=LSR abs
       00:F118: A6 
  1018 00:F119: 42 42 52 34  	db	"BBR4 @,", $80+'%'	; $4F=BBR4 zp, rel	CMOS Rockwell
       00:F11D: 20 40 2C A5 
  1019 00:F121: 42 56 43 20  	db	"BVC ", $80+'%'		; $50=BVC rel
       00:F125: A5 
  1020 00:F126: 45 4F 52 20  	db	"EOR (@), ", $80+'Y'	; $51=EOR (zp),Y
       00:F12A: 28 40 29 2C 
       00:F12E: 20 D9 
  1021 00:F130: 45 4F 52 20  	db	"EOR (@", $80+')'	; $52=EOR (zp)		CMOS
       00:F134: 28 40 A9 
  1022 00:F137: BF           	db	$80+'?'			; $53=?
  1023 00:F138: 3F 28 34 29  	db	"?(4)", $80+'@'		; $54=?
       00:F13C: C0 
  1024 00:F13D: 45 4F 52 20  	db	"EOR @, ", $80+'X'	; $55=EOR zp,X
       00:F141: 40 2C 20 D8 
  1025 00:F145: 4C 53 52 20  	db	"LSR @, ", $80+'X'	; $56=LSR zp,X
       00:F149: 40 2C 20 D8 
  1026 00:F14D: 52 4D 42 35  	db	"RMB5 ", $80+'@'	; $57=RMB5 zp		CMOS Rockwell
       00:F151: 20 C0 
  1027 00:F153: 43 4C C9     	db	"CL", $80+'I'		; $58=CLI
  1028 00:F156: 45 4F 52 20  	db	"EOR &, ", $80+'Y'	; $59=EOR abs,Y
       00:F15A: 26 2C 20 D9 
  1029 00:F15E: 50 48 D9     	db	"PH", $80+'Y'		; $5A=PHY		CMOS
  1030 00:F161: BF           	db	$80+'?'			; $5B=?
  1031 00:F162: 3F 28 38 29  	db	"?(8)", $80+'&'		; $5C=?
       00:F166: A6 
  1032 00:F167: 45 4F 52 20  	db	"EOR &, ", $80+'X'	; $5D=EOR abs,X
       00:F16B: 26 2C 20 D8 
  1033 00:F16F: 4C 53 52 20  	db	"LSR &, ", $80+'X'	; $5E=LSR abs,X
       00:F173: 26 2C 20 D8 
  1034 00:F177: 42 42 52 35  	db	"BBR5 @,", $80+'%'	; $5F=BBR5 zp, rel	CMOS Rockwell
       00:F17B: 20 40 2C A5 
  1035 00:F17F: 52 54 D3     	db	"RT", $80+'S'		; $60=RTS
  1036 00:F182: 41 44 43 20  	db	"ADC (@, X", $80+')'	; $61=ADC (zp,X)
       00:F186: 28 40 2C 20 
       00:F18A: 58 A9 
  1037 00:F18C: 3F C0        	db	"?", $80+'@'		; $62=?
  1038 00:F18E: BF           	db	$80+'?'			; $63=?
  1039 00:F18F: 53 54 5A 20  	db	"STZ ", $80+'@'		; $64=STZ zp		CMOS
       00:F193: C0 
  1040 00:F194: 41 44 43 20  	db	"ADC ", $80+'@'		; $65=ADC zp
       00:F198: C0 
  1041 00:F199: 52 4F 52 20  	db	"ROR ", $80+'@'		; $66=ROR zp
       00:F19D: C0 
  1042 00:F19E: 52 4D 42 36  	db	"RMB6 ", $80+'@'	; $67=RMB6 zp		CMOS Rockwell
       00:F1A2: 20 C0 
  1043 00:F1A4: 50 4C C1     	db	"PL", $80+'A'		; $68=PLA
  1044 00:F1A7: 41 44 43 20  	db	"ADC #", $80+'@'	; $69=ADC #
       00:F1AB: 23 C0 
  1045 00:F1AD: 52 4F D2     	db	"RO", $80+'R'		; $6A=ROR
  1046 00:F1B0: BF           	db	$80+'?'			; $6B=?
  1047 00:F1B1: 4A 4D 50 20  	db	"JMP (&", $80+')'	; $6C=JMP (abs)
       00:F1B5: 28 26 A9 
  1048 00:F1B8: 41 44 43 20  	db	"ADC ", $80+'&'		; $6D=ADC abs
       00:F1BC: A6 
  1049 00:F1BD: 52 4F 52 20  	db	"ROR ", $80+'&'		; $6E=ROR abs
       00:F1C1: A6 
  1050 00:F1C2: 42 42 52 36  	db	"BBR6 @,", $80+'%'	; $6F=BBR6 zp, rel	CMOS Rockwell
       00:F1C6: 20 40 2C A5 
  1051 00:F1CA: 42 56 53 20  	db	"BVS ", $80+'%'		; $70=BVS rel
       00:F1CE: A5 
  1052 00:F1CF: 41 44 43 20  	db	"ADC (@), ", $80+'Y'	; $71=ADC (zp),Y
       00:F1D3: 28 40 29 2C 
       00:F1D7: 20 D9 
  1053 00:F1D9: 41 44 43 20  	db	"ADC (@", $80+')'	; $72=ADC (zp)		CMOS
       00:F1DD: 28 40 A9 
  1054 00:F1E0: BF           	db	$80+'?'			; $73=?
  1055 00:F1E1: 53 54 5A 20  	db	"STZ @, ", $80+'X'	; $74=STZ zp,X		CMOS
       00:F1E5: 40 2C 20 D8 
  1056 00:F1E9: 41 44 43 20  	db	"ADC @, ", $80+'X'	; $75=ADC zp,X
       00:F1ED: 40 2C 20 D8 
  1057 00:F1F1: 52 4F 52 20  	db	"ROR @, ", $80+'X'	; $76=ROR zp,X
       00:F1F5: 40 2C 20 D8 
  1058 00:F1F9: 52 4D 42 37  	db	"RMB7 ", $80+'@'	; $77=RMB7 zp		CMOS Rockwell
       00:F1FD: 20 C0 
  1059 00:F1FF: 53 45 C9     	db	"SE", $80+'I'		; $78=SEI
  1060 00:F202: 41 44 43 20  	db	"ADC &, ", $80+'Y'	; $79=ADC abs, Y
       00:F206: 26 2C 20 D9 
  1061 00:F20A: 50 4C D9     	db	"PL", $80+'Y'		; $7A=PLY		CMOS
  1062 00:F20D: BF           	db	$80+'?'			; $7B=?
  1063 00:F20E: 4A 4D 50 20  	db	"JMP (&, X", $80+')'	; $7C=JMP (abs,X)
       00:F212: 28 26 2C 20 
       00:F216: 58 A9 
  1064 00:F218: 41 44 43 20  	db	"ADC &, ", $80+'X'	; $7D=ADC abs, X
       00:F21C: 26 2C 20 D8 
  1065 00:F220: 52 4F 52 20  	db	"ROR &, ", $80+'X'	; $7E=ROR abs, X
       00:F224: 26 2C 20 D8 
  1066 00:F228: 42 42 52 37  	db	"BBR7 @,", $80+'%'	; $7F=BBR7 zp, rel	CMOS Rockwell
       00:F22C: 20 40 2C A5 
  1067 00:F230: 42 52 41 20  	db	"BRA ", $80+'%'		; $80=BRA rel		CMOS
       00:F234: A5 
  1068 00:F235: 53 54 41 20  	db	"STA (@, X", $80+')'	; $81=STA (zp,X)
       00:F239: 28 40 2C 20 
       00:F23D: 58 A9 
  1069 00:F23F: 3F C0        	db	"?", $80+'@'		; $82=?
  1070 00:F241: BF           	db	$80+'?'			; $83=?
  1071 00:F242: 53 54 59 20  	db	"STY ", $80+'@'		; $84=STY zp
       00:F246: C0 
  1072 00:F247: 53 54 41 20  	db	"STA ", $80+'@'		; $85=STA zp
       00:F24B: C0 
  1073 00:F24C: 53 54 58 20  	db	"STX ", $80+'@'		; $86=STX zp		CMOS
       00:F250: C0 
  1074 00:F251: 53 4D 42 30  	db	"SMB0 ", $80+'@'	; $87=SMB0 zp		CMOS Rockwell
       00:F255: 20 C0 
  1075 00:F257: 44 45 D9     	db	"DE", $80+'Y'		; $88=DEY
  1076 00:F25A: 42 49 54 20  	db	"BIT #", $80+'@'	; $89=BIT #
       00:F25E: 23 C0 
  1077 00:F260: 54 58 C1     	db	"TX", $80+'A'		; $8A=TXA
  1078 00:F263: BF           	db	$80+'?'			; $8B=?
  1079 00:F264: 53 54 59 20  	db	"STY ", $80+'&'		; $8C=STY abs
       00:F268: A6 
  1080 00:F269: 53 54 41 20  	db	"STA ", $80+'&'		; $8D=STA abs
       00:F26D: A6 
  1081 00:F26E: 53 54 58 20  	db	"STX ", $80+'&'		; $8E=STX abs
       00:F272: A6 
  1082 00:F273: 42 42 53 30  	db	"BBS0 @, ", $80+'%'	; $8F=BBS0 zp, rel	CMOS Rockwell
       00:F277: 20 40 2C 20 
       00:F27B: A5 
  1083 00:F27C: 42 43 43 20  	db	"BCC ", $80+'%'		; $90=BCC rel
       00:F280: A5 
  1084 00:F281: 53 54 41 20  	db	"STA (@), ", $80+'Y'	; $91=STA (zp),Y
       00:F285: 28 40 29 2C 
       00:F289: 20 D9 
  1085 00:F28B: 53 54 41 20  	db	"STA (@", $80+')'	; $92=STA (zp)		CMOS
       00:F28F: 28 40 A9 
  1086 00:F292: BF           	db	$80+'?'			; $93=?
  1087 00:F293: 53 54 59 20  	db	"STY @, ", $80+'X'	; $94=STY zp,X
       00:F297: 40 2C 20 D8 
  1088 00:F29B: 53 54 41 20  	db	"STA @, ", $80+'X'	; $95=STA zp,X
       00:F29F: 40 2C 20 D8 
  1089 00:F2A3: 53 54 58 20  	db	"STX @, ", $80+'Y'	; $96=STX zp,Y
       00:F2A7: 40 2C 20 D9 
  1090 00:F2AB: 53 4D 42 31  	db	"SMB1 ", $80+'@'	; $97=SMB1 zp		CMOS Rockwell
       00:F2AF: 20 C0 
  1091 00:F2B1: 54 59 C1     	db	"TY", $80+'A'		; $98=TYA
  1092 00:F2B4: 53 54 41 20  	db	"STA &, ", $80+'Y'	; $99=STA abs, Y
       00:F2B8: 26 2C 20 D9 
  1093 00:F2BC: 54 58 D3     	db	"TX", $80+'S'		; $9A=TXS
  1094 00:F2BF: BF           	db	$80+'?'			; $9B=?
  1095 00:F2C0: 53 54 5A 20  	db	"STZ ", $80+'&'		; $9C=STZ abs		CMOS
       00:F2C4: A6 
  1096 00:F2C5: 53 54 41 20  	db	"STA &, ", $80+'X'	; $9D=STA abs,X
       00:F2C9: 26 2C 20 D8 
  1097 00:F2CD: 53 54 5A 20  	db	"STZ &, ", $80+'X'	; $9E=STZ abs,X		CMOS
       00:F2D1: 26 2C 20 D8 
  1098 00:F2D5: 42 42 53 31  	db	"BBS1 @, ", $80+'%'	; $9F=BBS1 zp, rel	CMOS Rockwell
       00:F2D9: 20 40 2C 20 
       00:F2DD: A5 
  1099 00:F2DE: 4C 44 59 20  	db	"LDY #", $80+'@'	; $A0=LDY #
       00:F2E2: 23 C0 
  1100 00:F2E4: 4C 44 41 20  	db	"LDA (@, X", $80+')'	; $A1=LDA (zp,X)
       00:F2E8: 28 40 2C 20 
       00:F2EC: 58 A9 
  1101 00:F2EE: 4C 44 58 20  	db	"LDX #", $80+'@'	; $A2=LDX #
       00:F2F2: 23 C0 
  1102 00:F2F4: BF           	db	$80+'?'			; $A3=?
  1103 00:F2F5: 4C 44 59 20  	db	"LDY ", $80+'@'		; $A4=LDY zp
       00:F2F9: C0 
  1104 00:F2FA: 4C 44 41 20  	db	"LDA ", $80+'@'		; $A5=LDA zp
       00:F2FE: C0 
  1105 00:F2FF: 4C 44 58 20  	db	"LDX ", $80+'@'		; $A6=LDX zp
       00:F303: C0 
  1106 00:F304: 53 4D 42 32  	db	"SMB2 ", $80+'@'	; $A7=SMB2 zp		CMOS Rockwell
       00:F308: 20 C0 
  1107 00:F30A: 54 41 D9     	db	"TA", $80+'Y'		; $A8=TAY
  1108 00:F30D: 4C 44 41 20  	db	"LDA #", $80+'@'	; $A9=LDA #
       00:F311: 23 C0 
  1109 00:F313: 54 41 D8     	db	"TA", $80+'X'		; $AA=TAX
  1110 00:F316: BF           	db	$80+'?'			; $AB=?
  1111 00:F317: 4C 44 59 20  	db	"LDY ", $80+'&'		; $AC=LDY abs
       00:F31B: A6 
  1112 00:F31C: 4C 44 41 20  	db	"LDA ", $80+'&'		; $AD=LDA abs
       00:F320: A6 
  1113 00:F321: 4C 44 58 20  	db	"LDX ", $80+'&'		; $AE=LDX abs
       00:F325: A6 
  1114 00:F326: 42 42 53 32  	db	"BBS2 @, ", $80+'%'	; $AF=BBS2 zp, rel	CMOS Rockwell
       00:F32A: 20 40 2C 20 
       00:F32E: A5 
  1115 00:F32F: 42 43 53 20  	db	"BCS ", $80+'%'		; $B0=BCS rel
       00:F333: A5 
  1116 00:F334: 4C 44 41 20  	db	"LDA (@), ", $80+'Y'	; $B1=LDA (zp),Y
       00:F338: 28 40 29 2C 
       00:F33C: 20 D9 
  1117 00:F33E: 4C 44 41 20  	db	"LDA (@", $80+')'	; $B2=LDA (zp)		CMOS
       00:F342: 28 40 A9 
  1118 00:F345: BF           	db	$80+'?'			; $B3=?
  1119 00:F346: 4C 44 59 20  	db	"LDY @, ", $80+'X'	; $B4=LDY zp,X
       00:F34A: 40 2C 20 D8 
  1120 00:F34E: 4C 44 41 20  	db	"LDA @, ", $80+'X'	; $B5=LDA zp,X
       00:F352: 40 2C 20 D8 
  1121 00:F356: 4C 44 58 20  	db	"LDX @,", $80+'Y'	; $B6=LDX zp,Y
       00:F35A: 40 2C D9 
  1122 00:F35D: 53 4D 42 33  	db	"SMB3 ", $80+'@'	; $B7=SMB3 zp		CMOS Rockwell
       00:F361: 20 C0 
  1123 00:F363: 43 4C D6     	db	"CL", $80+'V'		; $B8=CLV
  1124 00:F366: 4C 44 41 20  	db	"LDA &, ", $80+'Y'	; $B9=LDA abs, Y
       00:F36A: 26 2C 20 D9 
  1125 00:F36E: 54 53 D8     	db	"TS", $80+'X'		; $BA=TSX
  1126 00:F371: BF           	db	$80+'?'			; $BB=?
  1127 00:F372: 4C 44 59 20  	db	"LDY &, ", $80+'X'	; $BC=LDY abs,X
       00:F376: 26 2C 20 D8 
  1128 00:F37A: 4C 44 41 20  	db	"LDA &, ", $80+'X'	; $BD=LDA abs,X
       00:F37E: 26 2C 20 D8 
  1129 00:F382: 4C 44 58 20  	db	"LDX &, ", $80+'Y'	; $BE=LDX abs,Y
       00:F386: 26 2C 20 D9 
  1130 00:F38A: 42 42 53 33  	db	"BBS3 @, ", $80+'%'	; $BF=BBS3 zp, rel	CMOS Rockwell
       00:F38E: 20 40 2C 20 
       00:F392: A5 
  1131 00:F393: 43 50 59 20  	db	"CPY #", $80+'@'	; $C0=CPY #
       00:F397: 23 C0 
  1132 00:F399: 43 4D 50 20  	db	"CMP (@, X", $80+')'	; $C1=CMP (zp,X)
       00:F39D: 28 40 2C 20 
       00:F3A1: 58 A9 
  1133 00:F3A3: 3F C0        	db	"?", $80+'@'		; $C2=?
  1134 00:F3A5: BF           	db	$80+'?'			; $C3=?
  1135 00:F3A6: 43 50 59 20  	db	"CPY ", $80+'@'		; $C4=CPY zp
       00:F3AA: C0 
  1136 00:F3AB: 43 4D 50 20  	db	"CMP ", $80+'@'		; $C5=CMP zp
       00:F3AF: C0 
  1137 00:F3B0: 44 45 43 20  	db	"DEC ", $80+'@'		; $C6=DEC zp
       00:F3B4: C0 
  1138 00:F3B5: 53 4D 42 34  	db	"SMB4 ", $80+'@'	; $C7=SMB4 zp		CMOS Rockwell
       00:F3B9: 20 C0 
  1139 00:F3BB: 49 4E D9     	db	"IN", $80+'Y'		; $C8=INY
  1140 00:F3BE: 43 4D 50 20  	db	"CMP #", $80+'@'	; $C9=CMP #
       00:F3C2: 23 C0 
  1141 00:F3C4: 44 45 D8     	db	"DE", $80+'X'		; $CA=DEX
  1142 00:F3C7: 57 41 C9     	db	"WA", $80+'I'		; $CB=WAI		CMOS WDC
  1143 00:F3CA: 43 50 59 20  	db	"CPY ", $80+'&'		; $CC=CPY abs
       00:F3CE: A6 
  1144 00:F3CF: 43 4D 50 20  	db	"CMP ", $80+'&'		; $CD=CMP abs
       00:F3D3: A6 
  1145 00:F3D4: 44 45 43 20  	db	"DEC ", $80+'&'		; $CE=DEC abs
       00:F3D8: A6 
  1146 00:F3D9: 42 42 53 34  	db	"BBS4 @, ", $80+'%'	; $CF=BBS4 zp, rel	CMOS Rockwell
       00:F3DD: 20 40 2C 20 
       00:F3E1: A5 
  1147 00:F3E2: 42 4E 45 20  	db	"BNE ", $80+'%'		; $D0=BNE rel
       00:F3E6: A5 
  1148 00:F3E7: 43 4D 50 20  	db	"CMP (@), ", $80+'Y'	; $D1=CMP (zp),Y
       00:F3EB: 28 40 29 2C 
       00:F3EF: 20 D9 
  1149 00:F3F1: 43 4D 50 20  	db	"CMP (@", $80+')'	; $D2=CMP (zp)		CMOS
       00:F3F5: 28 40 A9 
  1150 00:F3F8: BF           	db	$80+'?'			; $D3=?
  1151 00:F3F9: 3F 28 34 29  	db	"?(4)", $80+'@'		; $D4=?
       00:F3FD: C0 
  1152 00:F3FE: 43 4D 50 20  	db	"CMP @, ", $80+'X'	; $D5=CMP zp,X
       00:F402: 40 2C 20 D8 
  1153 00:F406: 44 45 43 20  	db	"DEC @, ", $80+'X'	; $D6=DEC zp,X
       00:F40A: 40 2C 20 D8 
  1154 00:F40E: 53 4D 42 35  	db	"SMB5 ", $80+'@'	; $D7=SMB5 zp		CMOS Rockwell
       00:F412: 20 C0 
  1155 00:F414: 43 4C C4     	db	"CL", $80+'D'		; $D8=CLD
  1156 00:F417: 43 4D 50 20  	db	"CMP &, ", $80+'Y'	; $D9=CMP abs, Y
       00:F41B: 26 2C 20 D9 
  1157 00:F41F: 50 48 D8     	db	"PH", $80+'X'		; $DA=PHX		CMOS
  1158 00:F422: 53 54 D0     	db	"ST", $80+'P'		; $DB=STP		CMOS WDC
  1159 00:F425: 3F 28 34 29  	db	"?(4)", $80+'&'		; $DC=?
       00:F429: A6 
  1160 00:F42A: 43 4D 50 20  	db	"CMP &, ", $80+'X'	; $DD=CMP abs,X
       00:F42E: 26 2C 20 D8 
  1161 00:F432: 44 45 43 20  	db	"DEC &, ", $80+'X'	; $DE=DEC abs,X
       00:F436: 26 2C 20 D8 
  1162 00:F43A: 42 42 53 35  	db	"BBS5 @, ", $80+'%'	; $DF=BBS5 zp, rel	CMOS Rockwell
       00:F43E: 20 40 2C 20 
       00:F442: A5 
  1163 00:F443: 43 50 58 20  	db	"CPX #", $80+'@'	; $E0=CPX #
       00:F447: 23 C0 
  1164 00:F449: 53 42 43 20  	db	"SBC (@, X", $80+')'	; $E1=SBC (zp,X)
       00:F44D: 28 40 2C 20 
       00:F451: 58 A9 
  1165 00:F453: 3F C0        	db	"?", $80+'@'		; $E2=?
  1166 00:F455: BF           	db	$80+'?'			; $E3=?
  1167 00:F456: 43 50 58 20  	db	"CPX ", $80+'@'		; $E4=CPX zp
       00:F45A: C0 
  1168 00:F45B: 53 42 43 20  	db	"SBC ", $80+'@'		; $E5=SBC zp
       00:F45F: C0 
  1169 00:F460: 49 4E 43 20  	db	"INC ", $80+'@'		; $E6=INC zp
       00:F464: C0 
  1170 00:F465: 53 4D 42 36  	db	"SMB6 ", $80+'@'	; $E7=SMB6 zp		CMOS Rockwell
       00:F469: 20 C0 
  1171 00:F46B: 49 4E D8     	db	"IN", $80+'X'		; $E8=INX
  1172 00:F46E: 53 42 43 20  	db	"SBC #", $80+'@'	; $E9=SBC #
       00:F472: 23 C0 
  1173 00:F474: 4E 4F D0     	db	"NO", $80+'P'		; $EA=NOP
  1174 00:F477: BF           	db	$80+'?'			; $EB=?
  1175 00:F478: 43 50 58 20  	db	"CPX ", $80+'&'		; $EC=CPX abs
       00:F47C: A6 
  1176 00:F47D: 53 42 43 20  	db	"SBC ", $80+'&'		; $ED=SBC abs
       00:F481: A6 
  1177 00:F482: 49 4E 43 20  	db	"INC ", $80+'&'		; $EE=INC abs
       00:F486: A6 
  1178 00:F487: 42 42 53 36  	db	"BBS6 @, ", $80+'%'	; $EF=BBS6 zp, rel	CMOS Rockwell
       00:F48B: 20 40 2C 20 
       00:F48F: A5 
  1179 00:F490: 42 45 51 20  	db	"BEQ ", $80+'%'		; $F0=BEQ rel
       00:F494: A5 
  1180 00:F495: 53 42 43 20  	db	"SBC (@), ", $80+'Y'	; $F1=SBC (zp),Y
       00:F499: 28 40 29 2C 
       00:F49D: 20 D9 
  1181 00:F49F: 53 42 43 20  	db	"SBC (@", $80+')'	; $F2=SBC (zp)		CMOS
       00:F4A3: 28 40 A9 
  1182 00:F4A6: BF           	db	$80+'?'			; $F3=?
  1183 00:F4A7: 3F 28 34 29  	db	"?(4)", $80+'@'		; $F4=?
       00:F4AB: C0 
  1184 00:F4AC: 53 42 43 20  	db	"SBC @, ", $80+'X'	; $F5=SBC zp,X
       00:F4B0: 40 2C 20 D8 
  1185 00:F4B4: 49 4E 43 20  	db	"INC @, ", $80+'X'	; $F6=INC zp,X
       00:F4B8: 40 2C 20 D8 
  1186 00:F4BC: 53 4D 42 37  	db	"SMB7 ", $80+'@'	; $F7=SMB7 zp		CMOS Rockwell
       00:F4C0: 20 C0 
  1187 00:F4C2: 53 45 C4     	db	"SE", $80+'D'		; $F8=SED
  1188 00:F4C5: 53 42 43 20  	db	"SBC &, ", $80+'Y'	; $F9=SBC abs,Y
       00:F4C9: 26 2C 20 D9 
  1189 00:F4CD: 50 4C D8     	db	"PL", $80+'X'		; $FA=PLX		CMOS
  1190 00:F4D0: BF           	db	$80+'?'			; $FB=?
  1191 00:F4D1: 3F 28 34 29  	db	"?(4)", $80+'&'		; $FC=?
       00:F4D5: A6 
  1192 00:F4D6: 53 42 43 20  	db	"SBC &, ", $80+'X'	; $FD=SBC abs,X
       00:F4DA: 26 2C 20 D8 
  1193 00:F4DE: 49 4E 43 20  	db	"INC &, ", $80+'X'	; $FE=INC abs,X
       00:F4E2: 26 2C 20 D8 
  1194 00:F4E6: 42 42 53 37  	db	"BBS7 @, ", $80+'%'	; $FF=BBS7 zp, rel	CMOS Rockwell
       00:F4EA: 20 40 2C 20 
       00:F4EE: A5 
  1195                        
  1196                        ;;;
  1197                        ;;;  Go address
  1198                        ;;;
  1199                        GO
  1200 00:F4EF: E8           	INX
  1201 00:F4F0: 20 C3 FB     	JSR	SKIPSP
  1202 00:F4F3: 20 DA FB     	JSR	RDHEX
  1203 00:F4F6: AD 16 E9     	LDA	CNT
  1204 00:F4F9: D0 0D        	BNE	GP0		; jmp if 1st arg. exist
  1205                        
  1206 00:F4FB: 20 C3 FB     	JSR	SKIPSP
  1207 00:F4FE: BD B1 EA     	LDA	INBUF,X
  1208 00:F501: D0 1B        	bne	GP01		; jmp if remain strings exist
  1209                        
  1210                        	;; No arg.
  1211                        
  1212                        G00
  1213 00:F503: 9C E7 EA     	stz	stp_flg		; clear stop flag
  1214 00:F506: 80 54        	bra	G0
  1215                        
  1216                        GP0	;; 1st arg. found
  1217 00:F508: AD 14 E9     	LDA	PT1
  1218 00:F50B: 8D 27 E9     	STA	REGPC		; set start address(low)
  1219 00:F50E: AD 15 E9     	LDA	PT1+1
  1220 00:F511: 8D 28 E9     	STA	REGPC+1		; set start address(high)
  1221                        
  1222                        	; check 2nd arg.
  1223 00:F514: 20 C3 FB     	JSR	SKIPSP
  1224 00:F517: BD B1 EA     	LDA	INBUF,X
  1225 00:F51A: C9 00        	CMP	#0
  1226 00:F51C: F0 E5        	BEQ	G00		; jmp if no 2nd arg.
  1227                        GP01
  1228 00:F51E: C9 2C        	CMP	#','
  1229 00:F520: F0 03        	BEQ	GP1		; chk 2nd arg
  1230                        
  1231                        G_ERR
  1232 00:F522: 4C 05 EC     	JMP	ERR
  1233                        
  1234                        GP1	;; check 2nd arg.
  1235 00:F525: E8           	INX
  1236 00:F526: 20 C3 FB     	JSR	SKIPSP
  1237 00:F529: 20 DA FB     	JSR	RDHEX
  1238 00:F52C: 20 C3 FB     	JSR	SKIPSP
  1239 00:F52F: AD 16 E9     	LDA	CNT
  1240 00:F532: F0 EE        	BEQ	G_ERR
  1241                        
  1242                        	;; set 2nd arg.
  1243                        
  1244 00:F534: EE E7 EA     	inc	stp_flg		; set stop flag
  1245                        
  1246                        	; save original binary at break point
  1247 00:F537: A0 00        	ldy	#0
  1248                        
  1249                        ;	lda	(PT1),y		; get first binary at stop address
  1250 00:F539: 20 98 FA     	jsr	lda_pt1
  1251                        
  1252 00:F53C: 8D E8 EA     	sta	sav_dat		; save original binary
  1253 00:F53F: C8           	iny
  1254                        
  1255                        ;	lda	(PT1),y		; get second binary at stop address
  1256 00:F540: 20 98 FA     	jsr	lda_pt1
  1257                        
  1258 00:F543: 8D E9 EA     	sta	sav_dat+1	; save original binary
  1259                        
  1260                        	; set break point
  1261 00:F546: A9 00        	lda	#0		; BRK 
  1262 00:F548: A8           	tay
  1263                        
  1264                        ;	sta	(PT1),y		; set BRK opecode
  1265 00:F549: 20 C8 FA     	jsr	sta_pt1
  1266                        
  1267 00:F54C: C8           	iny
  1268                        ;	sta	(PT1),y		; set BRK operand(#0)
  1269 00:F54D: 20 C8 FA     	jsr	sta_pt1
  1270                        	
  1271 00:F550: AD 14 E9     	lda	PT1
  1272 00:F553: 8D 19 E9     	sta	sav_adr		; save break point addr(L)
  1273 00:F556: AD 15 E9     	lda	PT1+1
  1274 00:F559: 8D 1A E9     	sta	sav_adr+1	; save break point addr(H)
  1275                        
  1276                        G0
  1277 00:F55C: AE 26 E9     	LDX	REGSP
  1278 00:F55F: 9A           	TXS			; SP
  1279 00:F560: AD 28 E9     	LDA	REGPC+1
  1280 00:F563: 48           	PHA			; PC(H)
  1281 00:F564: AD 27 E9     	LDA	REGPC
  1282 00:F567: 48           	PHA			; PC(L)
  1283 00:F568: AD 29 E9     	LDA	REGPSR
  1284 00:F56B: 48           	PHA			; PSR
  1285 00:F56C: AD 23 E9     	LDA	REGA
  1286 00:F56F: AE 24 E9     	LDX	REGX
  1287 00:F572: AC 25 E9     	LDY	REGY
  1288 00:F575: 40           	RTI
  1289                        
  1290                        ;;;
  1291                        ;;; Set memory
  1292                        ;;;
  1293                        SETM
  1294 00:F576: E8           	INX
  1295 00:F577: 20 C3 FB     	JSR	SKIPSP
  1296 00:F57A: 20 DA FB     	JSR	RDHEX
  1297 00:F57D: 20 C3 FB     	JSR	SKIPSP
  1298 00:F580: BD B1 EA     	LDA	INBUF,X
  1299 00:F583: F0 03        	BEQ	SM0
  1300 00:F585: 4C 05 EC     	JMP	ERR
  1301                        SM0
  1302 00:F588: AD 16 E9     	LDA	CNT
  1303 00:F58B: F0 0C        	BEQ	SM1
  1304 00:F58D: AD 14 E9     	LDA	PT1
  1305 00:F590: 8D 1F E9     	STA	SADDR
  1306 00:F593: AD 15 E9     	LDA	PT1+1
  1307 00:F596: 8D 20 E9     	STA	SADDR+1
  1308                        SM1:
  1309 00:F599: AD 20 E9     	LDA	SADDR+1
  1310 00:F59C: 20 29 FB     	JSR	HEXOUT2
  1311 00:F59F: AD 1F E9     	LDA	SADDR
  1312 00:F5A2: 20 29 FB     	JSR	HEXOUT2
  1313 00:F5A5: A9 22        	LDA	#$FF&DSEP1
  1314 00:F5A7: 8D 12 E9     	STA	PT0
  1315 00:F5AA: A9 FE        	LDA	#DSEP1>>8
  1316 00:F5AC: 8D 13 E9     	STA	PT0+1
  1317 00:F5AF: 20 0E FB     	JSR	STROUT
  1318 00:F5B2: A0 00        	LDY	#0
  1319                        
  1320                        ;	LDA	(SADDR),Y
  1321 00:F5B4: AD 1F E9     	lda	SADDR
  1322 00:F5B7: 8D C1 F5     	sta	opr12
  1323 00:F5BA: AD 20 E9     	lda	SADDR+1
  1324 00:F5BD: 8D C2 F5     	sta	opr12+1
  1325 00:F5C0: B9           	db	$B9		; LDA $xxxx,y
  1326 00:F5C1: 00 00        opr12	dw	0		; operand Absolute Indexed Y
  1327                        
  1328 00:F5C3: 20 29 FB     	JSR	HEXOUT2
  1329 00:F5C6: A9 20        	LDA	#' '
  1330 00:F5C8: 20 04 FF     	JSR	PUT_CH
  1331 00:F5CB: 20 78 FB     	JSR	GETLIN
  1332 00:F5CE: A2 00        	LDX	#0
  1333 00:F5D0: 20 C3 FB     	JSR	SKIPSP
  1334 00:F5D3: BD B1 EA     	LDA	INBUF,X
  1335 00:F5D6: D0 14        	BNE	SM2
  1336                        SM10	
  1337                        	;; Empty (Increment address)
  1338 00:F5D8: AD 1F E9     	LDA	SADDR
  1339 00:F5DB: 18           	CLC
  1340 00:F5DC: 69 01        	ADC	#1
  1341 00:F5DE: 8D 1F E9     	STA	SADDR
  1342 00:F5E1: AD 20 E9     	LDA	SADDR+1
  1343 00:F5E4: 69 00        	ADC	#0
  1344 00:F5E6: 8D 20 E9     	STA	SADDR+1
  1345 00:F5E9: 4C 99 F5     	JMP	SM1
  1346                        SM2
  1347 00:F5EC: C9 2D        	CMP	#'-'
  1348 00:F5EE: D0 14        	BNE	SM3
  1349                        	;; '-' (Decrement address)
  1350 00:F5F0: AD 1F E9     	LDA	SADDR
  1351 00:F5F3: 38           	SEC
  1352 00:F5F4: E9 01        	SBC	#1
  1353 00:F5F6: 8D 1F E9     	STA	SADDR
  1354 00:F5F9: AD 20 E9     	LDA	SADDR+1
  1355 00:F5FC: E9 00        	SBC	#0
  1356 00:F5FE: 8D 20 E9     	STA	SADDR+1
  1357 00:F601: 4C 99 F5     	JMP	SM1
  1358                        SM3
  1359 00:F604: C9 2E        	CMP	#'.'
  1360 00:F606: D0 03        	BNE	SM4
  1361                        	;; '.' (Quit)
  1362 00:F608: 4C 9B EB     	JMP	WSTART
  1363                        SM4
  1364 00:F60B: 20 DA FB     	JSR	RDHEX
  1365 00:F60E: AD 16 E9     	LDA	CNT
  1366 00:F611: D0 03        	BNE	SM40
  1367                        SMER
  1368 00:F613: 4C 05 EC     	JMP	ERR
  1369                        SM40
  1370                        	; repar original bug -------
  1371 00:F616: BD B1 EA     	LDA	INBUF,X
  1372 00:F619: D0 F8        	bne	SMER
  1373                        	; repar original bug -------
  1374                        
  1375                        ;	LDA	PT1
  1376                        ;	LDY	#0
  1377                        ;	STA	(SADDR),Y
  1378 00:F61B: AD 1F E9     	lda	SADDR
  1379 00:F61E: 8D 2D F6     	sta	opr13
  1380 00:F621: AD 20 E9     	lda	SADDR+1
  1381 00:F624: 8D 2E F6     	sta	opr13+1
  1382 00:F627: AD 14 E9     	LDA	PT1
  1383 00:F62A: A0 00        	LDY	#0
  1384 00:F62C: 99           	db	$99		; STA $xxxx,y
  1385 00:F62D: 00 00        opr13	dw	0		; operand Absolute Indexed Y
  1386                        
  1387 00:F62F: 4C D8 F5     	JMP	SM10
  1388                        
  1389                        ;;;
  1390                        ;;; LOAD HEX file
  1391                        ;;;
  1392                        LOADH
  1393 00:F632: E8           	INX
  1394 00:F633: 20 C3 FB     	JSR	SKIPSP
  1395 00:F636: 20 DA FB     	JSR	RDHEX
  1396 00:F639: 20 C3 FB     	JSR	SKIPSP
  1397 00:F63C: BD B1 EA     	LDA	INBUF,X
  1398 00:F63F: D0 D2        	BNE	SMER
  1399                        LH0
  1400 00:F641: 20 D0 FE     	JSR	KEY_IN
  1401 00:F644: 20 CF FB     	JSR	UPPER
  1402 00:F647: C9 53        	CMP	#'S'
  1403 00:F649: D0 03        	Bne	LH1a
  1404 00:F64B: 4C E7 F6     	jmp	LHS0
  1405                        LH1a
  1406 00:F64E: C9 3A        	CMP	#':'
  1407 00:F650: F0 0E        	BEQ	LHI0
  1408                        LH2
  1409                        	;; Skip to EOL
  1410 00:F652: C9 0D        	CMP	#CR
  1411 00:F654: F0 EB        	BEQ	LH0
  1412 00:F656: C9 0A        	CMP	#LF
  1413 00:F658: F0 E7        	BEQ	LH0
  1414                        LH3
  1415 00:F65A: 20 D0 FE     	JSR	KEY_IN
  1416 00:F65D: 4C 52 F6     	JMP	LH2
  1417                        
  1418                        LHI0
  1419 00:F660: 20 41 FB     	JSR	HEXIN
  1420 00:F663: 8D CD EA     	STA	CKSUM
  1421 00:F666: 8D 16 E9     	STA	CNT		; Length
  1422                        
  1423 00:F669: 20 41 FB     	JSR	HEXIN
  1424 00:F66C: 8D 22 E9     	STA	DMPPT+1		; Address H
  1425 00:F66F: 18           	CLC
  1426 00:F670: 6D CD EA     	ADC	CKSUM
  1427 00:F673: 8D CD EA     	STA	CKSUM
  1428                        
  1429 00:F676: 20 41 FB     	JSR	HEXIN
  1430 00:F679: 8D 21 E9     	STA	DMPPT		; Address L
  1431 00:F67C: 18           	CLC
  1432 00:F67D: 6D CD EA     	ADC	CKSUM
  1433 00:F680: 8D CD EA     	STA	CKSUM
  1434                        
  1435                        	;; Add offset
  1436 00:F683: AD 21 E9     	LDA	DMPPT
  1437 00:F686: 18           	CLC
  1438 00:F687: 6D 14 E9     	ADC	PT1
  1439 00:F68A: 8D 21 E9     	STA	DMPPT
  1440 00:F68D: AD 22 E9     	LDA	DMPPT+1
  1441 00:F690: 6D 15 E9     	ADC	PT1+1
  1442 00:F693: 8D 22 E9     	STA	DMPPT+1
  1443 00:F696: A0 00        	LDY	#0
  1444                        	
  1445 00:F698: 20 41 FB     	JSR	HEXIN
  1446 00:F69B: 8D C9 EA     	STA	RECTYP		; Record Type
  1447 00:F69E: 18           	CLC
  1448 00:F69F: 6D CD EA     	ADC	CKSUM
  1449 00:F6A2: 8D CD EA     	STA	CKSUM
  1450                        
  1451 00:F6A5: AD 16 E9     	LDA	CNT
  1452 00:F6A8: F0 1C        	BEQ	LHI3
  1453                        LHI1
  1454 00:F6AA: 20 41 FB     	JSR	HEXIN
  1455 00:F6AD: 48           	PHA
  1456 00:F6AE: 18           	CLC
  1457 00:F6AF: 6D CD EA     	ADC	CKSUM
  1458 00:F6B2: 8D CD EA     	STA	CKSUM
  1459                        
  1460 00:F6B5: AD C9 EA     	LDA	RECTYP
  1461 00:F6B8: D0 06        	BNE	LHI2
  1462                        
  1463 00:F6BA: 68           	PLA
  1464                        ;	STA	(DMPPT),Y
  1465 00:F6BB: 20 DA FA     	jsr	sta_dmppt
  1466                        
  1467 00:F6BE: C8           	INY
  1468 00:F6BF: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1469                        LHI2
  1470 00:F6C0: 68           	PLA
  1471 00:F6C1: CE 16 E9     	DEC	CNT
  1472 00:F6C4: D0 E4        	BNE	LHI1
  1473                        LHI3
  1474 00:F6C6: 20 41 FB     	JSR	HEXIN
  1475 00:F6C9: 18           	CLC
  1476 00:F6CA: 6D CD EA     	ADC	CKSUM
  1477 00:F6CD: D0 08        	BNE	LHIE		; Checksum error
  1478 00:F6CF: AD C9 EA     	LDA	RECTYP
  1479 00:F6D2: F0 86        	BEQ	LH3
  1480 00:F6D4: 4C 9B EB     	JMP	WSTART
  1481                        LHIE
  1482 00:F6D7: A9 FD        	LDA	#$FF&IHEMSG
  1483 00:F6D9: 8D 12 E9     	STA	PT0
  1484 00:F6DC: A9 FD        	LDA	#IHEMSG>>8
  1485 00:F6DE: 8D 13 E9     	STA	PT0+1
  1486 00:F6E1: 20 0E FB     	JSR	STROUT
  1487 00:F6E4: 4C 9B EB     	JMP	WSTART
  1488                        
  1489                        LHS0
  1490 00:F6E7: A9 2E        	lda	#'.'
  1491 00:F6E9: 20 04 FF     	jsr	PUT_CH
  1492                        
  1493 00:F6EC: 20 D0 FE     	JSR	KEY_IN
  1494 00:F6EF: 8D C9 EA     	STA	RECTYP		; Record Type
  1495                        
  1496 00:F6F2: 20 41 FB     	JSR	HEXIN
  1497 00:F6F5: 8D 16 E9     	STA	CNT		; (CNT) = Length+3
  1498 00:F6F8: 8D CD EA     	STA	CKSUM
  1499                        
  1500 00:F6FB: 20 41 FB     	JSR	HEXIN
  1501 00:F6FE: 8D 22 E9     	STA	DMPPT+1		; Address H
  1502 00:F701: 18           	CLC
  1503 00:F702: 6D CD EA     	ADC	CKSUM
  1504 00:F705: 8D CD EA     	STA	CKSUM
  1505                        	
  1506 00:F708: 20 41 FB     	JSR	HEXIN
  1507 00:F70B: 8D 21 E9     	STA	DMPPT		; Address L
  1508 00:F70E: 18           	CLC
  1509 00:F70F: 6D CD EA     	ADC	CKSUM
  1510 00:F712: 8D CD EA     	STA	CKSUM
  1511                        
  1512                        	;; Add offset
  1513 00:F715: AD 21 E9     	LDA	DMPPT
  1514 00:F718: 18           	CLC
  1515 00:F719: 6D 14 E9     	ADC	PT1
  1516 00:F71C: 8D 21 E9     	STA	DMPPT
  1517 00:F71F: AD 22 E9     	LDA	DMPPT+1
  1518 00:F722: 6D 15 E9     	ADC	PT1+1
  1519 00:F725: 8D 22 E9     	STA	DMPPT+1
  1520 00:F728: A0 00        	LDY	#0
  1521                        
  1522 00:F72A: CE 16 E9     	DEC	CNT
  1523 00:F72D: CE 16 E9     	DEC	CNT
  1524 00:F730: CE 16 E9     	DEC	CNT
  1525 00:F733: F0 1E        	BEQ	LHS3
  1526                        LHS1
  1527 00:F735: 20 41 FB     	JSR	HEXIN
  1528 00:F738: 48           	PHA
  1529 00:F739: 18           	CLC
  1530 00:F73A: 6D CD EA     	ADC	CKSUM
  1531 00:F73D: 8D CD EA     	STA	CKSUM		; Checksum
  1532                        
  1533 00:F740: AD C9 EA     	LDA	RECTYP
  1534 00:F743: C9 31        	CMP	#'1'
  1535 00:F745: D0 06        	BNE	LHS2
  1536                        
  1537 00:F747: 68           	PLA
  1538                        ;	STA	(DMPPT),Y
  1539 00:F748: 20 DA FA     	jsr	sta_dmppt
  1540                        
  1541 00:F74B: C8           	INY
  1542 00:F74C: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1543                        LHS2
  1544 00:F74D: 68           	PLA
  1545 00:F74E: CE 16 E9     	DEC	CNT
  1546 00:F751: D0 E2        	BNE	LHS1
  1547                        LHS3
  1548 00:F753: 20 41 FB     	JSR	HEXIN
  1549 00:F756: 18           	CLC
  1550 00:F757: 6D CD EA     	ADC	CKSUM
  1551 00:F75A: C9 FF        	CMP	#$FF
  1552 00:F75C: D0 0A        	BNE	LHSE		; Checksum error
  1553                        
  1554 00:F75E: AD C9 EA     	LDA	RECTYP
  1555 00:F761: C9 39        	CMP	#'9'
  1556 00:F763: F0 10        	BEQ	LHSR
  1557 00:F765: 4C 5A F6     	JMP	LH3
  1558                        LHSE
  1559 00:F768: A9 0A        	LDA	#$FF&SHEMSG
  1560 00:F76A: 8D 12 E9     	STA	PT0
  1561 00:F76D: A9 FE        	LDA	#SHEMSG>>8
  1562 00:F76F: 8D 13 E9     	STA	PT0+1
  1563 00:F772: 20 0E FB     	JSR	STROUT
  1564                        LHSR	
  1565 00:F775: 4C 9B EB     	JMP	WSTART
  1566                        
  1567                        ;;;
  1568                        ;;; Register
  1569                        ;;;
  1570                        REG
  1571 00:F778: E8           	INX
  1572 00:F779: 20 C3 FB     	JSR	SKIPSP
  1573 00:F77C: 20 CF FB     	JSR	UPPER
  1574 00:F77F: C9 00        	CMP	#0
  1575 00:F781: D0 06        	BNE	RG0
  1576 00:F783: 20 99 F8     	JSR	RDUMP
  1577 00:F786: 4C 9B EB     	JMP	WSTART
  1578                        RG0
  1579 00:F789: A0 72        	LDY	#$FF&RNTAB
  1580 00:F78B: 8C 14 E9     	STY	PT1
  1581 00:F78E: A0 FE        	LDY	#RNTAB>>8
  1582 00:F790: 8C 15 E9     	STY	PT1+1
  1583 00:F793: A0 00        	LDY	#0
  1584                        RG1
  1585                        ;	CMP	(PT1),Y
  1586 00:F795: 48           	pha
  1587 00:F796: AD 14 E9     	lda	PT1
  1588 00:F799: 8D A4 F7     	sta	opr16
  1589 00:F79C: AD 15 E9     	lda	PT1+1
  1590 00:F79F: 8D A5 F7     	sta	opr16+1
  1591 00:F7A2: 68           	pla
  1592 00:F7A3: D9           	db	$D9		; CMP $xxxx,y
  1593 00:F7A4: 00 00        opr16	dw	0		; operand Absolute Indexed Y
  1594                        
  1595 00:F7A6: F0 14        	BEQ	RG2
  1596 00:F7A8: C8           	INY
  1597 00:F7A9: 48           	PHA
  1598                        
  1599                        ;	LDA	(PT1),Y
  1600 00:F7AA: 20 98 FA     	jsr	lda_pt1
  1601                        
  1602 00:F7AD: F0 09        	BEQ	RGE
  1603 00:F7AF: 68           	PLA
  1604 00:F7B0: C8           	INY
  1605 00:F7B1: C8           	INY
  1606 00:F7B2: C8           	INY
  1607 00:F7B3: C8           	INY
  1608 00:F7B4: C8           	INY
  1609 00:F7B5: 4C 95 F7     	JMP	RG1
  1610                        RGE
  1611 00:F7B8: 68           	PLA
  1612                        RGE0_0
  1613 00:F7B9: 4C 05 EC     	JMP	ERR
  1614                        RG2
  1615 00:F7BC: C8           	INY
  1616                        ;	LDA	(PT1),Y
  1617 00:F7BD: 20 98 FA     	jsr	lda_pt1
  1618                        
  1619 00:F7C0: C9 80        	CMP	#$80
  1620 00:F7C2: D0 20        	BNE	RG3
  1621                        	;; Next table
  1622 00:F7C4: C8           	INY
  1623                        
  1624                        ;	LDA	(PT1),Y
  1625 00:F7C5: 20 98 FA     	jsr	lda_pt1
  1626                        
  1627 00:F7C8: 8D 16 E9     	STA	CNT		; Temporary
  1628 00:F7CB: C8           	INY
  1629                        
  1630                        ;	LDA	(PT1),Y
  1631 00:F7CC: 20 98 FA     	jsr	lda_pt1
  1632                        
  1633 00:F7CF: 8D 15 E9     	STA	PT1+1
  1634 00:F7D2: AD 16 E9     	LDA	CNT
  1635 00:F7D5: 8D 14 E9     	STA	PT1
  1636 00:F7D8: A0 00        	LDY	#0
  1637 00:F7DA: E8           	INX
  1638 00:F7DB: BD B1 EA     	LDA	INBUF,X
  1639 00:F7DE: 20 CF FB     	JSR	UPPER
  1640 00:F7E1: 4C 95 F7     	JMP	RG1
  1641                        RG3
  1642 00:F7E4: C9 00        	CMP	#0
  1643 00:F7E6: F0 D1        	BEQ	RGE0_0
  1644                        
  1645 00:F7E8: C8           	INY			; +2
  1646                        
  1647                        ;	LDA	(PT1),Y
  1648 00:F7E9: 20 98 FA     	jsr	lda_pt1
  1649                        
  1650                        ;	TAX
  1651                        	; save hit register address
  1652 00:F7EC: 8D EA EA     	sta	hit_reg
  1653 00:F7EF: C8           	INY
  1654 00:F7F0: 20 98 FA     	jsr	lda_pt1
  1655 00:F7F3: 8D EB EA     	sta	hit_reg+1
  1656                        
  1657 00:F7F6: C8           	INY			; +4
  1658                        ;	LDA	(PT1),Y
  1659 00:F7F7: 20 98 FA     	jsr	lda_pt1
  1660                        
  1661 00:F7FA: 8D 12 E9     	STA	PT0
  1662 00:F7FD: C8           	INY
  1663                        
  1664                        ;	LDA	(PT1),Y
  1665 00:F7FE: 20 98 FA     	jsr	lda_pt1
  1666                        
  1667 00:F801: 8D 13 E9     	STA	PT0+1
  1668 00:F804: 8C 16 E9     	STY	CNT		; Save Y (STROUT destroys Y)
  1669 00:F807: 20 0E FB     	JSR	STROUT
  1670 00:F80A: A9 3D        	LDA	#'='
  1671 00:F80C: 20 04 FF     	JSR	PUT_CH
  1672 00:F80F: AC 16 E9     	LDY	CNT		; Restore Y
  1673 00:F812: 88           	DEY
  1674 00:F813: 88           	DEY
  1675 00:F814: 88           	DEY
  1676 00:F815: 88           	DEY
  1677                        
  1678                        ;	LDA	(PT1),Y
  1679 00:F816: 20 98 FA     	jsr	lda_pt1
  1680                        
  1681 00:F819: 8D CC EA     	STA	REGSIZ
  1682 00:F81C: C9 01        	CMP	#1
  1683 00:F81E: D0 1A        	BNE	RG4
  1684                        	;; 8 bit register
  1685                        ;	LDA	0,X
  1686 00:F820: A2 00        	ldx	#0
  1687 00:F822: 20 2A F8     	jsr	get_hit_r
  1688                        
  1689 00:F825: 20 29 FB     	JSR	HEXOUT2
  1690 00:F828: 80 1F        	bra	RG5
  1691                        
  1692                        get_hit_r
  1693 00:F82A: AD EA EA     	lda	hit_reg
  1694 00:F82D: 8D 37 F8     	sta	opr232
  1695 00:F830: AD EB EA     	lda	hit_reg+1
  1696 00:F833: 8D 38 F8     	sta	opr232+1
  1697 00:F836: BD           	db	$BD		; lda $xxxx,x
  1698                        opr232
  1699 00:F837: 00 00        	dw	0
  1700 00:F839: 60           	rts
  1701                        
  1702                        RG4
  1703                        	;; 16 bit register
  1704                        ;	LDA	1,X
  1705 00:F83A: A2 01        	ldx	#1
  1706 00:F83C: 20 2A F8     	jsr	get_hit_r
  1707 00:F83F: 20 29 FB     	JSR	HEXOUT2
  1708                        
  1709                        ;	LDA	0,X
  1710 00:F842: CA           	dex
  1711 00:F843: 20 2A F8     	jsr	get_hit_r
  1712 00:F846: 20 29 FB     	JSR	HEXOUT2
  1713                        RG5
  1714 00:F849: A9 20        	LDA	#' '
  1715 00:F84B: 20 04 FF     	JSR	PUT_CH
  1716 00:F84E: 8E CD EA     	STX	CKSUM		; Save X (GETLIN destroys X)
  1717 00:F851: 20 78 FB     	JSR	GETLIN
  1718 00:F854: A2 00        	LDX	#0
  1719 00:F856: 20 DA FB     	JSR	RDHEX
  1720 00:F859: AD 16 E9     	LDA	CNT
  1721 00:F85C: F0 35        	BEQ	RGR
  1722 00:F85E: AE CD EA     	LDX	CKSUM		; Restore X
  1723 00:F861: AD CC EA     	LDA	REGSIZ
  1724 00:F864: C9 01        	CMP	#1
  1725 00:F866: D0 1C        	BNE	RG6
  1726                        	;; 8 bit register
  1727 00:F868: AD 14 E9     	LDA	PT1
  1728                        ;	STA	0,X
  1729 00:F86B: A2 00        	ldx	#0
  1730 00:F86D: 20 72 F8     	jsr	set_hit_r
  1731 00:F870: 80 21        	bra	RG7
  1732                        
  1733                        set_hit_r:
  1734 00:F872: 48           	pha
  1735 00:F873: AD EA EA     	lda	hit_reg
  1736 00:F876: 8D 81 F8     	sta	opr235
  1737 00:F879: AD EB EA     	lda	hit_reg+1
  1738 00:F87C: 8D 82 F8     	sta	opr235+1
  1739 00:F87F: 68           	pla
  1740 00:F880: 9D           	db	$9D		; sta $xxxx,x
  1741                        opr235:
  1742 00:F881: 00 00        	dw	0
  1743 00:F883: 60           	rts
  1744                        
  1745                        RG6
  1746                        	;; 16 bit address
  1747 00:F884: AD 14 E9     	LDA	PT1
  1748                        ;	STA	0,X		; (L)
  1749 00:F887: A2 00        	ldx	#0
  1750 00:F889: 20 72 F8     	jsr	set_hit_r
  1751                        
  1752 00:F88C: AD 15 E9     	LDA	PT1+1
  1753 00:F88F: E8           	inx
  1754                        ;	STA	1,X		; (H)
  1755 00:F890: 20 72 F8     	jsr	set_hit_r
  1756                        RG7	
  1757                        RGR	
  1758 00:F893: 4C 9B EB     	JMP	WSTART
  1759                        	
  1760                        RGE0	
  1761 00:F896: 4C 05 EC     	JMP	ERR
  1762                        	
  1763                        ;
  1764                        ; print all registers
  1765                        ;
  1766                        RDUMP
  1767 00:F899: A0 22        	ldy	#34
  1768 00:F89B: A9 20        	lda	#' '
  1769                        spc_out
  1770 00:F89D: 20 04 FF     	jsr	PUT_CH
  1771 00:F8A0: 88           	dey
  1772 00:F8A1: D0 FA        	bne	spc_out
  1773                        
  1774 00:F8A3: A9 65        	LDA	#$FF&psr_bm
  1775 00:F8A5: 8D 12 E9     	STA	PT0
  1776 00:F8A8: A9 FE        	LDA	#psr_bm>>8
  1777 00:F8AA: 8D 13 E9     	STA	PT0+1
  1778 00:F8AD: 20 0E FB     	jsr	STROUT
  1779                        
  1780 00:F8B0: A9 48        	LDA	#$FF&RDSA	; A
  1781 00:F8B2: 8D 12 E9     	STA	PT0
  1782 00:F8B5: A9 FE        	LDA	#RDSA>>8
  1783 00:F8B7: 8D 13 E9     	STA	PT0+1
  1784 00:F8BA: 20 0E FB     	JSR	STROUT
  1785 00:F8BD: AD 23 E9     	LDA	REGA
  1786 00:F8C0: 20 29 FB     	JSR	HEXOUT2
  1787                        
  1788 00:F8C3: A9 4B        	LDA	#$FF&RDSX	; X
  1789 00:F8C5: 8D 12 E9     	STA	PT0
  1790 00:F8C8: A9 FE        	LDA	#RDSX>>8
  1791 00:F8CA: 8D 13 E9     	STA	PT0+1
  1792 00:F8CD: 20 0E FB     	JSR	STROUT
  1793 00:F8D0: AD 24 E9     	LDA	REGX
  1794 00:F8D3: 20 29 FB     	JSR	HEXOUT2
  1795                        
  1796 00:F8D6: A9 4F        	LDA	#$FF&RDSY	; Y
  1797 00:F8D8: 8D 12 E9     	STA	PT0
  1798 00:F8DB: A9 FE        	LDA	#RDSY>>8
  1799 00:F8DD: 8D 13 E9     	STA	PT0+1
  1800 00:F8E0: 20 0E FB     	JSR	STROUT
  1801 00:F8E3: AD 25 E9     	LDA	REGY
  1802 00:F8E6: 20 29 FB     	JSR	HEXOUT2
  1803                        
  1804 00:F8E9: A9 53        	LDA	#$FF&RDSSP	; SP
  1805 00:F8EB: 8D 12 E9     	STA	PT0
  1806 00:F8EE: A9 FE        	LDA	#RDSSP>>8
  1807 00:F8F0: 8D 13 E9     	STA	PT0+1
  1808 00:F8F3: 20 0E FB     	JSR	STROUT
  1809 00:F8F6: AD 26 E9     	LDA	REGSP
  1810 00:F8F9: 20 29 FB     	JSR	HEXOUT2
  1811                        
  1812 00:F8FC: A9 5A        	LDA	#$FF&RDSPC	; PC
  1813 00:F8FE: 8D 12 E9     	STA	PT0
  1814 00:F901: A9 FE        	LDA	#RDSPC>>8
  1815 00:F903: 8D 13 E9     	STA	PT0+1
  1816 00:F906: 20 0E FB     	JSR	STROUT
  1817 00:F909: AD 28 E9     	LDA	REGPC+1		; PC(H)
  1818 00:F90C: 20 29 FB     	JSR	HEXOUT2
  1819 00:F90F: AD 27 E9     	LDA	REGPC		; PC(L)
  1820 00:F912: 20 29 FB     	JSR	HEXOUT2
  1821                        
  1822 00:F915: A9 5F        	LDA	#$FF&RDSPSR	; PSR
  1823 00:F917: 8D 12 E9     	STA	PT0
  1824 00:F91A: A9 FE        	LDA	#RDSPSR>>8
  1825 00:F91C: 8D 13 E9     	STA	PT0+1
  1826 00:F91F: 20 0E FB     	JSR	STROUT
  1827                        
  1828 00:F922: A0 08        	LDY	#8
  1829 00:F924: AD 29 E9     	LDA	REGPSR
  1830                        	
  1831                        psr_bloop
  1832 00:F927: 0A           	asl	a
  1833 00:F928: 90 0D        	bcc	set_31
  1834 00:F92A: AA           	tax			; save
  1835 00:F92B: A9 31        	lda	#'1'
  1836 00:F92D: 20 04 FF     	jsr	PUT_CH
  1837                        set_30
  1838 00:F930: 8A           	txa
  1839 00:F931: 88           	dey
  1840 00:F932: D0 F3        	bne	psr_bloop
  1841 00:F934: 4C 6E FB     	JMP	CRLF
  1842                        
  1843                        set_31
  1844 00:F937: AA           	tax			; save
  1845 00:F938: A9 30        	lda	#'0'
  1846 00:F93A: 20 04 FF     	jsr	PUT_CH
  1847 00:F93D: 80 F1        	bra	set_30
  1848                        
  1849                        ;
  1850                        ; command help
  1851                        ;
  1852                        prt_help:
  1853 00:F93F: E8           	INX
  1854 00:F940: 20 C3 FB     	JSR	SKIPSP
  1855 00:F943: BD B1 EA     	LDA	INBUF,X
  1856 00:F946: F0 03        	BEQ	ph_1	; jmp if string exist
  1857 00:F948: 4C 05 EC     	JMP	ERR
  1858                        ph_1
  1859                        	; must strings <= 255 : Y = 8 bit
  1860                        
  1861 00:F94B: A9 68        	LDA	#$FF&hlp_meg1
  1862 00:F94D: 8D 12 E9     	STA	PT0
  1863 00:F950: A9 F9        	LDA	#hlp_meg1>>8
  1864 00:F952: 8D 13 E9     	STA	PT0+1
  1865 00:F955: 20 0E FB     	JSR	STROUT
  1866                        
  1867 00:F958: A9 2C        	LDA	#$FF&hlp_meg2
  1868 00:F95A: 8D 12 E9     	STA	PT0
  1869 00:F95D: A9 FA        	LDA	#hlp_meg2>>8
  1870 00:F95F: 8D 13 E9     	STA	PT0+1
  1871 00:F962: 20 0E FB     	JSR	STROUT
  1872 00:F965: 4C 9B EB     	JMP	WSTART
  1873                        
  1874                        hlp_meg1
  1875 00:F968: 2D 2D 2D 2D  	db	"--------     Command Summary     --------",CR,LF
       00:F96C: 2D 2D 2D 2D 
       00:F970: 20 20 20 20 
       00:F974: 20 43 6F 6D 
       00:F978: 6D 61 6E 64 
       00:F97C: 20 53 75 6D 
       00:F980: 6D 61 72 79 
       00:F984: 20 20 20 20 
       00:F988: 20 2D 2D 2D 
       00:F98C: 2D 2D 2D 2D 
       00:F990: 2D 0D 0A 
  1876 00:F993: 3F 20 20 3A  	db	"?  : Command Summary", CR, LF
       00:F997: 20 43 6F 6D 
       00:F99B: 6D 61 6E 64 
       00:F99F: 20 53 75 6D 
       00:F9A3: 6D 61 72 79 
       00:F9A7: 0D 0A 
  1877 00:F9A9: 44 20 20 5B  	db	"D  [start addr][, end addr] : Dump Memory", CR, LF
       00:F9AD: 73 74 61 72 
       00:F9B1: 74 20 61 64 
       00:F9B5: 64 72 5D 5B 
       00:F9B9: 2C 20 65 6E 
       00:F9BD: 64 20 61 64 
       00:F9C1: 64 72 5D 20 
       00:F9C5: 3A 20 44 75 
       00:F9C9: 6D 70 20 4D 
       00:F9CD: 65 6D 6F 72 
       00:F9D1: 79 0D 0A 
  1878 00:F9D4: 44 49 20 5B  	db	"DI [start addr][, end addr] : Disassembler", CR, LF
       00:F9D8: 73 74 61 72 
       00:F9DC: 74 20 61 64 
       00:F9E0: 64 72 5D 5B 
       00:F9E4: 2C 20 65 6E 
       00:F9E8: 64 20 61 64 
       00:F9EC: 64 72 5D 20 
       00:F9F0: 3A 20 44 69 
       00:F9F4: 73 61 73 73 
       00:F9F8: 65 6D 62 6C 
       00:F9FC: 65 72 0D 0A 
  1879 00:FA00: 47 20 20 5B  	db	"G  [start addr][, end addr] : Go and Stop", CR, LF,0
       00:FA04: 73 74 61 72 
       00:FA08: 74 20 61 64 
       00:FA0C: 64 72 5D 5B 
       00:FA10: 2C 20 65 6E 
       00:FA14: 64 20 61 64 
       00:FA18: 64 72 5D 20 
       00:FA1C: 3A 20 47 6F 
       00:FA20: 20 61 6E 64 
       00:FA24: 20 53 74 6F 
       00:FA28: 70 0D 0A 00 
  1880                        hlp_meg2
  1881 00:FA2C: 4C 20 20 5B  	db	"L  [offset] : Load HexFile", CR, LF
       00:FA30: 6F 66 66 73 
       00:FA34: 65 74 5D 20 
       00:FA38: 3A 20 4C 6F 
       00:FA3C: 61 64 20 48 
       00:FA40: 65 78 46 69 
       00:FA44: 6C 65 0D 0A 
  1882 00:FA48: 52 20 20 5B  	db	"R  [register] : Show or Set register", CR, LF
       00:FA4C: 72 65 67 69 
       00:FA50: 73 74 65 72 
       00:FA54: 5D 20 3A 20 
       00:FA58: 53 68 6F 77 
       00:FA5C: 20 6F 72 20 
       00:FA60: 53 65 74 20 
       00:FA64: 72 65 67 69 
       00:FA68: 73 74 65 72 
       00:FA6C: 0D 0A 
  1883 00:FA6E: 53 20 20 5B  	db	"S  [addr] : Set Memory", CR, LF
       00:FA72: 61 64 64 72 
       00:FA76: 5D 20 3A 20 
       00:FA7A: 53 65 74 20 
       00:FA7E: 4D 65 6D 6F 
       00:FA82: 72 79 0D 0A 
  1884 00:FA86: 42 59 45 20  	db	"BYE : Terminate",CR,LF,0
       00:FA8A: 3A 20 54 65 
       00:FA8E: 72 6D 69 6E 
       00:FA92: 61 74 65 0D 
       00:FA96: 0A 00 
  1885                        ;;;
  1886                        ;;; Other support routines
  1887                        ;;;
  1888                        
  1889                        ;-----------------------------------------------------------
  1890                        ; alternative Direct Page Indirect Indexed, Y
  1891                        ;
  1892                        lda_pt1:
  1893 00:FA98: AD 14 E9     	lda	PT1
  1894 00:FA9B: 8D A5 FA     	sta	lda_pt2
  1895 00:FA9E: AD 15 E9     	lda	PT1+1
  1896 00:FAA1: 8D A6 FA     	sta	lda_pt2+1
  1897 00:FAA4: B9           	db	$B9		; LDA $xxxx,y
  1898                        lda_pt2:
  1899 00:FAA5: 00 00        	dw	0		; operand Absolute Indexed Y
  1900 00:FAA7: 60           	rts
  1901                        
  1902                        lda_scan:
  1903 00:FAA8: AD 1D E9     	lda	scan
  1904 00:FAAB: 8D B5 FA     	sta	lda_scan1
  1905 00:FAAE: AD 1E E9     	lda	scan+1
  1906 00:FAB1: 8D B6 FA     	sta	lda_scan1+1
  1907 00:FAB4: B9           	db	$B9		; LDA $xxxx,y
  1908                        lda_scan1:
  1909 00:FAB5: 00 00        	dw	0		; operand Absolute Indexed Y
  1910 00:FAB7: 60           	rts
  1911                        
  1912                        lda_oper:
  1913 00:FAB8: AD 1B E9     	lda	oper
  1914 00:FABB: 8D C5 FA     	sta	lda_oper1
  1915 00:FABE: AD 1C E9     	lda	oper+1
  1916 00:FAC1: 8D C6 FA     	sta	lda_oper1+1
  1917 00:FAC4: B9           	db	$B9		; LDA $xxxx,y
  1918                        lda_oper1:
  1919 00:FAC5: 00 00        	dw	0		; operand Absolute Indexed Y
  1920 00:FAC7: 60           	rts
  1921                        
  1922                        sta_pt1:
  1923 00:FAC8: 48           	pha
  1924 00:FAC9: AD 14 E9     	lda	PT1
  1925 00:FACC: 8D D7 FA     	sta	sta_pt2
  1926 00:FACF: AD 15 E9     	lda	PT1+1
  1927 00:FAD2: 8D D8 FA     	sta	sta_pt2+1
  1928 00:FAD5: 68           	pla
  1929 00:FAD6: 99           	db	$99		; STA $xxxx,y
  1930                        sta_pt2:
  1931 00:FAD7: 00 00        	dw	0		; operand Absolute Indexed Y
  1932 00:FAD9: 60           	rts
  1933                        
  1934                        sta_dmppt:
  1935 00:FADA: 48           	pha
  1936 00:FADB: AD 21 E9     	lda	DMPPT
  1937 00:FADE: 8D E9 FA     	sta	sta_dmppt1
  1938 00:FAE1: AD 22 E9     	lda	DMPPT+1
  1939 00:FAE4: 8D EA FA     	sta	sta_dmppt1+1
  1940 00:FAE7: 68           	PLA
  1941 00:FAE8: 99           	db	$99		; STA $xxxx,y
  1942                        sta_dmppt1:
  1943 00:FAE9: 00 00        	dw	0		; operand Absolute Indexed Y
  1944 00:FAEB: 60           	rts
  1945                        
  1946                        sta_sav_adr:
  1947 00:FAEC: 48           	pha
  1948 00:FAED: AD 19 E9     	lda	sav_adr
  1949 00:FAF0: 8D FB FA     	sta	opr25
  1950 00:FAF3: AD 1A E9     	lda	sav_adr+1
  1951 00:FAF6: 8D FC FA     	sta	opr25+1
  1952 00:FAF9: 68           	pla
  1953 00:FAFA: 99           	db	$99		; STA $xxxx,y
  1954 00:FAFB: 00 00        opr25	dw	0		; operand Absolute Indexed Y
  1955 00:FAFD: 60           	rts
  1956                        ;------------------------------------------------------------
  1957                        ; LDA (oper)
  1958                        ; alternative Direct Page Indirect
  1959                        ;------------------------------------------------------------
  1960                        lda_d_oper:
  1961 00:FAFE: AD 1B E9     	lda	oper
  1962 00:FB01: 8D 0B FB     	sta	opr2_2
  1963 00:FB04: AD 1C E9     	lda	oper+1
  1964 00:FB07: 8D 0C FB     	sta	opr2_2+1
  1965 00:FB0A: AD           	db	$AD		; LDA $xxxx
  1966                        opr2_2
  1967 00:FB0B: 00 00        	dw	0
  1968 00:FB0D: 60           	rts
  1969                        ;------------------------------------------------------------
  1970                        
  1971                        STROUT
  1972 00:FB0E: A0 00        	LDY	#0
  1973                        STRO0
  1974                        ;	LDA	(PT0),Y
  1975 00:FB10: AD 12 E9     	lda	PT0
  1976 00:FB13: 8D 1D FB     	sta	opr24
  1977 00:FB16: AD 13 E9     	lda	PT0+1
  1978 00:FB19: 8D 1E FB     	sta	opr24+1
  1979 00:FB1C: B9           	db	$B9		; LDA $xxxx,y
  1980 00:FB1D: 00 00        opr24	dw	0		; operand Absolute Indexed Y
  1981                        
  1982 00:FB1F: F0 07        	BEQ	STROE
  1983 00:FB21: 20 04 FF     	JSR	PUT_CH
  1984 00:FB24: C8           	INY
  1985 00:FB25: 4C 10 FB     	JMP	STRO0
  1986                        STROE
  1987 00:FB28: 60           	RTS
  1988                        
  1989                        HEXOUT2
  1990 00:FB29: 48           	PHA
  1991 00:FB2A: 4A           	LSR	A
  1992 00:FB2B: 4A           	LSR	A
  1993 00:FB2C: 4A           	LSR	A
  1994 00:FB2D: 4A           	LSR	A
  1995 00:FB2E: 20 32 FB     	JSR	HEXOUT1
  1996 00:FB31: 68           	PLA
  1997                        HEXOUT1
  1998 00:FB32: 29 0F        	AND	#$0F
  1999 00:FB34: 18           	CLC
  2000 00:FB35: 69 30        	ADC	#'0'
  2001 00:FB37: C9 3A        	CMP	#'9'+1
  2002 00:FB39: 90 03        	BCC	HEXOUTE
  2003 00:FB3B: 18           	CLC
  2004 00:FB3C: 69 07        	ADC	#'A'-'9'-1
  2005                        HEXOUTE
  2006 00:FB3E: 4C 04 FF     	JMP	PUT_CH
  2007                        
  2008                        HEXIN
  2009 00:FB41: A9 00        	LDA	#0
  2010 00:FB43: 20 4A FB     	JSR	HI0
  2011 00:FB46: 0A           	ASL
  2012 00:FB47: 0A           	ASL
  2013 00:FB48: 0A           	ASL
  2014 00:FB49: 0A           	ASL
  2015                        HI0
  2016 00:FB4A: 8D CE EA     	STA	HITMP
  2017 00:FB4D: 20 D0 FE     	JSR	KEY_IN
  2018 00:FB50: 20 CF FB     	JSR	UPPER
  2019 00:FB53: C9 30        	CMP	#'0'
  2020 00:FB55: 90 16        	BCC	HIR
  2021 00:FB57: C9 3A        	CMP	#'9'+1
  2022 00:FB59: 90 0B        	BCC	HI1
  2023 00:FB5B: C9 41        	CMP	#'A'
  2024 00:FB5D: 90 0E        	BCC	HIR
  2025 00:FB5F: C9 47        	CMP	#'F'+1
  2026 00:FB61: B0 0A        	BCS	HIR
  2027 00:FB63: 38           	SEC
  2028 00:FB64: E9 07        	SBC	#'A'-'9'-1
  2029                        HI1
  2030 00:FB66: 38           	SEC
  2031 00:FB67: E9 30        	SBC	#'0'
  2032 00:FB69: 18           	CLC
  2033 00:FB6A: 6D CE EA     	ADC	HITMP
  2034                        HIR
  2035 00:FB6D: 60           	RTS
  2036                        	
  2037                        CRLF
  2038 00:FB6E: A9 0D        	LDA	#CR
  2039 00:FB70: 20 04 FF     	JSR	PUT_CH
  2040 00:FB73: A9 0A        	LDA	#LF
  2041 00:FB75: 4C 04 FF     	JMP	PUT_CH
  2042                        
  2043                        GETLIN
  2044 00:FB78: A2 00        	LDX	#0
  2045                        GL0
  2046 00:FB7A: 20 D0 FE     	JSR	KEY_IN
  2047 00:FB7D: C9 0D        	CMP	#CR
  2048 00:FB7F: F0 39        	BEQ	GLE
  2049 00:FB81: C9 0A        	CMP	#LF
  2050 00:FB83: F0 35        	BEQ	GLE
  2051 00:FB85: C9 08        	CMP	#BS
  2052 00:FB87: F0 1A        	BEQ	GLB
  2053 00:FB89: C9 7F        	CMP	#DEL
  2054 00:FB8B: F0 16        	BEQ	GLB
  2055 00:FB8D: C9 20        	CMP	#' '
  2056 00:FB8F: 90 E9        	BCC	GL0
  2057 00:FB91: C9 80        	CMP	#$80
  2058 00:FB93: B0 E5        	BCS	GL0
  2059 00:FB95: E0 0F        	CPX	#BUFLEN-1
  2060 00:FB97: B0 E1        	BCS	GL0		; Too long
  2061 00:FB99: 9D B1 EA     	STA	INBUF,X
  2062 00:FB9C: E8           	INX
  2063 00:FB9D: 20 04 FF     	JSR	PUT_CH
  2064 00:FBA0: 4C 7A FB     	JMP	GL0
  2065                        GLB
  2066 00:FBA3: E0 00        	CPX	#0
  2067 00:FBA5: F0 D3        	BEQ	GL0
  2068 00:FBA7: CA           	DEX
  2069 00:FBA8: A9 08        	LDA	#BS
  2070 00:FBAA: 20 04 FF     	JSR	PUT_CH
  2071 00:FBAD: A9 20        	LDA	#' '
  2072 00:FBAF: 20 04 FF     	JSR	PUT_CH
  2073 00:FBB2: A9 08        	LDA	#BS
  2074 00:FBB4: 20 04 FF     	JSR	PUT_CH
  2075 00:FBB7: 4C 7A FB     	JMP	GL0
  2076                        GLE
  2077 00:FBBA: 20 6E FB     	JSR	CRLF
  2078 00:FBBD: A9 00        	LDA	#0
  2079 00:FBBF: 9D B1 EA     	STA	INBUF,X
  2080 00:FBC2: 60           	RTS
  2081                        
  2082                        SKIPSP
  2083 00:FBC3: BD B1 EA     	LDA	INBUF,X
  2084 00:FBC6: C9 20        	CMP	#' '
  2085 00:FBC8: D0 04        	BNE	SSE
  2086 00:FBCA: E8           	INX
  2087 00:FBCB: 4C C3 FB     	JMP	SKIPSP
  2088                        SSE
  2089 00:FBCE: 60           	RTS
  2090                        
  2091                        UPPER
  2092 00:FBCF: C9 61        	CMP	#'a'
  2093 00:FBD1: 90 06        	BCC	UPE
  2094 00:FBD3: C9 7B        	CMP	#'z'+1
  2095 00:FBD5: B0 02        	BCS	UPE
  2096 00:FBD7: 69 E0        	ADC	#'A'-'a'
  2097                        UPE
  2098 00:FBD9: 60           	RTS
  2099                        
  2100                        RDHEX
  2101 00:FBDA: A9 00        	LDA	#0
  2102 00:FBDC: 8D 14 E9     	STA	PT1
  2103 00:FBDF: 8D 15 E9     	STA	PT1+1
  2104 00:FBE2: 8D 16 E9     	STA	CNT
  2105                        RH0
  2106 00:FBE5: BD B1 EA     	LDA	INBUF,X
  2107 00:FBE8: 20 CF FB     	JSR	UPPER
  2108 00:FBEB: C9 30        	CMP	#'0'
  2109 00:FBED: 90 38        	BCC	RHE
  2110 00:FBEF: C9 3A        	CMP	#'9'+1
  2111 00:FBF1: 90 0B        	BCC	RH1
  2112 00:FBF3: C9 41        	CMP	#'A'
  2113 00:FBF5: 90 30        	BCC	RHE
  2114 00:FBF7: C9 47        	CMP	#'F'+1
  2115 00:FBF9: B0 2C        	BCS	RHE
  2116 00:FBFB: 38           	SEC
  2117 00:FBFC: E9 07        	SBC	#'A'-'9'-1
  2118                        RH1
  2119 00:FBFE: 38           	SEC
  2120 00:FBFF: E9 30        	SBC	#'0'
  2121 00:FC01: 0E 14 E9     	ASL	PT1
  2122 00:FC04: 2E 15 E9     	ROL	PT1+1
  2123 00:FC07: 0E 14 E9     	ASL	PT1
  2124 00:FC0A: 2E 15 E9     	ROL	PT1+1
  2125 00:FC0D: 0E 14 E9     	ASL	PT1
  2126 00:FC10: 2E 15 E9     	ROL	PT1+1
  2127 00:FC13: 0E 14 E9     	ASL	PT1
  2128 00:FC16: 2E 15 E9     	ROL	PT1+1
  2129 00:FC19: 18           	CLC
  2130 00:FC1A: 6D 14 E9     	ADC	PT1
  2131 00:FC1D: 8D 14 E9     	STA	PT1
  2132 00:FC20: EE 16 E9     	INC	CNT
  2133 00:FC23: E8           	INX
  2134 00:FC24: 4C E5 FB     	JMP	RH0
  2135                        RHE
  2136 00:FC27: 60           	RTS
  2137                        
  2138                        ;;;
  2139                        ;;; Interrupt handler
  2140                        ;;;
  2141                        
  2142                        	; NMI
  2143                        NMI_VEC
  2144 00:FC28: D8           	CLD
  2145 00:FC29: 8D 23 E9     	STA	REGA
  2146 00:FC2C: 8A           	TXA			; X
  2147 00:FC2D: 8D 24 E9     	STA	REGX
  2148 00:FC30: 98           	TYA			; Y
  2149 00:FC31: 8D 25 E9     	STA	REGY
  2150 00:FC34: 68           	PLA			; PSR (Pushed by NMI)
  2151 00:FC35: 8D 29 E9     	STA	REGPSR		; save status register
  2152 00:FC38: 68           	PLA			; PC(L) (Pushed by NMI)
  2153 00:FC39: 8D 27 E9     	STA	REGPC
  2154 00:FC3C: 68           	PLA			; PC(H) (Pushed by NMI)
  2155 00:FC3D: 8D 28 E9     	STA	REGPC+1
  2156 00:FC40: BA           	TSX			; get SP
  2157 00:FC41: 8E 26 E9     	STX	REGSP
  2158                        
  2159 00:FC44: A9 FF        	lda	#$ff		; NMI signal
  2160 00:FC46: 8D 01 E9     	sta	UNI_CHR
  2161 00:FC49: 20 86 FF     	jsr	NMI_SIG
  2162                        
  2163 00:FC4C: 4C 5C F5     	jmp	G0
  2164                        
  2165                        ;	    sp->      : sp+0
  2166                        ;	  push x      : sp+1
  2167                        ;	  push a      : sp+2
  2168                        ;	  push P      : sp+3
  2169                        ;	  push PC(L)  : sp+4
  2170                        ;	  push PC(H)  : sp+5
  2171                        ;	which BRK or IRQ?
  2172                        ;	need status condhition check (SP+3)
  2173                        
  2174                        IRQBRK
  2175 00:FC4F: 48           	pha
  2176 00:FC50: DA           	phx
  2177                        
  2178                        ;	php	; check B flag
  2179                        ;	pla	; this way is NG. B flag allways 1
  2180                        
  2181 00:FC51: BA           	tsx
  2182 00:FC52: E8           	inx			; ($100 + sp +1) : stacked X register
  2183 00:FC53: E8           	inx			; ($100 + sp + 2): stacked A register
  2184 00:FC54: E8           	inx			; ($100 + sp + 3): p (status register)
  2185 00:FC55: BD 00 01     	lda	$100,x		; check status register
  2186                        
  2187 00:FC58: 29 10        	AND	#$10		; Check B flag
  2188 00:FC5A: D0 03        	bne	code_brk
  2189 00:FC5C: 4C 42 FD     	jmp	irq_int
  2190                        
  2191                        code_brk
  2192 00:FC5F: E8           	inx			; ($100 + sp + 4): pc (L)
  2193 00:FC60: BD 00 01     	lda	$100,x		; PC(L)
  2194 00:FC63: 38           	SEC
  2195 00:FC64: E9 01        	SBC	#1		; Adjust to #n address (BRK #n)
  2196 00:FC66: 8D 17 E9     	sta	bk_no
  2197 00:FC69: E8           	inx			; ($100 + sp + 5): pc (H)
  2198 00:FC6A: BD 00 01     	lda	$100,x		; PC(H)
  2199 00:FC6D: E9 00        	SBC	#0
  2200 00:FC6F: 8D 18 E9     	sta	bk_no+1
  2201                        
  2202                        ;	lda	(bk_no)		; get command request #$xx (BRK #$xx)
  2203 00:FC72: AD 17 E9     	lda	bk_no
  2204 00:FC75: 8D 7F FC     	sta	bk_00
  2205 00:FC78: AD 18 E9     	lda	bk_no+1
  2206 00:FC7B: 8D 80 FC     	sta	bk_00+1
  2207 00:FC7E: AD           	db	$AD		; lda $xxxx
  2208                        bk_00
  2209 00:FC7F: 00 00        	dw	0
  2210                        
  2211 00:FC81: C9 FF        	cmp	#$ff		; program end?
  2212 00:FC83: D0 03        	bne	bk_n
  2213 00:FC85: 4C 76 EB     	jmp	wup		; user program terminate
  2214                        bk_n
  2215 00:FC88: C9 00        	cmp	#0
  2216 00:FC8A: F0 3A        	beq	go_brk
  2217 00:FC8C: C9 05        	cmp	#5
  2218 00:FC8E: 10 36        	bpl	go_brk
  2219                        
  2220 00:FC90: 5A           	phy
  2221                        ;  sp->        : sp+0
  2222                        ;  push y      : sp+1
  2223                        ;  push x      : sp+2
  2224                        ;  push a      : sp+3
  2225                        ;  push P      : sp+4
  2226                        ;  push PC(L)  : sp+5
  2227                        ;  push PC(H)  : sp+6
  2228                        	
  2229 00:FC91: BA           	tsx
  2230 00:FC92: DA           	phx
  2231 00:FC93: 7A           	ply	; sp -> y
  2232 00:FC94: 20 B9 FC     	jsr	bios_call
  2233 00:FC97: BA           	tsx
  2234 00:FC98: E8           	inx	; Y
  2235 00:FC99: E8           	inx	; x
  2236 00:FC9A: E8           	inx	; a
  2237 00:FC9B: 9D 00 01     	sta	$100, x		; set return code
  2238 00:FC9E: 7A           	ply
  2239                        
  2240 00:FC9F: FA           	plx
  2241 00:FCA0: 68           	pla
  2242 00:FCA1: 40           	rti
  2243                        
  2244                        creq_p
  2245 00:FCA2: D0 FE        	dw	KEY_IN
  2246 00:FCA4: 04 FF        	dw	PUT_CH
  2247 00:FCA6: FB FE        	dw	KEY_CHK
  2248 00:FCA8: AA FC        	dw	prt_str
  2249                        ;
  2250                        ; input A : string address Low
  2251                        ;       Y : string address High
  2252                        ;
  2253                        prt_str
  2254 00:FCAA: 8D 12 E9     	STA	PT0
  2255 00:FCAD: 88           	dey
  2256 00:FCAE: 88           	dey	; Y
  2257 00:FCAF: B9 00 01     	lda	$100, y		; get Y
  2258 00:FCB2: 8D 13 E9     	sta	PT0+1
  2259 00:FCB5: 20 0E FB     	jsr	STROUT
  2260 00:FCB8: 60           	rts
  2261                        
  2262                        bios_call
  2263 00:FCB9: 58           	cli
  2264 00:FCBA: 3A           	dec	A
  2265 00:FCBB: 0A           	asl	A		; A = A * 2
  2266 00:FCBC: AA           	tax
  2267 00:FCBD: C8           	iny	; Y
  2268 00:FCBE: C8           	iny	; X
  2269 00:FCBF: C8           	iny	; A
  2270 00:FCC0: B9 00 01     	lda	$100,y		; get input data to A
  2271 00:FCC3: 7C A2 FC     	jmp	(creq_p,x)
  2272                        
  2273                        	; BRK instruction
  2274                        go_brk
  2275 00:FCC6: FA           	plx
  2276 00:FCC7: D8           	CLD
  2277 00:FCC8: 68           	PLA			; A
  2278 00:FCC9: 8D 23 E9     	STA	REGA
  2279 00:FCCC: 8A           	TXA			; X
  2280 00:FCCD: 8D 24 E9     	STA	REGX
  2281 00:FCD0: 98           	TYA			; Y
  2282 00:FCD1: 8D 25 E9     	STA	REGY
  2283 00:FCD4: 68           	PLA			; PSR (Pushed by BRK)
  2284 00:FCD5: 8D 29 E9     	STA	REGPSR		; save status register
  2285 00:FCD8: 68           	PLA			; PC(L) (Pushed by BRK)
  2286 00:FCD9: 8D CA EA     	sta	ILL_PC
  2287 00:FCDC: 38           	SEC
  2288 00:FCDD: E9 02        	SBC	#2		; Adjust PC to point BRK instruction
  2289 00:FCDF: 8D 27 E9     	STA	REGPC
  2290 00:FCE2: 68           	PLA			; PC(H) (Pushed by BRK)
  2291 00:FCE3: 8D CB EA     	sta	ILL_PC+1
  2292 00:FCE6: E9 00        	SBC	#0
  2293 00:FCE8: 8D 28 E9     	STA	REGPC+1
  2294 00:FCEB: BA           	TSX			; get SP
  2295 00:FCEC: 8E 26 E9     	STX	REGSP
  2296                        
  2297                        	; check break point
  2298 00:FCEF: AD E7 EA     	lda	stp_flg
  2299 00:FCF2: F0 2E        	beq	ill_stop
  2300                        
  2301                        	; restore original code
  2302 00:FCF4: 9C E7 EA     	stz	stp_flg
  2303 00:FCF7: A0 00        	ldy	#0
  2304                        
  2305 00:FCF9: AD E8 EA     	lda	sav_dat
  2306                        ;	sta	(sav_adr),y
  2307 00:FCFC: 20 EC FA     	jsr	sta_sav_adr
  2308                        
  2309 00:FCFF: C8           	iny
  2310 00:FD00: AD E9 EA     	lda	sav_dat+1
  2311                        
  2312                        ;	sta	(sav_adr),y
  2313 00:FD03: 20 EC FA     	jsr	sta_sav_adr
  2314                        	
  2315 00:FD06: AD 19 E9     	lda	sav_adr
  2316 00:FD09: CD 27 E9     	cmp	REGPC
  2317 00:FD0C: D0 14        	bne	ill_stop
  2318                        	
  2319 00:FD0E: AD 1A E9     	lda	sav_adr+1
  2320 00:FD11: CD 28 E9     	cmp	REGPC+1
  2321 00:FD14: D0 0C        	bne	ill_stop
  2322                        
  2323 00:FD16: A9 34        	lda	#$FF&stpmsg
  2324 00:FD18: 8D 12 E9     	STA	PT0
  2325 00:FD1B: A9 FE        	LDA	#stpmsg>>8
  2326 00:FD1D: 8D 13 E9     	STA	PT0+1
  2327 00:FD20: 80 16        	bra	b_outmsg
  2328                        
  2329                        ill_stop
  2330                        	; re-adjust PC
  2331 00:FD22: AD CA EA     	lda	ILL_PC
  2332 00:FD25: 8D 27 E9     	sta	REGPC
  2333 00:FD28: AD CB EA     	lda	ILL_PC+1
  2334 00:FD2B: 8D 28 E9     	sta	REGPC+1
  2335                        	
  2336 00:FD2E: A9 26        	LDA	#$FF&BRKMSG
  2337 00:FD30: 8D 12 E9     	STA	PT0
  2338 00:FD33: A9 FE        	LDA	#BRKMSG>>8
  2339 00:FD35: 8D 13 E9     	STA	PT0+1
  2340                        b_outmsg
  2341 00:FD38: 58           	cli
  2342 00:FD39: 20 0E FB     	JSR	STROUT
  2343 00:FD3C: 20 99 F8     	JSR	RDUMP
  2344 00:FD3F: 4C 9B EB     	JMP	WSTART
  2345                        
  2346                        ;--------------------------------------
  2347                        ; IRQ interrupt driver
  2348                        ;--------------------------------------
  2349                        irq_int
  2350 00:FD42: 5A           	phy
  2351                        
  2352 00:FD43: A9 01        	lda	#1
  2353 00:FD45: 4D 0D E9     	eor	irq_tgl
  2354 00:FD48: 8D 0D E9     	sta	irq_tgl
  2355 00:FD4B: F0 50        	beq	i_cout_chk
  2356                        
  2357                        ;--------------------------------------
  2358                        ; check CONIN buffer
  2359                        ;--------------------------------------
  2360                        i_cin_chk
  2361 00:FD4D: AD 2A EA     	lda	CIN_CT
  2362 00:FD50: C9 80        	cmp	#CIN_SIZE
  2363 00:FD52: F0 49        	beq	i_cout_chk	; buffer full, then ignore key data
  2364                        
  2365 00:FD54: A9 30        	LDA	#$FF&CONTMP_BUF
  2366 00:FD56: 8D 09 E9     	STA	data_adr
  2367 00:FD59: A9 EA        	LDA	#CONTMP_BUF>>8
  2368 00:FD5B: 8D 0A E9     	STA	data_adr+1
  2369 00:FD5E: A9 80        	lda	#CIN_SIZE
  2370 00:FD60: 38           	sec
  2371 00:FD61: ED 2A EA     	sbc	CIN_CT		; get counter of get btyes
  2372 00:FD64: 8D 01 E9     	sta	UNI_CHR
  2373 00:FD67: A9 07        	lda	#STRIN_REQ
  2374 00:FD69: 20 6B FF     	jsr	wup_pic		; string out request to PIC
  2375 00:FD6C: F0 2B        	beq	irq_end
  2376                        
  2377                        	; copy data from CONTMP_BUF to CIN_BUF
  2378                        
  2379 00:FD6E: 8D B0 EA     	sta	STRIN_CNT	; save str count
  2380 00:FD71: A2 00        	ldx	#0		; destinate index
  2381 00:FD73: AC 2C EA     	ldy	CIN_WP		; source index
  2382                        
  2383                        lop_rdata
  2384                        ;	lda	CONTMP_BUF,x	; get char
  2385                        ;	sta	(ZCIN_BP),y	; save char data
  2386 00:FD76: AD 0E E9     	lda	ZCIN_BP
  2387 00:FD79: 8D 86 FD     	sta	sta_zi1
  2388 00:FD7C: AD 0F E9     	lda	ZCIN_BP+1
  2389 00:FD7F: 8D 87 FD     	sta	sta_zi1+1
  2390 00:FD82: BD 30 EA     	lda	CONTMP_BUF,x	; get char
  2391 00:FD85: 99           	db	$99		; STA $xxxx,y
  2392                        sta_zi1:
  2393 00:FD86: 00 00        	dw	0		; operand Absolute Indexed Y
  2394                        
  2395 00:FD88: EE 2A EA     	inc	CIN_CT
  2396 00:FD8B: E8           	inx
  2397 00:FD8C: C8           	iny
  2398 00:FD8D: 98           	tya
  2399 00:FD8E: 29 7F        	and	#$7f
  2400 00:FD90: A8           	tay
  2401 00:FD91: CE B0 EA     	dec	STRIN_CNT
  2402 00:FD94: D0 E0        	bne	lop_rdata
  2403 00:FD96: 8D 2C EA     	sta	CIN_WP
  2404                        
  2405                        irq_end
  2406 00:FD99: 7A           	ply
  2407 00:FD9A: FA           	plx
  2408 00:FD9B: 68           	pla
  2409 00:FD9C: 40           	rti
  2410                        
  2411                        ;--------------------------------------
  2412                        ; check CONUT buffer
  2413                        ;--------------------------------------
  2414                        i_cout_chk
  2415 00:FD9D: AD 2D EA     	lda	COUT_CT
  2416 00:FDA0: F0 34        	beq	null_cmd
  2417                        
  2418 00:FDA2: 8D 01 E9     	sta	UNI_CHR		; set string size
  2419                        
  2420                        	; copy data from COUT_BUF to CONTMP_BUF
  2421 00:FDA5: A2 00        	ldx	#0		; destinate index
  2422 00:FDA7: AC 2E EA     	ldy	COUT_RP		; source index
  2423                        
  2424                        i_cploop
  2425                        ;	lda	(ZCOUT_BP),y	; get a conout data
  2426 00:FDAA: AD 10 E9     	lda	ZCOUT_BP
  2427 00:FDAD: 8D B7 FD     	sta	zo_1
  2428 00:FDB0: AD 11 E9     	lda	ZCOUT_BP+1
  2429 00:FDB3: 8D B8 FD     	sta	zo_1+1
  2430 00:FDB6: B9           	db	$B9		; LDA $xxxx,y
  2431 00:FDB7: 00 00        zo_1:	dw	0
  2432                        
  2433 00:FDB9: 9D 30 EA     	sta	CONTMP_BUF,x	; set to i_buffer
  2434 00:FDBC: E8           	inx
  2435 00:FDBD: C8           	iny
  2436 00:FDBE: 98           	tya
  2437 00:FDBF: 29 7F        	and	#$7f
  2438 00:FDC1: A8           	tay
  2439 00:FDC2: CE 2D EA     	dec	COUT_CT
  2440 00:FDC5: D0 E3        	bne	i_cploop
  2441                        
  2442 00:FDC7: 8C 2E EA     	sty	COUT_RP		; refresh read pointer
  2443                        
  2444                        	; set string out request
  2445                        	
  2446 00:FDCA: A9 30        	LDA	#$FF&CONTMP_BUF
  2447 00:FDCC: 8D 09 E9     	STA	data_adr
  2448 00:FDCF: A9 EA        	LDA	#CONTMP_BUF>>8
  2449 00:FDD1: 8D 0A E9     	STA	data_adr+1
  2450 00:FDD4: A9 04        	lda	#STROUT_REQ
  2451                        null_cmd
  2452 00:FDD6: 20 6B FF     	jsr	wup_pic		; string out request to PIC
  2453 00:FDD9: 80 BE        	bra	irq_end
  2454                        
  2455                        ;---------- unimon message data ---------------
  2456                        OPNMSG
  2457 00:FDDB: 0D 0A 4D 45  	FCB	CR,LF,"MEZW65C_RAM Monitor W65C02",CR,LF,$00
       00:FDDF: 5A 57 36 35 
       00:FDE3: 43 5F 52 41 
       00:FDE7: 4D 20 4D 6F 
       00:FDEB: 6E 69 74 6F 
       00:FDEF: 72 20 57 36 
       00:FDF3: 35 43 30 32 
       00:FDF7: 0D 0A 00 
  2458                        PROMPT
  2459 00:FDFA: 5D 20 00     	FCB	"] ",$00
  2460                        IHEMSG
  2461 00:FDFD: 45 72 72 6F  	FCB	"Error ihex",CR,LF,$00
       00:FE01: 72 20 69 68 
       00:FE05: 65 78 0D 0A 
       00:FE09: 00 
  2462                        
  2463                        SHEMSG
  2464 00:FE0A: 45 72 72 6F  	FCB	"Error srec",CR,LF,$00
       00:FE0E: 72 20 73 72 
       00:FE12: 65 63 0D 0A 
       00:FE16: 00 
  2465                        
  2466                        ERRMSG
  2467 00:FE17: 45 72 72 6F  	FCB	"Error",CR,LF,$00
       00:FE1B: 72 0D 0A 00 
  2468                        
  2469                        DSEP0
  2470 00:FE1F: 20 3A 00     	FCB	" :",$00
  2471                        DSEP1
  2472 00:FE22: 20 3A 20 00  	FCB	" : ",$00
  2473                        ;IHEXER
  2474                        ;        FCB	":00000001FF",CR,LF,$00
  2475                        ;SRECER
  2476                        ;        FCB	"S9030000FC",CR,LF,$00
  2477                        
  2478 00:FE26: 44 65 74 65  BRKMSG	FCB	"Detect BRK!",CR,LF,$00
       00:FE2A: 63 74 20 42 
       00:FE2E: 52 4B 21 0D 
       00:FE32: 0A 00 
  2479 00:FE34: 53 54 4F 50  stpmsg	FCB	"STOP!(User break)",CR,LF,$00
       00:FE38: 21 28 55 73 
       00:FE3C: 65 72 20 62 
       00:FE40: 72 65 61 6B 
       00:FE44: 29 0D 0A 00 
  2480                        
  2481 00:FE48: 41 3D 00     RDSA	FCB	"A=",$00
  2482 00:FE4B: 20 58 3D 00  RDSX	FCB	" X=",$00
  2483 00:FE4F: 20 59 3D 00  RDSY	FCB	" Y=",$00
  2484 00:FE53: 20 53 50 3D  RDSSP	FCB	" SP=01",$00
       00:FE57: 30 31 00 
  2485 00:FE5A: 20 50 43 3D  RDSPC	FCB	" PC=",$00
       00:FE5E: 00 
  2486 00:FE5F: 20 50 53 52  RDSPSR	FCB	" PSR=",$00
       00:FE63: 3D 00 
  2487 00:FE65: 28 4E 56 31  psr_bm	fcb	"(NV1BDIZC)",CR,LF,0
       00:FE69: 42 44 49 5A 
       00:FE6D: 43 29 0D 0A 
       00:FE71: 00 
  2488                        
  2489                        RNTAB
  2490 00:FE72: 41 01        	FCB	'A',1
  2491 00:FE74: 23 E9 C0 FE  	FDB	REGA,RNA
  2492 00:FE78: 58 01        	FCB	'X',1
  2493 00:FE7A: 24 E9 C2 FE  	FDB	REGX,RNX
  2494 00:FE7E: 59 01        	FCB	'Y',1
  2495 00:FE80: 25 E9 C4 FE  	FDB	REGY,RNY
  2496 00:FE84: 53 80        	FCB	'S',$80
  2497 00:FE86: 96 FE 00 00  	FDB	RNTABS,0
  2498 00:FE8A: 50 80        	FCB	'P',$80
  2499 00:FE8C: A2 FE 00 00  	FDB	RNTABP,0
  2500                        	
  2501 00:FE90: 00 00        	FCB	$00,0		; End mark
  2502 00:FE92: 00 00 00 00  	FDB	0,0
  2503                        
  2504                        RNTABS
  2505 00:FE96: 50 01        	FCB	'P',1
  2506 00:FE98: 26 E9 C6 FE  	FDB	REGSP,RNSP
  2507                        	
  2508 00:FE9C: 00 00        	FCB	$00,0		; End mark
  2509 00:FE9E: 00 00 00 00  	FDB	0,0
  2510                        
  2511                        RNTABP
  2512 00:FEA2: 43 02        	FCB	'C',2
  2513 00:FEA4: 27 E9 C9 FE  	FDB	REGPC,RNPC
  2514 00:FEA8: 53 80        	FCB	'S',$80
  2515 00:FEAA: B4 FE 00 00  	FDB	RNTABPS,0
  2516                        
  2517 00:FEAE: 00 00        	FCB	$00,0		; End mark
  2518 00:FEB0: 00 00 00 00  	FDB	0,0
  2519                        
  2520                        RNTABPS
  2521 00:FEB4: 52 01        	FCB	'R',1
  2522 00:FEB6: 29 E9 CC FE  	FDB	REGPSR,RNPSR
  2523                        
  2524 00:FEBA: 00 00        	FCB	$00,0		; End mark
  2525 00:FEBC: 00 00 00 00  	FDB	0,0
  2526                        	
  2527 00:FEC0: 41 00        RNA	FCB	"A",$00
  2528 00:FEC2: 58 00        RNX	FCB	"X",$00
  2529 00:FEC4: 59 00        RNY	FCB	"Y",$00
  2530 00:FEC6: 53 50 00     RNSP	FCB	"SP",$00
  2531 00:FEC9: 50 43 00     RNPC	FCB	"PC",$00
  2532 00:FECC: 50 53 52 00  RNPSR	FCB	"PSR",$00
  2533                        	
  2534                        ;-----------------------------------
  2535                        ;	Key Input from CIN_BUF
  2536                        ;	CIN_SIZE $80 = 128bytes
  2537                        ;-----------------------------------
  2538                        KEY_IN
  2539 00:FED0: DA           	phx			; push x
  2540 00:FED1: 5A           	phy			; push y
  2541                        
  2542                        keyin_loop
  2543 00:FED2: AD 2A EA     	lda	CIN_CT		; check key buffer counter
  2544 00:FED5: F0 FB        	beq	keyin_loop	; wait key in interrupt if no key data
  2545                        
  2546                        	; get key from key buffer
  2547                        
  2548 00:FED7: 08           	php			; push status
  2549 00:FED8: 78           	sei			; disable interrupt
  2550 00:FED9: CE 2A EA     	dec	CIN_CT
  2551 00:FEDC: AC 2B EA     	ldy	CIN_RP		; key buffer read pointer
  2552                        
  2553                        ;	lda	(ZCIN_BP),y	; get key data
  2554 00:FEDF: AD 0E E9     	lda	ZCIN_BP
  2555 00:FEE2: 8D EC FE     	sta	zc_1
  2556 00:FEE5: AD 0F E9     	lda	ZCIN_BP+1
  2557 00:FEE8: 8D ED FE     	sta	zc_1+1
  2558 00:FEEB: B9           	db	$B9		; LDA $xxxx,y
  2559                        zc_1:
  2560 00:FEEC: 00 00        	dw	0		; operand Absolute Indexed Y
  2561                        
  2562 00:FEEE: AA           	tax			; save key
  2563 00:FEEF: C8           	iny
  2564 00:FEF0: 98           	tya
  2565 00:FEF1: 29 7F        	and	#$7f
  2566 00:FEF3: 8D 2B EA     	sta	CIN_RP
  2567 00:FEF6: 8A           	txa
  2568 00:FEF7: 28           	plp			; pop status
  2569 00:FEF8: 7A           	ply
  2570 00:FEF9: FA           	plx
  2571 00:FEFA: 60           	rts
  2572                        
  2573                        ;-----------------------------------
  2574                        ; check key buffer
  2575                        ;-----------------------------------
  2576                        KEY_CHK
  2577 00:FEFB: AD 2A EA     	lda	CIN_CT		; check key buffer counter
  2578 00:FEFE: D0 01        	bne	kchk1
  2579 00:FF00: 60           	rts
  2580                        kchk1
  2581 00:FF01: A9 01        	lda	#1
  2582 00:FF03: 60           	rts
  2583                        
  2584                        ;-----------------------------------
  2585                        ; save output character to conout buffer
  2586                        ;-----------------------------------
  2587                        PUT_CH
  2588 00:FF04: DA           	phx
  2589 00:FF05: 5A           	phy
  2590 00:FF06: 48           	pha
  2591 00:FF07: AA           	tax
  2592                        wai_putch
  2593 00:FF08: AD 2D EA     	lda	COUT_CT
  2594 00:FF0B: 30 FB        	bmi	wai_putch	; wait buffer readyl if buffer full
  2595                        	
  2596 00:FF0D: 08           	php
  2597 00:FF0E: 78           	sei			; disable interrupt
  2598                        ;debug
  2599                        ;	inc	disk_track
  2600                        ;debug
  2601                        
  2602 00:FF0F: EE 2D EA     	inc	COUT_CT
  2603 00:FF12: AC 2F EA     	ldy	COUT_WP
  2604                        ;	txa
  2605                        ;	sta	(ZCOUT_BP),y	; save character to buffer
  2606 00:FF15: AD 10 E9     	lda	ZCOUT_BP
  2607 00:FF18: 8D 23 FF     	sta	zco_1
  2608 00:FF1B: AD 11 E9     	lda	ZCOUT_BP+1
  2609 00:FF1E: 8D 24 FF     	sta	zco_1+1
  2610 00:FF21: 8A           	txa
  2611 00:FF22: 99           	db	$99		; STA $xxxx,y
  2612                        zco_1:
  2613 00:FF23: 00 00        	dw	0		; operand Absolute Indexed Y
  2614                        	
  2615 00:FF25: C8           	iny
  2616 00:FF26: 98           	tya
  2617 00:FF27: 29 7F        	and	#$7f
  2618 00:FF29: 8D 2F EA     	sta	COUT_WP
  2619 00:FF2C: 28           	plp
  2620                        
  2621 00:FF2D: 68           	pla
  2622 00:FF2E: 7A           	ply
  2623 00:FF2F: FA           	plx
  2624 00:FF30: 60           	rts
  2625                        	
  2626                        ;;;
  2627                        ;;;	Console Driver
  2628                        ;;;
  2629                        
  2630                        ;CONIN_REQ	EQU	0x01
  2631                        ;CONOUT_REQ	EQU	0x02
  2632                        ;CONST_REQ	EQU	0x03
  2633                        ;STROUT_REQ	equ	$04
  2634                        ;WUP_REQ	equ	$ff
  2635                        ;  ---- request command to PIC
  2636                        ; UREQ_COM = 1   ; CONIN  : return char in UNI_CHR
  2637                        ;          = 2   ; CONOUT : UNI_CHR = output char
  2638                        ;          = 3   ; CONST  : return status in UNI_CHR
  2639                        ;                       : ( 0: no key, 1 : key exist )
  2640                        ;          = 4   ; STROUT : string address = (PTRSAV, PTRSAV_SEG)
  2641                        ;          = $FF ; wakeup firmware ( NMI interrupt )
  2642                        ;
  2643                        ;UREQ_COM	rmb	1	; unimon CONIN/CONOUT request command
  2644                        ;UNI_CHR	rmb	1	; charcter (CONIN/CONOUT) or number of strings
  2645                        
  2646                        INIT
  2647                        	; clear Reqest Parameter Block
  2648 00:FF31: A9 00        	lda	#0
  2649 00:FF33: 8D 00 E9     	sta	UREQ_COM
  2650 00:FF36: 8D 02 E9     	sta	CREQ_COM
  2651 00:FF39: 8D 0B E9     	sta	bank
  2652 00:FF3C: 8D 0C E9     	sta	reserve
  2653 00:FF3F: 8D 2A EA     	sta	CIN_CT
  2654 00:FF42: 8D 2B EA     	sta	CIN_RP
  2655 00:FF45: 8D 2C EA     	sta	CIN_WP
  2656 00:FF48: 8D 2D EA     	sta	COUT_CT
  2657 00:FF4B: 8D 2E EA     	sta	COUT_RP
  2658 00:FF4E: 8D 2F EA     	sta	COUT_WP
  2659 00:FF51: 8D 0D E9     	sta	irq_tgl
  2660                        ;debug
  2661                        ;	sta	disk_track
  2662                        ;debug
  2663                        
  2664                        
  2665                        	; save COUT_BUF address to zero page ZCOUT_BP
  2666 00:FF54: A9 2A        	LDA	#$FF&COUT_BUF
  2667 00:FF56: 8D 10 E9     	STA	ZCOUT_BP
  2668 00:FF59: A9 E9        	LDA	#COUT_BUF>>8
  2669 00:FF5B: 8D 11 E9     	STA	ZCOUT_BP+1
  2670                        
  2671                        	; save CIN_BUF address to zero page ZCIN_BP
  2672 00:FF5E: A9 AA        	LDA	#$FF&CIN_BUF
  2673 00:FF60: 8D 0E E9     	STA	ZCIN_BP
  2674 00:FF63: A9 E9        	LDA	#CIN_BUF>>8
  2675 00:FF65: 8D 0F E9     	STA	ZCIN_BP+1
  2676                        
  2677 00:FF68: 60           	RTS
  2678                        
  2679                        ;
  2680                        ; request CONIN, CONST CONOUT to PIC18F47QXX
  2681                        ;
  2682                        
  2683                        CONIN
  2684 00:FF69: A9 01        	lda	#CONIN_REQ
  2685                        
  2686                        wup_pic
  2687 00:FF6B: 8D 00 E9     	sta	UREQ_COM
  2688                        ;wait_again
  2689 00:FF6E: CB           	wai			; RDY = 0, wait /IRQ detect
  2690                        	
  2691 00:FF6F: AD 01 E9     	lda	UNI_CHR
  2692 00:FF72: 60           	RTS
  2693                        
  2694                        CONST
  2695 00:FF73: A9 03        	lda	#CONST_REQ
  2696 00:FF75: 20 6B FF     	jsr	wup_pic
  2697 00:FF78: 29 01        	AND	#$01
  2698 00:FF7A: 60           	RTS
  2699                        
  2700                        CONOUT
  2701 00:FF7B: 48           	pha
  2702 00:FF7C: 8D 01 E9     	sta	UNI_CHR		; set char
  2703 00:FF7F: A9 02        	lda	#CONOUT_REQ
  2704 00:FF81: 20 6B FF     	jsr	wup_pic
  2705 00:FF84: 68           	pla
  2706 00:FF85: 60           	rts
  2707                        
  2708                        NMI_SIG
  2709 00:FF86: A9 FF        	lda	#WUP_REQ
  2710 00:FF88: 80 E1        	bra	wup_pic
  2711                        
  2712                        	;;
  2713                        	;; Vector area
  2714                        	;; 
  2715                        
  2716                        	ORG	$FFFA
  2717                        
  2718 00:FFFA: 28 FC        	FDB	NMI_VEC		; NMI
  2719                        
  2720 00:FFFC: 00 EB        	FDB	CSTART		; RESET
  2721                        
  2722 00:FFFE: 4F FC        	FDB	IRQBRK		; IRQ/BRK
  2723                        
  2724                        	END


      Lines assembled: 2724
      Errors: 0
