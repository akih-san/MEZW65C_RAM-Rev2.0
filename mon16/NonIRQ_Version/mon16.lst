     1                        ;;;
     2                        ;;; Universal Monitor 6502 Copyright (C) 2019 Haruo Asano
     3                        ;;; https://electrelic.com/electrelic/node/1317
     4                        ;;;
     5                        ;;; -- original disassemble sorce code --
     6                        ;;;-------------------------------------------------------------------------------
     7                        ;:; https://github.com/andrew-jacobs/w65c816sxb-hacker
     8                        ;;;
     9                        ;;;   A program for Hacking your W65C265SXB or W65C816SXB
    10                        ;;;   Copyright (C),2015-2018 Andrew Jacobs
    11                        ;;;
    12                        ;;;   All rights reserved.
    13                        ;;;
    14                        ;;;   This work is made available under the terms of the Creative Commons
    15                        ;;;   Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    16                        ;;;   following URL to see the details.
    17                        ;;;
    18                        ;;; http://creativecommons.org/licenses/by-nc-sa/4.0/
    19                        ;;;-------------------------------------------------------------------------------
    20                        ;;;
    21                        ;;; This program is based on Universal Monitor 6502
    22                        ;;; Programed by Akihito Honda. 2024.10
    23                        ;;;
    24                        ;;; Thanks all.
    25                        ;;;
    26                        
    27                        	pl	0
    28                        	pw      132
    29                        	chip    65816
    30                        ;                inclist on
    31                        ;;;
    32                        ;;; MEZW65C_RAM Monitor for W65C186
    33                        ;;;
    34                        	include "w65c816.inc"
    35                        
    36                        ;;;
    37                        ;;; Memory
    38                        ;;;
    39                        
    40             0000ED00   PRG_B	EQU	$ED00
    41                        
    42             00000000   UNIMON_DB	equ	0
    43             0000EC00   UNIMON_DP	equ	PRG_B-256	; $EC00
    44             0000EBFF   STACK	EQU	UNIMON_DP-1		; $EBFF
    45                        
    46             00000200   USER_M	equ	$200
    47             000001FF   USER_S	equ	USER_M-1		; $01FF
    48                        
    49             00000080   COUT_SIZE	equ $80		; 128byte console output buffer
    50             00000080   CIN_SIZE	equ COUT_SIZE
    51                        
    52             00000018   ZERO_B	EQU	$0018		; Must fit in ZERO page
    53                        
    54                        
    55             00000010   BUFLEN	EQU	16		; Buffer length ( 16 or above )
    56             00000000   cpu_id	equ	$00		; memory address $0000 is written CPU ID by PIC
    57                        
    58                        ; PIC function code
    59                        
    60             00000001   CONIN_REQ	EQU	$01
    61             00000002   CONOUT_REQ	EQU	$02
    62             00000003   CONST_REQ	EQU	$03
    63             00000004   STROUT_REQ	equ	$04
    64             00000007   STRIN_REQ	equ	$07
    65             000000FF   WUP_REQ		equ	$ff
    66                        
    67                        ;;; Constants
    68             00000000   NULL	EQU	$00
    69             00000001   SOH	equ	$01
    70             00000004   EOT	equ	$04
    71             00000006   ACK	equ	$06
    72             00000007   BEL	equ	$07
    73             00000008   BS	equ	$08
    74             00000009   TAB	equ	$09
    75             0000000A   LF	equ	$0a
    76             0000000D   CR	equ	$0d
    77             00000015   NAK	equ	$15
    78             00000018   CAN	equ	$18
    79             0000001B   ESC	equ	$1b
    80             0000007F   DEL	equ	$7f
    81                        
    82                        ;--------------------------------------
    83                        ;ZERO page
    84                        ;--------------------------------------
    85                        	;;
    86                        	;; Work Area
    87                        	;;
    88                        
    89                        	.page0
    90                        	ORG	ZERO_B
    91                        
    92                        ; PIC18F47QXX I/F
    93 00:0018:              UREQ_COM	ds	1	; unimon CONIN/CONOUT request command
    94 00:0019:              UNI_CHR		ds	1	; charcter (CONIN/CONOUT) or number of strings
    95 00:001A:              CREQ_COM	ds	1	; unimon CONIN/CONOUT request command
    96 00:001B:              CBI_CHR		ds	1	; charcter (CONIN/CONOUT) or number of strings
    97 00:001C:              disk_drive	ds	1	;
    98 00:001D:              disk_track	ds	2	;
    99 00:001F:              disk_sector	ds	2	;
   100 00:0021:              data_adr	ds	2	;
   101 00:0023:              bank		ds	1	;
   102 00:0024:              reserve		ds	1	;
   103                        
   104 00:0025:              INBUF	ds	BUFLEN		; Line input buffer
   105 00:0035:              arg1st		ds	1
   106 00:0036:              arg2nd		ds	2
   107 00:0038:              arg3rd		ds	2
   108 00:003A:              argtype		ds	1
   109                        
   110                        ; argtype pattern	123
   111                        ;0  no parameter	000
   112                        ;4 xx:			100
   113                        ;6 xx:xxxx		110
   114                        ;7 xx:xxxx,xxxx		111
   115                        ;5 xx:,xxxx		101
   116                        ;2 xxxx			010
   117                        ;3 xxxx,xxxx		011
   118                        ;1 ,xxxx		001
   119                        
   120 00:003B:              DSADDR	ds	2		; Dump start address
   121 00:003D:              DEADDR	ds	2		; Dump end address
   122 00:003F:              dumpdb	ds	1		; Dump data bank
   123 00:0040:              DSTATE	ds	1		; Dump state
   124 00:0041:              GADDR	ds	2		; Go address
   125 00:0043:              SADDR	ds	2		; Set address
   126 00:0045:              HEXMOD	ds	1		; HEX file mode
   127 00:0046:              RECTYP	ds	1		; Record type
   128                        
   129                        reg_tbls
   130 00:0047:              REGA	ds	2		; Accumulator A
   131 00:0049:              REGX	ds	2		; Index register X
   132 00:004B:              REGY	ds	2		; Index register Y
   133 00:004D:              REGSP	ds	2		; Stack pointer SP
   134 00:004F:              REGPC	ds	2		; Program counter PC
   135 00:0051:              REGPSR	ds	1		; Processor status register PSR
   136 00:0052:              REGPB	ds	1		; Program Bank register
   137 00:0053:              REGDB	ds	1		; Data Bank register
   138 00:0054:              REGDP	ds	2		; Direct Page register
   139                        reg_tble
   140             0000000F   reg_size	equ reg_tble-reg_tbls
   141                        
   142 00:0056:              ILL_PC	ds	2
   143                        
   144 00:0058:              REGSIZ	ds	1		; Register size
   145                        	
   146 00:0059:              DMPPT	ds	2
   147 00:005B:              CKSUM	ds	1		; Checksum
   148 00:005C:              HITMP	ds	1		; Temporary (used in HEXIN)
   149                        
   150 00:005D:              PT0	ds	2		; Generic Pointer 0
   151 00:005F:              PT0_DB	ds	1
   152 00:0060:              PT1	ds	2		; Generic Pointer 1
   153 00:0062:              PT1_DB	ds	1
   154 00:0063:              CNT	ds	1		; Generic Counter
   155 00:0064:              bop_adr	ds	2
   156 00:0066:              bop_bnk	ds	1
   157                        
   158 00:0067:              bcode	ds	1
   159                        
   160                        ; disassemble  value
   161                        
   162 00:0068:              lines	ds	1
   163 00:0069:              FLAGS	ds	1	; Emulated processor flags
   164 00:006A:              ADDR_S	ds	3	; Start address
   165 00:006D:              ADDR_E	ds	3	; End address
   166                        
   167                        ;Go command  value
   168 00:0070:              stp_flg		ds	1
   169 00:0071:              sav_dat		ds	2
   170 00:0073:              sv_adr		ds	2
   171 00:0075:              sv_bnk		ds	1
   172                        
   173                        ; console interrupt handler string input count value
   174 00:0076:              STRIN_CNT	ds	1
   175                        
   176                        
   177                        ;;;
   178                        ;;; Program area
   179                        ;;;	
   180                        	.code
   181                        	ORG	PRG_B
   182                        
   183                        CSTART:
   184                        ;--------- MEZW65C_RAM file header --------------------------
   185 00:ED00: 4C 20 ED     	jmp	COLD_START
   186 00:ED03: 4C AA ED     	jmp	WSTART
   187                        
   188                        	; uinimon config data
   189                        	;
   190 00:ED06: 00 EC        	dw	UNIMON_DP	; DP
   191                        	; Unique ID
   192 00:ED08: 4D 45 5A 57  mezID:	db	"MEZW65C",0
       00:ED0C: 36 35 43 00 
   193                        
   194                        start_p:	; File load address(program start address)
   195 00:ED10: 00 ED        	dw	PRG_B		; start address(16 bit)
   196 00:ED12: 00           pbr_p	db	0		; program bank
   197 00:ED13: 00           	db	0		; reserve
   198                        	; define Common memory address
   199 00:ED14: 18 EC        PIC_IF:	dw	UNIMON_DP+UREQ_COM	;  Common memory address for PIC (Low)
   200 00:ED16: 00 00        	dw	0		; (high)
   201                        
   202 00:ED18: 01           SW_816:	db	1	; 0 : W65C02
   203                        			; 1 : W65C816 native mode 
   204 00:ED19: 00           irq_sw	db	0	; 0 : no use IRQ console I/O
   205                        			; 1 : use IRQ timer interrupt driven console I/O
   206 00:ED1A: 47 EC        reg_tp	dw	UNIMON_DP+reg_tbls	; register save pointer
   207 00:ED1C: 0F 00        reg_ts	dw	reg_size		; register table size
   208 00:ED1E: 01           nmi_sw	db	1	; 0 : No NMI support, 1: NMI support
   209 00:ED1F: 02           bios_sw	db	2	; 0 : standalone program
   210                        			; 1 : program call bios command
   211                        			; 2 : monitor program (.SYS)
   212                        COLD_START:
   213                        ;--------- MEZW65C_RAM file header --------------------------
   214                        
   215                        ; user program infomation pointer
   216             0000ED08   u_sw	equ	mezID+0
   217             0000ED09   u_addr	equ	mezID+1
   218             0000ED0B   u_pbp	equ	mezID+3
   219             0000ED0C   u_dbp	equ	mezID+4
   220             0000ED0D   u_dpp	equ	mezID+5
   221                        
   222                        
   223 00:ED20: 78           	sei			; disable interrupt
   224                        	native
+  224 00:ED21: 18                           clc
+  224 00:ED22: FB                           xce
   225                        	short_ai
+  225 00:ED23: E2 30                        sep     #M_FLAG|X_FLAG
+  225                                        longa   off
+  225                                        longi   off
   226                        	long_a
+  226 00:ED25: C2 20                        rep     #M_FLAG
+  226                                        longa   on
   227 00:ED27: A9 FF EB     	LDA	#STACK
   228 00:ED2A: 1B           	TAS			; set sp
   229                        
   230 00:ED2B: A9 00 EC     	lda	#UNIMON_DP
   231 00:ED2E: 48           	pha
   232 00:ED2F: 2B           	pld			; set Direct Page
   233                        
   234                        	short_a
+  234 00:ED30: E2 20                        sep     #M_FLAG
+  234                                        longa   off
   235 00:ED32: A9 00        	lda	#UNIMON_DB
   236 00:ED34: 48           	pha
   237 00:ED35: AB           	plb			; set DATA BANK
   238                        
   239 00:ED36: 20 89 FD     	JSR	INIT
   240                        	long_a
+  240 00:ED39: C2 20                        rep     #M_FLAG
+  240                                        longa   on
   241 00:ED3B: A9 00 00     	LDA	#0
   242 00:ED3E: 85 3B        	STA	DSADDR
   243 00:ED40: 85 43        	STA	SADDR
   244 00:ED42: 85 41        	STA	GADDR
   245                        
   246                        	short_a
+  246 00:ED44: E2 20                        sep     #M_FLAG
+  246                                        longa   off
   247 00:ED46: A9 53        	LDA	#'S'
   248 00:ED48: 85 45        	STA	HEXMOD
   249 00:ED4A: 64 52        	stz	REGPB		; clear Program Bank
   250 00:ED4C: 64 53        	stz	REGDB		; clear data Bank
   251 00:ED4E: 64 70        	stz	stp_flg
   252 00:ED50: 64 3F        	stz	dumpdb
   253 00:ED52: A9 34        	lda	#%00110100
   254 00:ED54: 85 51        	STA	REGPSR
   255 00:ED56: 85 69        	STA	FLAGS		; save disassemble EmPCR
   256                        
   257                        	long_a
+  257 00:ED58: C2 20                        rep     #M_FLAG
+  257                                        longa   on
   258 00:ED5A: 64 47        	stz	REGA
   259 00:ED5C: 64 49        	stz	REGX
   260 00:ED5E: 64 4B        	stz	REGY
   261 00:ED60: 64 54        	stz	REGDP		; clear Direct Page
   262                        
   263 00:ED62: A9 FF 01     	LDA	#USER_S
   264 00:ED65: 85 4D        	STA	REGSP
   265 00:ED67: A9 00 02     	lda	#USER_M
   266 00:ED6A: 85 4F        	STA	REGPC
   267 00:ED6C: 85 6A        	sta	ADDR_S
   268 00:ED6E: 64 6D        	stz	ADDR_E
   269                        	
   270                        	short_a
+  270 00:ED70: E2 20                        sep     #M_FLAG
+  270                                        longa   off
   271                        
   272 00:ED72: AD 08 ED     	lda	u_sw
   273 00:ED75: F0 29        	beq	wup_umon
   274 00:ED77: C9 01        	cmp	#1
   275 00:ED79: F0 09        	beq	go_uapl
   276                        ;
   277                        ; sleep moniotr
   278                        ;
   279                        wup
   280 00:ED7B: A9 01        	lda	#1
   281 00:ED7D: 85 19        	sta	UNI_CHR		; sleep signal
   282 00:ED7F: 20 B6 FD     	jsr	NMI_SIG
   283 00:ED82: 80 F7        	bra	wup
   284                        
   285                        ;
   286                        ; goto user program
   287                        ;
   288                        go_uapl
   289                        	long_a
+  289 00:ED84: C2 20                        rep     #M_FLAG
+  289                                        longa   on
   290 00:ED86: A9 FF 01     	LDA	#USER_S
   291 00:ED89: 1B           	TAS			; set user stack (standerd 6502)
   292 00:ED8A: AE 0B ED     	ldx	u_pbp		; X : 8bit
   293 00:ED8D: DA           	phx			; push PBR : 8bit
   294 00:ED8E: AD 09 ED     	lda	u_addr		; A : 16bit
   295 00:ED91: 3A           	dec	a
   296 00:ED92: 48           	pha			; push PC : 16bit
   297 00:ED93: AD 0D ED     	lda	u_dpp
   298 00:ED96: 48           	pha			; push DP
   299                        	short_a
+  299 00:ED97: E2 20                        sep     #M_FLAG
+  299                                        longa   off
   300 00:ED99: AD 0C ED     	lda	u_dbp
   301 00:ED9C: 48           	pha			; push DBR
   302 00:ED9D: AB           	plb			; get user data bank
   303 00:ED9E: 2B           	pld			; get user direct page
   304                        
   305                        ; jump user program
   306                        
   307 00:ED9F: 6B           	rtl			;return long
   308                        
   309                        	;; Opening message
   310                        wup_umon
   311                        	long_a
+  311 00:EDA0: C2 20                        rep     #M_FLAG
+  311                                        longa   on
   312 00:EDA2: A9 A7 FB     	LDA	#OPNMSG
   313 00:EDA5: 85 5D        	STA	PT0
   314 00:EDA7: 20 A3 FA     	JSR	STROUT
   315                        
   316                        WSTART
   317 00:EDAA: 78           	sei			; disable interrupt
   318                        	native
+  318 00:EDAB: 18                           clc
+  318 00:EDAC: FB                           xce
   319                        	short_ai
+  319 00:EDAD: E2 30                        sep     #M_FLAG|X_FLAG
+  319                                        longa   off
+  319                                        longi   off
   320                        	long_a
+  320 00:EDAF: C2 20                        rep     #M_FLAG
+  320                                        longa   on
   321 00:EDB1: A9 FF EB     	LDA	#STACK
   322 00:EDB4: 1B           	TAS			; set sp
   323                        
   324 00:EDB5: A9 00 EC     	lda	#UNIMON_DP
   325 00:EDB8: 48           	pha
   326 00:EDB9: 2B           	pld			; set Direct Page
   327                        
   328                        	short_a
+  328 00:EDBA: E2 20                        sep     #M_FLAG
+  328                                        longa   off
   329 00:EDBC: A9 00        	lda	#UNIMON_DB
   330 00:EDBE: 48           	pha
   331 00:EDBF: AB           	plb			; set DATA BANK
   332                        
   333                        	long_a
+  333 00:EDC0: C2 20                        rep     #M_FLAG
+  333                                        longa   on
   334 00:EDC2: A9 C7 FB     	LDA	#PROMPT
   335 00:EDC5: 85 5D        	STA	PT0
   336 00:EDC7: 20 A3 FA     	JSR	STROUT
   337 00:EDCA: 20 00 FB     	JSR	GETLIN
   338                        
   339 00:EDCD: A2 00        	LDX	#0
   340                        	longa off
   341 00:EDCF: B5 25        	lda	INBUF,x
   342 00:EDD1: C9 00        	CMP	#0
   343 00:EDD3: F0 D5        	BEQ	WSTART
   344                        
   345 00:EDD5: C9 44        	CMP	#'D'
   346 00:EDD7: D0 03        	BNE	M00
   347 00:EDD9: 4C 97 EE     	JMP	DUMP
   348                        M00
   349 00:EDDC: C9 47        	CMP	#'G'
   350 00:EDDE: D0 03        	BNE	M01
   351 00:EDE0: 4C 98 F5     	JMP	GO
   352                        M01
   353 00:EDE3: C9 53        	CMP	#'S'
   354 00:EDE5: D0 03        	BNE	M02
   355 00:EDE7: 4C FA F5     	JMP	SETM
   356                        M02
   357 00:EDEA: C9 4C        	CMP	#'L'
   358 00:EDEC: D0 03        	BNE	M03
   359 00:EDEE: 4C 9A F6     	JMP	LOADH
   360                        M03
   361                        	
   362 00:EDF1: C9 52        	CMP	#'R'
   363 00:EDF3: D0 03        	BNE	M05
   364 00:EDF5: 4C A0 F7     	JMP	REG
   365                        M05	
   366 00:EDF8: C9 42        	cmp	#'B'
   367 00:EDFA: D0 1A        	bne	M06
   368 00:EDFC: E8           	inx
   369 00:EDFD: B5 25        	LDA	INBUF,X
   370 00:EDFF: 20 60 FB     	JSR	UPPER
   371 00:EE02: C9 59        	CMP	#'Y'
   372 00:EE04: D0 17        	bne	ERR
   373 00:EE06: E8           	inx
   374 00:EE07: B5 25        	LDA	INBUF,X
   375 00:EE09: 20 60 FB     	JSR	UPPER
   376 00:EE0C: C9 45        	CMP	#'E'
   377 00:EE0E: D0 0D        	bne	ERR
   378 00:EE10: 20 F6 FA     	jsr	CRLF
   379 00:EE13: 4C 7B ED     	jmp	wup
   380                        
   381                        M06
   382 00:EE16: C9 3F        	CMP	#'?'
   383 00:EE18: D0 03        	BNE	ERR
   384 00:EE1A: 4C 38 F9     	jmp	prt_help
   385                        
   386                        ERR
   387                        	long_a
+  387 00:EE1D: C2 20                        rep     #M_FLAG
+  387                                        longa   on
   388 00:EE1F: A9 E4 FB     	LDA	#ERRMSG
   389 00:EE22: 85 5D        	STA	PT0
   390 00:EE24: 20 A3 FA     	JSR	STROUT
   391 00:EE27: 4C AA ED     	JMP	WSTART
   392                        
   393                        ; check string hex?
   394                        ;
   395                        ; X : pointer (check from X+1)
   396                        ; return Z=1 : no hex
   397                        ;        Z=0 : hex in CNT
   398                        chk_strhex
   399                        	longi off
   400                        	longa off
   401 00:EE2A: E8           	INX
   402 00:EE2B: 20 6B FB     	JSR	RDHEX
   403 00:EE2E: A5 63        	LDA	CNT
   404 00:EE30: 60           	rts
   405                        
   406                        ;
   407                        ; command line parsing
   408                        ;
   409                        arg_parsing
   410                        	longi off
   411                        	longa off
   412 00:EE31: 64 3A        	stz	argtype		; set type = 0
   413 00:EE33: 20 2A EE     	jsr	chk_strhex
   414 00:EE36: D0 05        	BNE	PP0		; jmp, if 1st arg. exist
   415                        
   416 00:EE38: B5 25        	LDA	INBUF,X
   417 00:EE3A: D0 22        	BNE	PP01		; jmp, if remain strings exist
   418                        PP00
   419                        	; no arg.
   420 00:EE3C: 60           	rts			; type = 0
   421                        	
   422                        	
   423                        PP0	;; 1st arg. found
   424                        
   425 00:EE3D: B5 25        	LDA	INBUF,X
   426 00:EE3F: C9 3A        	cmp	#':'		; check bank
   427 00:EE41: D0 0D        	bne	f_1st_adr
   428                        	
   429 00:EE43: A5 60        	lda	PT1
   430 00:EE45: 85 35        	sta	arg1st		; save 1st arg. (8bit)
   431 00:EE47: A9 04        	lda	#4
   432 00:EE49: 85 3A        	sta	argtype		; type = 4
   433 00:EE4B: 20 2A EE     	jsr	chk_strhex
   434 00:EE4E: F0 0E        	beq	PP01
   435                        
   436                        f_1st_adr
   437                        	long_a
+  437 00:EE50: C2 20                        rep     #M_FLAG
+  437                                        longa   on
   438 00:EE52: A5 60        	LDA	PT1
   439 00:EE54: 85 36        	sta	arg2nd		; save 2nd arg.
   440                        	short_a
+  440 00:EE56: E2 20                        sep     #M_FLAG
+  440                                        longa   off
   441 00:EE58: A5 3A        	lda	argtype
   442 00:EE5A: 09 02        	ora	#2		; type = 6 or 2
   443 00:EE5C: 85 3A        	sta	argtype
   444                        
   445                        	; check 3rd arg. exist
   446                        
   447                        PP01
   448 00:EE5E: B5 25        	LDA	INBUF,X		; get next string
   449 00:EE60: C9 2C        	CMP	#','
   450 00:EE62: F0 07        	BEQ	PP1		; jmp if 2nd parameter exist
   451 00:EE64: C9 00        	cmp	#0
   452 00:EE66: F0 D4        	beq	PP00		; jmp if no 2nd parameter
   453                        
   454                        D_ERR
   455 00:EE68: 4C 1D EE     	JMP	ERR
   456                        
   457                        PP1	;; check 2nd arg.
   458                        
   459 00:EE6B: 20 2A EE     	jsr	chk_strhex
   460 00:EE6E: F0 F8        	BEQ	D_ERR
   461 00:EE70: B5 25        	LDA	INBUF,X
   462 00:EE72: D0 F4        	BNE	D_ERR
   463                        
   464                        	;; set 2nd arg.
   465                        
   466                        	long_a
+  466 00:EE74: C2 20                        rep     #M_FLAG
+  466                                        longa   on
   467 00:EE76: A5 60        	LDA	PT1
   468 00:EE78: 85 38        	STA	arg3rd
   469                        	short_a
+  469 00:EE7A: E2 20                        sep     #M_FLAG
+  469                                        longa   off
   470 00:EE7C: A5 3A        	lda	argtype
   471 00:EE7E: 09 01        	ora	#1		; type = 7 or 3 or 5 or 1
   472 00:EE80: 85 3A        	sta	argtype
   473 00:EE82: 60           	rts
   474                        
   475                        ;;;
   476                        ;;; Dump memory
   477                        ;;;
   478                        ptt_db
   479                        	longi off
   480                        	longa off
   481 00:EE83: A5 3F        	lda	dumpdb
   482 00:EE85: 20 B3 FA     	JSR	HEXOUT2
   483 00:EE88: A9 3A        	lda	#':'
   484 00:EE8A: 4C AA FD     	jmp	CONOUT
   485                        
   486                        put_dpl
   487                        	long_a
+  487 00:EE8D: C2 20                        rep     #M_FLAG
+  487                                        longa   on
   488 00:EE8F: A9 F3 FB     	lda	#dmplmsg
   489 00:EE92: 85 5D        	sta	PT0
   490 00:EE94: 4C A3 FA     	jmp	STROUT
   491                        
   492                        ;;; Dump memory entry
   493                        DUMP
   494                        	longa off
   495 00:EE97: E8           	INX
   496 00:EE98: B5 25        	LDA	INBUF,X
   497 00:EE9A: C9 49        	cmp	#'I'
   498 00:EE9C: D0 03        	bne	dmp1
   499 00:EE9E: 4C D0 EF     	jmp	disassemble
   500                        dmp1
   501 00:EEA1: CA           	dex
   502 00:EEA2: 20 31 EE     	jsr	arg_parsing	; get line input & parsing data
   503                        
   504 00:EEA5: A6 3A        	ldx	argtype
   505 00:EEA7: 8A           	txa
   506 00:EEA8: 29 04        	and	#4
   507 00:EEAA: F0 04        	beq	dmp3
   508                        
   509                        	;; 1st arg. found
   510 00:EEAC: A5 35        	LDA	arg1st
   511 00:EEAE: 85 3F        	STA	dumpdb		; set data bank
   512                        
   513                        dmp3
   514 00:EEB0: 8A           	txa
   515 00:EEB1: 29 02        	and	#2
   516 00:EEB3: F0 08        	beq	dmp4
   517                        	
   518                        	;; set 2nd arg.
   519                        	long_a
+  519 00:EEB5: C2 20                        rep     #M_FLAG
+  519                                        longa   on
   520 00:EEB7: A5 36        	LDA	arg2nd
   521 00:EEB9: 85 3B        	STA	DSADDR		; set start address
   522                        	short_a
+  522 00:EEBB: E2 20                        sep     #M_FLAG
+  522                                        longa   off
   523                        
   524                        dmp4
   525 00:EEBD: 8A           	txa
   526 00:EEBE: 29 01        	and	#1
   527 00:EEC0: F0 08        	beq	dmp5
   528                        
   529                        	;; set 3rd arg.
   530                        	long_a
+  530 00:EEC2: C2 20                        rep     #M_FLAG
+  530                                        longa   on
   531 00:EEC4: A5 38        	LDA	arg3rd
   532                        ;	SEC
   533                        ;	ADC	#0
   534 00:EEC6: 85 3D        	STA	DEADDR
   535                        	short_a
+  535 00:EEC8: E2 20                        sep     #M_FLAG
+  535                                        longa   off
   536                        
   537                        dmp5
   538 00:EECA: 8A           	txa
   539 00:EECB: F0 0C        	beq	endcalc
   540 00:EECD: C9 02        	cmp	#2
   541 00:EECF: F0 08        	beq	endcalc
   542 00:EED1: C9 04        	cmp	#4
   543 00:EED3: F0 04        	beq	endcalc
   544 00:EED5: C9 06        	cmp	#6
   545 00:EED7: D0 0A        	bne	DPM
   546                        
   547                        endcalc
   548                        	long_a
+  548 00:EED9: C2 20                        rep     #M_FLAG
+  548                                        longa   on
   549 00:EEDB: A5 3B        	LDA	DSADDR
   550 00:EEDD: 18           	CLC
   551 00:EEDE: 69 80 00     	ADC	#128
   552 00:EEE1: 85 3D        	STA	DEADDR
   553                        
   554                        	;; DUMP main
   555                        DPM	
   556                        	short_a
+  556 00:EEE3: E2 20                        sep     #M_FLAG
+  556                                        longa   off
   557 00:EEE5: A5 3B        	LDA	DSADDR
   558 00:EEE7: 29 F0        	AND	#$F0
   559 00:EEE9: 85 60        	STA	PT1
   560 00:EEEB: A5 3C        	LDA	DSADDR+1
   561 00:EEED: 85 61        	STA	PT1+1
   562 00:EEEF: A9 00        	LDA	#0
   563 00:EEF1: 85 40        	STA	DSTATE
   564 00:EEF3: 20 8D EE     	jsr	put_dpl		;print dump index
   565                        DPM0
   566 00:EEF6: 20 2F EF     	JSR	DPL
   567                        
   568                        	long_a
+  568 00:EEF9: C2 20                        rep     #M_FLAG
+  568                                        longa   on
   569 00:EEFB: A5 60        	LDA	PT1
   570 00:EEFD: 18           	CLC
   571 00:EEFE: 69 10 00     	ADC	#16
   572 00:EF01: 85 60        	STA	PT1
   573                        	short_a
+  573 00:EF03: E2 20                        sep     #M_FLAG
+  573                                        longa   off
   574                        
   575 00:EF05: 20 A0 FD     	JSR	CONST
   576 00:EF08: D0 14        	BNE	DPM1
   577 00:EF0A: A5 40        	LDA	DSTATE
   578 00:EF0C: C9 02        	CMP	#2
   579 00:EF0E: 90 E6        	BCC	DPM0
   580                        
   581 00:EF10: 20 8D EE     	jsr	put_dpl		;print dump index
   582                        	long_a
+  582 00:EF13: C2 20                        rep     #M_FLAG
+  582                                        longa   on
   583 00:EF15: A5 3D        	LDA	DEADDR
   584 00:EF17: 85 3B        	STA	DSADDR
   585                        	short_a
+  585 00:EF19: E2 20                        sep     #M_FLAG
+  585                                        longa   off
   586 00:EF1B: 4C AA ED     	JMP	WSTART
   587                        
   588                        DPM1
   589 00:EF1E: 20 96 FD     	JSR	CONIN
   590 00:EF21: 20 8D EE     	jsr	put_dpl		;print dump index
   591                        	long_a
+  591 00:EF24: C2 20                        rep     #M_FLAG
+  591                                        longa   on
   592 00:EF26: A5 60        	LDA	PT1
   593 00:EF28: 85 3B        	STA	DSADDR
   594                        	short_a
+  594 00:EF2A: E2 20                        sep     #M_FLAG
+  594                                        longa   off
   595 00:EF2C: 4C AA ED     	JMP	WSTART
   596                        
   597                        	;; Dump line
   598                        DPL
   599                        	;print bank
   600 00:EF2F: 20 83 EE     	jsr	ptt_db
   601                        
   602 00:EF32: A5 61        	LDA	PT1+1
   603 00:EF34: 20 B3 FA     	JSR	HEXOUT2
   604 00:EF37: A5 60        	LDA	PT1
   605 00:EF39: 20 B3 FA     	JSR	HEXOUT2
   606                        
   607                        	long_a
+  607 00:EF3C: C2 20                        rep     #M_FLAG
+  607                                        longa   on
   608 00:EF3E: A9 EC FB     	LDA	#DSEP0
   609 00:EF41: 85 5D        	STA	PT0
   610 00:EF43: 20 A3 FA     	JSR	STROUT
   611 00:EF46: A2 00        	LDX	#0
   612 00:EF48: A0 00        	LDY	#0
   613                        DPL0
   614 00:EF4A: 20 7A EF     	JSR	DPB
   615 00:EF4D: E0 10        	CPX	#16
   616 00:EF4F: D0 F9        	BNE	DPL0
   617                        
   618                        	long_a
+  618 00:EF51: C2 20                        rep     #M_FLAG
+  618                                        longa   on
   619 00:EF53: A9 EF FB     	LDA	#DSEP1
   620 00:EF56: 85 5D        	STA	PT0
   621 00:EF58: 20 A3 FA     	JSR	STROUT
   622                        
   623                        	;; Print ASCII area
   624 00:EF5B: A2 00        	LDX	#0
   625                        DPL1
   626                        	longa off
   627 00:EF5D: B5 25        	LDA	INBUF,X
   628 00:EF5F: C9 20        	CMP	#' '
   629 00:EF61: 90 0A        	BCC	DPL2
   630 00:EF63: C9 7F        	CMP	#$7F
   631 00:EF65: B0 06        	BCS	DPL2
   632 00:EF67: 20 AA FD     	JSR	CONOUT
   633 00:EF6A: 4C 72 EF     	JMP	DPL3
   634                        DPL2
   635 00:EF6D: A9 2E        	LDA	#'.'
   636 00:EF6F: 20 AA FD     	JSR	CONOUT
   637                        DPL3
   638 00:EF72: E8           	INX
   639 00:EF73: E0 10        	CPX	#16
   640 00:EF75: D0 E6        	BNE	DPL1
   641 00:EF77: 4C F6 FA     	JMP	CRLF
   642                        
   643                        	;; Dump byte
   644                        DPB
   645 00:EF7A: A9 20        	LDA	#' '
   646 00:EF7C: 20 AA FD     	JSR	CONOUT
   647 00:EF7F: A5 40        	LDA	DSTATE
   648 00:EF81: D0 1B        	BNE	DPB2
   649                        	;; Dump state 0
   650 00:EF83: 98           	TYA
   651 00:EF84: 38           	SEC
   652 00:EF85: E5 3B        	SBC	DSADDR
   653 00:EF87: 29 0F        	AND	#$0F
   654 00:EF89: F0 0F        	BEQ	DPB1
   655                        	;; Still 0 or 2
   656                        DPB0
   657 00:EF8B: A9 20        	LDA	#' '
   658 00:EF8D: 95 25        	STA	INBUF,X
   659 00:EF8F: 20 AA FD     	JSR	CONOUT
   660 00:EF92: A9 20        	LDA	#' '
   661 00:EF94: 20 AA FD     	JSR	CONOUT
   662 00:EF97: E8           	INX
   663 00:EF98: C8           	INY
   664 00:EF99: 60           	RTS
   665                        	;; Found start address
   666                        DPB1
   667 00:EF9A: A9 01        	LDA	#1
   668 00:EF9C: 85 40        	STA	DSTATE
   669                        DPB2
   670 00:EF9E: A5 40        	LDA	DSTATE
   671 00:EFA0: C9 01        	CMP	#1
   672 00:EFA2: D0 E7        	BNE	DPB0
   673                        
   674                        	;; Dump state 1
   675                        
   676                        	; get a dump data-----------
   677 00:EFA4: 8B           	phb			; push DBR
   678 00:EFA5: A5 3F        	lda	dumpdb
   679 00:EFA7: 48           	pha
   680 00:EFA8: AB           	plb			; set Dump Data Bank
   681 00:EFA9: B1 60        	LDA	(PT1),Y		; get Dump data
   682 00:EFAB: AB           	plb			; pop DBR
   683                        	; ---------------------------
   684                        
   685 00:EFAC: 95 25        	STA	INBUF,X
   686 00:EFAE: 20 B3 FA     	JSR	HEXOUT2
   687 00:EFB1: E8           	INX
   688 00:EFB2: C8           	INY
   689 00:EFB3: 98           	TYA
   690 00:EFB4: 18           	CLC
   691 00:EFB5: 65 60        	ADC	PT1
   692 00:EFB7: 85 5D        	STA	PT0
   693 00:EFB9: A5 61        	LDA	PT1+1
   694 00:EFBB: 69 00        	ADC	#0
   695 00:EFBD: 85 5E        	STA	PT0+1
   696 00:EFBF: A5 5D        	LDA	PT0
   697 00:EFC1: C5 3D        	CMP	DEADDR
   698 00:EFC3: D0 0A        	BNE	DPBE
   699 00:EFC5: A5 5E        	LDA	PT0+1
   700 00:EFC7: C5 3E        	CMP	DEADDR+1
   701 00:EFC9: D0 04        	BNE	DPBE
   702                        	;; Found end address
   703 00:EFCB: A9 02        	LDA	#2
   704 00:EFCD: 85 40        	STA	DSTATE
   705                        DPBE
   706 00:EFCF: 60           	RTS
   707                        
   708                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   709                        ;
   710                        ; disassemble 
   711                        ;
   712                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   713                        
   714             00000000   OP_ADC	equ	0<<1
   715             00000002   OP_AND	equ	1<<1
   716             00000004   OP_ASL	equ	2<<1
   717             00000006   OP_BCC	equ	3<<1
   718             00000008   OP_BCS	equ	4<<1
   719             0000000A   OP_BEQ	equ	5<<1
   720             0000000C   OP_BIT	equ	6<<1
   721             0000000E   OP_BMI	equ	7<<1
   722             00000010   OP_BNE	equ	8<<1
   723             00000012   OP_BPL	equ	9<<1
   724             00000014   OP_BRA	equ	10<<1
   725             00000016   OP_BRK	equ	11<<1
   726             00000018   OP_BRL	equ	12<<1
   727             0000001A   OP_BVC	equ	13<<1
   728             0000001C   OP_BVS	equ	14<<1
   729             0000001E   OP_CLC	equ	15<<1
   730             00000020   OP_CLD	equ	16<<1
   731             00000022   OP_CLI	equ	17<<1
   732             00000024   OP_CLV	equ	18<<1
   733             00000026   OP_CMP	equ	19<<1
   734             00000028   OP_COP	equ	20<<1
   735             0000002A   OP_CPX	equ	21<<1
   736             0000002C   OP_CPY	equ	22<<1
   737             0000002E   OP_DEC	equ	23<<1
   738             00000030   OP_DEX	equ	24<<1
   739             00000032   OP_DEY	equ	25<<1
   740             00000034   OP_EOR	equ	26<<1
   741             00000036   OP_INC	equ	27<<1
   742             00000038   OP_INX	equ	28<<1
   743             0000003A   OP_INY	equ	29<<1
   744             0000003C   OP_JML	equ	30<<1
   745             0000003E   OP_JMP	equ	31<<1
   746             00000040   OP_JSL	equ	32<<1
   747             00000042   OP_JSR	equ	33<<1
   748             00000044   OP_LDA	equ	34<<1
   749             00000046   OP_LDX	equ	35<<1
   750             00000048   OP_LDY	equ	36<<1
   751             0000004A   OP_LSR	equ	37<<1
   752             0000004C   OP_MVN	equ	38<<1
   753             0000004E   OP_MVP	equ	39<<1
   754             00000050   OP_NOP	equ	40<<1
   755             00000052   OP_ORA	equ	41<<1
   756             00000054   OP_PEA	equ	42<<1
   757             00000056   OP_PEI	equ	43<<1
   758             00000058   OP_PER	equ	44<<1
   759             0000005A   OP_PHA	equ	45<<1
   760             0000005C   OP_PHB	equ	46<<1
   761             0000005E   OP_PHD	equ	47<<1
   762             00000060   OP_PHK	equ	48<<1
   763             00000062   OP_PHP	equ	49<<1
   764             00000064   OP_PHX	equ	50<<1
   765             00000066   OP_PHY	equ	51<<1
   766             00000068   OP_PLA	equ	52<<1
   767             0000006A   OP_PLB	equ	53<<1
   768             0000006C   OP_PLD	equ	54<<1
   769             0000006E   OP_PLP	equ	55<<1
   770             00000070   OP_PLX	equ	56<<1
   771             00000072   OP_PLY	equ	57<<1
   772             00000074   OP_REP	equ	58<<1
   773             00000076   OP_ROL	equ	59<<1
   774             00000078   OP_ROR	equ	60<<1
   775             0000007A   OP_RTI	equ	61<<1
   776             0000007C   OP_RTL	equ	62<<1
   777             0000007E   OP_RTS	equ	63<<1
   778             00000080   OP_SBC	equ	64<<1
   779             00000082   OP_SEC	equ	65<<1
   780             00000084   OP_SED	equ	66<<1
   781             00000086   OP_SEI	equ	67<<1
   782             00000088   OP_SEP	equ	68<<1
   783             0000008A   OP_STA	equ	69<<1
   784             0000008C   OP_STP	equ	70<<1
   785             0000008E   OP_STX	equ	71<<1
   786             00000090   OP_STY	equ	72<<1
   787             00000092   OP_STZ	equ	73<<1
   788             00000094   OP_TAX	equ	74<<1
   789             00000096   OP_TAY	equ	75<<1
   790             00000098   OP_TCD	equ	76<<1
   791             0000009A   OP_TCS	equ	77<<1
   792             0000009C   OP_TDC	equ	78<<1
   793             0000009E   OP_TRB	equ	79<<1
   794             000000A0   OP_TSB	equ	80<<1
   795             000000A2   OP_TSC	equ	81<<1
   796             000000A4   OP_TSX	equ	82<<1
   797             000000A6   OP_TXA	equ	83<<1
   798             000000A8   OP_TXS	equ	84<<1
   799             000000AA   OP_TXY	equ	85<<1
   800             000000AC   OP_TYA	equ	86<<1
   801             000000AE   OP_TYX	equ	87<<1
   802             000000B0   OP_WAI	equ	88<<1
   803             000000B2   OP_WDM	equ	89<<1
   804             000000B4   OP_XBA	equ	90<<1
   805             000000B6   OP_XCE	equ	91<<1
   806                        
   807             00000000   MD_ABS	equ	0<<1	; a
   808             00000002   MD_ACC	equ	1<<1	; A
   809             00000004   MD_ABX	equ	2<<1	; a,x
   810             00000006   MD_ABY	equ	3<<1	; a,y
   811             00000008   MD_ALG	equ	4<<1	; al
   812             0000000A   MD_ALX	equ	5<<1	; al,x
   813             0000000C   MD_AIN	equ	6<<1	; (a)
   814             0000000E   MD_AIX	equ	7<<1	; (a,x)
   815             00000010   MD_DPG	equ	8<<1	; d
   816             00000012   MD_STK	equ	9<<1	; d,s
   817             00000014   MD_DPX	equ	10<<1	; d,x
   818             00000016   MD_DPY	equ	11<<1	; d,x
   819             00000018   MD_DIN	equ	12<<1	; (d)
   820             0000001A   MD_DLI	equ	13<<1	; [d]
   821             0000001C   MD_SKY	equ	14<<1	; (d,s),y
   822             0000001E   MD_DIX	equ	15<<1	; (d,x)
   823             00000020   MD_DIY	equ	16<<1	; (d),y
   824             00000022   MD_DLY	equ	17<<1	; [d],y
   825             00000024   MD_IMP	equ	18<<1	;
   826             00000026   MD_REL	equ	19<<1	; r
   827             00000028   MD_RLG	equ	20<<1	; rl
   828             0000002A   MD_MOV	equ	21<<1	; xyc
   829             0000002C   MD_IMM	equ	22<<1	; # (A or M)
   830             0000002E   MD_INT	equ	23<<1	; # (BRK/COP/WDM)
   831             00000030   MD_IMX	equ	24<<1	; # (X or Y)
   832                        
   833             00000032   MD_PEA	equ	25<<1	; Push Effective Absolute Address
   834             00000034   MD_PEI	equ	26<<1	; Push Effective Indirect Address
   835             00000036   MD_PER	equ	27<<1	; Push effective PC Relative Indirect Address
   836                        
   837                        ; disassemble code
   838                        
   839                        disassemble:
   840                        	longi off
   841                        	longa off
   842 00:EFD0: 20 31 EE     	jsr	arg_parsing
   843 00:EFD3: A6 3A        	ldx	argtype
   844 00:EFD5: 8A           	txa
   845 00:EFD6: 29 04        	and	#4
   846 00:EFD8: F0 04        	beq	dis3
   847                        
   848                        	;; 1st arg. found
   849 00:EFDA: A5 35        	LDA	arg1st
   850 00:EFDC: 85 3F        	STA	dumpdb		; set data bank
   851                        
   852                        dis3
   853 00:EFDE: 8A           	txa
   854 00:EFDF: 29 02        	and	#2
   855 00:EFE1: F0 08        	beq	dis4
   856                        	
   857                        	;; set 2nd arg.
   858                        	long_a
+  858 00:EFE3: C2 20                        rep     #M_FLAG
+  858                                        longa   on
   859 00:EFE5: A5 36        	LDA	arg2nd
   860 00:EFE7: 85 6A        	sta	ADDR_S		; save start address
   861                        	short_a
+  861 00:EFE9: E2 20                        sep     #M_FLAG
+  861                                        longa   off
   862                        
   863                        dis4
   864 00:EFEB: 8A           	txa
   865 00:EFEC: 29 01        	and	#1
   866 00:EFEE: F0 0A        	beq	dis5
   867                        
   868                        	;; set 3rd arg.
   869                        	long_a
+  869 00:EFF0: C2 20                        rep     #M_FLAG
+  869                                        longa   on
   870 00:EFF2: A5 38        	LDA	arg3rd
   871 00:EFF4: 85 6D        	STA	ADDR_E
   872                        	short_a
+  872 00:EFF6: E2 20                        sep     #M_FLAG
+  872                                        longa   off
   873 00:EFF8: 64 68        	stz	lines
   874                        
   875                        dis5
   876 00:EFFA: 8A           	txa
   877 00:EFFB: F0 0C        	beq	dis6
   878 00:EFFD: C9 02        	cmp	#2	; ex) dixxxx
   879 00:EFFF: F0 08        	beq	dis6
   880 00:F001: C9 04        	cmp	#4	; ex) dixx:
   881 00:F003: F0 04        	beq	dis6
   882 00:F005: C9 06        	cmp	#6	; ex) dixx:xxxx
   883 00:F007: D0 04        	bne	dis7	; jmp if argtype = 1(di,xxxx),3(dixxxx,xxxx)
   884                        			;                  5(dixx:,xxxx),7(dixx:xxxx,xxxx)
   885                        	; no arg.
   886                        dis6	; set lines = 16
   887                        
   888 00:F009: A9 10        	lda	#16
   889 00:F00B: 85 68        	sta	lines
   890                        
   891                        dis7
   892 00:F00D: A5 3F        	lda	dumpdb
   893 00:F00F: 85 6C        	sta	ADDR_S+2		;set bank
   894 00:F011: 85 6F        	sta	ADDR_E+2		;set bank
   895                        
   896                        ;	php
   897                        ;	pla
   898                        ;	sta	FLAGS
   899                        
   900                        dis_main:
   901 00:F013: 20 F6 FA     	jsr	CRLF
   902 00:F016: 20 A0 FD     	JSR	CONST
   903 00:F019: D0 5C        	BNE	dis_end
   904                        
   905 00:F01B: 20 8A F0     	jsr	TxSpace
   906 00:F01E: A5 6C        	lda	ADDR_S+2		; Show memory address
   907 00:F020: 20 B3 FA     	jsr	HEXOUT2
   908 00:F023: A9 3A        	lda	#':'
   909 00:F025: 20 AA FD     	jsr	CONOUT
   910 00:F028: A5 6B        	lda	ADDR_S+1
   911 00:F02A: 20 B3 FA     	jsr	HEXOUT2
   912 00:F02D: A5 6A        	lda	ADDR_S+0
   913 00:F02F: 20 B3 FA     	jsr	HEXOUT2
   914 00:F032: 20 8A F0     	jsr	TxSpace
   915                        
   916 00:F035: 20 8F F0     	jsr	TxCodeBytes		; Show code bytes
   917 00:F038: 20 B4 F0     	jsr	TxSymbolic		; And instruction
   918                        
   919 00:F03B: A7 6A        	lda	[ADDR_S]		; Fetch opcode again
   920                        
   921 00:F03D: 48           	pha
   922 00:F03E: A0 01        	ldy	#1
   923                        
   924 00:F040: C9 18        	cmp	#$18			; CLC?
   925 00:F042: D0 04        	bne	NotCLC
   926 00:F044: A9 01        	lda	#C_FLAG
   927 00:F046: 80 0E        	bra	DoREP
   928                        NotCLC:
   929 00:F048: C9 38        	cmp	#$38			; SEC?
   930 00:F04A: D0 04        	bne	NotSEC
   931 00:F04C: A9 01        	lda	#C_FLAG
   932 00:F04E: 80 10        	bra	DoSEP
   933                        NotSEC:
   934 00:F050: C9 C2        	cmp	#$c2			; REP?
   935 00:F052: D0 06        	bne	NotREP
   936 00:F054: B7 6A        	lda	[ADDR_S],Y
   937                        DoREP:
   938 00:F056: 14 69        	trb	FLAGS
   939 00:F058: 80 08        	bra	NextOpcode
   940                        NotREP:
   941 00:F05A: C9 E2        	cmp	#$e2			; SEP?
   942 00:F05C: D0 04        	bne	NextOpcode
   943 00:F05E: B7 6A        	lda	[ADDR_S],Y
   944 00:F060: 04 69        DoSEP:	tsb	FLAGS
   945                        
   946                        NextOpcode:
   947 00:F062: 68           	pla
   948 00:F063: 20 84 F2     	jsr	OpcodeSize
   949                        
   950 00:F066: 18           	clc
   951 00:F067: 65 6A        	adc	ADDR_S+0		; And move start address on
   952 00:F069: 85 6A        	sta	ADDR_S+0
   953 00:F06B: 90 02        	bcc	$+4
   954 00:F06D: E6 6B        	inc	ADDR_S+1
   955                        
   956                        	; Exceeded the end address?
   957 00:F06F: A5 68        	lda	lines
   958 00:F071: F0 0A        	beq	chk_addr_e
   959 00:F073: C6 68        	dec	lines
   960 00:F075: D0 9C        	bne	dis_main
   961                        dis_end
   962 00:F077: 20 F6 FA     	jsr	CRLF
   963 00:F07A: 4C AA ED     	JMP	WSTART
   964                        
   965                        chk_addr_e
   966 00:F07D: A5 6A        	lda	ADDR_S+0
   967 00:F07F: 38           	sec
   968 00:F080: E5 6D        	sbc	ADDR_E+0
   969 00:F082: A5 6B        	lda	ADDR_S+1
   970 00:F084: E5 6E        	sbc	ADDR_E+1
   971 00:F086: 30 8B        	bmi	dis_main		; No, show more
   972 00:F088: 80 ED        	bra	dis_end
   973                        ;
   974                        TxSpace:
   975 00:F08A: A9 20        	lda	#' '		; Transmit a space
   976 00:F08C: 4C AA FD     	jmp	CONOUT
   977                        
   978                        	longa	off
   979                        	longi	off
   980                        TxCodeBytes:
   981 00:F08F: A7 6A        	lda	[ADDR_S]	; Fetch the opcode
   982 00:F091: 20 84 F2     	jsr	OpcodeSize	; and work out its size
   983 00:F094: AA           	tax
   984 00:F095: A0 00        	ldy	#0		; Clear byte count
   985                        CodeLoop:
   986 00:F097: B7 6A        	lda	[ADDR_S],Y	; Fetch a byte of code
   987 00:F099: 20 B3 FA     	jsr	HEXOUT2
   988 00:F09C: 20 8A F0     	jsr	TxSpace
   989 00:F09F: C8           	iny
   990 00:F0A0: CA           	dex
   991 00:F0A1: D0 F4        	bne	CodeLoop
   992                        PadLoop:
   993 00:F0A3: C0 04        	cpy	#4		; Need to pad out?
   994 00:F0A5: D0 01        	bne	$+3
   995 00:F0A7: 60           	rts
   996 00:F0A8: 20 8A F0     	jsr	TxSpace
   997 00:F0AB: 20 8A F0     	jsr	TxSpace
   998 00:F0AE: 20 8A F0     	jsr	TxSpace
   999 00:F0B1: C8           	iny
  1000 00:F0B2: 80 EF        	bra	PadLoop
  1001                        
  1002                        ;
  1003                        
  1004                        	longa	off
  1005                        	longi	off
  1006                        TxSymbolic:
  1007 00:F0B4: A7 6A        	lda	[ADDR_S]	; Fetch opcode
  1008 00:F0B6: 48           	pha
  1009 00:F0B7: 20 BF F0     	jsr	TxOpcode
  1010 00:F0BA: 68           	pla
  1011 00:F0BB: 20 F3 F0     	jsr	TxOperand
  1012 00:F0BE: 60           	rts
  1013                        
  1014                        ;
  1015                        
  1016                        	longa	off
  1017                        	longi	off
  1018                        TxOpcode:
  1019 00:F0BF: AA           	tax		; Work out the mnemonic
  1020 00:F0C0: BD E0 F2     	lda	OPCODES,x
  1021 00:F0C3: AA           	tax
  1022                        
  1023                        	long_a
+ 1023 00:F0C4: C2 20                        rep     #M_FLAG
+ 1023                                        longa   on
  1024 00:F0C6: BD E0 F4     	lda	MNEMONICS,x
  1025 00:F0C9: 48           	pha		; Save last character
  1026 00:F0CA: 4A           	lsr	a	; Shift second down
  1027 00:F0CB: 4A           	lsr	a
  1028 00:F0CC: 4A           	lsr	a
  1029 00:F0CD: 4A           	lsr	a
  1030 00:F0CE: 4A           	lsr	a
  1031 00:F0CF: 48           	pha		; Save it
  1032 00:F0D0: 4A           	lsr	a	; Shift first down
  1033 00:F0D1: 4A           	lsr	a
  1034 00:F0D2: 4A           	lsr	a
  1035 00:F0D3: 4A           	lsr	a
  1036 00:F0D4: 4A           	lsr	a
  1037 00:F0D5: 20 E6 F0     	jsr	ExpandMnem	; Print first
  1038 00:F0D8: 68           	pla
  1039 00:F0D9: 20 E6 F0     	jsr	ExpandMnem	; .. second
  1040 00:F0DC: 68           	pla
  1041 00:F0DD: 20 E6 F0     	jsr	ExpandMnem	; .. and third
  1042                        	short_a
+ 1042 00:F0E0: E2 20                        sep     #M_FLAG
+ 1042                                        longa   off
  1043                        
  1044 00:F0E2: 20 8A F0     	jsr	TxSpace
  1045 00:F0E5: 60           	rts
  1046                        
  1047                        ExpandMnem:
  1048                        	short_a
+ 1048 00:F0E6: E2 20                        sep     #M_FLAG
+ 1048                                        longa   off
  1049 00:F0E8: 18           	clc
  1050 00:F0E9: 29 1F        	and	#$1f		; Expand letter code
  1051 00:F0EB: 69 40        	adc	#'@'
  1052 00:F0ED: 20 AA FD     	jsr	CONOUT
  1053                        	long_a
+ 1053 00:F0F0: C2 20                        rep     #M_FLAG
+ 1053                                        longa   on
  1054 00:F0F2: 60           	rts
  1055                        ;
  1056                        
  1057                        	longa	off
  1058                        	longi	off
  1059                        TxOperand:
  1060 00:F0F3: AA           	tax			; Work out addressing mode
  1061 00:F0F4: BD E0 F3     	lda	MODES,x
  1062 00:F0F7: AA           	tax
  1063 00:F0F8: 7C FB F0     	jmp	(MODE_SHOW,x)
  1064                        
  1065                        MODE_SHOW:
  1066 00:F0FB: A6 F1        	dw	TxAbsolute		; a
  1067 00:F0FD: 33 F1        	dw	TxAccumulator		; A
  1068 00:F0FF: B8 F1        	dw	TxAbsoluteX		; a,x
  1069 00:F101: BD F1        	dw	TxAbsoluteY		; a,y
  1070 00:F103: C2 F1        	dw	TxLong			; al
  1071 00:F105: DA F1        	dw	TxLongX			; al,x
  1072 00:F107: DF F1        	dw	TxAbsoluteIndirect	; (a)
  1073 00:F109: EC F1        	dw	TxAbsoluteXIndirect	; (a,x)
  1074 00:F10B: 80 F1        	dw	TxDirect		; d
  1075 00:F10D: 73 F1        	dw	TxStack			; d,s
  1076 00:F10F: 8C F1        	dw	TxDirectX		; d,x
  1077 00:F111: 99 F1        	dw	TxDirectY		; d,y
  1078 00:F113: F9 F1        	dw	TxDirectIndirect	; (d)
  1079 00:F115: 23 F2        	dw	TxDirectIndirectLong	; [d]
  1080 00:F117: 36 F2        	dw	TxStackIndirectY	; (d,s),y
  1081 00:F119: 06 F2        	dw	TxDirectXIndirect	; (d,x)
  1082 00:F11B: 13 F2        	dw	TxDirectIndirectY	; (d),y
  1083 00:F11D: 30 F2        	dw	TxDirectIndirectLongY	; [d],y
  1084 00:F11F: 48 F1        	dw	TxImplied		;
  1085 00:F121: 46 F2        	dw	TxRelative		; r
  1086 00:F123: 62 F2        	dw	TxRelativeLong		; rl
  1087 00:F125: 49 F1        	dw	TxMove			; xyc
  1088 00:F127: 38 F1        	dw	TxImmediateM		; # (A & M)
  1089 00:F129: 65 F1        	dw	TxImmediateByte		; # (BRK/COP/WDM)
  1090 00:F12B: 40 F1        	dw	TxImmediateX		; # (X or Y)
  1091                        
  1092 00:F12D: A6 F1        	dw	TxAbsolute		; Push Absolute Address
  1093 00:F12F: F9 F1        	dw	TxDirectIndirect	; Push Direct Page Indirect
  1094 00:F131: 62 F2        	dw	TxRelativeLong		; Push PC Relative Long
  1095                        
  1096                        
  1097                        TxAccumulator:
  1098 00:F133: A9 41        	lda	#'A'
  1099 00:F135: 4C AA FD     	jmp	CONOUT
  1100                        
  1101                        TxImmediateM:
  1102 00:F138: A9 20        	lda	#M_FLAG
  1103 00:F13A: 24 69        	bit	FLAGS
  1104 00:F13C: F0 2E        	beq	TxImmediateWord
  1105 00:F13E: 80 25        	bra	TxImmediateByte
  1106                        
  1107                        TxImmediateX:
  1108 00:F140: A9 10        	lda	#X_FLAG
  1109 00:F142: 24 69        	bit	FLAGS
  1110 00:F144: F0 26        	beq	TxImmediateWord
  1111 00:F146: 80 1D        	bra	TxImmediateByte
  1112                        
  1113                        TxImplied:
  1114 00:F148: 60           	rts
  1115                        
  1116                        TxMove:
  1117 00:F149: A9 24        	lda	#'$'
  1118 00:F14B: 20 AA FD     	jsr	CONOUT
  1119 00:F14E: A0 01        	ldy	#1
  1120 00:F150: B7 6A        	lda	[ADDR_S],Y
  1121 00:F152: 20 B3 FA     	jsr	HEXOUT2
  1122 00:F155: A9 2C        	lda	#','
  1123 00:F157: 20 AA FD     	jsr	CONOUT
  1124 00:F15A: A9 24        	lda	#'$'
  1125 00:F15C: 20 AA FD     	jsr	CONOUT
  1126 00:F15F: C8           	iny
  1127 00:F160: B7 6A        	lda	[ADDR_S],Y
  1128 00:F162: 4C B3 FA     	jmp	HEXOUT2
  1129                        
  1130                        TxImmediateByte:
  1131 00:F165: A9 23        	lda	#'#'
  1132 00:F167: 20 AA FD     	jsr	CONOUT
  1133 00:F16A: 80 14        	bra	TxDirect
  1134                        
  1135                        TxImmediateWord:
  1136 00:F16C: A9 23        	lda	#'#'
  1137 00:F16E: 20 AA FD     	jsr	CONOUT
  1138 00:F171: 80 33        	bra	TxAbsolute
  1139                        
  1140                        TxStack:
  1141 00:F173: 20 80 F1     	jsr	TxDirect
  1142 00:F176: A9 2C        	lda	#','
  1143 00:F178: 20 AA FD     	jsr	CONOUT
  1144 00:F17B: A9 53        	lda	#'S'
  1145 00:F17D: 4C AA FD     	jmp	CONOUT
  1146                        
  1147                        TxDirect:
  1148 00:F180: A9 24        	lda	#'$'
  1149 00:F182: 20 AA FD     	jsr	CONOUT
  1150 00:F185: A0 01        	ldy	#1
  1151 00:F187: B7 6A        	lda	[ADDR_S],Y
  1152 00:F189: 4C B3 FA     	jmp	HEXOUT2
  1153                        
  1154                        TxDirectX:
  1155 00:F18C: 20 80 F1     	jsr	TxDirect
  1156 00:F18F: A9 2C        TxX:	lda	#','
  1157 00:F191: 20 AA FD     	jsr	CONOUT
  1158 00:F194: A9 58        	lda	#'X'
  1159 00:F196: 4C AA FD     	jmp	CONOUT
  1160                        
  1161                        TxDirectY:
  1162 00:F199: 20 80 F1     	jsr	TxDirect
  1163 00:F19C: A9 2C        TxY:	lda	#','
  1164 00:F19E: 20 AA FD     	jsr	CONOUT
  1165 00:F1A1: A9 59        	lda	#'Y'
  1166 00:F1A3: 4C AA FD     	jmp	CONOUT
  1167                        
  1168                        TxAbsolute:
  1169 00:F1A6: A9 24        	lda	#'$'
  1170 00:F1A8: 20 AA FD     	jsr	CONOUT
  1171 00:F1AB: A0 02        	ldy	#2
  1172 00:F1AD: B7 6A        	lda	[ADDR_S],Y
  1173 00:F1AF: 20 B3 FA     	jsr	HEXOUT2
  1174 00:F1B2: 88           	dey
  1175 00:F1B3: B7 6A        	lda	[ADDR_S],Y
  1176 00:F1B5: 4C B3 FA     	jmp	HEXOUT2
  1177                        
  1178                        TxAbsoluteX:
  1179 00:F1B8: 20 A6 F1     	jsr	TxAbsolute
  1180 00:F1BB: 80 D2        	bra	TxX
  1181                        
  1182                        TxAbsoluteY:
  1183 00:F1BD: 20 A6 F1     	jsr	TxAbsolute
  1184 00:F1C0: 80 DA        	bra	TxY
  1185                        
  1186                        TxLong:
  1187 00:F1C2: A9 24        	lda	#'$'
  1188 00:F1C4: 20 AA FD     	jsr	CONOUT
  1189 00:F1C7: A0 03        	ldy	#3
  1190 00:F1C9: B7 6A        	lda	[ADDR_S],Y
  1191 00:F1CB: 20 B3 FA     	jsr	HEXOUT2
  1192                        ;	lda	#':'
  1193                        ;	jsr	CONOUT
  1194 00:F1CE: 88           	dey
  1195 00:F1CF: B7 6A        	lda	[ADDR_S],Y
  1196 00:F1D1: 20 B3 FA     	jsr	HEXOUT2
  1197 00:F1D4: 88           	dey
  1198 00:F1D5: B7 6A        	lda	[ADDR_S],Y
  1199 00:F1D7: 4C B3 FA     	jmp	HEXOUT2
  1200                        
  1201                        TxLongX:
  1202 00:F1DA: 20 C2 F1     	jsr	TxLong
  1203 00:F1DD: 80 B0        	bra	TxX
  1204                        
  1205                        TxAbsoluteIndirect:
  1206 00:F1DF: A9 28        	lda	#'('
  1207 00:F1E1: 20 AA FD     	jsr	CONOUT
  1208 00:F1E4: 20 A6 F1     	jsr	TxAbsolute
  1209 00:F1E7: A9 29        	lda	#')'
  1210 00:F1E9: 4C AA FD     	jmp	CONOUT
  1211                        
  1212                        TxAbsoluteXIndirect:
  1213 00:F1EC: A9 28        	lda	#'('
  1214 00:F1EE: 20 AA FD     	jsr	CONOUT
  1215 00:F1F1: 20 B8 F1     	jsr	TxAbsoluteX
  1216 00:F1F4: A9 29        	lda	#')'
  1217 00:F1F6: 4C AA FD     	jmp	CONOUT
  1218                        
  1219                        TxDirectIndirect:
  1220 00:F1F9: A9 28        	lda	#'('
  1221 00:F1FB: 20 AA FD     	jsr	CONOUT
  1222 00:F1FE: 20 80 F1     	jsr	TxDirect
  1223 00:F201: A9 29        	lda	#')'
  1224 00:F203: 4C AA FD     	jmp	CONOUT
  1225                        
  1226                        TxDirectXIndirect:
  1227 00:F206: A9 28        	lda	#'('
  1228 00:F208: 20 AA FD     	jsr	CONOUT
  1229 00:F20B: 20 8C F1     	jsr	TxDirectX
  1230 00:F20E: A9 29        	lda	#')'
  1231 00:F210: 4C AA FD     	jmp	CONOUT
  1232                        
  1233                        TxDirectIndirectY:
  1234 00:F213: A9 28        	lda	#'('
  1235 00:F215: 20 AA FD     	jsr	CONOUT
  1236 00:F218: 20 80 F1     	jsr	TxDirect
  1237 00:F21B: A9 29        	lda	#')'
  1238 00:F21D: 20 AA FD     	jsr	CONOUT
  1239 00:F220: 4C 9C F1     	jmp	TxY
  1240                        
  1241                        TxDirectIndirectLong:
  1242 00:F223: A9 5B        	lda	#'['
  1243 00:F225: 20 AA FD     	jsr	CONOUT
  1244 00:F228: 20 80 F1     	jsr	TxDirect
  1245 00:F22B: A9 5D        	lda	#']'
  1246 00:F22D: 4C AA FD     	jmp	CONOUT
  1247                        
  1248                        TxDirectIndirectLongY:
  1249 00:F230: 20 23 F2     	jsr	TxDirectIndirectLong
  1250 00:F233: 4C 9C F1     	jmp	TxY
  1251                        
  1252                        TxStackIndirectY:
  1253 00:F236: A9 28        	lda	#'('
  1254 00:F238: 20 AA FD     	jsr	CONOUT
  1255 00:F23B: 20 73 F1     	jsr	TxStack
  1256 00:F23E: A9 29        	lda	#')'
  1257 00:F240: 20 AA FD     	jsr	CONOUT
  1258 00:F243: 4C 9C F1     	jmp	TxY
  1259                        
  1260                        TxRelative:
  1261 00:F246: A6 6B        	ldx	ADDR_S+1	; Work out next PC
  1262 00:F248: A5 6A        	lda	ADDR_S+0
  1263 00:F24A: 18           	clc
  1264 00:F24B: 69 02        	adc	#2
  1265 00:F24D: 90 01        	bcc	$+3
  1266 00:F24F: E8           	inx
  1267                        
  1268 00:F250: 48           	pha		; Add relative offset
  1269 00:F251: A0 01        	ldy	#1
  1270 00:F253: B7 6A        	lda	[ADDR_S],y
  1271 00:F255: 10 01        	bpl	$+3
  1272 00:F257: CA           	dex
  1273 00:F258: 18           	clc
  1274 00:F259: 63 01        	adc	1,s
  1275 00:F25B: 83 01        	sta	1,s
  1276 00:F25D: 90 01        	bcc	$+3
  1277 00:F25F: E8           	inx
  1278 00:F260: 80 15        	bra	TxAddr
  1279                        
  1280                        TxRelativeLong:
  1281 00:F262: A6 6B        	ldx	ADDR_S+1	; Work out next PC
  1282 00:F264: A5 6A        	lda	ADDR_S+0
  1283 00:F266: 18           	clc
  1284 00:F267: 69 03        	adc	#3
  1285 00:F269: 90 01        	bcc	$+3
  1286 00:F26B: E8           	inx
  1287                        
  1288 00:F26C: 18           	clc		; Add relative offset
  1289 00:F26D: A0 01        	ldy	#1
  1290 00:F26F: 77 6A        	adc	[ADDR_S],y
  1291 00:F271: 48           	pha
  1292 00:F272: C8           	iny
  1293 00:F273: 8A           	txa
  1294 00:F274: 77 6A        	adc	[ADDR_S],Y
  1295 00:F276: AA           	tax
  1296                        
  1297                        TxAddr:
  1298 00:F277: A9 24        	lda	#'$'		; Print address
  1299 00:F279: 20 AA FD     	jsr	CONOUT
  1300 00:F27C: 8A           	txa
  1301 00:F27D: 20 B3 FA     	jsr	HEXOUT2
  1302 00:F280: 68           	pla
  1303 00:F281: 4C B3 FA     	jmp	HEXOUT2
  1304                        
  1305                        ;  Returns the size of the opcode in A given the current flag settings.
  1306                        
  1307                        	longa	off
  1308                        	longi	off
  1309                        OpcodeSize:
  1310 00:F284: AA           	tax		; Work out addressing mode
  1311 00:F285: BD E0 F3     	lda	MODES,x
  1312 00:F288: AA           	tax
  1313 00:F289: 7C 8C F2     	jmp	(MODE_SIZE,x)
  1314                        
  1315                        
  1316                        MODE_SIZE:
  1317 00:F28C: DA F2        	dw	Size3		; a
  1318 00:F28E: D4 F2        	dw	Size1		; A
  1319 00:F290: DA F2        	dw	Size3		; a,x
  1320 00:F292: DA F2        	dw	Size3		; a,y
  1321 00:F294: DD F2        	dw	Size4		; al
  1322 00:F296: DD F2        	dw	Size4		; al,x
  1323 00:F298: DA F2        	dw	Size3		; (a)
  1324 00:F29A: DA F2        	dw	Size3		; (a,x)
  1325 00:F29C: D7 F2        	dw	Size2		; d
  1326 00:F29E: D7 F2        	dw	Size2		; d,s
  1327 00:F2A0: D7 F2        	dw	Size2		; d,x
  1328 00:F2A2: D7 F2        	dw	Size2		; d,y
  1329 00:F2A4: D7 F2        	dw	Size2		; (d)
  1330 00:F2A6: D7 F2        	dw	Size2		; [d]
  1331 00:F2A8: D7 F2        	dw	Size2		; (d,s),y
  1332 00:F2AA: D7 F2        	dw	Size2		; (d,x)
  1333 00:F2AC: D7 F2        	dw	Size2		; (d),y
  1334 00:F2AE: D7 F2        	dw	Size2		; [d],y
  1335 00:F2B0: D4 F2        	dw	Size1		;
  1336 00:F2B2: D7 F2        	dw	Size2		; r
  1337 00:F2B4: DA F2        	dw	Size3		; rl
  1338 00:F2B6: DA F2        	dw	Size3		; xyc
  1339 00:F2B8: C4 F2        	dw	TestM		; # (A & M)
  1340 00:F2BA: D7 F2        	dw	Size2		; # (BRK/COP/WDM)
  1341 00:F2BC: CC F2        	dw	TestX		; # (X or Y)
  1342                        
  1343 00:F2BE: DA F2        	dw	Size3		; PEA
  1344 00:F2C0: D7 F2        	dw	Size2		; PEI
  1345 00:F2C2: DA F2        	dw	Size3		; PER
  1346                        
  1347                        TestM
  1348 00:F2C4: A9 20        	lda	#M_FLAG		; Is M bit set?
  1349 00:F2C6: 25 69        	and	FLAGS
  1350 00:F2C8: F0 10        	beq	Size3		; No, word
  1351 00:F2CA: 80 0B        	bra	Size2		; else byte
  1352                        
  1353                        TestX
  1354 00:F2CC: A9 10        	lda	#X_FLAG		; Is X bit set?
  1355 00:F2CE: 25 69        	and	FLAGS
  1356 00:F2D0: F0 08        	beq	Size3		; No, word
  1357 00:F2D2: 80 03        	bra	Size2		; else byte
  1358                        
  1359 00:F2D4: A9 01        Size1:	lda	#1
  1360 00:F2D6: 60           	rts
  1361 00:F2D7: A9 02        Size2:	lda	#2
  1362 00:F2D9: 60           	rts
  1363 00:F2DA: A9 03        Size3	lda	#3
  1364 00:F2DC: 60           	rts
  1365 00:F2DD: A9 04        Size4:	lda	#4
  1366 00:F2DF: 60           	rts
  1367                        
  1368                        OPCODES:
  1369 00:F2E0: 16 52 28 52  	db	OP_BRK,OP_ORA,OP_COP,OP_ORA	; 00
  1370 00:F2E4: A0 52 04 52  	db	OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1371 00:F2E8: 62 52 04 5E  	db	OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1372 00:F2EC: A0 52 04 52  	db	OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1373 00:F2F0: 12 52 52 52  	db	OP_BPL,OP_ORA,OP_ORA,OP_ORA	; 10
  1374 00:F2F4: 9E 52 04 52  	db	OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1375 00:F2F8: 1E 52 36 9A  	db	OP_CLC,OP_ORA,OP_INC,OP_TCS
  1376 00:F2FC: 9E 52 04 52  	db	OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1377 00:F300: 42 02 40 02  	db	OP_JSR,OP_AND,OP_JSL,OP_AND	; 20
  1378 00:F304: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1379 00:F308: 6E 02 76 6C  	db	OP_PLP,OP_AND,OP_ROL,OP_PLD
  1380 00:F30C: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1381 00:F310: 0E 02 02 02  	db	OP_BMI,OP_AND,OP_AND,OP_AND	; 30
  1382 00:F314: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1383 00:F318: 82 02 2E A2  	db	OP_SEC,OP_AND,OP_DEC,OP_TSC
  1384 00:F31C: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1385 00:F320: 7A 34 B2 34  	db	OP_RTI,OP_EOR,OP_WDM,OP_EOR	; 40
  1386 00:F324: 4E 34 4A 34  	db	OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1387 00:F328: 5A 34 4A 60  	db	OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1388 00:F32C: 3E 34 4A 34  	db	OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1389 00:F330: 1A 34 34 34  	db	OP_BVC,OP_EOR,OP_EOR,OP_EOR	; 50
  1390 00:F334: 4C 34 4A 34  	db	OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1391 00:F338: 22 34 66 98  	db	OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1392 00:F33C: 3E 34 4A 34  	db	OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1393 00:F340: 7E 00 58 00  	db	OP_RTS,OP_ADC,OP_PER,OP_ADC	; 60
  1394 00:F344: 92 00 78 00  	db	OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1395 00:F348: 68 00 78 7C  	db	OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1396 00:F34C: 3E 00 78 00  	db	OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1397 00:F350: 1C 00 00 00  	db	OP_BVS,OP_ADC,OP_ADC,OP_ADC	; 70
  1398 00:F354: 92 00 78 00  	db	OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1399 00:F358: 86 00 72 9C  	db	OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1400 00:F35C: 3E 00 78 00  	db	OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1401 00:F360: 14 8A 18 8A  	db	OP_BRA,OP_STA,OP_BRL,OP_STA	; 80
  1402 00:F364: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1403 00:F368: 32 0C A6 5C  	db	OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1404 00:F36C: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1405 00:F370: 06 8A 8A 8A  	db	OP_BCC,OP_STA,OP_STA,OP_STA	; 90
  1406 00:F374: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1407 00:F378: AC 8A A8 AA  	db	OP_TYA,OP_STA,OP_TXS,OP_TXY
  1408 00:F37C: 92 8A 92 8A  	db	OP_STZ,OP_STA,OP_STZ,OP_STA
  1409 00:F380: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA	; A0
  1410 00:F384: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1411 00:F388: 96 44 94 6A  	db	OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1412 00:F38C: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1413 00:F390: 08 44 44 44  	db	OP_BCS,OP_LDA,OP_LDA,OP_LDA	; B0
  1414 00:F394: 44 48 46 44  	db	OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1415 00:F398: 24 44 A4 AE  	db	OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1416 00:F39C: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1417 00:F3A0: 2C 26 74 26  	db	OP_CPY,OP_CMP,OP_REP,OP_CMP	; C0
  1418 00:F3A4: 2C 26 2E 26  	db	OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1419 00:F3A8: 3A 26 30 B0  	db	OP_INY,OP_CMP,OP_DEX,OP_WAI
  1420 00:F3AC: 2C 26 2E 26  	db	OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1421 00:F3B0: 10 26 26 26  	db	OP_BNE,OP_CMP,OP_CMP,OP_CMP	; D0
  1422 00:F3B4: 56 26 2E 26  	db	OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1423 00:F3B8: 20 26 64 8C  	db	OP_CLD,OP_CMP,OP_PHX,OP_STP
  1424 00:F3BC: 3C 26 2E 26  	db	OP_JML,OP_CMP,OP_DEC,OP_CMP
  1425 00:F3C0: 2A 80 88 80  	db	OP_CPX,OP_SBC,OP_SEP,OP_SBC	; E0
  1426 00:F3C4: 2A 80 36 80  	db	OP_CPX,OP_SBC,OP_INC,OP_SBC
  1427 00:F3C8: 38 80 50 B4  	db	OP_INX,OP_SBC,OP_NOP,OP_XBA
  1428 00:F3CC: 2A 80 36 80  	db	OP_CPX,OP_SBC,OP_INC,OP_SBC
  1429 00:F3D0: 0A 80 80 80  	db	OP_BEQ,OP_SBC,OP_SBC,OP_SBC	; F0
  1430 00:F3D4: 54 80 36 80  	db	OP_PEA,OP_SBC,OP_INC,OP_SBC
  1431 00:F3D8: 84 80 70 B6  	db	OP_SED,OP_SBC,OP_PLX,OP_XCE
  1432 00:F3DC: 42 80 36 80  	db	OP_JSR,OP_SBC,OP_INC,OP_SBC
  1433                        
  1434                        MODES:
  1435 00:F3E0: 2E 1E 2E 12  	db	MD_INT,MD_DIX,MD_INT,MD_STK	; 00
  1436 00:F3E4: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1437 00:F3E8: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1438 00:F3EC: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1439 00:F3F0: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 10
  1440 00:F3F4: 10 14 14 22  	db	MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1441 00:F3F8: 24 06 02 24  	db	MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1442 00:F3FC: 00 04 04 0A  	db	MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1443 00:F400: 00 1E 08 12  	db	MD_ABS,MD_DIX,MD_ALG,MD_STK	; 20
  1444 00:F404: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1445 00:F408: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1446 00:F40C: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1447 00:F410: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 30
  1448 00:F414: 14 14 14 22  	db	MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1449 00:F418: 24 06 02 24  	db	MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1450 00:F41C: 04 04 04 0A  	db	MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1451 00:F420: 24 1E 2E 12  	db	MD_IMP,MD_DIX,MD_INT,MD_STK	; 40
  1452 00:F424: 2A 10 10 1A  	db	MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1453 00:F428: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1454 00:F42C: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1455 00:F430: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 50
  1456 00:F434: 2A 14 14 22  	db	MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1457 00:F438: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1458 00:F43C: 08 04 04 0A  	db	MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1459 00:F440: 24 1E 36 12  	db	MD_IMP,MD_DIX,MD_PER,MD_STK	; 60
  1460 00:F444: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1461 00:F448: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1462 00:F44C: 0C 00 00 08  	db	MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1463 00:F450: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 70
  1464 00:F454: 14 14 14 22  	db	MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1465 00:F458: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1466 00:F45C: 0E 04 04 0A  	db	MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1467 00:F460: 26 1E 28 12  	db	MD_REL,MD_DIX,MD_RLG,MD_STK	; 80
  1468 00:F464: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1469 00:F468: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1470 00:F46C: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1471 00:F470: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 90
  1472 00:F474: 14 14 16 22  	db	MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1473 00:F478: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1474 00:F47C: 00 04 04 0A  	db	MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1475 00:F480: 30 1E 30 12  	db	MD_IMX,MD_DIX,MD_IMX,MD_STK	; A0
  1476 00:F484: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1477 00:F488: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1478 00:F48C: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1479 00:F490: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; B0
  1480 00:F494: 14 14 16 22  	db	MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1481 00:F498: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1482 00:F49C: 04 04 06 0A  	db	MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1483 00:F4A0: 30 1E 2E 12  	db	MD_IMX,MD_DIX,MD_INT,MD_STK	; C0
  1484 00:F4A4: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1485 00:F4A8: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1486 00:F4AC: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1487 00:F4B0: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; D0
  1488 00:F4B4: 34 14 14 22  	db	MD_PEI,MD_DPX,MD_DPX,MD_DLY
  1489 00:F4B8: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1490 00:F4BC: 0C 04 04 0A  	db	MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1491 00:F4C0: 30 1E 2E 12  	db	MD_IMX,MD_DIX,MD_INT,MD_STK	; E0
  1492 00:F4C4: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1493 00:F4C8: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1494 00:F4CC: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1495 00:F4D0: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; F0
  1496 00:F4D4: 32 14 14 22  	db	MD_PEA,MD_DPX,MD_DPX,MD_DLY
  1497 00:F4D8: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1498 00:F4DC: 0E 04 04 0A  	db	MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1499                        
  1500                        MNEMONICS:
  1501                        	MNEM	'A','D','C'
+ 1501 00:F4E0: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1502                        	MNEM	'A','N','D'
+ 1502 00:F4E2: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1503                        	MNEM	'A','S','L'
+ 1503 00:F4E4: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1504                        	MNEM	'B','C','C'
+ 1504 00:F4E6: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1505                        	MNEM	'B','C','S'
+ 1505 00:F4E8: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1506                        	MNEM	'B','E','Q'
+ 1506 00:F4EA: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1507                        	MNEM	'B','I','T'
+ 1507 00:F4EC: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1508                        	MNEM	'B','M','I'
+ 1508 00:F4EE: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1509                        	MNEM	'B','N','E'
+ 1509 00:F4F0: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1510                        	MNEM	'B','P','L'
+ 1510 00:F4F2: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1511                        	MNEM	'B','R','A'
+ 1511 00:F4F4: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1512                        	MNEM	'B','R','K'
+ 1512 00:F4F6: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1513                        	MNEM	'B','R','L'
+ 1513 00:F4F8: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1514                        	MNEM	'B','V','C'
+ 1514 00:F4FA: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1515                        	MNEM	'B','V','S'
+ 1515 00:F4FC: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1516                        	MNEM	'C','L','C'
+ 1516 00:F4FE: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1517                        	MNEM	'C','L','D'
+ 1517 00:F500: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1518                        	MNEM	'C','L','I'
+ 1518 00:F502: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1519                        	MNEM	'C','L','V'
+ 1519 00:F504: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1520                        	MNEM	'C','M','P'
+ 1520 00:F506: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1521                        	MNEM	'C','O','P'
+ 1521 00:F508: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1522                        	MNEM	'C','P','X'
+ 1522 00:F50A: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1523                        	MNEM	'C','P','Y'
+ 1523 00:F50C: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1524                        	MNEM	'D','E','C'
+ 1524 00:F50E: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1525                        	MNEM	'D','E','X'
+ 1525 00:F510: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1526                        	MNEM	'D','E','Y'
+ 1526 00:F512: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1527                        	MNEM	'E','O','R'
+ 1527 00:F514: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1528                        	MNEM	'I','N','C'
+ 1528 00:F516: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1529                        	MNEM	'I','N','X'
+ 1529 00:F518: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1530                        	MNEM	'I','N','Y'
+ 1530 00:F51A: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1531                        	MNEM	'J','M','L'
+ 1531 00:F51C: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1532                        	MNEM	'J','M','P'
+ 1532 00:F51E: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1533                        	MNEM	'J','S','L'
+ 1533 00:F520: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1534                        	MNEM	'J','S','R'
+ 1534 00:F522: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1535                        	MNEM	'L','D','A'
+ 1535 00:F524: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1536                        	MNEM	'L','D','X'
+ 1536 00:F526: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1537                        	MNEM	'L','D','Y'
+ 1537 00:F528: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1538                        	MNEM	'L','S','R'
+ 1538 00:F52A: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1539                        	MNEM	'M','V','N'
+ 1539 00:F52C: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1540                        	MNEM	'M','V','P'
+ 1540 00:F52E: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1541                        	MNEM	'N','O','P'
+ 1541 00:F530: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1542                        	MNEM	'O','R','A'
+ 1542 00:F532: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1543                        	MNEM	'P','E','A'
+ 1543 00:F534: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1544                        	MNEM	'P','E','I'
+ 1544 00:F536: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1545                        	MNEM	'P','E','R'
+ 1545 00:F538: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1546                        	MNEM	'P','H','A'
+ 1546 00:F53A: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1547                        	MNEM	'P','H','B'
+ 1547 00:F53C: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1548                        	MNEM	'P','H','D'
+ 1548 00:F53E: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1549                        	MNEM	'P','H','K'
+ 1549 00:F540: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1550                        	MNEM	'P','H','P'
+ 1550 00:F542: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1551                        	MNEM	'P','H','X'
+ 1551 00:F544: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1552                        	MNEM	'P','H','Y'
+ 1552 00:F546: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1553                        	MNEM	'P','L','A'
+ 1553 00:F548: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1554                        	MNEM	'P','L','B'
+ 1554 00:F54A: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1555                        	MNEM	'P','L','D'
+ 1555 00:F54C: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1556                        	MNEM	'P','L','P'
+ 1556 00:F54E: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1557                        	MNEM	'P','L','X'
+ 1557 00:F550: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1558                        	MNEM	'P','L','Y'
+ 1558 00:F552: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1559                        	MNEM	'R','E','P'
+ 1559 00:F554: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1560                        	MNEM	'R','O','L'
+ 1560 00:F556: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1561                        	MNEM	'R','O','R'
+ 1561 00:F558: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1562                        	MNEM	'R','T','I'
+ 1562 00:F55A: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1563                        	MNEM	'R','T','L'
+ 1563 00:F55C: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1564                        	MNEM	'R','T','S'
+ 1564 00:F55E: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1565                        	MNEM	'S','B','C'
+ 1565 00:F560: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1566                        	MNEM	'S','E','C'
+ 1566 00:F562: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1567                        	MNEM	'S','E','D'
+ 1567 00:F564: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1568                        	MNEM	'S','E','I'
+ 1568 00:F566: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1569                        	MNEM	'S','E','P'
+ 1569 00:F568: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1570                        	MNEM	'S','T','A'
+ 1570 00:F56A: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1571                        	MNEM	'S','T','P'
+ 1571 00:F56C: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1572                        	MNEM	'S','T','X'
+ 1572 00:F56E: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1573                        	MNEM	'S','T','Y'
+ 1573 00:F570: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1574                        	MNEM	'S','T','Z'
+ 1574 00:F572: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1575                        	MNEM	'T','A','X'
+ 1575 00:F574: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1576                        	MNEM	'T','A','Y'
+ 1576 00:F576: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1577                        	MNEM	'T','C','D'
+ 1577 00:F578: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1578                        	MNEM	'T','C','S'
+ 1578 00:F57A: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1579                        	MNEM	'T','D','C'
+ 1579 00:F57C: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1580                        	MNEM	'T','R','B'
+ 1580 00:F57E: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1581                        	MNEM	'T','S','B'
+ 1581 00:F580: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1582                        	MNEM	'T','S','C'
+ 1582 00:F582: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1583                        	MNEM	'T','S','X'
+ 1583 00:F584: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1584                        	MNEM	'T','X','A'
+ 1584 00:F586: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1585                        	MNEM	'T','X','S'
+ 1585 00:F588: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1586                        	MNEM	'T','X','Y'
+ 1586 00:F58A: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1587                        	MNEM	'T','Y','A'
+ 1587 00:F58C: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1588                        	MNEM	'T','Y','X'
+ 1588 00:F58E: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1589                        	MNEM	'W','A','I'
+ 1589 00:F590: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1590                        	MNEM	'W','D','M'
+ 1590 00:F592: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1591                        	MNEM	'X','B','A'
+ 1591 00:F594: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1592                        	MNEM	'X','C','E'
+ 1592 00:F596: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1593                        
  1594                        ;;;
  1595                        ;;;  Go address
  1596                        ;;;
  1597                        GO
  1598                        	longi off
  1599                        	longa off
  1600 00:F598: 64 70        	stz	stp_flg		; clear stop flag
  1601 00:F59A: 20 31 EE     	jsr	arg_parsing
  1602 00:F59D: A5 3A        	lda	argtype
  1603 00:F59F: F0 30        	beq	G0		;; No arg.
  1604                        
  1605 00:F5A1: AA           	tax
  1606 00:F5A2: 29 04        	and	#4
  1607 00:F5A4: F0 04        	beq	go_3
  1608                        
  1609                        	;; 1st arg. found
  1610 00:F5A6: A5 35        	LDA	arg1st
  1611 00:F5A8: 85 52        	sta	REGPB		; save program bank reg
  1612                        go_3
  1613 00:F5AA: 8A           	txa
  1614 00:F5AB: 29 02        	and	#2
  1615 00:F5AD: F0 08        	beq	go_4
  1616                        	
  1617                        	;; set 2nd arg.
  1618                        	long_a
+ 1618 00:F5AF: C2 20                        rep     #M_FLAG
+ 1618                                        longa   on
  1619 00:F5B1: A5 36        	LDA	arg2nd
  1620 00:F5B3: 85 4F        	STA	REGPC		; set start address
  1621                        	short_a
+ 1621 00:F5B5: E2 20                        sep     #M_FLAG
+ 1621                                        longa   off
  1622                        
  1623                        go_4
  1624 00:F5B7: 8A           	txa
  1625 00:F5B8: 29 01        	and	#1
  1626 00:F5BA: F0 15        	beq	G0
  1627                        
  1628                        	;; set 3rd arg.
  1629                        
  1630 00:F5BC: 85 70        	sta	stp_flg		; set stop flag
  1631                        
  1632                        	; save original binary at break point
  1633                        
  1634 00:F5BE: A5 52        	lda	REGPB
  1635 00:F5C0: 85 75        	sta	sv_bnk		; save program bank reg
  1636                        
  1637                        	long_a
+ 1637 00:F5C2: C2 20                        rep     #M_FLAG
+ 1637                                        longa   on
  1638 00:F5C4: A5 38        	lda	arg3rd
  1639 00:F5C6: 85 73        	sta	sv_adr
  1640                        
  1641 00:F5C8: A7 73        	lda	[sv_adr]	; get save code
  1642 00:F5CA: 85 71        	sta	sav_dat		; save original binary
  1643 00:F5CC: A9 00 00     	lda	#0		; BRK 0 (A = 0000)
  1644 00:F5CF: 87 73        	sta	[sv_adr]	; set BRK 0 code
  1645                        
  1646                        G0
  1647                        	long_a
+ 1647 00:F5D1: C2 20                        rep     #M_FLAG
+ 1647                                        longa   on
  1648 00:F5D3: A5 4D        	lda	REGSP
  1649 00:F5D5: 1B           	tas			; SP
  1650                        	short_a
+ 1650 00:F5D6: E2 20                        sep     #M_FLAG
+ 1650                                        longa   off
  1651 00:F5D8: A5 52        	lda	REGPB
  1652 00:F5DA: 48           	pha			; Program Bank register
  1653 00:F5DB: A5 50        	LDA	REGPC+1
  1654 00:F5DD: 48           	PHA			; PC(H)
  1655 00:F5DE: A5 4F        	LDA	REGPC
  1656 00:F5E0: 48           	PHA			; PC(L)
  1657 00:F5E1: A5 51        	LDA	REGPSR
  1658 00:F5E3: 48           	PHA			; PSR
  1659                        	long_ai
+ 1659 00:F5E4: C2 30                        rep     #M_FLAG|X_FLAG
+ 1659                                        longa   on
+ 1659                                        longi   on
  1660 00:F5E6: A6 49        	LDX	REGX
  1661 00:F5E8: A4 4B        	LDY	REGY
  1662 00:F5EA: A5 47        	LDA	REGA
  1663                        
  1664 00:F5EC: 48           	pha
  1665 00:F5ED: D4 54        	pei	(REGDP)		; push Direct Page register (16 bit)
  1666                        	short_a
+ 1666 00:F5EF: E2 20                        sep     #M_FLAG
+ 1666                                        longa   off
  1667 00:F5F1: A5 53        	lda	REGDB		; push Data Bank register (8 bit)
  1668 00:F5F3: 48           	pha
  1669                        
  1670 00:F5F4: AB           	plb			; restore Data Bank register
  1671 00:F5F5: 2B           	pld			; restore Direct Page register
  1672                        	long_a
+ 1672 00:F5F6: C2 20                        rep     #M_FLAG
+ 1672                                        longa   on
  1673 00:F5F8: 68           	pla			; restore A register
  1674                        
  1675 00:F5F9: 40           	RTI
  1676                        
  1677                        ;;;
  1678                        ;;; Set memory
  1679                        ;;;
  1680                        SETM
  1681                        	longi off
  1682                        	longa off
  1683 00:F5FA: 20 31 EE     	jsr	arg_parsing
  1684 00:F5FD: A5 3A        	lda	argtype
  1685 00:F5FF: F0 1E        	beq	SM1 ;; No arg.
  1686                        
  1687 00:F601: AA           	tax
  1688 00:F602: 29 04        	and	#4
  1689 00:F604: F0 04        	beq	set3
  1690                        
  1691                        	;; 1st arg. found
  1692 00:F606: A5 35        	LDA	arg1st
  1693 00:F608: 85 3F        	STA	dumpdb		; set data bank
  1694                        
  1695                        set3
  1696 00:F60A: 8A           	txa
  1697 00:F60B: 29 02        	and	#2
  1698 00:F60D: F0 08        	beq	set4
  1699                        	
  1700                        	;; set 2nd arg.
  1701                        	long_a
+ 1701 00:F60F: C2 20                        rep     #M_FLAG
+ 1701                                        longa   on
  1702 00:F611: A5 36        	LDA	arg2nd
  1703 00:F613: 85 43        	STA	SADDR		; set start address
  1704                        	short_a
+ 1704 00:F615: E2 20                        sep     #M_FLAG
+ 1704                                        longa   off
  1705                        
  1706                        set4
  1707 00:F617: 8A           	txa
  1708 00:F618: 29 01        	and	#1
  1709 00:F61A: F0 03        	beq	SM1
  1710                        
  1711                        	;; 3rd arg.
  1712 00:F61C: 4C 1D EE     	jmp	ERR
  1713                        
  1714                        SM1:
  1715 00:F61F: 20 83 EE     	jsr	ptt_db		; print bank reg
  1716 00:F622: A5 44        	LDA	SADDR+1
  1717 00:F624: 20 B3 FA     	JSR	HEXOUT2
  1718 00:F627: A5 43        	LDA	SADDR
  1719 00:F629: 20 B3 FA     	JSR	HEXOUT2
  1720                        
  1721 00:F62C: A9 EF        	LDA	#$FF&DSEP1
  1722 00:F62E: 85 5D        	STA	PT0
  1723 00:F630: A9 FB        	LDA	#DSEP1>>8
  1724 00:F632: 85 5E        	STA	PT0+1
  1725 00:F634: 20 A3 FA     	JSR	STROUT		; " : "
  1726 00:F637: A0 00        	LDY	#0
  1727                        	; get a data----------------
  1728 00:F639: 8B           	phb			; push DBR
  1729 00:F63A: A5 3F        	lda	dumpdb
  1730 00:F63C: 48           	pha
  1731 00:F63D: AB           	plb			; set Data Bank
  1732 00:F63E: B1 43        	LDA	(SADDR),Y	; get a data
  1733 00:F640: AB           	plb			; pop DBR
  1734                        	; ---------------------------
  1735 00:F641: 20 B3 FA     	JSR	HEXOUT2
  1736                        
  1737 00:F644: A9 20        	LDA	#' '
  1738 00:F646: 20 AA FD     	JSR	CONOUT
  1739 00:F649: 20 00 FB     	JSR	GETLIN
  1740 00:F64C: A2 00        	LDX	#0
  1741 00:F64E: B5 25        	LDA	INBUF,X
  1742 00:F650: D0 10        	BNE	SM2
  1743                        SM10	
  1744                        	;; Empty (Increment address)
  1745 00:F652: A5 43        	LDA	SADDR
  1746 00:F654: 18           	CLC
  1747 00:F655: 69 01        	ADC	#1
  1748 00:F657: 85 43        	STA	SADDR
  1749 00:F659: A5 44        	LDA	SADDR+1
  1750 00:F65B: 69 00        	ADC	#0
  1751 00:F65D: 85 44        	STA	SADDR+1
  1752 00:F65F: 4C 1F F6     	JMP	SM1
  1753                        SM2
  1754 00:F662: C9 2D        	CMP	#'-'
  1755 00:F664: D0 10        	BNE	SM3
  1756                        	;; '-' (Decrement address)
  1757 00:F666: A5 43        	LDA	SADDR
  1758 00:F668: 38           	SEC
  1759 00:F669: E9 01        	SBC	#1
  1760 00:F66B: 85 43        	STA	SADDR
  1761 00:F66D: A5 44        	LDA	SADDR+1
  1762 00:F66F: E9 00        	SBC	#0
  1763 00:F671: 85 44        	STA	SADDR+1
  1764 00:F673: 4C 1F F6     	JMP	SM1
  1765                        SM3
  1766 00:F676: C9 2E        	CMP	#'.'
  1767 00:F678: D0 03        	BNE	SM4
  1768                        	;; '.' (Quit)
  1769 00:F67A: 4C AA ED     	JMP	WSTART
  1770                        SM4
  1771 00:F67D: 20 6B FB     	JSR	RDHEX
  1772 00:F680: A5 63        	LDA	CNT
  1773 00:F682: D0 03        	BNE	SM40
  1774                        SMER
  1775 00:F684: 4C 1D EE     	JMP	ERR
  1776                        SM40
  1777                        	; repar original bug -------
  1778 00:F687: B5 25        	LDA	INBUF,X
  1779 00:F689: D0 F9        	bne	SMER
  1780                        	; repar original bug -------
  1781                        
  1782 00:F68B: A5 60        	LDA	PT1
  1783                        
  1784                        	; get a data(65C816)----------------
  1785 00:F68D: 8B           	phb			; push DBR
  1786 00:F68E: A4 3F        	ldy	dumpdb
  1787 00:F690: 5A           	phy
  1788 00:F691: AB           	plb			; set Data Bank
  1789 00:F692: A0 00        	LDY	#0
  1790 00:F694: 91 43        	STA	(SADDR),Y	; set data
  1791 00:F696: AB           	plb			; pop DBR
  1792                        	; get a data(65C816)----------------
  1793                        
  1794 00:F697: 4C 52 F6     	JMP	SM10
  1795                        
  1796                        ;;;
  1797                        ;;; LOAD HEX file
  1798                        ;;;
  1799                        LOADH
  1800                        	longi off
  1801                        	longa off
  1802 00:F69A: E8           	INX
  1803 00:F69B: 20 6B FB     	JSR	RDHEX
  1804 00:F69E: B5 25        	LDA	INBUF,X
  1805 00:F6A0: D0 E2        	BNE	SMER
  1806                        LH0
  1807 00:F6A2: 20 96 FD     	JSR	CONIN
  1808 00:F6A5: 20 60 FB     	JSR	UPPER
  1809 00:F6A8: C9 53        	CMP	#'S'
  1810 00:F6AA: F0 7E        	BEQ	LHS0
  1811                        LH1a
  1812 00:F6AC: C9 3A        	CMP	#':'
  1813 00:F6AE: F0 0E        	BEQ	LHI0
  1814                        LH2
  1815                        	;; Skip to EOL
  1816 00:F6B0: C9 0D        	CMP	#CR
  1817 00:F6B2: F0 EE        	BEQ	LH0
  1818 00:F6B4: C9 0A        	CMP	#LF
  1819 00:F6B6: F0 EA        	BEQ	LH0
  1820                        LH3
  1821 00:F6B8: 20 96 FD     	JSR	CONIN
  1822 00:F6BB: 4C B0 F6     	JMP	LH2
  1823                        
  1824                        LHI0
  1825 00:F6BE: 20 CB FA     	JSR	HEXIN
  1826 00:F6C1: 85 5B        	STA	CKSUM
  1827 00:F6C3: 85 63        	STA	CNT		; Length
  1828                        
  1829 00:F6C5: 20 CB FA     	JSR	HEXIN
  1830 00:F6C8: 85 5A        	STA	DMPPT+1		; Address H
  1831 00:F6CA: 18           	CLC
  1832 00:F6CB: 65 5B        	ADC	CKSUM
  1833 00:F6CD: 85 5B        	STA	CKSUM
  1834                        
  1835 00:F6CF: 20 CB FA     	JSR	HEXIN
  1836 00:F6D2: 85 59        	STA	DMPPT		; Address L
  1837 00:F6D4: 18           	CLC
  1838 00:F6D5: 65 5B        	ADC	CKSUM
  1839 00:F6D7: 85 5B        	STA	CKSUM
  1840                        
  1841                        	;; Add offset
  1842 00:F6D9: A5 59        	LDA	DMPPT
  1843 00:F6DB: 18           	CLC
  1844 00:F6DC: 65 60        	ADC	PT1
  1845 00:F6DE: 85 59        	STA	DMPPT
  1846 00:F6E0: A5 5A        	LDA	DMPPT+1
  1847 00:F6E2: 65 61        	ADC	PT1+1
  1848 00:F6E4: 85 5A        	STA	DMPPT+1
  1849 00:F6E6: A0 00        	LDY	#0
  1850                        	
  1851 00:F6E8: 20 CB FA     	JSR	HEXIN
  1852 00:F6EB: 85 46        	STA	RECTYP		; Record Type
  1853 00:F6ED: 18           	CLC
  1854 00:F6EE: 65 5B        	ADC	CKSUM
  1855 00:F6F0: 85 5B        	STA	CKSUM
  1856                        
  1857 00:F6F2: A5 63        	LDA	CNT
  1858 00:F6F4: F0 17        	BEQ	LHI3
  1859                        LHI1
  1860 00:F6F6: 20 CB FA     	JSR	HEXIN
  1861 00:F6F9: 48           	PHA
  1862 00:F6FA: 18           	CLC
  1863 00:F6FB: 65 5B        	ADC	CKSUM
  1864 00:F6FD: 85 5B        	STA	CKSUM
  1865                        
  1866 00:F6FF: A5 46        	LDA	RECTYP
  1867 00:F701: D0 05        	BNE	LHI2
  1868                        
  1869 00:F703: 68           	PLA
  1870 00:F704: 91 59        	STA	(DMPPT),Y
  1871 00:F706: C8           	INY
  1872 00:F707: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1873                        LHI2
  1874 00:F708: 68           	PLA
  1875 00:F709: C6 63        	DEC	CNT
  1876 00:F70B: D0 E9        	BNE	LHI1
  1877                        LHI3
  1878 00:F70D: 20 CB FA     	JSR	HEXIN
  1879 00:F710: 18           	CLC
  1880 00:F711: 65 5B        	ADC	CKSUM
  1881 00:F713: D0 07        	BNE	LHIE		; Checksum error
  1882 00:F715: A5 46        	LDA	RECTYP
  1883 00:F717: F0 9F        	BEQ	LH3
  1884 00:F719: 4C AA ED     	JMP	WSTART
  1885                        LHIE
  1886 00:F71C: A9 CA        	LDA	#$FF&IHEMSG
  1887 00:F71E: 85 5D        	STA	PT0
  1888 00:F720: A9 FB        	LDA	#IHEMSG>>8
  1889 00:F722: 85 5E        	STA	PT0+1
  1890 00:F724: 20 A3 FA     	JSR	STROUT
  1891 00:F727: 4C AA ED     	JMP	WSTART
  1892                        
  1893                        LHS0	
  1894 00:F72A: A9 2C        	lda	#','
  1895 00:F72C: 20 AA FD     	jsr	CONOUT
  1896 00:F72F: 20 96 FD     	JSR	CONIN
  1897 00:F732: 85 46        	STA	RECTYP		; Record Type
  1898                        
  1899 00:F734: 20 CB FA     	JSR	HEXIN
  1900 00:F737: 85 63        	STA	CNT		; (CNT) = Length+3
  1901 00:F739: 85 5B        	STA	CKSUM
  1902                        
  1903 00:F73B: 20 CB FA     	JSR	HEXIN
  1904 00:F73E: 85 5A        	STA	DMPPT+1		; Address H
  1905 00:F740: 18           	CLC
  1906 00:F741: 65 5B        	ADC	CKSUM
  1907 00:F743: 85 5B        	STA	CKSUM
  1908                        	
  1909 00:F745: 20 CB FA     	JSR	HEXIN
  1910 00:F748: 85 59        	STA	DMPPT		; Address L
  1911 00:F74A: 18           	CLC
  1912 00:F74B: 65 5B        	ADC	CKSUM
  1913 00:F74D: 85 5B        	STA	CKSUM
  1914                        
  1915                        	;; Add offset
  1916 00:F74F: A5 59        	LDA	DMPPT
  1917 00:F751: 18           	CLC
  1918 00:F752: 65 60        	ADC	PT1
  1919 00:F754: 85 59        	STA	DMPPT
  1920 00:F756: A5 5A        	LDA	DMPPT+1
  1921 00:F758: 65 61        	ADC	PT1+1
  1922 00:F75A: 85 5A        	STA	DMPPT+1
  1923 00:F75C: A0 00        	LDY	#0
  1924                        
  1925 00:F75E: C6 63        	DEC	CNT
  1926 00:F760: C6 63        	DEC	CNT
  1927 00:F762: C6 63        	DEC	CNT
  1928 00:F764: F0 19        	BEQ	LHS3
  1929                        LHS1
  1930 00:F766: 20 CB FA     	JSR	HEXIN
  1931 00:F769: 48           	PHA
  1932 00:F76A: 18           	CLC
  1933 00:F76B: 65 5B        	ADC	CKSUM
  1934 00:F76D: 85 5B        	STA	CKSUM		; Checksum
  1935                        
  1936 00:F76F: A5 46        	LDA	RECTYP
  1937 00:F771: C9 31        	CMP	#'1'
  1938 00:F773: D0 05        	BNE	LHS2
  1939                        
  1940 00:F775: 68           	PLA
  1941 00:F776: 91 59        	STA	(DMPPT),Y
  1942 00:F778: C8           	INY
  1943 00:F779: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1944                        LHS2
  1945 00:F77A: 68           	PLA
  1946 00:F77B: C6 63        	DEC	CNT
  1947 00:F77D: D0 E7        	BNE	LHS1
  1948                        LHS3
  1949 00:F77F: 20 CB FA     	JSR	HEXIN
  1950 00:F782: 18           	CLC
  1951 00:F783: 65 5B        	ADC	CKSUM
  1952 00:F785: C9 FF        	CMP	#$FF
  1953 00:F787: D0 09        	BNE	LHSE		; Checksum error
  1954                        
  1955 00:F789: A5 46        	LDA	RECTYP
  1956 00:F78B: C9 39        	CMP	#'9'
  1957 00:F78D: F0 0E        	BEQ	LHSR
  1958 00:F78F: 4C B8 F6     	JMP	LH3
  1959                        LHSE
  1960 00:F792: A9 D7        	LDA	#$FF&SHEMSG
  1961 00:F794: 85 5D        	STA	PT0
  1962 00:F796: A9 FB        	LDA	#SHEMSG>>8
  1963 00:F798: 85 5E        	STA	PT0+1
  1964 00:F79A: 20 A3 FA     	JSR	STROUT
  1965                        LHSR	
  1966 00:F79D: 4C AA ED     	JMP	WSTART
  1967                        
  1968                        ;;;
  1969                        ;;; Register
  1970                        ;;;
  1971                        REG
  1972                        	longi off
  1973                        	longa off
  1974                        	
  1975 00:F7A0: E8           	INX
  1976 00:F7A1: B5 25        	LDA	INBUF,X
  1977 00:F7A3: C9 00        	CMP	#0
  1978 00:F7A5: D0 06        	BNE	RG0
  1979 00:F7A7: 20 66 F8     	JSR	RDUMP
  1980 00:F7AA: 4C AA ED     	JMP	WSTART
  1981                        RG0
  1982                        	long_i
+ 1982 00:F7AD: C2 10                        rep     #X_FLAG
+ 1982                                        longi   on
  1983 00:F7AF: A0 7D FC     	LDY	#RNTAB
  1984 00:F7B2: 84 60        	STY	PT1
  1985                        	short_i
+ 1985 00:F7B4: E2 10                        sep     #X_FLAG
+ 1985                                        longi   off
  1986 00:F7B6: A0 00        	LDY	#0
  1987                        RG1
  1988 00:F7B8: D1 60        	CMP	(PT1),Y
  1989 00:F7BA: F0 13        	BEQ	RG2	; match a register
  1990 00:F7BC: C8           	INY
  1991 00:F7BD: 48           	PHA
  1992 00:F7BE: B1 60        	LDA	(PT1),Y
  1993 00:F7C0: F0 09        	BEQ	RGE
  1994 00:F7C2: 68           	PLA
  1995 00:F7C3: C8           	INY
  1996 00:F7C4: C8           	INY
  1997 00:F7C5: C8           	INY
  1998 00:F7C6: C8           	INY
  1999 00:F7C7: C8           	INY
  2000 00:F7C8: 4C B8 F7     	JMP	RG1
  2001                        RGE
  2002 00:F7CB: 68           	PLA
  2003 00:F7CC: 4C 1D EE     	JMP	ERR
  2004                        RG2
  2005 00:F7CF: C8           	INY
  2006 00:F7D0: B1 60        	LDA	(PT1),Y		; $80 or 2 or 1
  2007 00:F7D2: C9 80        	CMP	#$80
  2008 00:F7D4: D0 19        	BNE	RG3		; 2 or 1
  2009                        	;; Next table
  2010 00:F7D6: C8           	INY
  2011 00:F7D7: B1 60        	LDA	(PT1),Y
  2012 00:F7D9: 85 63        	STA	CNT		; Temporary
  2013 00:F7DB: C8           	INY
  2014 00:F7DC: B1 60        	LDA	(PT1),Y
  2015 00:F7DE: 85 61        	STA	PT1+1
  2016 00:F7E0: A5 63        	LDA	CNT
  2017 00:F7E2: 85 60        	STA	PT1
  2018 00:F7E4: A0 00        	LDY	#0
  2019 00:F7E6: E8           	INX
  2020 00:F7E7: B5 25        	LDA	INBUF,X
  2021 00:F7E9: 20 60 FB     	JSR	UPPER
  2022 00:F7EC: 4C B8 F7     	JMP	RG1
  2023                        RG3
  2024 00:F7EF: C9 00        	CMP	#0
  2025 00:F7F1: F0 70        	BEQ	RGE0
  2026                        
  2027 00:F7F3: C8           	INY			; +2
  2028 00:F7F4: B1 60        	LDA	(PT1),Y		; get address of register value
  2029 00:F7F6: AA           	TAX			;  ex: X = &REGA(in Direct Ppage)
  2030 00:F7F7: C8           	INY
  2031                        
  2032 00:F7F8: C8           	INY			; +4
  2033 00:F7F9: B1 60        	LDA	(PT1),Y		;
  2034 00:F7FB: 85 5D        	STA	PT0		;
  2035 00:F7FD: C8           	INY			;  PT0 = char register point
  2036 00:F7FE: B1 60        	LDA	(PT1),Y		;  (ex: PT0 = &RNA;   *RNA = 'A')
  2037 00:F800: 85 5E        	STA	PT0+1		;
  2038                        
  2039 00:F802: 84 63        	STY	CNT		; Save Y (STROUT destroys Y)
  2040 00:F804: 20 A3 FA     	JSR	STROUT
  2041 00:F807: A9 3D        	LDA	#'='
  2042 00:F809: 20 AA FD     	JSR	CONOUT
  2043 00:F80C: A4 63        	LDY	CNT		; Restore Y
  2044 00:F80E: 88           	DEY
  2045 00:F80F: 88           	DEY
  2046 00:F810: 88           	DEY
  2047 00:F811: 88           	DEY
  2048 00:F812: B1 60        	LDA	(PT1),Y		; get register size. 1 or 2
  2049 00:F814: 85 58        	STA	REGSIZ
  2050 00:F816: C9 01        	CMP	#1
  2051 00:F818: D0 09        	BNE	RG4
  2052                        	;; 8 bit register
  2053 00:F81A: BD 00 EC     	LDA	UNIMON_DP+0,X
  2054 00:F81D: 20 B3 FA     	JSR	HEXOUT2
  2055 00:F820: 4C 2F F8     	JMP	RG5
  2056                        RG4
  2057                        	;; 16 bit register
  2058 00:F823: BD 01 EC     	LDA	UNIMON_DP+1,X
  2059 00:F826: 20 B3 FA     	JSR	HEXOUT2
  2060 00:F829: BD 00 EC     	LDA	UNIMON_DP+0,X
  2061 00:F82C: 20 B3 FA     	JSR	HEXOUT2
  2062                        RG5
  2063 00:F82F: A9 20        	LDA	#' '
  2064 00:F831: 20 AA FD     	JSR	CONOUT
  2065 00:F834: 86 5B        	STX	CKSUM		; Save X (GETLIN destroys X)
  2066 00:F836: 20 00 FB     	JSR	GETLIN
  2067 00:F839: A2 00        	LDX	#0
  2068 00:F83B: 20 6B FB     	JSR	RDHEX
  2069 00:F83E: A5 63        	LDA	CNT
  2070 00:F840: F0 1A        	BEQ	RGR
  2071 00:F842: A6 5B        	LDX	CKSUM		; Restore X
  2072 00:F844: A5 58        	LDA	REGSIZ
  2073 00:F846: C9 01        	CMP	#1
  2074 00:F848: D0 08        	BNE	RG6
  2075                        	;; 8 bit register
  2076 00:F84A: A5 60        	LDA	PT1
  2077 00:F84C: 9D 00 EC     	STA	UNIMON_DP+0,X
  2078 00:F84F: 4C 5C F8     	JMP	RG7
  2079                        RG6
  2080                        	;; 16 bit address
  2081 00:F852: A5 60        	LDA	PT1
  2082 00:F854: 9D 00 EC     	STA	UNIMON_DP+0,X		; (L)
  2083 00:F857: A5 61        	LDA	PT1+1
  2084 00:F859: 9D 01 EC     	STA	UNIMON_DP+1,X		; (H)
  2085                        RG7	
  2086                        RGR	
  2087 00:F85C: A5 51        	LDA	REGPSR
  2088 00:F85E: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2089 00:F860: 4C AA ED     	JMP	WSTART
  2090                        	
  2091                        RGE0	
  2092 00:F863: 4C 1D EE     	JMP	ERR
  2093                        	
  2094                        ;
  2095                        ; print all registers
  2096                        ;
  2097                        RDUMP
  2098                        	longi off
  2099                        	longa off
  2100                        
  2101 00:F866: A0 28        	ldy	#40
  2102 00:F868: A9 20        	lda	#' '
  2103                        spc_out
  2104 00:F86A: 20 AA FD     	jsr	CONOUT
  2105 00:F86D: 88           	dey
  2106 00:F86E: D0 FA        	bne	spc_out
  2107                        
  2108                        	long_a
+ 2108 00:F870: C2 20                        rep     #M_FLAG
+ 2108                                        longa   on
  2109 00:F872: A9 5D FC     	LDA	#psn_bm
  2110 00:F875: 85 5D        	STA	PT0
  2111 00:F877: 20 A3 FA     	jsr	STROUT
  2112                        
  2113                        	long_a
+ 2113 00:F87A: C2 20                        rep     #M_FLAG
+ 2113                                        longa   on
  2114 00:F87C: A9 42 FC     	LDA	#RDSA	; A
  2115 00:F87F: 85 5D        	STA	PT0
  2116 00:F881: 20 A3 FA     	JSR	STROUT
  2117                        	longa off
  2118 00:F884: A5 48        	LDA	REGA+1
  2119 00:F886: 20 B3 FA     	JSR	HEXOUT2
  2120 00:F889: A5 47        	LDA	REGA
  2121 00:F88B: 20 B3 FA     	JSR	HEXOUT2
  2122                        
  2123                        	long_a
+ 2123 00:F88E: C2 20                        rep     #M_FLAG
+ 2123                                        longa   on
  2124 00:F890: A9 45 FC     	LDA	#RDSX	; X
  2125 00:F893: 85 5D        	STA	PT0
  2126 00:F895: 20 A3 FA     	JSR	STROUT
  2127                        	longa off
  2128 00:F898: A5 4A        	LDA	REGX+1
  2129 00:F89A: 20 B3 FA     	JSR	HEXOUT2
  2130 00:F89D: A5 49        	LDA	REGX
  2131 00:F89F: 20 B3 FA     	JSR	HEXOUT2
  2132                        
  2133                        	long_a
+ 2133 00:F8A2: C2 20                        rep     #M_FLAG
+ 2133                                        longa   on
  2134 00:F8A4: A9 49 FC     	LDA	#RDSY	; Y
  2135 00:F8A7: 85 5D        	STA	PT0
  2136 00:F8A9: 20 A3 FA     	JSR	STROUT
  2137                        	longa off
  2138 00:F8AC: A5 4C        	LDA	REGY+1
  2139 00:F8AE: 20 B3 FA     	JSR	HEXOUT2
  2140 00:F8B1: A5 4B        	LDA	REGY
  2141 00:F8B3: 20 B3 FA     	JSR	HEXOUT2
  2142                        
  2143                        	long_a
+ 2143 00:F8B6: C2 20                        rep     #M_FLAG
+ 2143                                        longa   on
  2144 00:F8B8: A9 4D FC     	LDA	#RDSSP	; SP
  2145 00:F8BB: 85 5D        	STA	PT0
  2146 00:F8BD: 20 A3 FA     	JSR	STROUT
  2147                        	longa off
  2148 00:F8C0: A5 4E        	LDA	REGSP+1
  2149 00:F8C2: 20 B3 FA     	JSR	HEXOUT2
  2150 00:F8C5: A5 4D        	LDA	REGSP
  2151 00:F8C7: 20 B3 FA     	JSR	HEXOUT2
  2152                        
  2153                        	long_a
+ 2153 00:F8CA: C2 20                        rep     #M_FLAG
+ 2153                                        longa   on
  2154 00:F8CC: A9 52 FC     	LDA	#RDSPC	; PC
  2155 00:F8CF: 85 5D        	STA	PT0
  2156 00:F8D1: 20 A3 FA     	JSR	STROUT
  2157                        	longa off
  2158 00:F8D4: A5 50        	LDA	REGPC+1		; PC(H)
  2159 00:F8D6: 20 B3 FA     	JSR	HEXOUT2
  2160 00:F8D9: A5 4F        	LDA	REGPC		; PC(L)
  2161 00:F8DB: 20 B3 FA     	JSR	HEXOUT2
  2162                        
  2163                        	long_a
+ 2163 00:F8DE: C2 20                        rep     #M_FLAG
+ 2163                                        longa   on
  2164 00:F8E0: A9 57 FC     	LDA	#RDSPSR		; PSR
  2165 00:F8E3: 85 5D        	STA	PT0
  2166 00:F8E5: 20 A3 FA     	JSR	STROUT
  2167                        
  2168                        	longa off
  2169 00:F8E8: A0 08        	LDY	#8
  2170 00:F8EA: A5 51        	LDA	REGPSR
  2171                        	
  2172                        psr_bloop
  2173 00:F8EC: 0A           	asl	a
  2174 00:F8ED: 90 0C        	bcc	set_31
  2175 00:F8EF: AA           	tax			; save
  2176 00:F8F0: A9 31        	lda	#'1'
  2177 00:F8F2: 20 AA FD     	jsr	CONOUT
  2178                        set_30
  2179 00:F8F5: 8A           	txa
  2180 00:F8F6: 88           	dey
  2181 00:F8F7: D0 F3        	bne	psr_bloop
  2182 00:F8F9: 80 08        	bra	prt_dpdbpb
  2183                        
  2184                        set_31
  2185 00:F8FB: AA           	tax			; save
  2186 00:F8FC: A9 30        	lda	#'0'
  2187 00:F8FE: 20 AA FD     	jsr	CONOUT
  2188 00:F901: 80 F2        	bra	set_30
  2189                        
  2190                        prt_dpdbpb
  2191                        	long_a
+ 2191 00:F903: C2 20                        rep     #M_FLAG
+ 2191                                        longa   on
  2192 00:F905: A9 6A FC     	LDA	#RDSPB		; PBR
  2193 00:F908: 85 5D        	STA	PT0
  2194 00:F90A: 20 A3 FA     	JSR	STROUT
  2195                        	longa off
  2196 00:F90D: A5 52        	LDA	REGPB
  2197 00:F90F: 20 B3 FA     	JSR	HEXOUT2
  2198                        
  2199                        	long_a
+ 2199 00:F912: C2 20                        rep     #M_FLAG
+ 2199                                        longa   on
  2200 00:F914: A9 71 FC     	LDA	#RDSDB		; DBR
  2201 00:F917: 85 5D        	STA	PT0
  2202 00:F919: 20 A3 FA     	JSR	STROUT
  2203                        	longa off
  2204 00:F91C: A5 53        	LDA	REGDB
  2205 00:F91E: 20 B3 FA     	JSR	HEXOUT2
  2206                        
  2207                        	long_a
+ 2207 00:F921: C2 20                        rep     #M_FLAG
+ 2207                                        longa   on
  2208 00:F923: A9 77 FC     	LDA	#RDSDP		; DPR
  2209 00:F926: 85 5D        	STA	PT0
  2210 00:F928: 20 A3 FA     	JSR	STROUT
  2211                        	longa off
  2212 00:F92B: A5 55        	LDA	REGDP+1		; DPR(H)
  2213 00:F92D: 20 B3 FA     	JSR	HEXOUT2
  2214 00:F930: A5 54        	LDA	REGDP		; DPR(L)
  2215 00:F932: 20 B3 FA     	JSR	HEXOUT2
  2216 00:F935: 4C F6 FA     	JMP	CRLF
  2217                        
  2218                        ;
  2219                        ; command help
  2220                        ;
  2221                        prt_help:
  2222                        	longi off
  2223                        	longa off
  2224 00:F938: E8           	INX
  2225 00:F939: B5 25        	LDA	INBUF,X
  2226 00:F93B: F0 03        	BEQ	ph_1	; jmp if string exist
  2227 00:F93D: 4C 1D EE     	JMP	ERR
  2228                        ph_1
  2229                        	; must strings <= 255 : Y = 8 bit
  2230                        
  2231 00:F940: A9 59        	LDA	#$FF&hlp_meg1
  2232 00:F942: 85 5D        	STA	PT0
  2233 00:F944: A9 F9        	LDA	#hlp_meg1>>8
  2234 00:F946: 85 5E        	STA	PT0+1
  2235 00:F948: 20 A3 FA     	JSR	STROUT
  2236                        
  2237 00:F94B: A9 FD        	LDA	#$FF&hlp_meg2
  2238 00:F94D: 85 5D        	STA	PT0
  2239 00:F94F: A9 F9        	LDA	#hlp_meg2>>8
  2240 00:F951: 85 5E        	STA	PT0+1
  2241 00:F953: 20 A3 FA     	JSR	STROUT
  2242 00:F956: 4C AA ED     	JMP	WSTART
  2243                        
  2244                        hlp_meg1
  2245 00:F959: 3C 3C 3C 20  	db	"<<< Universal Monitor Command List >>>",CR,LF
       00:F95D: 55 6E 69 76 
       00:F961: 65 72 73 61 
       00:F965: 6C 20 4D 6F 
       00:F969: 6E 69 74 6F 
       00:F96D: 72 20 43 6F 
       00:F971: 6D 6D 61 6E 
       00:F975: 64 20 4C 69 
       00:F979: 73 74 20 3E 
       00:F97D: 3E 3E 0D 0A 
  2246 00:F981: 3F 20 20 3A  	db	"?  : Command Summary", CR, LF
       00:F985: 20 43 6F 6D 
       00:F989: 6D 61 6E 64 
       00:F98D: 20 53 75 6D 
       00:F991: 6D 61 72 79 
       00:F995: 0D 0A 
  2247 00:F997: 44 20 20 5B  	db	"D  [bank:][start addr][, end addr] : Dump Memory", CR, LF
       00:F99B: 62 61 6E 6B 
       00:F99F: 3A 5D 5B 73 
       00:F9A3: 74 61 72 74 
       00:F9A7: 20 61 64 64 
       00:F9AB: 72 5D 5B 2C 
       00:F9AF: 20 65 6E 64 
       00:F9B3: 20 61 64 64 
       00:F9B7: 72 5D 20 3A 
       00:F9BB: 20 44 75 6D 
       00:F9BF: 70 20 4D 65 
       00:F9C3: 6D 6F 72 79 
       00:F9C7: 0D 0A 
  2248 00:F9C9: 44 49 20 5B  	db	"DI [bank:][start addr][, end addr] : Disassembler", CR, LF,0
       00:F9CD: 62 61 6E 6B 
       00:F9D1: 3A 5D 5B 73 
       00:F9D5: 74 61 72 74 
       00:F9D9: 20 61 64 64 
       00:F9DD: 72 5D 5B 2C 
       00:F9E1: 20 65 6E 64 
       00:F9E5: 20 61 64 64 
       00:F9E9: 72 5D 20 3A 
       00:F9ED: 20 44 69 73 
       00:F9F1: 61 73 73 65 
       00:F9F5: 6D 62 6C 65 
       00:F9F9: 72 0D 0A 00 
  2249                        hlp_meg2
  2250 00:F9FD: 47 20 20 5B  	db	"G  [bank:][start addr][, stop addr] : Go and Stop", CR, LF
       00:FA01: 62 61 6E 6B 
       00:FA05: 3A 5D 5B 73 
       00:FA09: 74 61 72 74 
       00:FA0D: 20 61 64 64 
       00:FA11: 72 5D 5B 2C 
       00:FA15: 20 73 74 6F 
       00:FA19: 70 20 61 64 
       00:FA1D: 64 72 5D 20 
       00:FA21: 3A 20 47 6F 
       00:FA25: 20 61 6E 64 
       00:FA29: 20 53 74 6F 
       00:FA2D: 70 0D 0A 
  2251 00:FA30: 4C 20 20 5B  	db	"L  [offset] : Load HexFile", CR, LF
       00:FA34: 6F 66 66 73 
       00:FA38: 65 74 5D 20 
       00:FA3C: 3A 20 4C 6F 
       00:FA40: 61 64 20 48 
       00:FA44: 65 78 46 69 
       00:FA48: 6C 65 0D 0A 
  2252 00:FA4C: 52 20 20 5B  	db	"R  [register] : Show or Set register", CR, LF
       00:FA50: 72 65 67 69 
       00:FA54: 73 74 65 72 
       00:FA58: 5D 20 3A 20 
       00:FA5C: 53 68 6F 77 
       00:FA60: 20 6F 72 20 
       00:FA64: 53 65 74 20 
       00:FA68: 72 65 67 69 
       00:FA6C: 73 74 65 72 
       00:FA70: 0D 0A 
  2253 00:FA72: 53 20 20 5B  	db	"S  [bank:][addr] : Set Memory", CR, LF
       00:FA76: 62 61 6E 6B 
       00:FA7A: 3A 5D 5B 61 
       00:FA7E: 64 64 72 5D 
       00:FA82: 20 3A 20 53 
       00:FA86: 65 74 20 4D 
       00:FA8A: 65 6D 6F 72 
       00:FA8E: 79 0D 0A 
  2254 00:FA91: 42 59 45 20  	db	"BYE : Terminate",CR,LF,0
       00:FA95: 3A 20 54 65 
       00:FA99: 72 6D 69 6E 
       00:FA9D: 61 74 65 0D 
       00:FAA1: 0A 00 
  2255                        
  2256                        ;;;
  2257                        ;;; Other support routines
  2258                        ;;;
  2259                        
  2260                        STROUT
  2261                        	short_ai
+ 2261 00:FAA3: E2 30                        sep     #M_FLAG|X_FLAG
+ 2261                                        longa   off
+ 2261                                        longi   off
  2262 00:FAA5: A0 00        	LDY	#0
  2263                        STRO0
  2264 00:FAA7: B1 5D        	LDA	(PT0),Y
  2265 00:FAA9: F0 07        	BEQ	STROE
  2266 00:FAAB: 20 AA FD     	JSR	CONOUT
  2267 00:FAAE: C8           	INY
  2268 00:FAAF: 4C A7 FA     	JMP	STRO0
  2269                        STROE
  2270 00:FAB2: 60           	RTS
  2271                        
  2272                        HEXOUT2
  2273                        	longa off
  2274 00:FAB3: 48           	PHA
  2275 00:FAB4: 4A           	LSR	A
  2276 00:FAB5: 4A           	LSR	A
  2277 00:FAB6: 4A           	LSR	A
  2278 00:FAB7: 4A           	LSR	A
  2279 00:FAB8: 20 BC FA     	JSR	HEXOUT1
  2280 00:FABB: 68           	PLA
  2281                        HEXOUT1
  2282                        	longa off
  2283 00:FABC: 29 0F        	AND	#$0F
  2284 00:FABE: 18           	CLC
  2285 00:FABF: 69 30        	ADC	#'0'
  2286 00:FAC1: C9 3A        	CMP	#'9'+1
  2287 00:FAC3: 90 03        	BCC	HEXOUTE
  2288 00:FAC5: 18           	CLC
  2289 00:FAC6: 69 07        	ADC	#'A'-'9'-1
  2290                        HEXOUTE
  2291 00:FAC8: 4C AA FD     	JMP	CONOUT
  2292                        
  2293                        HEXIN
  2294                        	longa off
  2295 00:FACB: A9 00        	LDA	#0
  2296 00:FACD: 20 D4 FA     	JSR	HI0
  2297 00:FAD0: 0A           	ASL
  2298 00:FAD1: 0A           	ASL
  2299 00:FAD2: 0A           	ASL
  2300 00:FAD3: 0A           	ASL
  2301                        HI0
  2302 00:FAD4: 85 5C        	STA	HITMP
  2303 00:FAD6: 20 96 FD     	JSR	CONIN
  2304 00:FAD9: 20 60 FB     	JSR	UPPER
  2305 00:FADC: C9 30        	CMP	#'0'
  2306 00:FADE: 90 15        	BCC	HIR
  2307 00:FAE0: C9 3A        	CMP	#'9'+1
  2308 00:FAE2: 90 0B        	BCC	HI1
  2309 00:FAE4: C9 41        	CMP	#'A'
  2310 00:FAE6: 90 0D        	BCC	HIR
  2311 00:FAE8: C9 47        	CMP	#'F'+1
  2312 00:FAEA: B0 09        	BCS	HIR
  2313 00:FAEC: 38           	SEC
  2314 00:FAED: E9 07        	SBC	#'A'-'9'-1
  2315                        HI1
  2316 00:FAEF: 38           	SEC
  2317 00:FAF0: E9 30        	SBC	#'0'
  2318 00:FAF2: 18           	CLC
  2319 00:FAF3: 65 5C        	ADC	HITMP
  2320                        HIR
  2321 00:FAF5: 60           	RTS
  2322                        	
  2323                        CRLF
  2324                        	longa off
  2325 00:FAF6: A9 0D        	LDA	#CR
  2326 00:FAF8: 20 AA FD     	JSR	CONOUT
  2327 00:FAFB: A9 0A        	LDA	#LF
  2328 00:FAFD: 4C AA FD     	JMP	CONOUT
  2329                        
  2330                        GETLIN
  2331                        	longi off
  2332                        	longa off
  2333 00:FB00: A2 00        	LDX	#0
  2334                        GL0
  2335 00:FB02: 20 96 FD     	JSR	CONIN
  2336 00:FB05: C9 0D        	CMP	#CR
  2337 00:FB07: F0 36        	BEQ	GLE
  2338 00:FB09: C9 0A        	CMP	#LF
  2339 00:FB0B: F0 32        	BEQ	GLE
  2340 00:FB0D: C9 08        	CMP	#BS
  2341 00:FB0F: F0 18        	BEQ	GLB
  2342 00:FB11: C9 7F        	CMP	#DEL
  2343 00:FB13: F0 14        	BEQ	GLB
  2344 00:FB15: C9 20        	CMP	#' '
  2345 00:FB17: 90 E9        	BCC	GL0
  2346 00:FB19: C9 80        	CMP	#$80
  2347 00:FB1B: B0 E5        	BCS	GL0
  2348 00:FB1D: E0 0F        	CPX	#BUFLEN-1
  2349 00:FB1F: B0 E1        	BCS	GL0		; Too long
  2350 00:FB21: 95 25        	STA	INBUF,X
  2351 00:FB23: E8           	INX
  2352 00:FB24: 20 AA FD     	JSR	CONOUT
  2353 00:FB27: 80 D9        	bra	GL0
  2354                        GLB
  2355 00:FB29: E0 00        	CPX	#0
  2356 00:FB2B: F0 D5        	BEQ	GL0
  2357 00:FB2D: CA           	DEX
  2358 00:FB2E: A9 08        	LDA	#BS
  2359 00:FB30: 20 AA FD     	JSR	CONOUT
  2360 00:FB33: A9 20        	LDA	#' '
  2361 00:FB35: 20 AA FD     	JSR	CONOUT
  2362 00:FB38: A9 08        	LDA	#BS
  2363 00:FB3A: 20 AA FD     	JSR	CONOUT
  2364 00:FB3D: 80 C3        	bra	GL0
  2365                        GLE
  2366 00:FB3F: 20 F6 FA     	JSR	CRLF
  2367 00:FB42: A9 00        	LDA	#0
  2368 00:FB44: 95 25        	STA	INBUF,X
  2369                        
  2370                        ; skip space
  2371 00:FB46: AA           	tax			; X=0
  2372 00:FB47: A8           	tay			; Y=0
  2373                        skp_splp
  2374 00:FB48: B5 25        	lda	INBUF,X
  2375 00:FB4A: C9 00        	cmp	#0
  2376 00:FB4C: F0 0E        	beq	glee
  2377 00:FB4E: C9 20        	cmp	#' '		; check space
  2378 00:FB50: F0 07        	beq	skip_space
  2379                        
  2380 00:FB52: 20 60 FB     	jsr	UPPER
  2381 00:FB55: 99 25 EC     	sta	UNIMON_DP+INBUF,y	; Absolute Indexed!! INBUF is at DPR
  2382 00:FB58: C8           	iny
  2383                        skip_space
  2384 00:FB59: E8           	inx
  2385 00:FB5A: 80 EC        	bra	skp_splp
  2386                        glee
  2387 00:FB5C: 99 25 EC     	sta	UNIMON_DP+INBUF,y	; Absolute Indexed! set null
  2388 00:FB5F: 60           	RTS
  2389                        
  2390                        UPPER
  2391                        	longa off
  2392 00:FB60: C9 61        	CMP	#'a'
  2393 00:FB62: 90 06        	BCC	UPE
  2394 00:FB64: C9 7B        	CMP	#'z'+1
  2395 00:FB66: B0 02        	BCS	UPE
  2396 00:FB68: 69 E0        	ADC	#'A'-'a'
  2397                        UPE
  2398 00:FB6A: 60           	RTS
  2399                        
  2400                        RDHEX
  2401                        	longi off
  2402                        	longa off
  2403 00:FB6B: A9 00        	LDA	#0
  2404 00:FB6D: 85 60        	STA	PT1
  2405 00:FB6F: 85 61        	STA	PT1+1
  2406 00:FB71: 85 63        	STA	CNT
  2407                        RH0
  2408 00:FB73: B5 25        	LDA	INBUF,X
  2409 00:FB75: C9 30        	CMP	#'0'
  2410 00:FB77: 90 2D        	BCC	RHE
  2411 00:FB79: C9 3A        	CMP	#'9'+1
  2412 00:FB7B: 90 0B        	BCC	RH1
  2413 00:FB7D: C9 41        	CMP	#'A'
  2414 00:FB7F: 90 25        	BCC	RHE
  2415 00:FB81: C9 47        	CMP	#'F'+1
  2416 00:FB83: B0 21        	BCS	RHE
  2417 00:FB85: 38           	SEC
  2418 00:FB86: E9 07        	SBC	#'A'-'9'-1
  2419                        RH1
  2420 00:FB88: 38           	SEC
  2421 00:FB89: E9 30        	SBC	#'0'
  2422 00:FB8B: 06 60        	ASL	PT1
  2423 00:FB8D: 26 61        	ROL	PT1+1
  2424 00:FB8F: 06 60        	ASL	PT1
  2425 00:FB91: 26 61        	ROL	PT1+1
  2426 00:FB93: 06 60        	ASL	PT1
  2427 00:FB95: 26 61        	ROL	PT1+1
  2428 00:FB97: 06 60        	ASL	PT1
  2429 00:FB99: 26 61        	ROL	PT1+1
  2430 00:FB9B: 18           	CLC
  2431 00:FB9C: 65 60        	ADC	PT1
  2432 00:FB9E: 85 60        	STA	PT1
  2433 00:FBA0: E6 63        	INC	CNT
  2434 00:FBA2: E8           	INX
  2435 00:FBA3: 4C 73 FB     	JMP	RH0
  2436                        RHE
  2437 00:FBA6: 60           	RTS
  2438                        
  2439                        ;---------- unimon message data ---------------
  2440                        OPNMSG
  2441 00:FBA7: 0D 0A 4D 45  	db	CR,LF,"MEZW65C_RAM Monitor W65C816",CR,LF,$00
       00:FBAB: 5A 57 36 35 
       00:FBAF: 43 5F 52 41 
       00:FBB3: 4D 20 4D 6F 
       00:FBB7: 6E 69 74 6F 
       00:FBBB: 72 20 57 36 
       00:FBBF: 35 43 38 31 
       00:FBC3: 36 0D 0A 00 
  2442                        PROMPT
  2443 00:FBC7: 5D 20 00     	db	"] ",$00
  2444                        IHEMSG
  2445 00:FBCA: 45 72 72 6F  	db	"Error ihex",CR,LF,$00
       00:FBCE: 72 20 69 68 
       00:FBD2: 65 78 0D 0A 
       00:FBD6: 00 
  2446                        
  2447                        SHEMSG
  2448 00:FBD7: 45 72 72 6F  	db	"Error srec",CR,LF,$00
       00:FBDB: 72 20 73 72 
       00:FBDF: 65 63 0D 0A 
       00:FBE3: 00 
  2449                        
  2450                        ERRMSG
  2451 00:FBE4: 45 72 72 6F  	db	"Error",CR,LF,$00
       00:FBE8: 72 0D 0A 00 
  2452                        
  2453                        DSEP0
  2454 00:FBEC: 20 3A 00     	db	" :",$00
  2455                        DSEP1
  2456 00:FBEF: 20 3A 20 00  	db	" : ",$00
  2457                        dmplmsg
  2458 00:FBF3: 20 20 20 20  	db	"          +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F"
       00:FBF7: 20 20 20 20 
       00:FBFB: 20 20 2B 30 
       00:FBFF: 20 2B 31 20 
       00:FC03: 2B 32 20 2B 
       00:FC07: 33 20 2B 34 
       00:FC0B: 20 2B 35 20 
       00:FC0F: 2B 36 20 2B 
       00:FC13: 37 20 2B 38 
       00:FC17: 20 2B 39 20 
       00:FC1B: 2B 41 20 2B 
       00:FC1F: 42 20 2B 43 
       00:FC23: 20 2B 44 20 
       00:FC27: 2B 45 20 2B 
       00:FC2B: 46 
  2459 00:FC2C: 20 20 20 30  	db	"   0123456789ABCDEF",CR,LF,0
       00:FC30: 31 32 33 34 
       00:FC34: 35 36 37 38 
       00:FC38: 39 41 42 43 
       00:FC3C: 44 45 46 0D 
       00:FC40: 0A 00 
  2460                        
  2461                        
  2462                        ;IHEXER
  2463                        ;        db	":00000001FF",CR,LF,$00
  2464                        ;SRECER
  2465                        ;        db	"S9030000FC",CR,LF,$00
  2466                        
  2467 00:FC42: 41 3D 00     RDSA	db	"A=",$00
  2468 00:FC45: 20 58 3D 00  RDSX	db	" X=",$00
  2469 00:FC49: 20 59 3D 00  RDSY	db	" Y=",$00
  2470 00:FC4D: 20 53 50 3D  RDSSP	db	" SP=",$00
       00:FC51: 00 
  2471 00:FC52: 20 50 43 3D  RDSPC	db	" PC=",$00
       00:FC56: 00 
  2472 00:FC57: 20 50 53 52  RDSPSR	db	" PSR=",$00
       00:FC5B: 3D 00 
  2473 00:FC5D: 28 4E 56 4D  psn_bm	db	"(NVMXDIZC)",CR,LF,0
       00:FC61: 58 44 49 5A 
       00:FC65: 43 29 0D 0A 
       00:FC69: 00 
  2474                        
  2475 00:FC6A: 0D 0A 50 42  RDSPB	db	CR,LF,"PBR=",0
       00:FC6E: 52 3D 00 
  2476 00:FC71: 20 44 42 52  RDSDB	db	" DBR=",0
       00:FC75: 3D 00 
  2477 00:FC77: 20 44 50 52  RDSDP	db	" DPR=",0
       00:FC7B: 3D 00 
  2478                        
  2479                        RNTAB
  2480 00:FC7D: 41 02        	db	'A',2
  2481 00:FC7F: 47 00 0D FD  	dw	REGA,RNA
  2482 00:FC83: 58 02        	db	'X',2
  2483 00:FC85: 49 00 0F FD  	dw	REGX,RNX
  2484 00:FC89: 59 02        	db	'Y',2
  2485 00:FC8B: 4B 00 11 FD  	dw	REGY,RNY
  2486 00:FC8F: 53 80        	db	'S',$80		; SP
  2487 00:FC91: A7 FC 00 00  	dw	RNTABS,0
  2488 00:FC95: 50 80        	db	'P',$80		; PC, PSR, PBR
  2489 00:FC97: B3 FC 00 00  	dw	RNTABP,0
  2490 00:FC9B: 44 80        	db	'D',$80		; DBR, DPR
  2491 00:FC9D: E3 FC 00 00  	dw	RNTABD,0
  2492                        	
  2493 00:FCA1: 00 00        	db	$00,0		; End mark
  2494 00:FCA3: 00 00 00 00  	dw	0,0
  2495                        
  2496                        RNTABS
  2497 00:FCA7: 50 02        	db	'P',2
  2498 00:FCA9: 4D 00 13 FD  	dw	REGSP,RNSP
  2499                        	
  2500 00:FCAD: 00 00        	db	$00,0		; End mark
  2501 00:FCAF: 00 00 00 00  	dw	0,0
  2502                        
  2503                        RNTABP
  2504 00:FCB3: 43 02        	db	'C',2
  2505 00:FCB5: 4F 00 16 FD  	dw	REGPC,RNPC
  2506 00:FCB9: 42 80        	db	'B',$80
  2507 00:FCBB: D7 FC 00 00  	dw	RNTPBS,0
  2508 00:FCBF: 53 80        	db	'S',$80
  2509 00:FCC1: CB FC 00 00  	dw	RNTABPS,0
  2510                        
  2511 00:FCC5: 00 00        	db	$00,0		; End mark
  2512 00:FCC7: 00 00 00 00  	dw	0,0
  2513                        
  2514                        RNTABPS
  2515 00:FCCB: 52 01        	db	'R',1
  2516 00:FCCD: 51 00 19 FD  	dw	REGPSR,RNPSR
  2517                        
  2518 00:FCD1: 00 00        	db	$00,0		; End mark
  2519 00:FCD3: 00 00 00 00  	dw	0,0
  2520                        	
  2521                        RNTPBS
  2522 00:FCD7: 52 01        	db	'R',1
  2523 00:FCD9: 52 00 1D FD  	dw	REGPB,RNPB
  2524                        
  2525 00:FCDD: 00 00        	db	$00,0		; End mark
  2526 00:FCDF: 00 00 00 00  	dw	0,0
  2527                        
  2528                        RNTABD
  2529 00:FCE3: 42 80        	db	'B',$80
  2530 00:FCE5: F5 FC 00 00  	dw	RNTDBR,0
  2531 00:FCE9: 50 80        	db	'P',$80
  2532 00:FCEB: 01 FD 00 00  	dw	RNTDPR,0
  2533                        
  2534 00:FCEF: 00 00        	db	$00,0		; End mark
  2535 00:FCF1: 00 00 00 00  	dw	0,0
  2536                        	
  2537                        RNTDBR
  2538 00:FCF5: 52 01        	db	'R',1
  2539 00:FCF7: 53 00 21 FD  	dw	REGDB,RNDB
  2540                        
  2541 00:FCFB: 00 00        	db	$00,0		; End mark
  2542 00:FCFD: 00 00 00 00  	dw	0,0
  2543                        
  2544                        RNTDPR
  2545 00:FD01: 52 02        	db	'R',2
  2546 00:FD03: 54 00 25 FD  	dw	REGDP,RNDP
  2547                        
  2548 00:FD07: 00 00        	db	$00,0		; End mark
  2549 00:FD09: 00 00 00 00  	dw	0,0
  2550                        
  2551 00:FD0D: 41 00        RNA	db	"A",$00
  2552 00:FD0F: 58 00        RNX	db	"X",$00
  2553 00:FD11: 59 00        RNY	db	"Y",$00
  2554 00:FD13: 53 50 00     RNSP	db	"SP",$00
  2555 00:FD16: 50 43 00     RNPC	db	"PC",$00
  2556 00:FD19: 50 53 52 00  RNPSR	db	"PSR",$00
  2557                        
  2558 00:FD1D: 50 42 52 00  RNPB	db	"PBR",0
  2559 00:FD21: 44 42 52 00  RNDB	db	"DBR",0
  2560 00:FD25: 44 50 52 00  RNDP	db	"DPR",0
  2561                        
  2562 00:FD29: 0D 0A 28 45  emu_msg		db	CR,LF,"(Emulation mode)",0
       00:FD2D: 6D 75 6C 61 
       00:FD31: 74 69 6F 6E 
       00:FD35: 20 6D 6F 64 
       00:FD39: 65 29 00 
  2563 00:FD3C: 0D 0A 28 4E  ntv_msg		db	CR,LF,"(Native mode)",0
       00:FD40: 61 74 69 76 
       00:FD44: 65 20 6D 6F 
       00:FD48: 64 65 29 00 
  2564 00:FD4C: 4E 4D 49 21  NMI_MSG		db	"NMI!",CR,LF,$00
       00:FD50: 0D 0A 00 
  2565 00:FD53: 49 52 51 21  IRQ_MSG		db	"IRQ!",CR,LF,$00
       00:FD57: 0D 0A 00 
  2566 00:FD5A: 42 52 4B 21  BRK_MSG		db	"BRK!",CR,LF,$00
       00:FD5E: 0D 0A 00 
  2567 00:FD61: 49 52 51 2F  IBRK_MSG	db	"IRQ/BRK!",CR,LF,0
       00:FD65: 42 52 4B 21 
       00:FD69: 0D 0A 00 
  2568 00:FD6C: 20 44 65 74  dct_msg		db	" Detect ",0
       00:FD70: 65 63 74 20 
       00:FD74: 00 
  2569 00:FD75: 53 54 4F 50  stpmsg		db	"STOP!(User break)",CR,LF,$00
       00:FD79: 21 28 55 73 
       00:FD7D: 65 72 20 62 
       00:FD81: 72 65 61 6B 
       00:FD85: 29 0D 0A 00 
  2570                        
  2571                        ;;;
  2572                        ;;;	Console Driver
  2573                        ;;;
  2574                        
  2575                        ;CONIN_REQ	EQU	0x01
  2576                        ;CONOUT_REQ	EQU	0x02
  2577                        ;CONST_REQ	EQU	0x03
  2578                        ;STROUT_REQ	equ	$04
  2579                        ;WUP_REQ	equ	$ff
  2580                        ;  ---- request command to PIC
  2581                        ; UREQ_COM = 1 ; CONIN  : return char in UNI_CHR
  2582                        ;          = 2 ; CONOUT : UNI_CHR = output char
  2583                        ;          = 3 ; CONST  : return status in UNI_CHR
  2584                        ;                       : ( 0: no key, 1 : key exist )
  2585                        ;          = 4 ; STROUT : string address = (PTRSAV, PTRSAV_SEG)
  2586                        ;
  2587                        ;UREQ_COM	ds	1	; unimon CONIN/CONOUT request command
  2588                        ;UNI_CHR	ds	1	; charcter (CONIN/CONOUT) or number of strings
  2589                        
  2590                        INIT
  2591                        	; clear Reqest Parameter Block
  2592                        	short_a
+ 2592 00:FD89: E2 20                        sep     #M_FLAG
+ 2592                                        longa   off
  2593 00:FD8B: A9 00        	lda	#0
  2594 00:FD8D: 85 18        	sta	UREQ_COM
  2595 00:FD8F: 85 1A        	sta	CREQ_COM
  2596 00:FD91: 85 23        	sta	bank
  2597 00:FD93: 85 24        	sta	reserve
  2598 00:FD95: 60           	RTS
  2599                        
  2600                        ;
  2601                        ; request CONIN, CONST CONOUT to PIC18F47QXX
  2602                        ;
  2603                        
  2604                        CONIN
  2605                        	short_a			; Make A 8-bits
+ 2605 00:FD96: E2 20                        sep     #M_FLAG
+ 2605                                        longa   off
  2606 00:FD98: A9 01        	lda	#CONIN_REQ
  2607                        
  2608                        wup_pic
  2609 00:FD9A: 85 18        	sta	UREQ_COM
  2610                        ;wait_again
  2611 00:FD9C: CB           	wai			; RDY = 0, wait /IRQ detect
  2612                        
  2613 00:FD9D: A5 19        	lda	UNI_CHR
  2614 00:FD9F: 60           	RTS
  2615                        
  2616                        CONST
  2617                        	short_a			; Make A 8-bits
+ 2617 00:FDA0: E2 20                        sep     #M_FLAG
+ 2617                                        longa   off
  2618 00:FDA2: A9 03        	lda	#CONST_REQ
  2619 00:FDA4: 20 9A FD     	jsr	wup_pic
  2620 00:FDA7: 29 01        	AND	#$01
  2621 00:FDA9: 60           	RTS
  2622                        
  2623                        CONOUT
  2624                        	short_a			; Make A 8-bits
+ 2624 00:FDAA: E2 20                        sep     #M_FLAG
+ 2624                                        longa   off
  2625 00:FDAC: 48           	pha
  2626 00:FDAD: 85 19        	sta	UNI_CHR		; set char
  2627 00:FDAF: A9 02        	lda	#CONOUT_REQ
  2628 00:FDB1: 20 9A FD     	jsr	wup_pic
  2629 00:FDB4: 68           	pla
  2630 00:FDB5: 60           	rts
  2631                        
  2632                        NMI_SIG
  2633                        	short_a			; Make A 8-bits
+ 2633 00:FDB6: E2 20                        sep     #M_FLAG
+ 2633                                        longa   off
  2634 00:FDB8: 48           	pha
  2635 00:FDB9: A9 FF        	lda	#WUP_REQ
  2636 00:FDBB: 20 9A FD     	jsr	wup_pic
  2637 00:FDBE: 68           	pla
  2638 00:FDBF: 60           	rts
  2639                        
  2640                        ;===============================================================================
  2641                        ; Interrupt Handlers message out
  2642                        ;-------------------------------------------------------------------------------
  2643                        prt_nmode
  2644                        	long_a
+ 2644 00:FDC0: C2 20                        rep     #M_FLAG
+ 2644                                        longa   on
  2645 00:FDC2: A9 3C FD     	LDA	#ntv_msg
  2646 00:FDC5: 85 5D        	STA	PT0
  2647 00:FDC7: 80 10        	bra	prt_str
  2648                        
  2649                        prt_emode
  2650                        	long_a
+ 2650 00:FDC9: C2 20                        rep     #M_FLAG
+ 2650                                        longa   on
  2651 00:FDCB: A9 29 FD     	lda	#emu_msg
  2652 00:FDCE: 85 5D        	STA	PT0
  2653 00:FDD0: 80 07        	bra	prt_str
  2654                        
  2655                        prt_dtct
  2656                        	long_a
+ 2656 00:FDD2: C2 20                        rep     #M_FLAG
+ 2656                                        longa   on
  2657 00:FDD4: A9 6C FD     	lda	#dct_msg
  2658 00:FDD7: 85 5D        	STA	PT0
  2659                        prt_str
  2660 00:FDD9: 4C A3 FA     	jmp	STROUT
  2661                        
  2662                        prt_ibkm
  2663                        	long_a
+ 2663 00:FDDC: C2 20                        rep     #M_FLAG
+ 2663                                        longa   on
  2664 00:FDDE: A9 61 FD     	lda	#IBRK_MSG
  2665 00:FDE1: 85 5D        	STA	PT0
  2666 00:FDE3: 80 F4        	bra	prt_str
  2667                        
  2668                        prt_nmim
  2669                        	long_a
+ 2669 00:FDE5: C2 20                        rep     #M_FLAG
+ 2669                                        longa   on
  2670 00:FDE7: A9 4C FD     	lda	#NMI_MSG
  2671 00:FDEA: 85 5D        	STA	PT0
  2672 00:FDEC: 80 EB        	bra	prt_str
  2673                        
  2674                        prt_irqm
  2675                        	long_a
+ 2675 00:FDEE: C2 20                        rep     #M_FLAG
+ 2675                                        longa   on
  2676 00:FDF0: A9 53 FD     	lda	#IRQ_MSG
  2677 00:FDF3: 85 5D        	STA	PT0
  2678 00:FDF5: 80 E2        	bra	prt_str
  2679                        ;
  2680                        ; Handle IRQ interrupts in native mode.
  2681                        ;
  2682                        IRQ_N:
  2683                        	long_a
+ 2683 00:FDF7: C2 20                        rep     #M_FLAG
+ 2683                                        longa   on
  2684 00:FDF9: 48           	pha
  2685                        
  2686 00:FDFA: A9 00 EC     	lda	#UNIMON_DP
  2687 00:FDFD: 48           	pha
  2688 00:FDFE: 2B           	pld			; set Direct Page
  2689                        
  2690                        	short_a
+ 2690 00:FDFF: E2 20                        sep     #M_FLAG
+ 2690                                        longa   off
  2691 00:FE01: A9 00        	lda	#UNIMON_DB
  2692 00:FE03: 48           	pha
  2693 00:FE04: AB           	plb			; set DATA BANK
  2694                        
  2695                        	long_ai
+ 2695 00:FE05: C2 30                        rep     #M_FLAG|X_FLAG
+ 2695                                        longa   on
+ 2695                                        longi   on
  2696 00:FE07: 68           	pla			; A
  2697 00:FE08: 85 47        	STA	REGA
  2698 00:FE0A: 8A           	TXA			; X
  2699 00:FE0B: 85 49        	STA	REGX
  2700 00:FE0D: 98           	TYA			; Y
  2701 00:FE0E: 85 4B        	STA	REGY
  2702                        
  2703                        	short_a
+ 2703 00:FE10: E2 20                        sep     #M_FLAG
+ 2703                                        longa   off
  2704 00:FE12: 68           	PLA			; PSR (Pushed by IRQ)
  2705 00:FE13: 85 51        	STA	REGPSR		; save status register
  2706 00:FE15: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2707                        
  2708                        	long_a
+ 2708 00:FE17: C2 20                        rep     #M_FLAG
+ 2708                                        longa   on
  2709 00:FE19: 68           	PLA			; PC (Pushed by IRQ)
  2710 00:FE1A: 85 4F        	STA	REGPC
  2711 00:FE1C: 64 54        	stz	REGDP		; clear DP
  2712                        
  2713                        	short_a
+ 2713 00:FE1E: E2 20                        sep     #M_FLAG
+ 2713                                        longa   off
  2714 00:FE20: 64 52        	stz	REGPB		; clear PB
  2715 00:FE22: 64 53        	stz	REGDB		; clear DB
  2716                        
  2717 00:FE24: BA           	TSX			; get SP
  2718 00:FE25: 86 4D        	STX	REGSP
  2719                        	short_i
+ 2719 00:FE27: E2 10                        sep     #X_FLAG
+ 2719                                        longi   off
  2720                        
  2721 00:FE29: 20 C0 FD     	jsr	prt_nmode	; (Native mode)
  2722 00:FE2C: 20 D2 FD     	jsr	prt_dtct	; Detect 
  2723 00:FE2F: 20 EE FD     	jsr	prt_irqm	; IRQ
  2724                        
  2725 00:FE32: 20 66 F8     	JSR	RDUMP		; dump registers
  2726 00:FE35: 4C AA ED     	JMP	WSTART
  2727                        
  2728                        ;-----------------------------------------
  2729                        ; Handle BRK interrupts in native mode.
  2730                        ;-----------------------------------------
  2731                        ;		| SP
  2732                        ;---------------+----
  2733                        ; Y	16bit	| +1
  2734                        ; X	16bit	| +3
  2735                        ; DBR	8bit	| +5
  2736                        ; DPR	16bit	| +6
  2737                        ; A	16bit	| +8
  2738                        ; PSR	8bit	| +10
  2739                        ; PC	16bit	| +11(L), +12(H)
  2740                        ; PBR	8bit	| +13
  2741                        
  2742                        BRK_N:
  2743                        	long_ai
+ 2743 00:FE38: C2 30                        rep     #M_FLAG|X_FLAG
+ 2743                                        longa   on
+ 2743                                        longi   on
  2744 00:FE3A: 48           	pha
  2745 00:FE3B: 0B           	phd			; push DPR
  2746 00:FE3C: 8B           	phb			; push DBR
  2747                        
  2748 00:FE3D: A9 00 EC     	lda	#UNIMON_DP
  2749 00:FE40: 48           	pha
  2750 00:FE41: 2B           	pld			; set Direct Page
  2751                        
  2752                        	short_a
+ 2752 00:FE42: E2 20                        sep     #M_FLAG
+ 2752                                        longa   off
  2753 00:FE44: A9 00        	lda	#UNIMON_DB
  2754 00:FE46: 48           	pha
  2755 00:FE47: AB           	plb			; set DATA BANK
  2756                        
  2757 00:FE48: DA           	phx
  2758 00:FE49: 5A           	phy
  2759                        
  2760                        	short_i
+ 2760 00:FE4A: E2 10                        sep     #X_FLAG
+ 2760                                        longi   off
  2761                        	
  2762                        ; check bios call
  2763                        ;
  2764                        	long_a
+ 2764 00:FE4C: C2 20                        rep     #M_FLAG
+ 2764                                        longa   on
  2765 00:FE4E: A3 0B        	lda	11,s		; get PC
  2766 00:FE50: 3A           	dec	a		; get address of #n : (BRK '#n')
  2767 00:FE51: 85 64        	sta	bop_adr
  2768                        	short_a
+ 2768 00:FE53: E2 20                        sep     #M_FLAG
+ 2768                                        longa   off
  2769 00:FE55: A3 0D        	lda	13,s		; get PBR
  2770 00:FE57: 85 66        	sta	bop_bnk
  2771 00:FE59: A7 64        	lda	[bop_adr]	; get #n
  2772                        
  2773 00:FE5B: 85 67        	sta	bcode
  2774                        
  2775 00:FE5D: C9 FF        	cmp	#$ff
  2776 00:FE5F: D0 03        	bne	bk_n
  2777 00:FE61: 4C 7B ED     	jmp	wup
  2778                        bk_n
  2779 00:FE64: C9 00        	cmp	#0
  2780 00:FE66: F0 36        	beq	go_brk
  2781 00:FE68: C9 05        	cmp	#5
  2782 00:FE6A: 10 32        	bpl	go_brk
  2783                        
  2784 00:FE6C: 20 96 FE     	jsr	bios_call
  2785 00:FE6F: 83 08        	sta	8,s		; save return code to A reg
  2786                        
  2787                        	long_ai
+ 2787 00:FE71: C2 30                        rep     #M_FLAG|X_FLAG
+ 2787                                        longa   on
+ 2787                                        longi   on
  2788 00:FE73: 7A           	ply
  2789 00:FE74: FA           	plx
  2790 00:FE75: AB           	plb
  2791 00:FE76: 2B           	pld
  2792 00:FE77: 68           	pla
  2793 00:FE78: 40           	rti
  2794                        
  2795                        	longa off
  2796                        	longi off
  2797                        
  2798                        creq_p
  2799 00:FE79: 96 FD        	dw	CONIN
  2800 00:FE7B: AA FD        	dw	CONOUT
  2801 00:FE7D: A0 FD        	dw	CONST
  2802 00:FE7F: 81 FE        	dw	str_prt
  2803                        
  2804                        str_prt
  2805 00:FE81: 85 5D        	STA	PT0
  2806 00:FE83: 84 5E        	STY	PT0+1
  2807 00:FE85: A3 07        	lda	7,s		; 5 + 2(jsr bios_call)
  2808 00:FE87: 85 5F        	STA	PT0_DB
  2809                        
  2810 00:FE89: A0 00        	LDY	#0
  2811                        dtr_prt1
  2812 00:FE8B: B7 5D        	LDA	[PT0],Y
  2813 00:FE8D: F0 06        	BEQ	dtr_prt2
  2814 00:FE8F: 20 AA FD     	JSR	CONOUT
  2815 00:FE92: C8           	INY
  2816 00:FE93: 80 F6        	bra	dtr_prt1
  2817                        dtr_prt2
  2818 00:FE95: 60           	RTS
  2819                        
  2820                        bios_call
  2821 00:FE96: 3A           	dec	A
  2822 00:FE97: 0A           	asl	A		; A = A * 2
  2823 00:FE98: AA           	tax
  2824 00:FE99: A3 0A        	lda	10,s		; get A [stack = 8 + 2(jsr bios_call)]
  2825 00:FE9B: 7C 79 FE     	jmp	(creq_p,x)
  2826                        
  2827                        	; BRK instruction
  2828                        go_brk
  2829                        	long_a
+ 2829 00:FE9E: C2 20                        rep     #M_FLAG
+ 2829                                        longa   on
  2830                        
  2831 00:FEA0: 68           	pla		; get Y
  2832 00:FEA1: 85 4B        	STA	REGY
  2833 00:FEA3: 68           	pla		; get X
  2834 00:FEA4: 85 49        	STA	REGX
  2835                        
  2836                        	short_a
+ 2836 00:FEA6: E2 20                        sep     #M_FLAG
+ 2836                                        longa   off
  2837 00:FEA8: 68           	pla			; get user DBR
  2838 00:FEA9: 85 53        	sta	REGDB		; save Data Bank register
  2839                        
  2840                        	long_a
+ 2840 00:FEAB: C2 20                        rep     #M_FLAG
+ 2840                                        longa   on
  2841 00:FEAD: 68           	pla			; get user DPR
  2842 00:FEAE: 85 54        	sta	REGDP		; save Direct Page register
  2843 00:FEB0: 68           	pla			; A
  2844 00:FEB1: 85 47        	STA	REGA
  2845                        
  2846                        	short_a
+ 2846 00:FEB3: E2 20                        sep     #M_FLAG
+ 2846                                        longa   off
  2847 00:FEB5: 68           	PLA			; PSR (Pushed by BRK)
  2848 00:FEB6: 85 51        	STA	REGPSR		; save status register
  2849 00:FEB8: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2850                        
  2851                        	long_ai
+ 2851 00:FEBA: C2 30                        rep     #M_FLAG|X_FLAG
+ 2851                                        longa   on
+ 2851                                        longi   on
  2852 00:FEBC: 68           	PLA			; PC (Pushed by BRK)
  2853 00:FEBD: 85 56        	sta	ILL_PC
  2854 00:FEBF: 3A           	dec	a
  2855 00:FEC0: 3A           	dec	a
  2856 00:FEC1: 85 4F        	STA	REGPC
  2857                        
  2858                        	short_a
+ 2858 00:FEC3: E2 20                        sep     #M_FLAG
+ 2858                                        longa   off
  2859 00:FEC5: 68           	pla			; PB register
  2860 00:FEC6: 85 52        	sta	REGPB
  2861                        	
  2862 00:FEC8: BA           	TSX			; get SP
  2863 00:FEC9: 86 4D        	STX	REGSP
  2864                        	short_i
+ 2864 00:FECB: E2 10                        sep     #X_FLAG
+ 2864                                        longi   off
  2865                        
  2866                        	; check break point
  2867 00:FECD: A5 70        	lda	stp_flg
  2868 00:FECF: F0 22        	beq	ill_stop
  2869                        
  2870                        	; restore original code
  2871 00:FED1: 64 70        	stz	stp_flg
  2872                        	long_a
+ 2872 00:FED3: C2 20                        rep     #M_FLAG
+ 2872                                        longa   on
  2873 00:FED5: A5 71        	lda	sav_dat		; get save data
  2874 00:FED7: 87 73        	sta	[sv_adr]	; restore original code
  2875                        
  2876 00:FED9: A5 73        	lda	sv_adr
  2877 00:FEDB: C5 4F        	cmp	REGPC
  2878 00:FEDD: D0 14        	bne	ill_stop
  2879                        
  2880                        	short_a
+ 2880 00:FEDF: E2 20                        sep     #M_FLAG
+ 2880                                        longa   off
  2881 00:FEE1: A5 75        	lda	sv_bnk
  2882 00:FEE3: C5 52        	cmp	REGPB
  2883 00:FEE5: D0 0C        	bne	ill_stop
  2884                        	
  2885 00:FEE7: 20 C0 FD     	jsr	prt_nmode	; (Native mode)
  2886                        	long_a
+ 2886 00:FEEA: C2 20                        rep     #M_FLAG
+ 2886                                        longa   on
  2887 00:FEEC: A9 75 FD     	lda	#stpmsg
  2888 00:FEEF: 85 5D        	STA	PT0
  2889 00:FEF1: 80 13        	bra	b_outmsg
  2890                        
  2891                        ill_stop
  2892                        	; re-adjust PC
  2893                        	long_a
+ 2893 00:FEF3: C2 20                        rep     #M_FLAG
+ 2893                                        longa   on
  2894 00:FEF5: A5 56        	lda	ILL_PC
  2895 00:FEF7: 85 4F        	sta	REGPC
  2896                        	
  2897 00:FEF9: 20 C0 FD     	jsr	prt_nmode	; (Native mode)
  2898 00:FEFC: 20 D2 FD     	jsr	prt_dtct	; Detect 
  2899                        	long_a
+ 2899 00:FEFF: C2 20                        rep     #M_FLAG
+ 2899                                        longa   on
  2900 00:FF01: A9 5A FD     	lda	#BRK_MSG
  2901 00:FF04: 85 5D        	STA	PT0
  2902                        b_outmsg
  2903 00:FF06: 20 A3 FA     	JSR	STROUT
  2904 00:FF09: 20 66 F8     	JSR	RDUMP
  2905 00:FF0C: 4C AA ED     	JMP	WSTART
  2906                        
  2907                        ;------------------------------------------
  2908                        ; Handle NMI interrupts in emulation mode.
  2909                        ;------------------------------------------
  2910                        NMI_E:
  2911                        	native		; set native mode
+ 2911 00:FF0F: 18                           clc
+ 2911 00:FF10: FB                           xce
  2912                        	long_a
+ 2912 00:FF11: C2 20                        rep     #M_FLAG
+ 2912                                        longa   on
  2913 00:FF13: 48           	pha
  2914                        
  2915 00:FF14: A9 00 EC     	lda	#UNIMON_DP
  2916 00:FF17: 48           	pha
  2917 00:FF18: 2B           	pld			; set Direct Page
  2918                        
  2919                        	short_a
+ 2919 00:FF19: E2 20                        sep     #M_FLAG
+ 2919                                        longa   off
  2920 00:FF1B: A9 00        	lda	#UNIMON_DB
  2921 00:FF1D: 48           	pha
  2922 00:FF1E: AB           	plb			; set DATA BANK
  2923                        
  2924                        	long_ai
+ 2924 00:FF1F: C2 30                        rep     #M_FLAG|X_FLAG
+ 2924                                        longa   on
+ 2924                                        longi   on
  2925 00:FF21: 68           	pla			; A
  2926 00:FF22: 85 47        	STA	REGA
  2927 00:FF24: 8A           	TXA			; X
  2928 00:FF25: 85 49        	STA	REGX
  2929 00:FF27: 98           	TYA			; Y
  2930 00:FF28: 85 4B        	STA	REGY
  2931                        
  2932                        	short_a
+ 2932 00:FF2A: E2 20                        sep     #M_FLAG
+ 2932                                        longa   off
  2933 00:FF2C: 68           	PLA			; PSR (Pushed by NMI)
  2934 00:FF2D: 85 51        	STA	REGPSR		; save status register
  2935 00:FF2F: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2936                        
  2937                        	long_a
+ 2937 00:FF31: C2 20                        rep     #M_FLAG
+ 2937                                        longa   on
  2938 00:FF33: 68           	PLA			; PC (Pushed by NMI)
  2939 00:FF34: 85 4F        	STA	REGPC
  2940 00:FF36: 64 54        	stz	REGDP		; clear DP
  2941                        
  2942                        	short_a
+ 2942 00:FF38: E2 20                        sep     #M_FLAG
+ 2942                                        longa   off
  2943 00:FF3A: 64 52        	stz	REGPB		; clear PB
  2944 00:FF3C: 64 53        	stz	REGDB		; clear DB
  2945                        
  2946 00:FF3E: BA           	TSX			; get SP
  2947 00:FF3F: 86 4D        	STX	REGSP
  2948                        	short_i
+ 2948 00:FF41: E2 10                        sep     #X_FLAG
+ 2948                                        longi   off
  2949                        
  2950 00:FF43: 20 C9 FD     	jsr	prt_emode	; (Emulation mode)
  2951 00:FF46: 20 D2 FD     	jsr	prt_dtct	; Detect 
  2952 00:FF49: 20 E5 FD     	jsr	prt_nmim	; NMI
  2953                        
  2954 00:FF4C: 20 66 F8     	JSR	RDUMP		; dump registers
  2955 00:FF4F: 4C AA ED     	JMP	WSTART
  2956                        
  2957                        ;------------------------------------------
  2958                        ; Handle NMI interrupts in native mode.
  2959                        ;------------------------------------------
  2960                        NMI_N:
  2961                        	long_a
+ 2961 00:FF52: C2 20                        rep     #M_FLAG
+ 2961                                        longa   on
  2962 00:FF54: 48           	pha
  2963 00:FF55: 0B           	phd			; push DPR
  2964 00:FF56: 8B           	phb			; push DBR
  2965                        
  2966 00:FF57: A9 00 EC     	lda	#UNIMON_DP
  2967 00:FF5A: 48           	pha
  2968 00:FF5B: 2B           	pld			; set Direct Page
  2969                        
  2970                        	short_a
+ 2970 00:FF5C: E2 20                        sep     #M_FLAG
+ 2970                                        longa   off
  2971 00:FF5E: A9 00        	lda	#UNIMON_DB
  2972 00:FF60: 48           	pha
  2973 00:FF61: AB           	plb			; set DATA BANK
  2974                        
  2975 00:FF62: 68           	pla			; get user DBR
  2976 00:FF63: 85 53        	sta	REGDB		; save Data Bank register
  2977                        
  2978                        	long_ai
+ 2978 00:FF65: C2 30                        rep     #M_FLAG|X_FLAG
+ 2978                                        longa   on
+ 2978                                        longi   on
  2979 00:FF67: 68           	pla			; get user DPR
  2980 00:FF68: 85 54        	sta	REGDP		; save Direct Page register(L)
  2981                        
  2982 00:FF6A: 68           	pla			; A
  2983 00:FF6B: 85 47        	STA	REGA
  2984 00:FF6D: 8A           	TXA			; X
  2985 00:FF6E: 85 49        	STA	REGX
  2986 00:FF70: 98           	TYA			; Y
  2987 00:FF71: 85 4B        	STA	REGY
  2988                        
  2989                        	short_a
+ 2989 00:FF73: E2 20                        sep     #M_FLAG
+ 2989                                        longa   off
  2990 00:FF75: 68           	PLA			; PSR (Pushed by NMI)
  2991 00:FF76: 85 51        	STA	REGPSR		; save status register
  2992 00:FF78: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2993                        
  2994                        	long_a
+ 2994 00:FF7A: C2 20                        rep     #M_FLAG
+ 2994                                        longa   on
  2995 00:FF7C: 68           	PLA			; PC (Pushed by NMI)
  2996 00:FF7D: 85 4F        	STA	REGPC
  2997                        
  2998                        	short_a
+ 2998 00:FF7F: E2 20                        sep     #M_FLAG
+ 2998                                        longa   off
  2999 00:FF81: 68           	pla			; PB register
  3000 00:FF82: 85 52        	sta	REGPB
  3001                        	
  3002 00:FF84: BA           	TSX			; get SP
  3003 00:FF85: 86 4D        	STX	REGSP
  3004                        	short_i
+ 3004 00:FF87: E2 10                        sep     #X_FLAG
+ 3004                                        longi   off
  3005                        
  3006 00:FF89: A9 FF        	lda	#$ff		; NMI signal
  3007 00:FF8B: 85 19        	sta	UNI_CHR
  3008 00:FF8D: 20 B6 FD     	jsr	NMI_SIG
  3009                        
  3010 00:FF90: 4C D1 F5     	jmp	G0
  3011                        
  3012                        
  3013                        IRQBRK
  3014                        	native		; set native mode
+ 3014 00:FF93: 18                           clc
+ 3014 00:FF94: FB                           xce
  3015                        	long_a
+ 3015 00:FF95: C2 20                        rep     #M_FLAG
+ 3015                                        longa   on
  3016 00:FF97: 48           	pha
  3017                        
  3018 00:FF98: A9 00 EC     	lda	#UNIMON_DP
  3019 00:FF9B: 48           	pha
  3020 00:FF9C: 2B           	pld			; set Direct Page
  3021                        
  3022                        	short_a
+ 3022 00:FF9D: E2 20                        sep     #M_FLAG
+ 3022                                        longa   off
  3023 00:FF9F: A9 00        	lda	#UNIMON_DB
  3024 00:FFA1: 48           	pha
  3025 00:FFA2: AB           	plb			; set DATA BANK
  3026                        
  3027                        	long_ai
+ 3027 00:FFA3: C2 30                        rep     #M_FLAG|X_FLAG
+ 3027                                        longa   on
+ 3027                                        longi   on
  3028 00:FFA5: 68           	pla			; A
  3029 00:FFA6: 85 47        	STA	REGA
  3030 00:FFA8: 8A           	TXA			; X
  3031 00:FFA9: 85 49        	STA	REGX
  3032 00:FFAB: 98           	TYA			; Y
  3033 00:FFAC: 85 4B        	STA	REGY
  3034                        
  3035                        	short_a
+ 3035 00:FFAE: E2 20                        sep     #M_FLAG
+ 3035                                        longa   off
  3036 00:FFB0: 68           	PLA			; PSR (Pushed by IRQ/BRK)
  3037 00:FFB1: 85 51        	STA	REGPSR		; save status register
  3038 00:FFB3: 85 69        	STA	FLAGS		; save disassemble EmPCR
  3039                        
  3040                        	long_a
+ 3040 00:FFB5: C2 20                        rep     #M_FLAG
+ 3040                                        longa   on
  3041 00:FFB7: 68           	PLA			; PC (Pushed by IRQ/BRK)
  3042 00:FFB8: 85 4F        	STA	REGPC
  3043 00:FFBA: 64 54        	stz	REGDP		; clear DP
  3044                        
  3045                        	short_a
+ 3045 00:FFBC: E2 20                        sep     #M_FLAG
+ 3045                                        longa   off
  3046 00:FFBE: 64 52        	stz	REGPB		; clear PB
  3047 00:FFC0: 64 53        	stz	REGDB		; clear DB
  3048                        
  3049 00:FFC2: BA           	TSX			; get SP
  3050 00:FFC3: 86 4D        	STX	REGSP
  3051                        	short_i
+ 3051 00:FFC5: E2 10                        sep     #X_FLAG
+ 3051                                        longi   off
  3052                        
  3053 00:FFC7: 20 C9 FD     	jsr	prt_emode	; (Emulation mode)
  3054 00:FFCA: 20 D2 FD     	jsr	prt_dtct	; Detect 
  3055 00:FFCD: 20 DC FD     	jsr	prt_ibkm	; IRQ/BRK
  3056 00:FFD0: 20 66 F8     	JSR	RDUMP		; dump registers
  3057 00:FFD3: 4C AA ED     	JMP	WSTART
  3058                        
  3059                        ; COP and ABORT interrupts are not handled.
  3060                        
  3061                        COP_E:
  3062                        COP_N:
  3063                        ABORT_E:
  3064                        ABORT_N:
  3065 00:FFD6: DB           	stp
  3066                        
  3067                        	;;
  3068                        	;; Vector area
  3069                        	;; 
  3070                        
  3071                        ;Vectors         section offset $ffe0
  3072                        
  3073                        	org	$ffe0
  3074                        
  3075 00:FFE0:              	ds	4		; Reserved
  3076 00:FFE4: D6 FF        	dw	COP_N		; $FFE4 - COP(816)
  3077 00:FFE6: 38 FE        	dw	BRK_N		; $FFE6 - BRK(816)
  3078 00:FFE8: D6 FF        	dw	ABORT_N		; $FFE8 - ABORT(816)
  3079 00:FFEA: 52 FF        	dw	NMI_N		; $FFEA - NMI(816)
  3080 00:FFEC:              	ds	2		; Reserved
  3081 00:FFEE: F7 FD        	dw	IRQ_N		; $FFEE - IRQ(816)
  3082                        
  3083 00:FFF0:              	ds	4
  3084 00:FFF4: D6 FF        	dw	COP_E		; $FFF4 - COP(C02)
  3085 00:FFF6:              	ds	2		; $Reserved
  3086 00:FFF8: D6 FF        	dw	ABORT_E		; $FFF8 - ABORT(C02)
  3087                        
  3088 00:FFFA: 0F FF        	dw	NMI_E		; NMI
  3089 00:FFFC: 00 ED        	dw	CSTART		; RESET
  3090 00:FFFE: 93 FF        	dw	IRQBRK		; IRQ/BRK
  3091                        
  3092                        	END


      Lines assembled: 3561
      Errors: 0
