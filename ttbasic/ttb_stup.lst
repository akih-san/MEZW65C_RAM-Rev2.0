ca65 V2.19 - Git 03d824e
Main file   : .\ttb_stup.s
Current file: .\ttb_stup.s

000000r 1               	.setcpu		"65C02"
000000r 1               ;	.smart		on
000000r 1               ;	.autoimport	on
000000r 1               ;	.case		on
000000r 1               ;	.debuginfo	off
000000r 1               ;	.importzp	sp, sreg, regsave, regbank
000000r 1               ;	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               ;	.macpack	longbranch
000000r 1               ;	.forceimport	__STARTUP__
000000r 1               
000000r 1               ;;;
000000r 1               ;;;	TOYOSHIKI TinyBASIC V1.0
000000r 1               ;;;	(C)2015 Tetsuya Suzuki
000000r 1               ;;;	https://github.com/vintagechips/ttbasic_lin
000000r 1               ;;;
000000r 1               ;;; Ported for MEZW65C-RAM by Akihito Honda.
000000r 1               ;;; 2024.10
000000r 1               ;;;
000000r 1               ;;; Thanks all.
000000r 1               ;;;
000000r 1               
000000r 1               
000000r 1               ;;;
000000r 1               ;;; File header template (BIOS CALL version)
000000r 1               ;;;
000000r 1               
000000r 1               PRG_B	=	$B000
000000r 1               WORK_B	=	$400
000000r 1               WORK_END	=	$E8FF
000000r 1               
000000r 1               USER_SP	=	$BF
000000r 1               
000000r 1               ZERO_B	=	$00
000000r 1               
000000r 1               ;-----------------------------------------------------
000000r 1               ;ZERO page
000000r 1               ; NOTE
000000r 1               ;  Since ZERO page is shared with the monitor program,
000000r 1               ;  you must use a free area.
000000r 1               ;  See the monitor program.
000000r 1               ;-----------------------------------------------------
000000r 1               
000000r 1               ;	.page0
000000r 1               ;	ORG	ZERO_B
000000r 1               
000000r 1               ;--------------------------------------
000000r 1               ; Data area
000000r 1               ;--------------------------------------
000000r 1               	.export		_c_kbhit
000000r 1               	.export		_c_getch
000000r 1               	.export		_c_putch
000000r 1               	.export		_srand
000000r 1               	.export		_rand
000000r 1               	.export		COLD_START
000000r 1               	.export		_warm_boot
000000r 1               	.export		MEZW65_FILE_HEADER
000000r 1               	.import		_warm_start
000000r 1               	.import		_main
000000r 1               	.import		_error
000000r 1               	.import		_err
000000r 1               	.import		_newline
000000r 1               
000000r 1               	.import		__FILETOP__
000000r 1               	.import		_startup
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1  00 00        seed:	.res	2, $00
000002r 1               
000002r 1               
000002r 1               .segment	"RODATA"
000000r 1               
000000r 1               MEZW65_FILE_HEADER:
000000r 1               ;--------- MEZW65C_RAM file header --------------------------
000000r 1  00           	.byte	0		; program bank:W65C816, 0:W65C02
000001r 1               ;	.word	COLD_START
000001r 1  rr rr        	.word	_startup
000003r 1  00           	.byte	0		; data bank:W65C816, 0:W65C02
000004r 1  rr rr        	.word	_warm_boot
000006r 1               
000006r 1  00 00        	.word	0		; reserve
000008r 1               
000008r 1  4D 45 5A 57  mezID:	.byte	"MEZW65C",0	; Unique ID
00000Cr 1  36 35 43 00  
000010r 1               
000010r 1               start_p:	;file load address
000010r 1  rr rr        	.word	__FILETOP__	; load address
000012r 1  00           	.byte	0		; reserve
000013r 1  00           	.byte	0		; reserve
000014r 1               
000014r 1               	; define Common memory address
000014r 1  00 00        PIC_IF:	.word	0	; reserve
000016r 1  00 00        	.word	0	; reserve
000018r 1               
000018r 1  00           SW_816:	.byte	0	; 0 : W65C02
000019r 1               			; 1 : W65C816 native mode
000019r 1               			; 2 : works in both modes
000019r 1  00           irq_sw:	.byte	0	; 0 : no use IRQ console I/O
00001Ar 1               			; 1 : use IRQ timer interrupt driven console I/O
00001Ar 1  00 00        reg_tp:	.word	0	; monitor reserve (register save pointer)
00001Cr 1  00 00        reg_ts:	.word	0	; monitor reserve (register table size)
00001Er 1  00           nmi_sw:	.byte	0	; 0 : No NMI support, 1: NMI support
00001Fr 1  01           bios_sw:	.byte	1	; 0 : standalone program
000020r 1               			; 1 : program call bios command
000020r 1               			; 2 : monitor program (.SYS)
000020r 1               ;--------- MEZW65C_RAM file header --------------------------
000020r 1               ;;;     Console Driver
000020r 1               ;;;
000020r 1               CONIN_NO	=	1
000020r 1               CONOUT_NO	=	2
000020r 1               CONST_NO	=	3
000020r 1               PRG_END		=	$FF
000020r 1               
000020r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_c_getch: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  00 01        	BRK	CONIN_NO
000002r 1  60           	rts
000003r 1               .endproc
000003r 1               
000003r 1               .segment	"CODE"
000003r 1               
000003r 1               .proc	_c_kbhit: near
000003r 1               
000003r 1               .segment	"CODE"
000003r 1               
000003r 1  00 03        	BRK	CONST_NO
000005r 1  60           	rts
000006r 1               .endproc
000006r 1               
000006r 1               ;input A : char
000006r 1               .segment	"CODE"
000006r 1               
000006r 1               .proc	_c_putch: near
000006r 1               
000006r 1               .segment	"CODE"
000006r 1               
000006r 1  00 02        	BRK	CONOUT_NO
000008r 1  60           	rts
000009r 1               .endproc
000009r 1               
000009r 1               .segment	"CODE"
000009r 1               
000009r 1               .proc	_rand: near
000009r 1               
000009r 1               .segment	"CODE"
000009r 1               
000009r 1  AD rr rr     	lda	seed+1
00000Cr 1  49 96        	eor	#$96
00000Er 1  AA           	tax
00000Fr 1  AD rr rr     	lda	seed
000012r 1  49 30        	eor	#$30
000014r 1  E5 53        	sbc	$53
000016r 1  8D rr rr     	sta	seed
000019r 1  8A           	txa
00001Ar 1  E9 65        	sbc	#$65
00001Cr 1  8D rr rr     	sta	seed+1
00001Fr 1  0E rr rr     	asl	seed+1
000022r 1  AD rr rr     	lda	seed+1
000025r 1  2E rr rr     	rol	seed
000028r 1  69 00        	adc	#0
00002Ar 1  8D rr rr     	sta	seed+1
00002Dr 1  60           	rts
00002Er 1               .endproc
00002Er 1               
00002Er 1               ; X:A 16bit
00002Er 1               ;
00002Er 1               .segment	"CODE"
00002Er 1               
00002Er 1               .proc	_srand: near
00002Er 1               
00002Er 1               .segment	"CODE"
00002Er 1               
00002Er 1  8D rr rr     	sta	seed
000031r 1  8E rr rr     	stx	seed+1
000034r 1  60           	rts
000035r 1               .endproc
000035r 1               
000035r 1               .segment	"CODE"
000035r 1               
000035r 1               .proc	_warm_boot: near
000035r 1               
000035r 1               .segment	"CODE"
000035r 1               
000035r 1  A2 BF        	ldx	#USER_SP
000037r 1  9A           	txs
000038r 1  A9 00        	lda	#0
00003Ar 1  8D rr rr     	sta	_err
00003Dr 1  20 rr rr     	jsr	_error
000040r 1  20 rr rr     	jsr	_newline
000043r 1  20 rr rr     	jsr	_warm_start
000046r 1  00 FF        	BRK	PRG_END
000048r 1               end_prg1:
000048r 1  80 FE        	bra	end_prg1
00004Ar 1               
00004Ar 1               .endproc
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1               .proc	COLD_START: near
00004Ar 1               
00004Ar 1               .segment	"CODE"
00004Ar 1               
00004Ar 1  A2 BF        	ldx	#USER_SP
00004Cr 1  9A           	txs
00004Dr 1  20 rr rr     	jsr	_main
000050r 1               
000050r 1               ; command SYSTEM then ttbasic fin
000050r 1               
000050r 1  00 FF        	BRK	PRG_END
000052r 1               end_prg:
000052r 1  80 FE        	bra	end_prg
000054r 1               
000054r 1               .endproc
000054r 1               
