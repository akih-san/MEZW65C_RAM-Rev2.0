     1                        ;;;
     2                        ;;; Universal Monitor 6502 Copyright (C) 2019 Haruo Asano
     3                        ;;; https://electrelic.com/electrelic/node/1317
     4                        ;;;
     5                        ;;; -- original disassemble sorce code --
     6                        ;;;-------------------------------------------------------------------------------
     7                        ;:; https://github.com/andrew-jacobs/w65c816sxb-hacker
     8                        ;;;
     9                        ;;;   A program for Hacking your W65C265SXB or W65C816SXB
    10                        ;;;   Copyright (C),2015-2018 Andrew Jacobs
    11                        ;;;
    12                        ;;;   All rights reserved.
    13                        ;;;
    14                        ;;;   This work is made available under the terms of the Creative Commons
    15                        ;;;   Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    16                        ;;;   following URL to see the details.
    17                        ;;;
    18                        ;;; http://creativecommons.org/licenses/by-nc-sa/4.0/
    19                        ;;;-------------------------------------------------------------------------------
    20                        ;;;
    21                        ;;; This program is based on Universal Monitor 6502
    22                        ;;; Programed by Akihito Honda. 2024.10
    23                        ;;;
    24                        ;;; Thanks all.
    25                        ;;;
    26                        
    27                        	pl	0
    28                        	pw      132
    29                        	chip    65816
    30                        ;                inclist on
    31                        ;;;
    32                        ;;; Universal Monitor W65C186
    33                        ;;;
    34                        	include "w65c816.inc"
    35                        
    36                        ;;;
    37                        ;;; Memory
    38                        ;;;
    39                        
    40             0000ED00   PRG_B	EQU	$ED00
    41             00000000   UNIMON_DB	equ	0
    42             0000EC00   UNIMON_DP	equ	PRG_B-256	; $EC00
    43             0000EBFF   STACK	EQU	UNIMON_DP-1		; $EBFF
    44             00000200   USER_M	equ	$200
    45             000001FF   USER_S	equ	USER_M-1		; $01FF
    46                        
    47             0000FF80   ENTRY	EQU	$FF80		; Entry point
    48                        
    49             00000018   ZERO_B	EQU	$0018		; Must fit in ZERO page
    50                        
    51                        
    52             00000010   BUFLEN	EQU	16		; Buffer length ( 16 or above )
    53             00000000   cpu_id	equ	$00		; memory address $0000 is written CPU ID by PIC
    54                        
    55                        ; PIC function code
    56                        
    57             00000001   CONIN_REQ	EQU	$01
    58             00000002   CONOUT_REQ	EQU	$02
    59             00000003   CONST_REQ	EQU	$03
    60             00000004   STROUT_REQ	equ	$04
    61             000000FF   WUP_REQ		equ	$ff
    62                        
    63                        ;;; Constants
    64             00000000   NULL	EQU	$00
    65             00000001   SOH	equ     $01
    66             00000004   EOT	equ     $04
    67             00000006   ACK	equ     $06
    68             00000007   BEL	equ     $07
    69             00000008   BS	equ     $08
    70             00000009   TAB	equ		$09
    71             0000000A   LF	equ     $0a
    72             0000000D   CR	equ     $0d
    73             00000015   NAK	equ     $15
    74             00000018   CAN	equ     $18
    75             0000001B   ESC	equ     $1b
    76             0000007F   DEL	equ     $7f
    77                        
    78                        ;--------------------------------------
    79                        ;ZERO page
    80                        ;--------------------------------------
    81                        	;;
    82                        	;; Work Area
    83                        	;;
    84                        
    85                        	.page0
    86                        	ORG	ZERO_B
    87                        
    88                        ; PIC18F47QXX I/F
    89 00:0018:              UREQ_COM	ds	1	; unimon CONIN/CONOUT request command
    90 00:0019:              UNI_CHR		ds	1	; charcter (CONIN/CONOUT) or number of strings
    91 00:001A:              CREQ_COM	ds	1	; unimon CONIN/CONOUT request command
    92 00:001B:              CBI_CHR		ds	1	; charcter (CONIN/CONOUT) or number of strings
    93 00:001C:              disk_drive	ds	1	;
    94 00:001D:              disk_track	ds	2	;
    95 00:001F:              disk_sector	ds	2	;
    96 00:0021:              data_adr	ds	2	;
    97 00:0023:              bank		ds	1	;
    98 00:0024:              reserve		ds	1	;
    99 00:0025:              irq_tgl		ds	1
   100 00:0026:              ZCIN_BP		ds	2	; Indirect Index conin buffer pointer
   101 00:0028:              ZCOUT_BP	ds	2	; Indirect Index conout buffer pointer
   102                        
   103 00:002A:              INBUF	ds	BUFLEN		; Line input buffer
   104 00:003A:              arg1st		ds	1
   105 00:003B:              arg2nd		ds	2
   106 00:003D:              arg3rd		ds	2
   107 00:003F:              argtype		ds	1
   108                        
   109                        ; argtype pattern	123
   110                        ;0  no parameter	000
   111                        ;4 xx:			100
   112                        ;6 xx:xxxx		110
   113                        ;7 xx:xxxx,xxxx		111
   114                        ;5 xx:,xxxx		101
   115                        ;2 xxxx			010
   116                        ;3 xxxx,xxxx		011
   117                        ;1 ,xxxx		001
   118                        
   119 00:0040:              DSADDR	ds	2		; Dump start address
   120 00:0042:              DEADDR	ds	2		; Dump end address
   121 00:0044:              dumpdb	ds	1		; Dump data bank
   122 00:0045:              dipb	ds	1		; disassemble PB
   123 00:0046:              DSTATE	ds	1		; Dump state
   124 00:0047:              GADDR	ds	2		; Go address
   125 00:0049:              SADDR	ds	2		; Set address
   126 00:004B:              HEXMOD	ds	1		; HEX file mode
   127 00:004C:              RECTYP	ds	1		; Record type
   128                        
   129                        reg_tbls
   130 00:004D:              REGA	ds	2		; Accumulator A
   131 00:004F:              REGX	ds	2		; Index register X
   132 00:0051:              REGY	ds	2		; Index register Y
   133 00:0053:              REGSP	ds	2		; Stack pointer SP
   134 00:0055:              REGPC	ds	2		; Program counter PC
   135 00:0057:              REGPSR	ds	1		; Processor status register PSR
   136 00:0058:              REGPB	ds	1		; Program Bank register
   137 00:0059:              REGDB	ds	1		; Data Bank register
   138 00:005A:              REGDP	ds	2		; Direct Page register
   139                        reg_tble
   140             0000000F   reg_size	equ reg_tble-reg_tbls
   141                        
   142 00:005C:              ILL_PC	ds	2
   143                        
   144 00:005E:              REGSIZ	ds	1		; Register size
   145                        	
   146 00:005F:              DMPPT	ds	2
   147 00:0061:              CKSUM	ds	1		; Checksum
   148 00:0062:              HITMP	ds	1		; Temporary (used in HEXIN)
   149                        
   150 00:0063:              PT0	ds	2		; Generic Pointer 0
   151 00:0065:              PT1	ds	2		; Generic Pointer 1
   152 00:0067:              CNT	ds	1		; Generic Counter
   153                        
   154                        ; disassemble  value
   155 00:0068:              lines	ds	1
   156 00:0069:              FLAGS	ds	1	; Emulated processor flags
   157 00:006A:              ADDR_S	ds	3	; Start address
   158 00:006D:              ADDR_E	ds	3	; End address
   159                        
   160                        ;Go command  value
   161 00:0070:              stp_flg		ds	1
   162 00:0071:              sav_dat		ds	2
   163 00:0073:              sv_adr		ds	2
   164 00:0075:              sv_bnk		ds	1
   165                        
   166                        ;;;
   167                        ;;; Program area
   168                        ;;;	
   169                        	.code
   170                        	ORG	PRG_B
   171                        
   172                        CSTART:
   173                        ;--------- MEZW65C_RAM file header --------------------------
   174 00:ED00: 4C 20 ED     	jmp	COLD_START
   175 00:ED03: 4C 7C ED     	jmp	WSTART
   176                        
   177                        	; uinimon config data
   178                        	;
   179 00:ED06: 00 EC        	dw	UNIMON_DP	; DP
   180                        	; Unique ID
   181 00:ED08: 4D 45 5A 57  mezID:	db	"MEZW65C",0
       00:ED0C: 36 35 43 00 
   182                        
   183                        start_p:	; File load address(program start address)
   184 00:ED10: 00 ED        	dw	PRG_B		; start address(16 bit)
   185 00:ED12: 00           pbr_p	db	0		; program bank
   186 00:ED13: 00           	db	0		; reserve
   187                        	; define Common memory address
   188 00:ED14: 18 EC        PIC_IF:	dw	UNIMON_DP+UREQ_COM	;  Common memory address for PIC (Low)
   189 00:ED16: 00 00        	dw	0		; (high)
   190                        
   191 00:ED18: 01           SW_816:	db	1	; 0 : W65C02
   192                        			; 1 : W65C816 native mode 
   193 00:ED19: 00           irq_sw	db	0	; 0 : no use IRQ console I/O
   194                        			; 1 : use IRQ timer interrupt driven console I/O
   195 00:ED1A: 4D EC        reg_tp	dw	UNIMON_DP+reg_tbls	; register save pointer
   196 00:ED1C: 0F 00        reg_ts	dw	reg_size		; register table size
   197 00:ED1E: 00           nmi_sw	db	0	; 0 : No NMI support, 1: NMI support
   198 00:ED1F: 00           bios_sw	db	0	; 0 : standalone program
   199                        			; 1 : program call bios command
   200                        			; 2 : monitor program (.SYS)
   201                        COLD_START:
   202                        ;--------- MEZW65C_RAM file header --------------------------
   203                        
   204 00:ED20: 78           	sei			; disable interrupt
   205                        	native
+  205 00:ED21: 18                           clc
+  205 00:ED22: FB                           xce
   206                        	short_ai
+  206 00:ED23: E2 30                        sep     #M_FLAG|X_FLAG
+  206                                        longa   off
+  206                                        longi   off
   207                        	long_a
+  207 00:ED25: C2 20                        rep     #M_FLAG
+  207                                        longa   on
   208 00:ED27: A9 FF EB     	LDA	#STACK
   209 00:ED2A: 1B           	TAS			; set sp
   210                        
   211 00:ED2B: A9 00 EC     	lda	#UNIMON_DP
   212 00:ED2E: 48           	pha
   213 00:ED2F: 2B           	pld			; set Direct Page
   214                        
   215                        	short_a
+  215 00:ED30: E2 20                        sep     #M_FLAG
+  215                                        longa   off
   216 00:ED32: A9 00        	lda	#UNIMON_DB
   217 00:ED34: 48           	pha
   218 00:ED35: AB           	plb			; set DATA BANK
   219                        
   220 00:ED36: 20 5D FD     	JSR	INIT
   221                        	long_a
+  221 00:ED39: C2 20                        rep     #M_FLAG
+  221                                        longa   on
   222 00:ED3B: A9 00 00     	LDA	#0
   223 00:ED3E: 85 40        	STA	DSADDR
   224 00:ED40: 85 49        	STA	SADDR
   225 00:ED42: 85 47        	STA	GADDR
   226                        
   227                        	short_a
+  227 00:ED44: E2 20                        sep     #M_FLAG
+  227                                        longa   off
   228 00:ED46: A9 53        	LDA	#'S'
   229 00:ED48: 85 4B        	STA	HEXMOD
   230 00:ED4A: 64 58        	stz	REGPB		; clear Program Bank
   231 00:ED4C: 64 59        	stz	REGDB		; clear data Bank
   232 00:ED4E: 64 70        	stz	stp_flg
   233 00:ED50: 64 44        	stz	dumpdb
   234 00:ED52: 64 45        	stz	dipb
   235 00:ED54: A9 34        	lda	#%00110100
   236 00:ED56: 85 57        	STA	REGPSR
   237 00:ED58: 85 69        	STA	FLAGS		; save disassemble EmPCR
   238                        
   239                        	long_a
+  239 00:ED5A: C2 20                        rep     #M_FLAG
+  239                                        longa   on
   240 00:ED5C: 64 4D        	stz	REGA
   241 00:ED5E: 64 4F        	stz	REGX
   242 00:ED60: 64 51        	stz	REGY
   243 00:ED62: 64 5A        	stz	REGDP		; clear Direct Page
   244                        
   245 00:ED64: A9 FF 01     	LDA	#USER_S
   246 00:ED67: 85 53        	STA	REGSP
   247 00:ED69: A9 00 02     	lda	#USER_M
   248 00:ED6C: 85 55        	STA	REGPC
   249 00:ED6E: 85 6A        	sta	ADDR_S
   250 00:ED70: 64 6D        	stz	ADDR_E
   251                        	
   252                        	;; Opening message
   253                        
   254                        	long_a
+  254 00:ED72: C2 20                        rep     #M_FLAG
+  254                                        longa   on
   255 00:ED74: A9 7D FB     	LDA	#OPNMSG
   256 00:ED77: 85 63        	STA	PT0
   257 00:ED79: 20 79 FA     	JSR	STROUT
   258                        
   259                        WSTART
   260 00:ED7C: 78           	sei			; disable interrupt
   261                        	native
+  261 00:ED7D: 18                           clc
+  261 00:ED7E: FB                           xce
   262                        	short_ai
+  262 00:ED7F: E2 30                        sep     #M_FLAG|X_FLAG
+  262                                        longa   off
+  262                                        longi   off
   263                        	long_a
+  263 00:ED81: C2 20                        rep     #M_FLAG
+  263                                        longa   on
   264 00:ED83: A9 FF EB     	LDA	#STACK
   265 00:ED86: 1B           	TAS			; set sp
   266                        
   267 00:ED87: A9 00 EC     	lda	#UNIMON_DP
   268 00:ED8A: 48           	pha
   269 00:ED8B: 2B           	pld			; set Direct Page
   270                        
   271                        	short_a
+  271 00:ED8C: E2 20                        sep     #M_FLAG
+  271                                        longa   off
   272 00:ED8E: A9 00        	lda	#UNIMON_DB
   273 00:ED90: 48           	pha
   274 00:ED91: AB           	plb			; set DATA BANK
   275                        
   276                        	long_a
+  276 00:ED92: C2 20                        rep     #M_FLAG
+  276                                        longa   on
   277 00:ED94: A9 9B FB     	LDA	#PROMPT
   278 00:ED97: 85 63        	STA	PT0
   279 00:ED99: 20 79 FA     	JSR	STROUT
   280 00:ED9C: 20 D6 FA     	JSR	GETLIN
   281                        
   282 00:ED9F: A2 00        	LDX	#0
   283                        	longa off
   284 00:EDA1: B5 2A        	lda	INBUF,x
   285 00:EDA3: C9 00        	CMP	#0
   286 00:EDA5: F0 D5        	BEQ	WSTART
   287                        
   288 00:EDA7: C9 44        	CMP	#'D'
   289 00:EDA9: D0 03        	BNE	M00
   290 00:EDAB: 4C 6D EE     	JMP	DUMP
   291                        M00
   292 00:EDAE: C9 47        	CMP	#'G'
   293 00:EDB0: D0 03        	BNE	M01
   294 00:EDB2: 4C 6E F5     	JMP	GO
   295                        M01
   296 00:EDB5: C9 53        	CMP	#'S'
   297 00:EDB7: D0 03        	BNE	M02
   298 00:EDB9: 4C D0 F5     	JMP	SETM
   299                        M02
   300 00:EDBC: C9 4C        	CMP	#'L'
   301 00:EDBE: D0 03        	BNE	M03
   302 00:EDC0: 4C 70 F6     	JMP	LOADH
   303                        M03
   304                        	
   305 00:EDC3: C9 52        	CMP	#'R'
   306 00:EDC5: D0 03        	BNE	M05
   307 00:EDC7: 4C 76 F7     	JMP	REG
   308                        M05	
   309 00:EDCA: C9 3F        	CMP	#'?'
   310 00:EDCC: D0 03        	BNE	M06
   311 00:EDCE: 4C 0E F9     	jmp	prt_help
   312                        
   313                        M06
   314 00:EDD1: C9 42        	cmp	#'B'
   315 00:EDD3: D0 1E        	bne	ERR
   316 00:EDD5: E8           	inx
   317 00:EDD6: B5 2A        	LDA	INBUF,X
   318 00:EDD8: 20 36 FB     	JSR	UPPER
   319 00:EDDB: C9 59        	CMP	#'Y'
   320 00:EDDD: D0 14        	bne	ERR
   321 00:EDDF: E8           	inx
   322 00:EDE0: B5 2A        	LDA	INBUF,X
   323 00:EDE2: 20 36 FB     	JSR	UPPER
   324 00:EDE5: C9 45        	CMP	#'E'
   325 00:EDE7: D0 0A        	bne	ERR
   326                        
   327 00:EDE9: A9 01        	lda	#1
   328 00:EDEB: 85 19        	sta	UNI_CHR		; sleep signal
   329 00:EDED: 20 8A FD     	jsr	NMI_SIG
   330 00:EDF0: 4C 7C ED     	JMP	WSTART
   331                        
   332                        ERR
   333                        	long_a
+  333 00:EDF3: C2 20                        rep     #M_FLAG
+  333                                        longa   on
   334 00:EDF5: A9 B8 FB     	LDA	#ERRMSG
   335 00:EDF8: 85 63        	STA	PT0
   336 00:EDFA: 20 79 FA     	JSR	STROUT
   337 00:EDFD: 4C 7C ED     	JMP	WSTART
   338                        
   339                        ; check string hex?
   340                        ;
   341                        ; X : pointer (check from X+1)
   342                        ; return Z=1 : no hex
   343                        ;        Z=0 : hex in CNT
   344                        chk_strhex
   345                        	longi off
   346                        	longa off
   347 00:EE00: E8           	INX
   348 00:EE01: 20 41 FB     	JSR	RDHEX
   349 00:EE04: A5 67        	LDA	CNT
   350 00:EE06: 60           	rts
   351                        
   352                        ;
   353                        ; command line parsing
   354                        ;
   355                        arg_parsing
   356                        	longi off
   357                        	longa off
   358 00:EE07: 64 3F        	stz	argtype		; set type = 0
   359 00:EE09: 20 00 EE     	jsr	chk_strhex
   360 00:EE0C: D0 05        	BNE	PP0		; jmp, if 1st arg. exist
   361                        
   362 00:EE0E: B5 2A        	LDA	INBUF,X
   363 00:EE10: D0 22        	BNE	PP01		; jmp, if remain strings exist
   364                        PP00
   365                        	; no arg.
   366 00:EE12: 60           	rts			; type = 0
   367                        	
   368                        	
   369                        PP0	;; 1st arg. found
   370                        
   371 00:EE13: B5 2A        	LDA	INBUF,X
   372 00:EE15: C9 3A        	cmp	#':'		; check bank
   373 00:EE17: D0 0D        	bne	f_1st_adr
   374                        	
   375 00:EE19: A5 65        	lda	PT1
   376 00:EE1B: 85 3A        	sta	arg1st		; save 1st arg. (8bit)
   377 00:EE1D: A9 04        	lda	#4
   378 00:EE1F: 85 3F        	sta	argtype		; type = 4
   379 00:EE21: 20 00 EE     	jsr	chk_strhex
   380 00:EE24: F0 0E        	beq	PP01
   381                        
   382                        f_1st_adr
   383                        	long_a
+  383 00:EE26: C2 20                        rep     #M_FLAG
+  383                                        longa   on
   384 00:EE28: A5 65        	LDA	PT1
   385 00:EE2A: 85 3B        	sta	arg2nd		; save 2nd arg.
   386                        	short_a
+  386 00:EE2C: E2 20                        sep     #M_FLAG
+  386                                        longa   off
   387 00:EE2E: A5 3F        	lda	argtype
   388 00:EE30: 09 02        	ora	#2		; type = 6 or 2
   389 00:EE32: 85 3F        	sta	argtype
   390                        
   391                        	; check 3rd arg. exist
   392                        
   393                        PP01
   394 00:EE34: B5 2A        	LDA	INBUF,X		; get next string
   395 00:EE36: C9 2C        	CMP	#','
   396 00:EE38: F0 07        	BEQ	PP1		; jmp if 2nd parameter exist
   397 00:EE3A: C9 00        	cmp	#0
   398 00:EE3C: F0 D4        	beq	PP00		; jmp if no 2nd parameter
   399                        
   400                        D_ERR
   401 00:EE3E: 4C F3 ED     	JMP	ERR
   402                        
   403                        PP1	;; check 2nd arg.
   404                        
   405 00:EE41: 20 00 EE     	jsr	chk_strhex
   406 00:EE44: F0 F8        	BEQ	D_ERR
   407 00:EE46: B5 2A        	LDA	INBUF,X
   408 00:EE48: D0 F4        	BNE	D_ERR
   409                        
   410                        	;; set 2nd arg.
   411                        
   412                        	long_a
+  412 00:EE4A: C2 20                        rep     #M_FLAG
+  412                                        longa   on
   413 00:EE4C: A5 65        	LDA	PT1
   414 00:EE4E: 85 3D        	STA	arg3rd
   415                        	short_a
+  415 00:EE50: E2 20                        sep     #M_FLAG
+  415                                        longa   off
   416 00:EE52: A5 3F        	lda	argtype
   417 00:EE54: 09 01        	ora	#1		; type = 7 or 3 or 5 or 1
   418 00:EE56: 85 3F        	sta	argtype
   419 00:EE58: 60           	rts
   420                        
   421                        ;;;
   422                        ;;; Dump memory
   423                        ;;;
   424                        ptt_db
   425                        	longi off
   426                        	longa off
   427 00:EE59: A5 44        	lda	dumpdb
   428 00:EE5B: 20 89 FA     	JSR	HEXOUT2
   429 00:EE5E: A9 3A        	lda	#':'
   430 00:EE60: 4C 7E FD     	jmp	CONOUT
   431                        
   432                        put_dpl
   433                        	long_a
+  433 00:EE63: C2 20                        rep     #M_FLAG
+  433                                        longa   on
   434 00:EE65: A9 C7 FB     	lda	#dmplmsg
   435 00:EE68: 85 63        	sta	PT0
   436 00:EE6A: 4C 79 FA     	jmp	STROUT
   437                        
   438                        ;;; Dump memory entry
   439                        DUMP
   440                        	longa off
   441 00:EE6D: E8           	INX
   442 00:EE6E: B5 2A        	LDA	INBUF,X
   443 00:EE70: C9 49        	cmp	#'I'
   444 00:EE72: D0 03        	bne	dmp1
   445 00:EE74: 4C A6 EF     	jmp	disassemble
   446                        dmp1
   447 00:EE77: CA           	dex
   448 00:EE78: 20 07 EE     	jsr	arg_parsing	; get line input & parsing data
   449                        
   450 00:EE7B: A6 3F        	ldx	argtype
   451 00:EE7D: 8A           	txa
   452 00:EE7E: 29 04        	and	#4
   453 00:EE80: F0 04        	beq	dmp3
   454                        
   455                        	;; 1st arg. found
   456 00:EE82: A5 3A        	LDA	arg1st
   457 00:EE84: 85 44        	STA	dumpdb		; set data bank
   458                        
   459                        dmp3
   460 00:EE86: 8A           	txa
   461 00:EE87: 29 02        	and	#2
   462 00:EE89: F0 08        	beq	dmp4
   463                        	
   464                        	;; set 2nd arg.
   465                        	long_a
+  465 00:EE8B: C2 20                        rep     #M_FLAG
+  465                                        longa   on
   466 00:EE8D: A5 3B        	LDA	arg2nd
   467 00:EE8F: 85 40        	STA	DSADDR		; set start address
   468                        	short_a
+  468 00:EE91: E2 20                        sep     #M_FLAG
+  468                                        longa   off
   469                        
   470                        dmp4
   471 00:EE93: 8A           	txa
   472 00:EE94: 29 01        	and	#1
   473 00:EE96: F0 08        	beq	dmp5
   474                        
   475                        	;; set 3rd arg.
   476                        	long_a
+  476 00:EE98: C2 20                        rep     #M_FLAG
+  476                                        longa   on
   477 00:EE9A: A5 3D        	LDA	arg3rd
   478                        ;	SEC
   479                        ;	ADC	#0
   480 00:EE9C: 85 42        	STA	DEADDR
   481                        	short_a
+  481 00:EE9E: E2 20                        sep     #M_FLAG
+  481                                        longa   off
   482                        
   483                        dmp5
   484 00:EEA0: 8A           	txa
   485 00:EEA1: F0 0C        	beq	endcalc
   486 00:EEA3: C9 02        	cmp	#2
   487 00:EEA5: F0 08        	beq	endcalc
   488 00:EEA7: C9 04        	cmp	#4
   489 00:EEA9: F0 04        	beq	endcalc
   490 00:EEAB: C9 06        	cmp	#6
   491 00:EEAD: D0 0A        	bne	DPM
   492                        
   493                        endcalc
   494                        	long_a
+  494 00:EEAF: C2 20                        rep     #M_FLAG
+  494                                        longa   on
   495 00:EEB1: A5 40        	LDA	DSADDR
   496 00:EEB3: 18           	CLC
   497 00:EEB4: 69 80 00     	ADC	#128
   498 00:EEB7: 85 42        	STA	DEADDR
   499                        
   500                        	;; DUMP main
   501                        DPM	
   502                        	short_a
+  502 00:EEB9: E2 20                        sep     #M_FLAG
+  502                                        longa   off
   503 00:EEBB: A5 40        	LDA	DSADDR
   504 00:EEBD: 29 F0        	AND	#$F0
   505 00:EEBF: 85 65        	STA	PT1
   506 00:EEC1: A5 41        	LDA	DSADDR+1
   507 00:EEC3: 85 66        	STA	PT1+1
   508 00:EEC5: A9 00        	LDA	#0
   509 00:EEC7: 85 46        	STA	DSTATE
   510 00:EEC9: 20 63 EE     	jsr	put_dpl		;print dump index
   511                        DPM0
   512 00:EECC: 20 05 EF     	JSR	DPL
   513                        
   514                        	long_a
+  514 00:EECF: C2 20                        rep     #M_FLAG
+  514                                        longa   on
   515 00:EED1: A5 65        	LDA	PT1
   516 00:EED3: 18           	CLC
   517 00:EED4: 69 10 00     	ADC	#16
   518 00:EED7: 85 65        	STA	PT1
   519                        	short_a
+  519 00:EED9: E2 20                        sep     #M_FLAG
+  519                                        longa   off
   520                        
   521 00:EEDB: 20 74 FD     	JSR	CONST
   522 00:EEDE: D0 14        	BNE	DPM1
   523 00:EEE0: A5 46        	LDA	DSTATE
   524 00:EEE2: C9 02        	CMP	#2
   525 00:EEE4: 90 E6        	BCC	DPM0
   526                        
   527 00:EEE6: 20 63 EE     	jsr	put_dpl		;print dump index
   528                        	long_a
+  528 00:EEE9: C2 20                        rep     #M_FLAG
+  528                                        longa   on
   529 00:EEEB: A5 42        	LDA	DEADDR
   530 00:EEED: 85 40        	STA	DSADDR
   531                        	short_a
+  531 00:EEEF: E2 20                        sep     #M_FLAG
+  531                                        longa   off
   532 00:EEF1: 4C 7C ED     	JMP	WSTART
   533                        
   534                        DPM1
   535 00:EEF4: 20 6A FD     	JSR	CONIN
   536 00:EEF7: 20 63 EE     	jsr	put_dpl		;print dump index
   537                        	long_a
+  537 00:EEFA: C2 20                        rep     #M_FLAG
+  537                                        longa   on
   538 00:EEFC: A5 65        	LDA	PT1
   539 00:EEFE: 85 40        	STA	DSADDR
   540                        	short_a
+  540 00:EF00: E2 20                        sep     #M_FLAG
+  540                                        longa   off
   541 00:EF02: 4C 7C ED     	JMP	WSTART
   542                        
   543                        	;; Dump line
   544                        DPL
   545                        	;print bank
   546 00:EF05: 20 59 EE     	jsr	ptt_db
   547                        
   548 00:EF08: A5 66        	LDA	PT1+1
   549 00:EF0A: 20 89 FA     	JSR	HEXOUT2
   550 00:EF0D: A5 65        	LDA	PT1
   551 00:EF0F: 20 89 FA     	JSR	HEXOUT2
   552                        
   553                        	long_a
+  553 00:EF12: C2 20                        rep     #M_FLAG
+  553                                        longa   on
   554 00:EF14: A9 C0 FB     	LDA	#DSEP0
   555 00:EF17: 85 63        	STA	PT0
   556 00:EF19: 20 79 FA     	JSR	STROUT
   557 00:EF1C: A2 00        	LDX	#0
   558 00:EF1E: A0 00        	LDY	#0
   559                        DPL0
   560 00:EF20: 20 50 EF     	JSR	DPB
   561 00:EF23: E0 10        	CPX	#16
   562 00:EF25: D0 F9        	BNE	DPL0
   563                        
   564                        	long_a
+  564 00:EF27: C2 20                        rep     #M_FLAG
+  564                                        longa   on
   565 00:EF29: A9 C3 FB     	LDA	#DSEP1
   566 00:EF2C: 85 63        	STA	PT0
   567 00:EF2E: 20 79 FA     	JSR	STROUT
   568                        
   569                        	;; Print ASCII area
   570 00:EF31: A2 00        	LDX	#0
   571                        DPL1
   572                        	longa off
   573 00:EF33: B5 2A        	LDA	INBUF,X
   574 00:EF35: C9 20        	CMP	#' '
   575 00:EF37: 90 0A        	BCC	DPL2
   576 00:EF39: C9 7F        	CMP	#$7F
   577 00:EF3B: B0 06        	BCS	DPL2
   578 00:EF3D: 20 7E FD     	JSR	CONOUT
   579 00:EF40: 4C 48 EF     	JMP	DPL3
   580                        DPL2
   581 00:EF43: A9 2E        	LDA	#'.'
   582 00:EF45: 20 7E FD     	JSR	CONOUT
   583                        DPL3
   584 00:EF48: E8           	INX
   585 00:EF49: E0 10        	CPX	#16
   586 00:EF4B: D0 E6        	BNE	DPL1
   587 00:EF4D: 4C CC FA     	JMP	CRLF
   588                        
   589                        	;; Dump byte
   590                        DPB
   591 00:EF50: A9 20        	LDA	#' '
   592 00:EF52: 20 7E FD     	JSR	CONOUT
   593 00:EF55: A5 46        	LDA	DSTATE
   594 00:EF57: D0 1B        	BNE	DPB2
   595                        	;; Dump state 0
   596 00:EF59: 98           	TYA
   597 00:EF5A: 38           	SEC
   598 00:EF5B: E5 40        	SBC	DSADDR
   599 00:EF5D: 29 0F        	AND	#$0F
   600 00:EF5F: F0 0F        	BEQ	DPB1
   601                        	;; Still 0 or 2
   602                        DPB0
   603 00:EF61: A9 20        	LDA	#' '
   604 00:EF63: 95 2A        	STA	INBUF,X
   605 00:EF65: 20 7E FD     	JSR	CONOUT
   606 00:EF68: A9 20        	LDA	#' '
   607 00:EF6A: 20 7E FD     	JSR	CONOUT
   608 00:EF6D: E8           	INX
   609 00:EF6E: C8           	INY
   610 00:EF6F: 60           	RTS
   611                        	;; Found start address
   612                        DPB1
   613 00:EF70: A9 01        	LDA	#1
   614 00:EF72: 85 46        	STA	DSTATE
   615                        DPB2
   616 00:EF74: A5 46        	LDA	DSTATE
   617 00:EF76: C9 01        	CMP	#1
   618 00:EF78: D0 E7        	BNE	DPB0
   619                        
   620                        	;; Dump state 1
   621                        
   622                        	; get a dump data-----------
   623 00:EF7A: 8B           	phb			; push DBR
   624 00:EF7B: A5 44        	lda	dumpdb
   625 00:EF7D: 48           	pha
   626 00:EF7E: AB           	plb			; set Dump Data Bank
   627 00:EF7F: B1 65        	LDA	(PT1),Y		; get Dump data
   628 00:EF81: AB           	plb			; pop DBR
   629                        	; ---------------------------
   630                        
   631 00:EF82: 95 2A        	STA	INBUF,X
   632 00:EF84: 20 89 FA     	JSR	HEXOUT2
   633 00:EF87: E8           	INX
   634 00:EF88: C8           	INY
   635 00:EF89: 98           	TYA
   636 00:EF8A: 18           	CLC
   637 00:EF8B: 65 65        	ADC	PT1
   638 00:EF8D: 85 63        	STA	PT0
   639 00:EF8F: A5 66        	LDA	PT1+1
   640 00:EF91: 69 00        	ADC	#0
   641 00:EF93: 85 64        	STA	PT0+1
   642 00:EF95: A5 63        	LDA	PT0
   643 00:EF97: C5 42        	CMP	DEADDR
   644 00:EF99: D0 0A        	BNE	DPBE
   645 00:EF9B: A5 64        	LDA	PT0+1
   646 00:EF9D: C5 43        	CMP	DEADDR+1
   647 00:EF9F: D0 04        	BNE	DPBE
   648                        	;; Found end address
   649 00:EFA1: A9 02        	LDA	#2
   650 00:EFA3: 85 46        	STA	DSTATE
   651                        DPBE
   652 00:EFA5: 60           	RTS
   653                        
   654                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   655                        ;
   656                        ; disassemble 
   657                        ;
   658                        ;++++++++++++++++++++++++++++++++++++++++++++++++++++++
   659                        
   660             00000000   OP_ADC	equ	0<<1
   661             00000002   OP_AND	equ	1<<1
   662             00000004   OP_ASL	equ	2<<1
   663             00000006   OP_BCC	equ	3<<1
   664             00000008   OP_BCS	equ	4<<1
   665             0000000A   OP_BEQ	equ	5<<1
   666             0000000C   OP_BIT	equ	6<<1
   667             0000000E   OP_BMI	equ	7<<1
   668             00000010   OP_BNE	equ	8<<1
   669             00000012   OP_BPL	equ	9<<1
   670             00000014   OP_BRA	equ	10<<1
   671             00000016   OP_BRK	equ	11<<1
   672             00000018   OP_BRL	equ	12<<1
   673             0000001A   OP_BVC	equ	13<<1
   674             0000001C   OP_BVS	equ	14<<1
   675             0000001E   OP_CLC	equ	15<<1
   676             00000020   OP_CLD	equ	16<<1
   677             00000022   OP_CLI	equ	17<<1
   678             00000024   OP_CLV	equ	18<<1
   679             00000026   OP_CMP	equ	19<<1
   680             00000028   OP_COP	equ	20<<1
   681             0000002A   OP_CPX	equ	21<<1
   682             0000002C   OP_CPY	equ	22<<1
   683             0000002E   OP_DEC	equ	23<<1
   684             00000030   OP_DEX	equ	24<<1
   685             00000032   OP_DEY	equ	25<<1
   686             00000034   OP_EOR	equ	26<<1
   687             00000036   OP_INC	equ	27<<1
   688             00000038   OP_INX	equ	28<<1
   689             0000003A   OP_INY	equ	29<<1
   690             0000003C   OP_JML	equ	30<<1
   691             0000003E   OP_JMP	equ	31<<1
   692             00000040   OP_JSL	equ	32<<1
   693             00000042   OP_JSR	equ	33<<1
   694             00000044   OP_LDA	equ	34<<1
   695             00000046   OP_LDX	equ	35<<1
   696             00000048   OP_LDY	equ	36<<1
   697             0000004A   OP_LSR	equ	37<<1
   698             0000004C   OP_MVN	equ	38<<1
   699             0000004E   OP_MVP	equ	39<<1
   700             00000050   OP_NOP	equ	40<<1
   701             00000052   OP_ORA	equ	41<<1
   702             00000054   OP_PEA	equ	42<<1
   703             00000056   OP_PEI	equ	43<<1
   704             00000058   OP_PER	equ	44<<1
   705             0000005A   OP_PHA	equ	45<<1
   706             0000005C   OP_PHB	equ	46<<1
   707             0000005E   OP_PHD	equ	47<<1
   708             00000060   OP_PHK	equ	48<<1
   709             00000062   OP_PHP	equ	49<<1
   710             00000064   OP_PHX	equ	50<<1
   711             00000066   OP_PHY	equ	51<<1
   712             00000068   OP_PLA	equ	52<<1
   713             0000006A   OP_PLB	equ	53<<1
   714             0000006C   OP_PLD	equ	54<<1
   715             0000006E   OP_PLP	equ	55<<1
   716             00000070   OP_PLX	equ	56<<1
   717             00000072   OP_PLY	equ	57<<1
   718             00000074   OP_REP	equ	58<<1
   719             00000076   OP_ROL	equ	59<<1
   720             00000078   OP_ROR	equ	60<<1
   721             0000007A   OP_RTI	equ	61<<1
   722             0000007C   OP_RTL	equ	62<<1
   723             0000007E   OP_RTS	equ	63<<1
   724             00000080   OP_SBC	equ	64<<1
   725             00000082   OP_SEC	equ	65<<1
   726             00000084   OP_SED	equ	66<<1
   727             00000086   OP_SEI	equ	67<<1
   728             00000088   OP_SEP	equ	68<<1
   729             0000008A   OP_STA	equ	69<<1
   730             0000008C   OP_STP	equ	70<<1
   731             0000008E   OP_STX	equ	71<<1
   732             00000090   OP_STY	equ	72<<1
   733             00000092   OP_STZ	equ	73<<1
   734             00000094   OP_TAX	equ	74<<1
   735             00000096   OP_TAY	equ	75<<1
   736             00000098   OP_TCD	equ	76<<1
   737             0000009A   OP_TCS	equ	77<<1
   738             0000009C   OP_TDC	equ	78<<1
   739             0000009E   OP_TRB	equ	79<<1
   740             000000A0   OP_TSB	equ	80<<1
   741             000000A2   OP_TSC	equ	81<<1
   742             000000A4   OP_TSX	equ	82<<1
   743             000000A6   OP_TXA	equ	83<<1
   744             000000A8   OP_TXS	equ	84<<1
   745             000000AA   OP_TXY	equ	85<<1
   746             000000AC   OP_TYA	equ	86<<1
   747             000000AE   OP_TYX	equ	87<<1
   748             000000B0   OP_WAI	equ	88<<1
   749             000000B2   OP_WDM	equ	89<<1
   750             000000B4   OP_XBA	equ	90<<1
   751             000000B6   OP_XCE	equ	91<<1
   752                        
   753             00000000   MD_ABS	equ	0<<1	; a
   754             00000002   MD_ACC	equ	1<<1	; A
   755             00000004   MD_ABX	equ	2<<1	; a,x
   756             00000006   MD_ABY	equ	3<<1	; a,y
   757             00000008   MD_ALG	equ	4<<1	; al
   758             0000000A   MD_ALX	equ	5<<1	; al,x
   759             0000000C   MD_AIN	equ	6<<1	; (a)
   760             0000000E   MD_AIX	equ	7<<1	; (a,x)
   761             00000010   MD_DPG	equ	8<<1	; d
   762             00000012   MD_STK	equ	9<<1	; d,s
   763             00000014   MD_DPX	equ	10<<1	; d,x
   764             00000016   MD_DPY	equ	11<<1	; d,x
   765             00000018   MD_DIN	equ	12<<1	; (d)
   766             0000001A   MD_DLI	equ	13<<1	; [d]
   767             0000001C   MD_SKY	equ	14<<1	; (d,s),y
   768             0000001E   MD_DIX	equ	15<<1	; (d,x)
   769             00000020   MD_DIY	equ	16<<1	; (d),y
   770             00000022   MD_DLY	equ	17<<1	; [d],y
   771             00000024   MD_IMP	equ	18<<1	;
   772             00000026   MD_REL	equ	19<<1	; r
   773             00000028   MD_RLG	equ	20<<1	; rl
   774             0000002A   MD_MOV	equ	21<<1	; xyc
   775             0000002C   MD_IMM	equ	22<<1	; # (A or M)
   776             0000002E   MD_INT	equ	23<<1	; # (BRK/COP/WDM)
   777             00000030   MD_IMX	equ	24<<1	; # (X or Y)
   778                        
   779             00000032   MD_PEA	equ	25<<1	; Push Effective Absolute Address
   780             00000034   MD_PEI	equ	26<<1	; Push Effective Indirect Address
   781             00000036   MD_PER	equ	27<<1	; Push effective PC Relative Indirect Address
   782                        
   783                        ; disassemble code
   784                        
   785                        disassemble:
   786                        	longi off
   787                        	longa off
   788 00:EFA6: 20 07 EE     	jsr	arg_parsing
   789 00:EFA9: A6 3F        	ldx	argtype
   790 00:EFAB: 8A           	txa
   791 00:EFAC: 29 04        	and	#4
   792 00:EFAE: F0 04        	beq	dis3
   793                        
   794                        	;; 1st arg. found
   795 00:EFB0: A5 3A        	LDA	arg1st
   796 00:EFB2: 85 45        	STA	dipb		; set data bank
   797                        
   798                        dis3
   799 00:EFB4: 8A           	txa
   800 00:EFB5: 29 02        	and	#2
   801 00:EFB7: F0 08        	beq	dis4
   802                        	
   803                        	;; set 2nd arg.
   804                        	long_a
+  804 00:EFB9: C2 20                        rep     #M_FLAG
+  804                                        longa   on
   805 00:EFBB: A5 3B        	LDA	arg2nd
   806 00:EFBD: 85 6A        	sta	ADDR_S		; save start address
   807                        	short_a
+  807 00:EFBF: E2 20                        sep     #M_FLAG
+  807                                        longa   off
   808                        
   809                        dis4
   810 00:EFC1: 8A           	txa
   811 00:EFC2: 29 01        	and	#1
   812 00:EFC4: F0 0A        	beq	dis5
   813                        
   814                        	;; set 3rd arg.
   815                        	long_a
+  815 00:EFC6: C2 20                        rep     #M_FLAG
+  815                                        longa   on
   816 00:EFC8: A5 3D        	LDA	arg3rd
   817 00:EFCA: 85 6D        	STA	ADDR_E
   818                        	short_a
+  818 00:EFCC: E2 20                        sep     #M_FLAG
+  818                                        longa   off
   819 00:EFCE: 64 68        	stz	lines
   820                        
   821                        dis5
   822 00:EFD0: 8A           	txa
   823 00:EFD1: F0 0C        	beq	dis6
   824 00:EFD3: C9 02        	cmp	#2	; ex) dixxxx
   825 00:EFD5: F0 08        	beq	dis6
   826 00:EFD7: C9 04        	cmp	#4	; ex) dixx:
   827 00:EFD9: F0 04        	beq	dis6
   828 00:EFDB: C9 06        	cmp	#6	; ex) dixx:xxxx
   829 00:EFDD: D0 04        	bne	dis7	; jmp if argtype = 1(di,xxxx),3(dixxxx,xxxx)
   830                        			;                  5(dixx:,xxxx),7(dixx:xxxx,xxxx)
   831                        	; no arg.
   832                        dis6	; set lines = 16
   833                        
   834 00:EFDF: A9 10        	lda	#16
   835 00:EFE1: 85 68        	sta	lines
   836                        
   837                        dis7
   838 00:EFE3: A5 45        	lda	dipb
   839 00:EFE5: 85 6C        	sta	ADDR_S+2		;set bank
   840 00:EFE7: 85 6F        	sta	ADDR_E+2		;set bank
   841                        
   842                        ;	php
   843                        ;	pla
   844                        ;	sta	FLAGS
   845                        
   846                        dis_main:
   847 00:EFE9: 20 CC FA     	jsr	CRLF
   848 00:EFEC: 20 74 FD     	JSR	CONST
   849 00:EFEF: D0 5C        	BNE	dis_end
   850                        
   851 00:EFF1: 20 60 F0     	jsr	TxSpace
   852 00:EFF4: A5 6C        	lda	ADDR_S+2		; Show memory address
   853 00:EFF6: 20 89 FA     	jsr	HEXOUT2
   854 00:EFF9: A9 3A        	lda	#':'
   855 00:EFFB: 20 7E FD     	jsr	CONOUT
   856 00:EFFE: A5 6B        	lda	ADDR_S+1
   857 00:F000: 20 89 FA     	jsr	HEXOUT2
   858 00:F003: A5 6A        	lda	ADDR_S+0
   859 00:F005: 20 89 FA     	jsr	HEXOUT2
   860 00:F008: 20 60 F0     	jsr	TxSpace
   861                        
   862 00:F00B: 20 65 F0     	jsr	TxCodeBytes		; Show code bytes
   863 00:F00E: 20 8A F0     	jsr	TxSymbolic		; And instruction
   864                        
   865 00:F011: A7 6A        	lda	[ADDR_S]		; Fetch opcode again
   866                        
   867 00:F013: 48           	pha
   868 00:F014: A0 01        	ldy	#1
   869                        
   870 00:F016: C9 18        	cmp	#$18			; CLC?
   871 00:F018: D0 04        	bne	NotCLC
   872 00:F01A: A9 01        	lda	#C_FLAG
   873 00:F01C: 80 0E        	bra	DoREP
   874                        NotCLC:
   875 00:F01E: C9 38        	cmp	#$38			; SEC?
   876 00:F020: D0 04        	bne	NotSEC
   877 00:F022: A9 01        	lda	#C_FLAG
   878 00:F024: 80 10        	bra	DoSEP
   879                        NotSEC:
   880 00:F026: C9 C2        	cmp	#$c2			; REP?
   881 00:F028: D0 06        	bne	NotREP
   882 00:F02A: B7 6A        	lda	[ADDR_S],Y
   883                        DoREP:
   884 00:F02C: 14 69        	trb	FLAGS
   885 00:F02E: 80 08        	bra	NextOpcode
   886                        NotREP:
   887 00:F030: C9 E2        	cmp	#$e2			; SEP?
   888 00:F032: D0 04        	bne	NextOpcode
   889 00:F034: B7 6A        	lda	[ADDR_S],Y
   890 00:F036: 04 69        DoSEP:	tsb	FLAGS
   891                        
   892                        NextOpcode:
   893 00:F038: 68           	pla
   894 00:F039: 20 5A F2     	jsr	OpcodeSize
   895                        
   896 00:F03C: 18           	clc
   897 00:F03D: 65 6A        	adc	ADDR_S+0		; And move start address on
   898 00:F03F: 85 6A        	sta	ADDR_S+0
   899 00:F041: 90 02        	bcc	$+4
   900 00:F043: E6 6B        	inc	ADDR_S+1
   901                        
   902                        	; Exceeded the end address?
   903 00:F045: A5 68        	lda	lines
   904 00:F047: F0 0A        	beq	chk_addr_e
   905 00:F049: C6 68        	dec	lines
   906 00:F04B: D0 9C        	bne	dis_main
   907                        dis_end
   908 00:F04D: 20 CC FA     	jsr	CRLF
   909 00:F050: 4C 7C ED     	JMP	WSTART
   910                        
   911                        chk_addr_e
   912 00:F053: A5 6A        	lda	ADDR_S+0
   913 00:F055: 38           	sec
   914 00:F056: E5 6D        	sbc	ADDR_E+0
   915 00:F058: A5 6B        	lda	ADDR_S+1
   916 00:F05A: E5 6E        	sbc	ADDR_E+1
   917 00:F05C: 30 8B        	bmi	dis_main		; No, show more
   918 00:F05E: 80 ED        	bra	dis_end
   919                        ;
   920                        TxSpace:
   921 00:F060: A9 20        	lda	#' '		; Transmit a space
   922 00:F062: 4C 7E FD     	jmp	CONOUT
   923                        
   924                        	longa	off
   925                        	longi	off
   926                        TxCodeBytes:
   927 00:F065: A7 6A        	lda	[ADDR_S]	; Fetch the opcode
   928 00:F067: 20 5A F2     	jsr	OpcodeSize	; and work out its size
   929 00:F06A: AA           	tax
   930 00:F06B: A0 00        	ldy	#0		; Clear byte count
   931                        CodeLoop:
   932 00:F06D: B7 6A        	lda	[ADDR_S],Y	; Fetch a byte of code
   933 00:F06F: 20 89 FA     	jsr	HEXOUT2
   934 00:F072: 20 60 F0     	jsr	TxSpace
   935 00:F075: C8           	iny
   936 00:F076: CA           	dex
   937 00:F077: D0 F4        	bne	CodeLoop
   938                        PadLoop:
   939 00:F079: C0 04        	cpy	#4		; Need to pad out?
   940 00:F07B: D0 01        	bne	$+3
   941 00:F07D: 60           	rts
   942 00:F07E: 20 60 F0     	jsr	TxSpace
   943 00:F081: 20 60 F0     	jsr	TxSpace
   944 00:F084: 20 60 F0     	jsr	TxSpace
   945 00:F087: C8           	iny
   946 00:F088: 80 EF        	bra	PadLoop
   947                        
   948                        ;
   949                        
   950                        	longa	off
   951                        	longi	off
   952                        TxSymbolic:
   953 00:F08A: A7 6A        	lda	[ADDR_S]	; Fetch opcode
   954 00:F08C: 48           	pha
   955 00:F08D: 20 95 F0     	jsr	TxOpcode
   956 00:F090: 68           	pla
   957 00:F091: 20 C9 F0     	jsr	TxOperand
   958 00:F094: 60           	rts
   959                        
   960                        ;
   961                        
   962                        	longa	off
   963                        	longi	off
   964                        TxOpcode:
   965 00:F095: AA           	tax		; Work out the mnemonic
   966 00:F096: BD B6 F2     	lda	OPCODES,x
   967 00:F099: AA           	tax
   968                        
   969                        	long_a
+  969 00:F09A: C2 20                        rep     #M_FLAG
+  969                                        longa   on
   970 00:F09C: BD B6 F4     	lda	MNEMONICS,x
   971 00:F09F: 48           	pha		; Save last character
   972 00:F0A0: 4A           	lsr	a	; Shift second down
   973 00:F0A1: 4A           	lsr	a
   974 00:F0A2: 4A           	lsr	a
   975 00:F0A3: 4A           	lsr	a
   976 00:F0A4: 4A           	lsr	a
   977 00:F0A5: 48           	pha		; Save it
   978 00:F0A6: 4A           	lsr	a	; Shift first down
   979 00:F0A7: 4A           	lsr	a
   980 00:F0A8: 4A           	lsr	a
   981 00:F0A9: 4A           	lsr	a
   982 00:F0AA: 4A           	lsr	a
   983 00:F0AB: 20 BC F0     	jsr	ExpandMnem	; Print first
   984 00:F0AE: 68           	pla
   985 00:F0AF: 20 BC F0     	jsr	ExpandMnem	; .. second
   986 00:F0B2: 68           	pla
   987 00:F0B3: 20 BC F0     	jsr	ExpandMnem	; .. and third
   988                        	short_a
+  988 00:F0B6: E2 20                        sep     #M_FLAG
+  988                                        longa   off
   989                        
   990 00:F0B8: 20 60 F0     	jsr	TxSpace
   991 00:F0BB: 60           	rts
   992                        
   993                        ExpandMnem:
   994                        	short_a
+  994 00:F0BC: E2 20                        sep     #M_FLAG
+  994                                        longa   off
   995 00:F0BE: 18           	clc
   996 00:F0BF: 29 1F        	and	#$1f		; Expand letter code
   997 00:F0C1: 69 40        	adc	#'@'
   998 00:F0C3: 20 7E FD     	jsr	CONOUT
   999                        	long_a
+  999 00:F0C6: C2 20                        rep     #M_FLAG
+  999                                        longa   on
  1000 00:F0C8: 60           	rts
  1001                        ;
  1002                        
  1003                        	longa	off
  1004                        	longi	off
  1005                        TxOperand:
  1006 00:F0C9: AA           	tax			; Work out addressing mode
  1007 00:F0CA: BD B6 F3     	lda	MODES,x
  1008 00:F0CD: AA           	tax
  1009 00:F0CE: 7C D1 F0     	jmp	(MODE_SHOW,x)
  1010                        
  1011                        MODE_SHOW:
  1012 00:F0D1: 7C F1        	dw	TxAbsolute		; a
  1013 00:F0D3: 09 F1        	dw	TxAccumulator		; A
  1014 00:F0D5: 8E F1        	dw	TxAbsoluteX		; a,x
  1015 00:F0D7: 93 F1        	dw	TxAbsoluteY		; a,y
  1016 00:F0D9: 98 F1        	dw	TxLong			; al
  1017 00:F0DB: B0 F1        	dw	TxLongX			; al,x
  1018 00:F0DD: B5 F1        	dw	TxAbsoluteIndirect	; (a)
  1019 00:F0DF: C2 F1        	dw	TxAbsoluteXIndirect	; (a,x)
  1020 00:F0E1: 56 F1        	dw	TxDirect		; d
  1021 00:F0E3: 49 F1        	dw	TxStack			; d,s
  1022 00:F0E5: 62 F1        	dw	TxDirectX		; d,x
  1023 00:F0E7: 6F F1        	dw	TxDirectY		; d,y
  1024 00:F0E9: CF F1        	dw	TxDirectIndirect	; (d)
  1025 00:F0EB: F9 F1        	dw	TxDirectIndirectLong	; [d]
  1026 00:F0ED: 0C F2        	dw	TxStackIndirectY	; (d,s),y
  1027 00:F0EF: DC F1        	dw	TxDirectXIndirect	; (d,x)
  1028 00:F0F1: E9 F1        	dw	TxDirectIndirectY	; (d),y
  1029 00:F0F3: 06 F2        	dw	TxDirectIndirectLongY	; [d],y
  1030 00:F0F5: 1E F1        	dw	TxImplied		;
  1031 00:F0F7: 1C F2        	dw	TxRelative		; r
  1032 00:F0F9: 38 F2        	dw	TxRelativeLong		; rl
  1033 00:F0FB: 1F F1        	dw	TxMove			; xyc
  1034 00:F0FD: 0E F1        	dw	TxImmediateM		; # (A & M)
  1035 00:F0FF: 3B F1        	dw	TxImmediateByte		; # (BRK/COP/WDM)
  1036 00:F101: 16 F1        	dw	TxImmediateX		; # (X or Y)
  1037                        
  1038 00:F103: 7C F1        	dw	TxAbsolute		; Push Absolute Address
  1039 00:F105: CF F1        	dw	TxDirectIndirect	; Push Direct Page Indirect
  1040 00:F107: 38 F2        	dw	TxRelativeLong		; Push PC Relative Long
  1041                        
  1042                        
  1043                        TxAccumulator:
  1044 00:F109: A9 41        	lda	#'A'
  1045 00:F10B: 4C 7E FD     	jmp	CONOUT
  1046                        
  1047                        TxImmediateM:
  1048 00:F10E: A9 20        	lda	#M_FLAG
  1049 00:F110: 24 69        	bit	FLAGS
  1050 00:F112: F0 2E        	beq	TxImmediateWord
  1051 00:F114: 80 25        	bra	TxImmediateByte
  1052                        
  1053                        TxImmediateX:
  1054 00:F116: A9 10        	lda	#X_FLAG
  1055 00:F118: 24 69        	bit	FLAGS
  1056 00:F11A: F0 26        	beq	TxImmediateWord
  1057 00:F11C: 80 1D        	bra	TxImmediateByte
  1058                        
  1059                        TxImplied:
  1060 00:F11E: 60           	rts
  1061                        
  1062                        TxMove:
  1063 00:F11F: A9 24        	lda	#'$'
  1064 00:F121: 20 7E FD     	jsr	CONOUT
  1065 00:F124: A0 01        	ldy	#1
  1066 00:F126: B7 6A        	lda	[ADDR_S],Y
  1067 00:F128: 20 89 FA     	jsr	HEXOUT2
  1068 00:F12B: A9 2C        	lda	#','
  1069 00:F12D: 20 7E FD     	jsr	CONOUT
  1070 00:F130: A9 24        	lda	#'$'
  1071 00:F132: 20 7E FD     	jsr	CONOUT
  1072 00:F135: C8           	iny
  1073 00:F136: B7 6A        	lda	[ADDR_S],Y
  1074 00:F138: 4C 89 FA     	jmp	HEXOUT2
  1075                        
  1076                        TxImmediateByte:
  1077 00:F13B: A9 23        	lda	#'#'
  1078 00:F13D: 20 7E FD     	jsr	CONOUT
  1079 00:F140: 80 14        	bra	TxDirect
  1080                        
  1081                        TxImmediateWord:
  1082 00:F142: A9 23        	lda	#'#'
  1083 00:F144: 20 7E FD     	jsr	CONOUT
  1084 00:F147: 80 33        	bra	TxAbsolute
  1085                        
  1086                        TxStack:
  1087 00:F149: 20 56 F1     	jsr	TxDirect
  1088 00:F14C: A9 2C        	lda	#','
  1089 00:F14E: 20 7E FD     	jsr	CONOUT
  1090 00:F151: A9 53        	lda	#'S'
  1091 00:F153: 4C 7E FD     	jmp	CONOUT
  1092                        
  1093                        TxDirect:
  1094 00:F156: A9 24        	lda	#'$'
  1095 00:F158: 20 7E FD     	jsr	CONOUT
  1096 00:F15B: A0 01        	ldy	#1
  1097 00:F15D: B7 6A        	lda	[ADDR_S],Y
  1098 00:F15F: 4C 89 FA     	jmp	HEXOUT2
  1099                        
  1100                        TxDirectX:
  1101 00:F162: 20 56 F1     	jsr	TxDirect
  1102 00:F165: A9 2C        TxX:	lda	#','
  1103 00:F167: 20 7E FD     	jsr	CONOUT
  1104 00:F16A: A9 58        	lda	#'X'
  1105 00:F16C: 4C 7E FD     	jmp	CONOUT
  1106                        
  1107                        TxDirectY:
  1108 00:F16F: 20 56 F1     	jsr	TxDirect
  1109 00:F172: A9 2C        TxY:	lda	#','
  1110 00:F174: 20 7E FD     	jsr	CONOUT
  1111 00:F177: A9 59        	lda	#'Y'
  1112 00:F179: 4C 7E FD     	jmp	CONOUT
  1113                        
  1114                        TxAbsolute:
  1115 00:F17C: A9 24        	lda	#'$'
  1116 00:F17E: 20 7E FD     	jsr	CONOUT
  1117 00:F181: A0 02        	ldy	#2
  1118 00:F183: B7 6A        	lda	[ADDR_S],Y
  1119 00:F185: 20 89 FA     	jsr	HEXOUT2
  1120 00:F188: 88           	dey
  1121 00:F189: B7 6A        	lda	[ADDR_S],Y
  1122 00:F18B: 4C 89 FA     	jmp	HEXOUT2
  1123                        
  1124                        TxAbsoluteX:
  1125 00:F18E: 20 7C F1     	jsr	TxAbsolute
  1126 00:F191: 80 D2        	bra	TxX
  1127                        
  1128                        TxAbsoluteY:
  1129 00:F193: 20 7C F1     	jsr	TxAbsolute
  1130 00:F196: 80 DA        	bra	TxY
  1131                        
  1132                        TxLong:
  1133 00:F198: A9 24        	lda	#'$'
  1134 00:F19A: 20 7E FD     	jsr	CONOUT
  1135 00:F19D: A0 03        	ldy	#3
  1136 00:F19F: B7 6A        	lda	[ADDR_S],Y
  1137 00:F1A1: 20 89 FA     	jsr	HEXOUT2
  1138                        ;	lda	#':'
  1139                        ;	jsr	CONOUT
  1140 00:F1A4: 88           	dey
  1141 00:F1A5: B7 6A        	lda	[ADDR_S],Y
  1142 00:F1A7: 20 89 FA     	jsr	HEXOUT2
  1143 00:F1AA: 88           	dey
  1144 00:F1AB: B7 6A        	lda	[ADDR_S],Y
  1145 00:F1AD: 4C 89 FA     	jmp	HEXOUT2
  1146                        
  1147                        TxLongX:
  1148 00:F1B0: 20 98 F1     	jsr	TxLong
  1149 00:F1B3: 80 B0        	bra	TxX
  1150                        
  1151                        TxAbsoluteIndirect:
  1152 00:F1B5: A9 28        	lda	#'('
  1153 00:F1B7: 20 7E FD     	jsr	CONOUT
  1154 00:F1BA: 20 7C F1     	jsr	TxAbsolute
  1155 00:F1BD: A9 29        	lda	#')'
  1156 00:F1BF: 4C 7E FD     	jmp	CONOUT
  1157                        
  1158                        TxAbsoluteXIndirect:
  1159 00:F1C2: A9 28        	lda	#'('
  1160 00:F1C4: 20 7E FD     	jsr	CONOUT
  1161 00:F1C7: 20 8E F1     	jsr	TxAbsoluteX
  1162 00:F1CA: A9 29        	lda	#')'
  1163 00:F1CC: 4C 7E FD     	jmp	CONOUT
  1164                        
  1165                        TxDirectIndirect:
  1166 00:F1CF: A9 28        	lda	#'('
  1167 00:F1D1: 20 7E FD     	jsr	CONOUT
  1168 00:F1D4: 20 56 F1     	jsr	TxDirect
  1169 00:F1D7: A9 29        	lda	#')'
  1170 00:F1D9: 4C 7E FD     	jmp	CONOUT
  1171                        
  1172                        TxDirectXIndirect:
  1173 00:F1DC: A9 28        	lda	#'('
  1174 00:F1DE: 20 7E FD     	jsr	CONOUT
  1175 00:F1E1: 20 62 F1     	jsr	TxDirectX
  1176 00:F1E4: A9 29        	lda	#')'
  1177 00:F1E6: 4C 7E FD     	jmp	CONOUT
  1178                        
  1179                        TxDirectIndirectY:
  1180 00:F1E9: A9 28        	lda	#'('
  1181 00:F1EB: 20 7E FD     	jsr	CONOUT
  1182 00:F1EE: 20 56 F1     	jsr	TxDirect
  1183 00:F1F1: A9 29        	lda	#')'
  1184 00:F1F3: 20 7E FD     	jsr	CONOUT
  1185 00:F1F6: 4C 72 F1     	jmp	TxY
  1186                        
  1187                        TxDirectIndirectLong:
  1188 00:F1F9: A9 5B        	lda	#'['
  1189 00:F1FB: 20 7E FD     	jsr	CONOUT
  1190 00:F1FE: 20 56 F1     	jsr	TxDirect
  1191 00:F201: A9 5D        	lda	#']'
  1192 00:F203: 4C 7E FD     	jmp	CONOUT
  1193                        
  1194                        TxDirectIndirectLongY:
  1195 00:F206: 20 F9 F1     	jsr	TxDirectIndirectLong
  1196 00:F209: 4C 72 F1     	jmp	TxY
  1197                        
  1198                        TxStackIndirectY:
  1199 00:F20C: A9 28        	lda	#'('
  1200 00:F20E: 20 7E FD     	jsr	CONOUT
  1201 00:F211: 20 49 F1     	jsr	TxStack
  1202 00:F214: A9 29        	lda	#')'
  1203 00:F216: 20 7E FD     	jsr	CONOUT
  1204 00:F219: 4C 72 F1     	jmp	TxY
  1205                        
  1206                        TxRelative:
  1207 00:F21C: A6 6B        	ldx	ADDR_S+1	; Work out next PC
  1208 00:F21E: A5 6A        	lda	ADDR_S+0
  1209 00:F220: 18           	clc
  1210 00:F221: 69 02        	adc	#2
  1211 00:F223: 90 01        	bcc	$+3
  1212 00:F225: E8           	inx
  1213                        
  1214 00:F226: 48           	pha		; Add relative offset
  1215 00:F227: A0 01        	ldy	#1
  1216 00:F229: B7 6A        	lda	[ADDR_S],y
  1217 00:F22B: 10 01        	bpl	$+3
  1218 00:F22D: CA           	dex
  1219 00:F22E: 18           	clc
  1220 00:F22F: 63 01        	adc	1,s
  1221 00:F231: 83 01        	sta	1,s
  1222 00:F233: 90 01        	bcc	$+3
  1223 00:F235: E8           	inx
  1224 00:F236: 80 15        	bra	TxAddr
  1225                        
  1226                        TxRelativeLong:
  1227 00:F238: A6 6B        	ldx	ADDR_S+1	; Work out next PC
  1228 00:F23A: A5 6A        	lda	ADDR_S+0
  1229 00:F23C: 18           	clc
  1230 00:F23D: 69 03        	adc	#3
  1231 00:F23F: 90 01        	bcc	$+3
  1232 00:F241: E8           	inx
  1233                        
  1234 00:F242: 18           	clc		; Add relative offset
  1235 00:F243: A0 01        	ldy	#1
  1236 00:F245: 77 6A        	adc	[ADDR_S],y
  1237 00:F247: 48           	pha
  1238 00:F248: C8           	iny
  1239 00:F249: 8A           	txa
  1240 00:F24A: 77 6A        	adc	[ADDR_S],Y
  1241 00:F24C: AA           	tax
  1242                        
  1243                        TxAddr:
  1244 00:F24D: A9 24        	lda	#'$'		; Print address
  1245 00:F24F: 20 7E FD     	jsr	CONOUT
  1246 00:F252: 8A           	txa
  1247 00:F253: 20 89 FA     	jsr	HEXOUT2
  1248 00:F256: 68           	pla
  1249 00:F257: 4C 89 FA     	jmp	HEXOUT2
  1250                        
  1251                        ;  Returns the size of the opcode in A given the current flag settings.
  1252                        
  1253                        	longa	off
  1254                        	longi	off
  1255                        OpcodeSize:
  1256 00:F25A: AA           	tax		; Work out addressing mode
  1257 00:F25B: BD B6 F3     	lda	MODES,x
  1258 00:F25E: AA           	tax
  1259 00:F25F: 7C 62 F2     	jmp	(MODE_SIZE,x)
  1260                        
  1261                        
  1262                        MODE_SIZE:
  1263 00:F262: B0 F2        	dw	Size3		; a
  1264 00:F264: AA F2        	dw	Size1		; A
  1265 00:F266: B0 F2        	dw	Size3		; a,x
  1266 00:F268: B0 F2        	dw	Size3		; a,y
  1267 00:F26A: B3 F2        	dw	Size4		; al
  1268 00:F26C: B3 F2        	dw	Size4		; al,x
  1269 00:F26E: B0 F2        	dw	Size3		; (a)
  1270 00:F270: B0 F2        	dw	Size3		; (a,x)
  1271 00:F272: AD F2        	dw	Size2		; d
  1272 00:F274: AD F2        	dw	Size2		; d,s
  1273 00:F276: AD F2        	dw	Size2		; d,x
  1274 00:F278: AD F2        	dw	Size2		; d,y
  1275 00:F27A: AD F2        	dw	Size2		; (d)
  1276 00:F27C: AD F2        	dw	Size2		; [d]
  1277 00:F27E: AD F2        	dw	Size2		; (d,s),y
  1278 00:F280: AD F2        	dw	Size2		; (d,x)
  1279 00:F282: AD F2        	dw	Size2		; (d),y
  1280 00:F284: AD F2        	dw	Size2		; [d],y
  1281 00:F286: AA F2        	dw	Size1		;
  1282 00:F288: AD F2        	dw	Size2		; r
  1283 00:F28A: B0 F2        	dw	Size3		; rl
  1284 00:F28C: B0 F2        	dw	Size3		; xyc
  1285 00:F28E: 9A F2        	dw	TestM		; # (A & M)
  1286 00:F290: AD F2        	dw	Size2		; # (BRK/COP/WDM)
  1287 00:F292: A2 F2        	dw	TestX		; # (X or Y)
  1288                        
  1289 00:F294: B0 F2        	dw	Size3		; PEA
  1290 00:F296: AD F2        	dw	Size2		; PEI
  1291 00:F298: B0 F2        	dw	Size3		; PER
  1292                        
  1293                        TestM
  1294 00:F29A: A9 20        	lda	#M_FLAG		; Is M bit set?
  1295 00:F29C: 25 69        	and	FLAGS
  1296 00:F29E: F0 10        	beq	Size3		; No, word
  1297 00:F2A0: 80 0B        	bra	Size2		; else byte
  1298                        
  1299                        TestX
  1300 00:F2A2: A9 10        	lda	#X_FLAG		; Is X bit set?
  1301 00:F2A4: 25 69        	and	FLAGS
  1302 00:F2A6: F0 08        	beq	Size3		; No, word
  1303 00:F2A8: 80 03        	bra	Size2		; else byte
  1304                        
  1305 00:F2AA: A9 01        Size1:	lda	#1
  1306 00:F2AC: 60           	rts
  1307 00:F2AD: A9 02        Size2:	lda	#2
  1308 00:F2AF: 60           	rts
  1309 00:F2B0: A9 03        Size3	lda	#3
  1310 00:F2B2: 60           	rts
  1311 00:F2B3: A9 04        Size4:	lda	#4
  1312 00:F2B5: 60           	rts
  1313                        
  1314                        OPCODES:
  1315 00:F2B6: 16 52 28 52  	db	OP_BRK,OP_ORA,OP_COP,OP_ORA	; 00
  1316 00:F2BA: A0 52 04 52  	db	OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1317 00:F2BE: 62 52 04 5E  	db	OP_PHP,OP_ORA,OP_ASL,OP_PHD
  1318 00:F2C2: A0 52 04 52  	db	OP_TSB,OP_ORA,OP_ASL,OP_ORA
  1319 00:F2C6: 12 52 52 52  	db	OP_BPL,OP_ORA,OP_ORA,OP_ORA	; 10
  1320 00:F2CA: 9E 52 04 52  	db	OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1321 00:F2CE: 1E 52 36 9A  	db	OP_CLC,OP_ORA,OP_INC,OP_TCS
  1322 00:F2D2: 9E 52 04 52  	db	OP_TRB,OP_ORA,OP_ASL,OP_ORA
  1323 00:F2D6: 42 02 40 02  	db	OP_JSR,OP_AND,OP_JSL,OP_AND	; 20
  1324 00:F2DA: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1325 00:F2DE: 6E 02 76 6C  	db	OP_PLP,OP_AND,OP_ROL,OP_PLD
  1326 00:F2E2: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1327 00:F2E6: 0E 02 02 02  	db	OP_BMI,OP_AND,OP_AND,OP_AND	; 30
  1328 00:F2EA: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1329 00:F2EE: 82 02 2E A2  	db	OP_SEC,OP_AND,OP_DEC,OP_TSC
  1330 00:F2F2: 0C 02 76 02  	db	OP_BIT,OP_AND,OP_ROL,OP_AND
  1331 00:F2F6: 7A 34 B2 34  	db	OP_RTI,OP_EOR,OP_WDM,OP_EOR	; 40
  1332 00:F2FA: 4E 34 4A 34  	db	OP_MVP,OP_EOR,OP_LSR,OP_EOR
  1333 00:F2FE: 5A 34 4A 60  	db	OP_PHA,OP_EOR,OP_LSR,OP_PHK
  1334 00:F302: 3E 34 4A 34  	db	OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1335 00:F306: 1A 34 34 34  	db	OP_BVC,OP_EOR,OP_EOR,OP_EOR	; 50
  1336 00:F30A: 4C 34 4A 34  	db	OP_MVN,OP_EOR,OP_LSR,OP_EOR
  1337 00:F30E: 22 34 66 98  	db	OP_CLI,OP_EOR,OP_PHY,OP_TCD
  1338 00:F312: 3E 34 4A 34  	db	OP_JMP,OP_EOR,OP_LSR,OP_EOR
  1339 00:F316: 7E 00 58 00  	db	OP_RTS,OP_ADC,OP_PER,OP_ADC	; 60
  1340 00:F31A: 92 00 78 00  	db	OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1341 00:F31E: 68 00 78 7C  	db	OP_PLA,OP_ADC,OP_ROR,OP_RTL
  1342 00:F322: 3E 00 78 00  	db	OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1343 00:F326: 1C 00 00 00  	db	OP_BVS,OP_ADC,OP_ADC,OP_ADC	; 70
  1344 00:F32A: 92 00 78 00  	db	OP_STZ,OP_ADC,OP_ROR,OP_ADC
  1345 00:F32E: 86 00 72 9C  	db	OP_SEI,OP_ADC,OP_PLY,OP_TDC
  1346 00:F332: 3E 00 78 00  	db	OP_JMP,OP_ADC,OP_ROR,OP_ADC
  1347 00:F336: 14 8A 18 8A  	db	OP_BRA,OP_STA,OP_BRL,OP_STA	; 80
  1348 00:F33A: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1349 00:F33E: 32 0C A6 5C  	db	OP_DEY,OP_BIT,OP_TXA,OP_PHB
  1350 00:F342: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1351 00:F346: 06 8A 8A 8A  	db	OP_BCC,OP_STA,OP_STA,OP_STA	; 90
  1352 00:F34A: 90 8A 8E 8A  	db	OP_STY,OP_STA,OP_STX,OP_STA
  1353 00:F34E: AC 8A A8 AA  	db	OP_TYA,OP_STA,OP_TXS,OP_TXY
  1354 00:F352: 92 8A 92 8A  	db	OP_STZ,OP_STA,OP_STZ,OP_STA
  1355 00:F356: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA	; A0
  1356 00:F35A: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1357 00:F35E: 96 44 94 6A  	db	OP_TAY,OP_LDA,OP_TAX,OP_PLB
  1358 00:F362: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1359 00:F366: 08 44 44 44  	db	OP_BCS,OP_LDA,OP_LDA,OP_LDA	; B0
  1360 00:F36A: 44 48 46 44  	db	OP_LDA,OP_LDY,OP_LDX,OP_LDA
  1361 00:F36E: 24 44 A4 AE  	db	OP_CLV,OP_LDA,OP_TSX,OP_TYX
  1362 00:F372: 48 44 46 44  	db	OP_LDY,OP_LDA,OP_LDX,OP_LDA
  1363 00:F376: 2C 26 74 26  	db	OP_CPY,OP_CMP,OP_REP,OP_CMP	; C0
  1364 00:F37A: 2C 26 2E 26  	db	OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1365 00:F37E: 3A 26 30 B0  	db	OP_INY,OP_CMP,OP_DEX,OP_WAI
  1366 00:F382: 2C 26 2E 26  	db	OP_CPY,OP_CMP,OP_DEC,OP_CMP
  1367 00:F386: 10 26 26 26  	db	OP_BNE,OP_CMP,OP_CMP,OP_CMP	; D0
  1368 00:F38A: 56 26 2E 26  	db	OP_PEI,OP_CMP,OP_DEC,OP_CMP
  1369 00:F38E: 20 26 64 8C  	db	OP_CLD,OP_CMP,OP_PHX,OP_STP
  1370 00:F392: 3C 26 2E 26  	db	OP_JML,OP_CMP,OP_DEC,OP_CMP
  1371 00:F396: 2A 80 88 80  	db	OP_CPX,OP_SBC,OP_SEP,OP_SBC	; E0
  1372 00:F39A: 2A 80 36 80  	db	OP_CPX,OP_SBC,OP_INC,OP_SBC
  1373 00:F39E: 38 80 50 B4  	db	OP_INX,OP_SBC,OP_NOP,OP_XBA
  1374 00:F3A2: 2A 80 36 80  	db	OP_CPX,OP_SBC,OP_INC,OP_SBC
  1375 00:F3A6: 0A 80 80 80  	db	OP_BEQ,OP_SBC,OP_SBC,OP_SBC	; F0
  1376 00:F3AA: 54 80 36 80  	db	OP_PEA,OP_SBC,OP_INC,OP_SBC
  1377 00:F3AE: 84 80 70 B6  	db	OP_SED,OP_SBC,OP_PLX,OP_XCE
  1378 00:F3B2: 42 80 36 80  	db	OP_JSR,OP_SBC,OP_INC,OP_SBC
  1379                        
  1380                        MODES:
  1381 00:F3B6: 2E 1E 2E 12  	db	MD_INT,MD_DIX,MD_INT,MD_STK	; 00
  1382 00:F3BA: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1383 00:F3BE: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1384 00:F3C2: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1385 00:F3C6: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 10
  1386 00:F3CA: 10 14 14 22  	db	MD_DPG,MD_DPX,MD_DPX,MD_DLY
  1387 00:F3CE: 24 06 02 24  	db	MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1388 00:F3D2: 00 04 04 0A  	db	MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1389 00:F3D6: 00 1E 08 12  	db	MD_ABS,MD_DIX,MD_ALG,MD_STK	; 20
  1390 00:F3DA: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1391 00:F3DE: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1392 00:F3E2: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1393 00:F3E6: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 30
  1394 00:F3EA: 14 14 14 22  	db	MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1395 00:F3EE: 24 06 02 24  	db	MD_IMP,MD_ABY,MD_ACC,MD_IMP
  1396 00:F3F2: 04 04 04 0A  	db	MD_ABX,MD_ABX,MD_ABX,MD_ALX
  1397 00:F3F6: 24 1E 2E 12  	db	MD_IMP,MD_DIX,MD_INT,MD_STK	; 40
  1398 00:F3FA: 2A 10 10 1A  	db	MD_MOV,MD_DPG,MD_DPG,MD_DLI
  1399 00:F3FE: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1400 00:F402: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1401 00:F406: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 50
  1402 00:F40A: 2A 14 14 22  	db	MD_MOV,MD_DPX,MD_DPX,MD_DLY
  1403 00:F40E: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1404 00:F412: 08 04 04 0A  	db	MD_ALG,MD_ABX,MD_ABX,MD_ALX
  1405 00:F416: 24 1E 36 12  	db	MD_IMP,MD_DIX,MD_PER,MD_STK	; 60
  1406 00:F41A: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1407 00:F41E: 24 2C 02 24  	db	MD_IMP,MD_IMM,MD_ACC,MD_IMP
  1408 00:F422: 0C 00 00 08  	db	MD_AIN,MD_ABS,MD_ABS,MD_ALG
  1409 00:F426: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 70
  1410 00:F42A: 14 14 14 22  	db	MD_DPX,MD_DPX,MD_DPX,MD_DLY
  1411 00:F42E: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1412 00:F432: 0E 04 04 0A  	db	MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1413 00:F436: 26 1E 28 12  	db	MD_REL,MD_DIX,MD_RLG,MD_STK	; 80
  1414 00:F43A: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1415 00:F43E: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1416 00:F442: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1417 00:F446: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; 90
  1418 00:F44A: 14 14 16 22  	db	MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1419 00:F44E: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1420 00:F452: 00 04 04 0A  	db	MD_ABS,MD_ABX,MD_ABX,MD_ALX
  1421 00:F456: 30 1E 30 12  	db	MD_IMX,MD_DIX,MD_IMX,MD_STK	; A0
  1422 00:F45A: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1423 00:F45E: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1424 00:F462: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1425 00:F466: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; B0
  1426 00:F46A: 14 14 16 22  	db	MD_DPX,MD_DPX,MD_DPY,MD_DLY
  1427 00:F46E: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1428 00:F472: 04 04 06 0A  	db	MD_ABX,MD_ABX,MD_ABY,MD_ALX
  1429 00:F476: 30 1E 2E 12  	db	MD_IMX,MD_DIX,MD_INT,MD_STK	; C0
  1430 00:F47A: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1431 00:F47E: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1432 00:F482: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1433 00:F486: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; D0
  1434 00:F48A: 34 14 14 22  	db	MD_PEI,MD_DPX,MD_DPX,MD_DLY
  1435 00:F48E: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1436 00:F492: 0C 04 04 0A  	db	MD_AIN,MD_ABX,MD_ABX,MD_ALX
  1437 00:F496: 30 1E 2E 12  	db	MD_IMX,MD_DIX,MD_INT,MD_STK	; E0
  1438 00:F49A: 10 10 10 1A  	db	MD_DPG,MD_DPG,MD_DPG,MD_DLI
  1439 00:F49E: 24 2C 24 24  	db	MD_IMP,MD_IMM,MD_IMP,MD_IMP
  1440 00:F4A2: 00 00 00 08  	db	MD_ABS,MD_ABS,MD_ABS,MD_ALG
  1441 00:F4A6: 26 20 18 1C  	db	MD_REL,MD_DIY,MD_DIN,MD_SKY	; F0
  1442 00:F4AA: 32 14 14 22  	db	MD_PEA,MD_DPX,MD_DPX,MD_DLY
  1443 00:F4AE: 24 06 24 24  	db	MD_IMP,MD_ABY,MD_IMP,MD_IMP
  1444 00:F4B2: 0E 04 04 0A  	db	MD_AIX,MD_ABX,MD_ABX,MD_ALX
  1445                        
  1446                        MNEMONICS:
  1447                        	MNEM	'A','D','C'
+ 1447 00:F4B6: 83 04                        dw      (((('A'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1448                        	MNEM	'A','N','D'
+ 1448 00:F4B8: C4 05                        dw      (((('A'-'@')<<5)|('N'-'@'))<<5)|('D'-'@')
  1449                        	MNEM	'A','S','L'
+ 1449 00:F4BA: 6C 06                        dw      (((('A'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1450                        	MNEM	'B','C','C'
+ 1450 00:F4BC: 63 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('C'-'@')
  1451                        	MNEM	'B','C','S'
+ 1451 00:F4BE: 73 08                        dw      (((('B'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1452                        	MNEM	'B','E','Q'
+ 1452 00:F4C0: B1 08                        dw      (((('B'-'@')<<5)|('E'-'@'))<<5)|('Q'-'@')
  1453                        	MNEM	'B','I','T'
+ 1453 00:F4C2: 34 09                        dw      (((('B'-'@')<<5)|('I'-'@'))<<5)|('T'-'@')
  1454                        	MNEM	'B','M','I'
+ 1454 00:F4C4: A9 09                        dw      (((('B'-'@')<<5)|('M'-'@'))<<5)|('I'-'@')
  1455                        	MNEM	'B','N','E'
+ 1455 00:F4C6: C5 09                        dw      (((('B'-'@')<<5)|('N'-'@'))<<5)|('E'-'@')
  1456                        	MNEM	'B','P','L'
+ 1456 00:F4C8: 0C 0A                        dw      (((('B'-'@')<<5)|('P'-'@'))<<5)|('L'-'@')
  1457                        	MNEM	'B','R','A'
+ 1457 00:F4CA: 41 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1458                        	MNEM	'B','R','K'
+ 1458 00:F4CC: 4B 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('K'-'@')
  1459                        	MNEM	'B','R','L'
+ 1459 00:F4CE: 4C 0A                        dw      (((('B'-'@')<<5)|('R'-'@'))<<5)|('L'-'@')
  1460                        	MNEM	'B','V','C'
+ 1460 00:F4D0: C3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('C'-'@')
  1461                        	MNEM	'B','V','S'
+ 1461 00:F4D2: D3 0A                        dw      (((('B'-'@')<<5)|('V'-'@'))<<5)|('S'-'@')
  1462                        	MNEM	'C','L','C'
+ 1462 00:F4D4: 83 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('C'-'@')
  1463                        	MNEM	'C','L','D'
+ 1463 00:F4D6: 84 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1464                        	MNEM	'C','L','I'
+ 1464 00:F4D8: 89 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('I'-'@')
  1465                        	MNEM	'C','L','V'
+ 1465 00:F4DA: 96 0D                        dw      (((('C'-'@')<<5)|('L'-'@'))<<5)|('V'-'@')
  1466                        	MNEM	'C','M','P'
+ 1466 00:F4DC: B0 0D                        dw      (((('C'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1467                        	MNEM	'C','O','P'
+ 1467 00:F4DE: F0 0D                        dw      (((('C'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1468                        	MNEM	'C','P','X'
+ 1468 00:F4E0: 18 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('X'-'@')
  1469                        	MNEM	'C','P','Y'
+ 1469 00:F4E2: 19 0E                        dw      (((('C'-'@')<<5)|('P'-'@'))<<5)|('Y'-'@')
  1470                        	MNEM	'D','E','C'
+ 1470 00:F4E4: A3 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1471                        	MNEM	'D','E','X'
+ 1471 00:F4E6: B8 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('X'-'@')
  1472                        	MNEM	'D','E','Y'
+ 1472 00:F4E8: B9 10                        dw      (((('D'-'@')<<5)|('E'-'@'))<<5)|('Y'-'@')
  1473                        	MNEM	'E','O','R'
+ 1473 00:F4EA: F2 15                        dw      (((('E'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1474                        	MNEM	'I','N','C'
+ 1474 00:F4EC: C3 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('C'-'@')
  1475                        	MNEM	'I','N','X'
+ 1475 00:F4EE: D8 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('X'-'@')
  1476                        	MNEM	'I','N','Y'
+ 1476 00:F4F0: D9 25                        dw      (((('I'-'@')<<5)|('N'-'@'))<<5)|('Y'-'@')
  1477                        	MNEM	'J','M','L'
+ 1477 00:F4F2: AC 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('L'-'@')
  1478                        	MNEM	'J','M','P'
+ 1478 00:F4F4: B0 29                        dw      (((('J'-'@')<<5)|('M'-'@'))<<5)|('P'-'@')
  1479                        	MNEM	'J','S','L'
+ 1479 00:F4F6: 6C 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('L'-'@')
  1480                        	MNEM	'J','S','R'
+ 1480 00:F4F8: 72 2A                        dw      (((('J'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1481                        	MNEM	'L','D','A'
+ 1481 00:F4FA: 81 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('A'-'@')
  1482                        	MNEM	'L','D','X'
+ 1482 00:F4FC: 98 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('X'-'@')
  1483                        	MNEM	'L','D','Y'
+ 1483 00:F4FE: 99 30                        dw      (((('L'-'@')<<5)|('D'-'@'))<<5)|('Y'-'@')
  1484                        	MNEM	'L','S','R'
+ 1484 00:F500: 72 32                        dw      (((('L'-'@')<<5)|('S'-'@'))<<5)|('R'-'@')
  1485                        	MNEM	'M','V','N'
+ 1485 00:F502: CE 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('N'-'@')
  1486                        	MNEM	'M','V','P'
+ 1486 00:F504: D0 36                        dw      (((('M'-'@')<<5)|('V'-'@'))<<5)|('P'-'@')
  1487                        	MNEM	'N','O','P'
+ 1487 00:F506: F0 39                        dw      (((('N'-'@')<<5)|('O'-'@'))<<5)|('P'-'@')
  1488                        	MNEM	'O','R','A'
+ 1488 00:F508: 41 3E                        dw      (((('O'-'@')<<5)|('R'-'@'))<<5)|('A'-'@')
  1489                        	MNEM	'P','E','A'
+ 1489 00:F50A: A1 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('A'-'@')
  1490                        	MNEM	'P','E','I'
+ 1490 00:F50C: A9 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1491                        	MNEM	'P','E','R'
+ 1491 00:F50E: B2 40                        dw      (((('P'-'@')<<5)|('E'-'@'))<<5)|('R'-'@')
  1492                        	MNEM	'P','H','A'
+ 1492 00:F510: 01 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('A'-'@')
  1493                        	MNEM	'P','H','B'
+ 1493 00:F512: 02 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('B'-'@')
  1494                        	MNEM	'P','H','D'
+ 1494 00:F514: 04 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('D'-'@')
  1495                        	MNEM	'P','H','K'
+ 1495 00:F516: 0B 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('K'-'@')
  1496                        	MNEM	'P','H','P'
+ 1496 00:F518: 10 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('P'-'@')
  1497                        	MNEM	'P','H','X'
+ 1497 00:F51A: 18 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('X'-'@')
  1498                        	MNEM	'P','H','Y'
+ 1498 00:F51C: 19 41                        dw      (((('P'-'@')<<5)|('H'-'@'))<<5)|('Y'-'@')
  1499                        	MNEM	'P','L','A'
+ 1499 00:F51E: 81 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('A'-'@')
  1500                        	MNEM	'P','L','B'
+ 1500 00:F520: 82 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('B'-'@')
  1501                        	MNEM	'P','L','D'
+ 1501 00:F522: 84 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('D'-'@')
  1502                        	MNEM	'P','L','P'
+ 1502 00:F524: 90 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('P'-'@')
  1503                        	MNEM	'P','L','X'
+ 1503 00:F526: 98 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('X'-'@')
  1504                        	MNEM	'P','L','Y'
+ 1504 00:F528: 99 41                        dw      (((('P'-'@')<<5)|('L'-'@'))<<5)|('Y'-'@')
  1505                        	MNEM	'R','E','P'
+ 1505 00:F52A: B0 48                        dw      (((('R'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1506                        	MNEM	'R','O','L'
+ 1506 00:F52C: EC 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('L'-'@')
  1507                        	MNEM	'R','O','R'
+ 1507 00:F52E: F2 49                        dw      (((('R'-'@')<<5)|('O'-'@'))<<5)|('R'-'@')
  1508                        	MNEM	'R','T','I'
+ 1508 00:F530: 89 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('I'-'@')
  1509                        	MNEM	'R','T','L'
+ 1509 00:F532: 8C 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('L'-'@')
  1510                        	MNEM	'R','T','S'
+ 1510 00:F534: 93 4A                        dw      (((('R'-'@')<<5)|('T'-'@'))<<5)|('S'-'@')
  1511                        	MNEM	'S','B','C'
+ 1511 00:F536: 43 4C                        dw      (((('S'-'@')<<5)|('B'-'@'))<<5)|('C'-'@')
  1512                        	MNEM	'S','E','C'
+ 1512 00:F538: A3 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('C'-'@')
  1513                        	MNEM	'S','E','D'
+ 1513 00:F53A: A4 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('D'-'@')
  1514                        	MNEM	'S','E','I'
+ 1514 00:F53C: A9 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('I'-'@')
  1515                        	MNEM	'S','E','P'
+ 1515 00:F53E: B0 4C                        dw      (((('S'-'@')<<5)|('E'-'@'))<<5)|('P'-'@')
  1516                        	MNEM	'S','T','A'
+ 1516 00:F540: 81 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('A'-'@')
  1517                        	MNEM	'S','T','P'
+ 1517 00:F542: 90 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('P'-'@')
  1518                        	MNEM	'S','T','X'
+ 1518 00:F544: 98 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('X'-'@')
  1519                        	MNEM	'S','T','Y'
+ 1519 00:F546: 99 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Y'-'@')
  1520                        	MNEM	'S','T','Z'
+ 1520 00:F548: 9A 4E                        dw      (((('S'-'@')<<5)|('T'-'@'))<<5)|('Z'-'@')
  1521                        	MNEM	'T','A','X'
+ 1521 00:F54A: 38 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('X'-'@')
  1522                        	MNEM	'T','A','Y'
+ 1522 00:F54C: 39 50                        dw      (((('T'-'@')<<5)|('A'-'@'))<<5)|('Y'-'@')
  1523                        	MNEM	'T','C','D'
+ 1523 00:F54E: 64 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('D'-'@')
  1524                        	MNEM	'T','C','S'
+ 1524 00:F550: 73 50                        dw      (((('T'-'@')<<5)|('C'-'@'))<<5)|('S'-'@')
  1525                        	MNEM	'T','D','C'
+ 1525 00:F552: 83 50                        dw      (((('T'-'@')<<5)|('D'-'@'))<<5)|('C'-'@')
  1526                        	MNEM	'T','R','B'
+ 1526 00:F554: 42 52                        dw      (((('T'-'@')<<5)|('R'-'@'))<<5)|('B'-'@')
  1527                        	MNEM	'T','S','B'
+ 1527 00:F556: 62 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('B'-'@')
  1528                        	MNEM	'T','S','C'
+ 1528 00:F558: 63 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('C'-'@')
  1529                        	MNEM	'T','S','X'
+ 1529 00:F55A: 78 52                        dw      (((('T'-'@')<<5)|('S'-'@'))<<5)|('X'-'@')
  1530                        	MNEM	'T','X','A'
+ 1530 00:F55C: 01 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('A'-'@')
  1531                        	MNEM	'T','X','S'
+ 1531 00:F55E: 13 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('S'-'@')
  1532                        	MNEM	'T','X','Y'
+ 1532 00:F560: 19 53                        dw      (((('T'-'@')<<5)|('X'-'@'))<<5)|('Y'-'@')
  1533                        	MNEM	'T','Y','A'
+ 1533 00:F562: 21 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('A'-'@')
  1534                        	MNEM	'T','Y','X'
+ 1534 00:F564: 38 53                        dw      (((('T'-'@')<<5)|('Y'-'@'))<<5)|('X'-'@')
  1535                        	MNEM	'W','A','I'
+ 1535 00:F566: 29 5C                        dw      (((('W'-'@')<<5)|('A'-'@'))<<5)|('I'-'@')
  1536                        	MNEM	'W','D','M'
+ 1536 00:F568: 8D 5C                        dw      (((('W'-'@')<<5)|('D'-'@'))<<5)|('M'-'@')
  1537                        	MNEM	'X','B','A'
+ 1537 00:F56A: 41 60                        dw      (((('X'-'@')<<5)|('B'-'@'))<<5)|('A'-'@')
  1538                        	MNEM	'X','C','E'
+ 1538 00:F56C: 65 60                        dw      (((('X'-'@')<<5)|('C'-'@'))<<5)|('E'-'@')
  1539                        
  1540                        ;;;
  1541                        ;;;  Go address
  1542                        ;;;
  1543                        GO
  1544                        	longi off
  1545                        	longa off
  1546 00:F56E: 64 70        	stz	stp_flg		; clear stop flag
  1547 00:F570: 20 07 EE     	jsr	arg_parsing
  1548 00:F573: A5 3F        	lda	argtype
  1549 00:F575: F0 30        	beq	G0		;; No arg.
  1550                        
  1551 00:F577: AA           	tax
  1552 00:F578: 29 04        	and	#4
  1553 00:F57A: F0 04        	beq	go_3
  1554                        
  1555                        	;; 1st arg. found
  1556 00:F57C: A5 3A        	LDA	arg1st
  1557 00:F57E: 85 58        	sta	REGPB		; save program bank reg
  1558                        go_3
  1559 00:F580: 8A           	txa
  1560 00:F581: 29 02        	and	#2
  1561 00:F583: F0 08        	beq	go_4
  1562                        	
  1563                        	;; set 2nd arg.
  1564                        	long_a
+ 1564 00:F585: C2 20                        rep     #M_FLAG
+ 1564                                        longa   on
  1565 00:F587: A5 3B        	LDA	arg2nd
  1566 00:F589: 85 55        	STA	REGPC		; set start address
  1567                        	short_a
+ 1567 00:F58B: E2 20                        sep     #M_FLAG
+ 1567                                        longa   off
  1568                        
  1569                        go_4
  1570 00:F58D: 8A           	txa
  1571 00:F58E: 29 01        	and	#1
  1572 00:F590: F0 15        	beq	G0
  1573                        
  1574                        	;; set 3rd arg.
  1575                        
  1576 00:F592: 85 70        	sta	stp_flg		; set stop flag
  1577                        
  1578                        	; save original binary at break point
  1579                        
  1580 00:F594: A5 58        	lda	REGPB
  1581 00:F596: 85 75        	sta	sv_bnk		; save program bank reg
  1582                        
  1583                        	long_a
+ 1583 00:F598: C2 20                        rep     #M_FLAG
+ 1583                                        longa   on
  1584 00:F59A: A5 3D        	lda	arg3rd
  1585 00:F59C: 85 73        	sta	sv_adr
  1586                        
  1587 00:F59E: A7 73        	lda	[sv_adr]	; get save code
  1588 00:F5A0: 85 71        	sta	sav_dat		; save original binary
  1589 00:F5A2: A9 00 00     	lda	#0		; BRK 0 (A = 0000)
  1590 00:F5A5: 87 73        	sta	[sv_adr]	; set BRK 0 code
  1591                        
  1592                        G0
  1593                        	long_a
+ 1593 00:F5A7: C2 20                        rep     #M_FLAG
+ 1593                                        longa   on
  1594 00:F5A9: A5 53        	lda	REGSP
  1595 00:F5AB: 1B           	tas			; SP
  1596                        	short_a
+ 1596 00:F5AC: E2 20                        sep     #M_FLAG
+ 1596                                        longa   off
  1597 00:F5AE: A5 58        	lda	REGPB
  1598 00:F5B0: 48           	pha			; Program Bank register
  1599 00:F5B1: A5 56        	LDA	REGPC+1
  1600 00:F5B3: 48           	PHA			; PC(H)
  1601 00:F5B4: A5 55        	LDA	REGPC
  1602 00:F5B6: 48           	PHA			; PC(L)
  1603 00:F5B7: A5 57        	LDA	REGPSR
  1604 00:F5B9: 48           	PHA			; PSR
  1605                        	long_ai
+ 1605 00:F5BA: C2 30                        rep     #M_FLAG|X_FLAG
+ 1605                                        longa   on
+ 1605                                        longi   on
  1606 00:F5BC: A6 4F        	LDX	REGX
  1607 00:F5BE: A4 51        	LDY	REGY
  1608 00:F5C0: A5 4D        	LDA	REGA
  1609                        
  1610 00:F5C2: 48           	pha
  1611 00:F5C3: D4 5A        	pei	(REGDP)		; push Direct Page register (16 bit)
  1612                        	short_a
+ 1612 00:F5C5: E2 20                        sep     #M_FLAG
+ 1612                                        longa   off
  1613 00:F5C7: A5 59        	lda	REGDB		; push Data Bank register (8 bit)
  1614 00:F5C9: 48           	pha
  1615                        
  1616 00:F5CA: AB           	plb			; restore Data Bank register
  1617 00:F5CB: 2B           	pld			; restore Direct Page register
  1618                        	long_a
+ 1618 00:F5CC: C2 20                        rep     #M_FLAG
+ 1618                                        longa   on
  1619 00:F5CE: 68           	pla			; restore A register
  1620                        
  1621 00:F5CF: 40           	RTI
  1622                        
  1623                        ;;;
  1624                        ;;; Set memory
  1625                        ;;;
  1626                        SETM
  1627                        	longi off
  1628                        	longa off
  1629 00:F5D0: 20 07 EE     	jsr	arg_parsing
  1630 00:F5D3: A5 3F        	lda	argtype
  1631 00:F5D5: F0 1E        	beq	SM1 ;; No arg.
  1632                        
  1633 00:F5D7: AA           	tax
  1634 00:F5D8: 29 04        	and	#4
  1635 00:F5DA: F0 04        	beq	set3
  1636                        
  1637                        	;; 1st arg. found
  1638 00:F5DC: A5 3A        	LDA	arg1st
  1639 00:F5DE: 85 44        	STA	dumpdb		; set data bank
  1640                        
  1641                        set3
  1642 00:F5E0: 8A           	txa
  1643 00:F5E1: 29 02        	and	#2
  1644 00:F5E3: F0 08        	beq	set4
  1645                        	
  1646                        	;; set 2nd arg.
  1647                        	long_a
+ 1647 00:F5E5: C2 20                        rep     #M_FLAG
+ 1647                                        longa   on
  1648 00:F5E7: A5 3B        	LDA	arg2nd
  1649 00:F5E9: 85 49        	STA	SADDR		; set start address
  1650                        	short_a
+ 1650 00:F5EB: E2 20                        sep     #M_FLAG
+ 1650                                        longa   off
  1651                        
  1652                        set4
  1653 00:F5ED: 8A           	txa
  1654 00:F5EE: 29 01        	and	#1
  1655 00:F5F0: F0 03        	beq	SM1
  1656                        
  1657                        	;; 3rd arg.
  1658 00:F5F2: 4C F3 ED     	jmp	ERR
  1659                        
  1660                        SM1:
  1661 00:F5F5: 20 59 EE     	jsr	ptt_db		; print bank reg
  1662 00:F5F8: A5 4A        	LDA	SADDR+1
  1663 00:F5FA: 20 89 FA     	JSR	HEXOUT2
  1664 00:F5FD: A5 49        	LDA	SADDR
  1665 00:F5FF: 20 89 FA     	JSR	HEXOUT2
  1666                        
  1667 00:F602: A9 C3        	LDA	#$FF&DSEP1
  1668 00:F604: 85 63        	STA	PT0
  1669 00:F606: A9 FB        	LDA	#DSEP1>>8
  1670 00:F608: 85 64        	STA	PT0+1
  1671 00:F60A: 20 79 FA     	JSR	STROUT		; " : "
  1672 00:F60D: A0 00        	LDY	#0
  1673                        	; get a data----------------
  1674 00:F60F: 8B           	phb			; push DBR
  1675 00:F610: A5 44        	lda	dumpdb
  1676 00:F612: 48           	pha
  1677 00:F613: AB           	plb			; set Data Bank
  1678 00:F614: B1 49        	LDA	(SADDR),Y	; get a data
  1679 00:F616: AB           	plb			; pop DBR
  1680                        	; ---------------------------
  1681 00:F617: 20 89 FA     	JSR	HEXOUT2
  1682                        
  1683 00:F61A: A9 20        	LDA	#' '
  1684 00:F61C: 20 7E FD     	JSR	CONOUT
  1685 00:F61F: 20 D6 FA     	JSR	GETLIN
  1686 00:F622: A2 00        	LDX	#0
  1687 00:F624: B5 2A        	LDA	INBUF,X
  1688 00:F626: D0 10        	BNE	SM2
  1689                        SM10	
  1690                        	;; Empty (Increment address)
  1691 00:F628: A5 49        	LDA	SADDR
  1692 00:F62A: 18           	CLC
  1693 00:F62B: 69 01        	ADC	#1
  1694 00:F62D: 85 49        	STA	SADDR
  1695 00:F62F: A5 4A        	LDA	SADDR+1
  1696 00:F631: 69 00        	ADC	#0
  1697 00:F633: 85 4A        	STA	SADDR+1
  1698 00:F635: 4C F5 F5     	JMP	SM1
  1699                        SM2
  1700 00:F638: C9 2D        	CMP	#'-'
  1701 00:F63A: D0 10        	BNE	SM3
  1702                        	;; '-' (Decrement address)
  1703 00:F63C: A5 49        	LDA	SADDR
  1704 00:F63E: 38           	SEC
  1705 00:F63F: E9 01        	SBC	#1
  1706 00:F641: 85 49        	STA	SADDR
  1707 00:F643: A5 4A        	LDA	SADDR+1
  1708 00:F645: E9 00        	SBC	#0
  1709 00:F647: 85 4A        	STA	SADDR+1
  1710 00:F649: 4C F5 F5     	JMP	SM1
  1711                        SM3
  1712 00:F64C: C9 2E        	CMP	#'.'
  1713 00:F64E: D0 03        	BNE	SM4
  1714                        	;; '.' (Quit)
  1715 00:F650: 4C 7C ED     	JMP	WSTART
  1716                        SM4
  1717 00:F653: 20 41 FB     	JSR	RDHEX
  1718 00:F656: A5 67        	LDA	CNT
  1719 00:F658: D0 03        	BNE	SM40
  1720                        SMER
  1721 00:F65A: 4C F3 ED     	JMP	ERR
  1722                        SM40
  1723                        	; repar original bug -------
  1724 00:F65D: B5 2A        	LDA	INBUF,X
  1725 00:F65F: D0 F9        	bne	SMER
  1726                        	; repar original bug -------
  1727                        
  1728 00:F661: A5 65        	LDA	PT1
  1729                        
  1730                        	; get a data(65C816)----------------
  1731 00:F663: 8B           	phb			; push DBR
  1732 00:F664: A4 44        	ldy	dumpdb
  1733 00:F666: 5A           	phy
  1734 00:F667: AB           	plb			; set Data Bank
  1735 00:F668: A0 00        	LDY	#0
  1736 00:F66A: 91 49        	STA	(SADDR),Y	; set data
  1737 00:F66C: AB           	plb			; pop DBR
  1738                        	; get a data(65C816)----------------
  1739                        
  1740 00:F66D: 4C 28 F6     	JMP	SM10
  1741                        
  1742                        ;;;
  1743                        ;;; LOAD HEX file
  1744                        ;;;
  1745                        LOADH
  1746                        	longi off
  1747                        	longa off
  1748 00:F670: E8           	INX
  1749 00:F671: 20 41 FB     	JSR	RDHEX
  1750 00:F674: B5 2A        	LDA	INBUF,X
  1751 00:F676: D0 E2        	BNE	SMER
  1752                        LH0
  1753 00:F678: 20 6A FD     	JSR	CONIN
  1754 00:F67B: 20 36 FB     	JSR	UPPER
  1755 00:F67E: C9 53        	CMP	#'S'
  1756 00:F680: F0 7E        	BEQ	LHS0
  1757                        LH1a
  1758 00:F682: C9 3A        	CMP	#':'
  1759 00:F684: F0 0E        	BEQ	LHI0
  1760                        LH2
  1761                        	;; Skip to EOL
  1762 00:F686: C9 0D        	CMP	#CR
  1763 00:F688: F0 EE        	BEQ	LH0
  1764 00:F68A: C9 0A        	CMP	#LF
  1765 00:F68C: F0 EA        	BEQ	LH0
  1766                        LH3
  1767 00:F68E: 20 6A FD     	JSR	CONIN
  1768 00:F691: 4C 86 F6     	JMP	LH2
  1769                        
  1770                        LHI0
  1771 00:F694: 20 A1 FA     	JSR	HEXIN
  1772 00:F697: 85 61        	STA	CKSUM
  1773 00:F699: 85 67        	STA	CNT		; Length
  1774                        
  1775 00:F69B: 20 A1 FA     	JSR	HEXIN
  1776 00:F69E: 85 60        	STA	DMPPT+1		; Address H
  1777 00:F6A0: 18           	CLC
  1778 00:F6A1: 65 61        	ADC	CKSUM
  1779 00:F6A3: 85 61        	STA	CKSUM
  1780                        
  1781 00:F6A5: 20 A1 FA     	JSR	HEXIN
  1782 00:F6A8: 85 5F        	STA	DMPPT		; Address L
  1783 00:F6AA: 18           	CLC
  1784 00:F6AB: 65 61        	ADC	CKSUM
  1785 00:F6AD: 85 61        	STA	CKSUM
  1786                        
  1787                        	;; Add offset
  1788 00:F6AF: A5 5F        	LDA	DMPPT
  1789 00:F6B1: 18           	CLC
  1790 00:F6B2: 65 65        	ADC	PT1
  1791 00:F6B4: 85 5F        	STA	DMPPT
  1792 00:F6B6: A5 60        	LDA	DMPPT+1
  1793 00:F6B8: 65 66        	ADC	PT1+1
  1794 00:F6BA: 85 60        	STA	DMPPT+1
  1795 00:F6BC: A0 00        	LDY	#0
  1796                        	
  1797 00:F6BE: 20 A1 FA     	JSR	HEXIN
  1798 00:F6C1: 85 4C        	STA	RECTYP		; Record Type
  1799 00:F6C3: 18           	CLC
  1800 00:F6C4: 65 61        	ADC	CKSUM
  1801 00:F6C6: 85 61        	STA	CKSUM
  1802                        
  1803 00:F6C8: A5 67        	LDA	CNT
  1804 00:F6CA: F0 17        	BEQ	LHI3
  1805                        LHI1
  1806 00:F6CC: 20 A1 FA     	JSR	HEXIN
  1807 00:F6CF: 48           	PHA
  1808 00:F6D0: 18           	CLC
  1809 00:F6D1: 65 61        	ADC	CKSUM
  1810 00:F6D3: 85 61        	STA	CKSUM
  1811                        
  1812 00:F6D5: A5 4C        	LDA	RECTYP
  1813 00:F6D7: D0 05        	BNE	LHI2
  1814                        
  1815 00:F6D9: 68           	PLA
  1816 00:F6DA: 91 5F        	STA	(DMPPT),Y
  1817 00:F6DC: C8           	INY
  1818 00:F6DD: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1819                        LHI2
  1820 00:F6DE: 68           	PLA
  1821 00:F6DF: C6 67        	DEC	CNT
  1822 00:F6E1: D0 E9        	BNE	LHI1
  1823                        LHI3
  1824 00:F6E3: 20 A1 FA     	JSR	HEXIN
  1825 00:F6E6: 18           	CLC
  1826 00:F6E7: 65 61        	ADC	CKSUM
  1827 00:F6E9: D0 07        	BNE	LHIE		; Checksum error
  1828 00:F6EB: A5 4C        	LDA	RECTYP
  1829 00:F6ED: F0 9F        	BEQ	LH3
  1830 00:F6EF: 4C 7C ED     	JMP	WSTART
  1831                        LHIE
  1832 00:F6F2: A9 9E        	LDA	#$FF&IHEMSG
  1833 00:F6F4: 85 63        	STA	PT0
  1834 00:F6F6: A9 FB        	LDA	#IHEMSG>>8
  1835 00:F6F8: 85 64        	STA	PT0+1
  1836 00:F6FA: 20 79 FA     	JSR	STROUT
  1837 00:F6FD: 4C 7C ED     	JMP	WSTART
  1838                        
  1839                        LHS0	
  1840 00:F700: A9 2C        	lda	#','
  1841 00:F702: 20 7E FD     	jsr	CONOUT
  1842 00:F705: 20 6A FD     	JSR	CONIN
  1843 00:F708: 85 4C        	STA	RECTYP		; Record Type
  1844                        
  1845 00:F70A: 20 A1 FA     	JSR	HEXIN
  1846 00:F70D: 85 67        	STA	CNT		; (CNT) = Length+3
  1847 00:F70F: 85 61        	STA	CKSUM
  1848                        
  1849 00:F711: 20 A1 FA     	JSR	HEXIN
  1850 00:F714: 85 60        	STA	DMPPT+1		; Address H
  1851 00:F716: 18           	CLC
  1852 00:F717: 65 61        	ADC	CKSUM
  1853 00:F719: 85 61        	STA	CKSUM
  1854                        	
  1855 00:F71B: 20 A1 FA     	JSR	HEXIN
  1856 00:F71E: 85 5F        	STA	DMPPT		; Address L
  1857 00:F720: 18           	CLC
  1858 00:F721: 65 61        	ADC	CKSUM
  1859 00:F723: 85 61        	STA	CKSUM
  1860                        
  1861                        	;; Add offset
  1862 00:F725: A5 5F        	LDA	DMPPT
  1863 00:F727: 18           	CLC
  1864 00:F728: 65 65        	ADC	PT1
  1865 00:F72A: 85 5F        	STA	DMPPT
  1866 00:F72C: A5 60        	LDA	DMPPT+1
  1867 00:F72E: 65 66        	ADC	PT1+1
  1868 00:F730: 85 60        	STA	DMPPT+1
  1869 00:F732: A0 00        	LDY	#0
  1870                        
  1871 00:F734: C6 67        	DEC	CNT
  1872 00:F736: C6 67        	DEC	CNT
  1873 00:F738: C6 67        	DEC	CNT
  1874 00:F73A: F0 19        	BEQ	LHS3
  1875                        LHS1
  1876 00:F73C: 20 A1 FA     	JSR	HEXIN
  1877 00:F73F: 48           	PHA
  1878 00:F740: 18           	CLC
  1879 00:F741: 65 61        	ADC	CKSUM
  1880 00:F743: 85 61        	STA	CKSUM		; Checksum
  1881                        
  1882 00:F745: A5 4C        	LDA	RECTYP
  1883 00:F747: C9 31        	CMP	#'1'
  1884 00:F749: D0 05        	BNE	LHS2
  1885                        
  1886 00:F74B: 68           	PLA
  1887 00:F74C: 91 5F        	STA	(DMPPT),Y
  1888 00:F74E: C8           	INY
  1889 00:F74F: 48           	PHA			; Dummy, better than JMP to skip next PLA
  1890                        LHS2
  1891 00:F750: 68           	PLA
  1892 00:F751: C6 67        	DEC	CNT
  1893 00:F753: D0 E7        	BNE	LHS1
  1894                        LHS3
  1895 00:F755: 20 A1 FA     	JSR	HEXIN
  1896 00:F758: 18           	CLC
  1897 00:F759: 65 61        	ADC	CKSUM
  1898 00:F75B: C9 FF        	CMP	#$FF
  1899 00:F75D: D0 09        	BNE	LHSE		; Checksum error
  1900                        
  1901 00:F75F: A5 4C        	LDA	RECTYP
  1902 00:F761: C9 39        	CMP	#'9'
  1903 00:F763: F0 0E        	BEQ	LHSR
  1904 00:F765: 4C 8E F6     	JMP	LH3
  1905                        LHSE
  1906 00:F768: A9 AB        	LDA	#$FF&SHEMSG
  1907 00:F76A: 85 63        	STA	PT0
  1908 00:F76C: A9 FB        	LDA	#SHEMSG>>8
  1909 00:F76E: 85 64        	STA	PT0+1
  1910 00:F770: 20 79 FA     	JSR	STROUT
  1911                        LHSR	
  1912 00:F773: 4C 7C ED     	JMP	WSTART
  1913                        
  1914                        ;;;
  1915                        ;;; Register
  1916                        ;;;
  1917                        REG
  1918                        	longi off
  1919                        	longa off
  1920                        	
  1921 00:F776: E8           	INX
  1922 00:F777: B5 2A        	LDA	INBUF,X
  1923 00:F779: C9 00        	CMP	#0
  1924 00:F77B: D0 06        	BNE	RG0
  1925 00:F77D: 20 3C F8     	JSR	RDUMP
  1926 00:F780: 4C 7C ED     	JMP	WSTART
  1927                        RG0
  1928                        	long_i
+ 1928 00:F783: C2 10                        rep     #X_FLAG
+ 1928                                        longi   on
  1929 00:F785: A0 51 FC     	LDY	#RNTAB
  1930 00:F788: 84 65        	STY	PT1
  1931                        	short_i
+ 1931 00:F78A: E2 10                        sep     #X_FLAG
+ 1931                                        longi   off
  1932 00:F78C: A0 00        	LDY	#0
  1933                        RG1
  1934 00:F78E: D1 65        	CMP	(PT1),Y
  1935 00:F790: F0 13        	BEQ	RG2	; match a register
  1936 00:F792: C8           	INY
  1937 00:F793: 48           	PHA
  1938 00:F794: B1 65        	LDA	(PT1),Y
  1939 00:F796: F0 09        	BEQ	RGE
  1940 00:F798: 68           	PLA
  1941 00:F799: C8           	INY
  1942 00:F79A: C8           	INY
  1943 00:F79B: C8           	INY
  1944 00:F79C: C8           	INY
  1945 00:F79D: C8           	INY
  1946 00:F79E: 4C 8E F7     	JMP	RG1
  1947                        RGE
  1948 00:F7A1: 68           	PLA
  1949 00:F7A2: 4C F3 ED     	JMP	ERR
  1950                        RG2
  1951 00:F7A5: C8           	INY
  1952 00:F7A6: B1 65        	LDA	(PT1),Y		; $80 or 2 or 1
  1953 00:F7A8: C9 80        	CMP	#$80
  1954 00:F7AA: D0 19        	BNE	RG3		; 2 or 1
  1955                        	;; Next table
  1956 00:F7AC: C8           	INY
  1957 00:F7AD: B1 65        	LDA	(PT1),Y
  1958 00:F7AF: 85 67        	STA	CNT		; Temporary
  1959 00:F7B1: C8           	INY
  1960 00:F7B2: B1 65        	LDA	(PT1),Y
  1961 00:F7B4: 85 66        	STA	PT1+1
  1962 00:F7B6: A5 67        	LDA	CNT
  1963 00:F7B8: 85 65        	STA	PT1
  1964 00:F7BA: A0 00        	LDY	#0
  1965 00:F7BC: E8           	INX
  1966 00:F7BD: B5 2A        	LDA	INBUF,X
  1967 00:F7BF: 20 36 FB     	JSR	UPPER
  1968 00:F7C2: 4C 8E F7     	JMP	RG1
  1969                        RG3
  1970 00:F7C5: C9 00        	CMP	#0
  1971 00:F7C7: F0 70        	BEQ	RGE0
  1972                        
  1973 00:F7C9: C8           	INY			; +2
  1974 00:F7CA: B1 65        	LDA	(PT1),Y		; get address of register value
  1975 00:F7CC: AA           	TAX			;  ex: X = &REGA(in Direct Ppage)
  1976 00:F7CD: C8           	INY
  1977                        
  1978 00:F7CE: C8           	INY			; +4
  1979 00:F7CF: B1 65        	LDA	(PT1),Y		;
  1980 00:F7D1: 85 63        	STA	PT0		;
  1981 00:F7D3: C8           	INY			;  PT0 = char register point
  1982 00:F7D4: B1 65        	LDA	(PT1),Y		;  (ex: PT0 = &RNA;   *RNA = 'A')
  1983 00:F7D6: 85 64        	STA	PT0+1		;
  1984                        
  1985 00:F7D8: 84 67        	STY	CNT		; Save Y (STROUT destroys Y)
  1986 00:F7DA: 20 79 FA     	JSR	STROUT
  1987 00:F7DD: A9 3D        	LDA	#'='
  1988 00:F7DF: 20 7E FD     	JSR	CONOUT
  1989 00:F7E2: A4 67        	LDY	CNT		; Restore Y
  1990 00:F7E4: 88           	DEY
  1991 00:F7E5: 88           	DEY
  1992 00:F7E6: 88           	DEY
  1993 00:F7E7: 88           	DEY
  1994 00:F7E8: B1 65        	LDA	(PT1),Y		; get register size. 1 or 2
  1995 00:F7EA: 85 5E        	STA	REGSIZ
  1996 00:F7EC: C9 01        	CMP	#1
  1997 00:F7EE: D0 09        	BNE	RG4
  1998                        	;; 8 bit register
  1999 00:F7F0: BD 00 EC     	LDA	UNIMON_DP+0,X
  2000 00:F7F3: 20 89 FA     	JSR	HEXOUT2
  2001 00:F7F6: 4C 05 F8     	JMP	RG5
  2002                        RG4
  2003                        	;; 16 bit register
  2004 00:F7F9: BD 01 EC     	LDA	UNIMON_DP+1,X
  2005 00:F7FC: 20 89 FA     	JSR	HEXOUT2
  2006 00:F7FF: BD 00 EC     	LDA	UNIMON_DP+0,X
  2007 00:F802: 20 89 FA     	JSR	HEXOUT2
  2008                        RG5
  2009 00:F805: A9 20        	LDA	#' '
  2010 00:F807: 20 7E FD     	JSR	CONOUT
  2011 00:F80A: 86 61        	STX	CKSUM		; Save X (GETLIN destroys X)
  2012 00:F80C: 20 D6 FA     	JSR	GETLIN
  2013 00:F80F: A2 00        	LDX	#0
  2014 00:F811: 20 41 FB     	JSR	RDHEX
  2015 00:F814: A5 67        	LDA	CNT
  2016 00:F816: F0 1A        	BEQ	RGR
  2017 00:F818: A6 61        	LDX	CKSUM		; Restore X
  2018 00:F81A: A5 5E        	LDA	REGSIZ
  2019 00:F81C: C9 01        	CMP	#1
  2020 00:F81E: D0 08        	BNE	RG6
  2021                        	;; 8 bit register
  2022 00:F820: A5 65        	LDA	PT1
  2023 00:F822: 9D 00 EC     	STA	UNIMON_DP+0,X
  2024 00:F825: 4C 32 F8     	JMP	RG7
  2025                        RG6
  2026                        	;; 16 bit address
  2027 00:F828: A5 65        	LDA	PT1
  2028 00:F82A: 9D 00 EC     	STA	UNIMON_DP+0,X		; (L)
  2029 00:F82D: A5 66        	LDA	PT1+1
  2030 00:F82F: 9D 01 EC     	STA	UNIMON_DP+1,X		; (H)
  2031                        RG7	
  2032                        RGR	
  2033 00:F832: A5 57        	LDA	REGPSR
  2034 00:F834: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2035 00:F836: 4C 7C ED     	JMP	WSTART
  2036                        	
  2037                        RGE0	
  2038 00:F839: 4C F3 ED     	JMP	ERR
  2039                        	
  2040                        ;
  2041                        ; print all registers
  2042                        ;
  2043                        RDUMP
  2044                        	longi off
  2045                        	longa off
  2046                        
  2047 00:F83C: A0 28        	ldy	#40
  2048 00:F83E: A9 20        	lda	#' '
  2049                        spc_out
  2050 00:F840: 20 7E FD     	jsr	CONOUT
  2051 00:F843: 88           	dey
  2052 00:F844: D0 FA        	bne	spc_out
  2053                        
  2054                        	long_a
+ 2054 00:F846: C2 20                        rep     #M_FLAG
+ 2054                                        longa   on
  2055 00:F848: A9 31 FC     	LDA	#psn_bm
  2056 00:F84B: 85 63        	STA	PT0
  2057 00:F84D: 20 79 FA     	jsr	STROUT
  2058                        
  2059                        	long_a
+ 2059 00:F850: C2 20                        rep     #M_FLAG
+ 2059                                        longa   on
  2060 00:F852: A9 16 FC     	LDA	#RDSA	; A
  2061 00:F855: 85 63        	STA	PT0
  2062 00:F857: 20 79 FA     	JSR	STROUT
  2063                        	longa off
  2064 00:F85A: A5 4E        	LDA	REGA+1
  2065 00:F85C: 20 89 FA     	JSR	HEXOUT2
  2066 00:F85F: A5 4D        	LDA	REGA
  2067 00:F861: 20 89 FA     	JSR	HEXOUT2
  2068                        
  2069                        	long_a
+ 2069 00:F864: C2 20                        rep     #M_FLAG
+ 2069                                        longa   on
  2070 00:F866: A9 19 FC     	LDA	#RDSX	; X
  2071 00:F869: 85 63        	STA	PT0
  2072 00:F86B: 20 79 FA     	JSR	STROUT
  2073                        	longa off
  2074 00:F86E: A5 50        	LDA	REGX+1
  2075 00:F870: 20 89 FA     	JSR	HEXOUT2
  2076 00:F873: A5 4F        	LDA	REGX
  2077 00:F875: 20 89 FA     	JSR	HEXOUT2
  2078                        
  2079                        	long_a
+ 2079 00:F878: C2 20                        rep     #M_FLAG
+ 2079                                        longa   on
  2080 00:F87A: A9 1D FC     	LDA	#RDSY	; Y
  2081 00:F87D: 85 63        	STA	PT0
  2082 00:F87F: 20 79 FA     	JSR	STROUT
  2083                        	longa off
  2084 00:F882: A5 52        	LDA	REGY+1
  2085 00:F884: 20 89 FA     	JSR	HEXOUT2
  2086 00:F887: A5 51        	LDA	REGY
  2087 00:F889: 20 89 FA     	JSR	HEXOUT2
  2088                        
  2089                        	long_a
+ 2089 00:F88C: C2 20                        rep     #M_FLAG
+ 2089                                        longa   on
  2090 00:F88E: A9 21 FC     	LDA	#RDSSP	; SP
  2091 00:F891: 85 63        	STA	PT0
  2092 00:F893: 20 79 FA     	JSR	STROUT
  2093                        	longa off
  2094 00:F896: A5 54        	LDA	REGSP+1
  2095 00:F898: 20 89 FA     	JSR	HEXOUT2
  2096 00:F89B: A5 53        	LDA	REGSP
  2097 00:F89D: 20 89 FA     	JSR	HEXOUT2
  2098                        
  2099                        	long_a
+ 2099 00:F8A0: C2 20                        rep     #M_FLAG
+ 2099                                        longa   on
  2100 00:F8A2: A9 26 FC     	LDA	#RDSPC	; PC
  2101 00:F8A5: 85 63        	STA	PT0
  2102 00:F8A7: 20 79 FA     	JSR	STROUT
  2103                        	longa off
  2104 00:F8AA: A5 56        	LDA	REGPC+1		; PC(H)
  2105 00:F8AC: 20 89 FA     	JSR	HEXOUT2
  2106 00:F8AF: A5 55        	LDA	REGPC		; PC(L)
  2107 00:F8B1: 20 89 FA     	JSR	HEXOUT2
  2108                        
  2109                        	long_a
+ 2109 00:F8B4: C2 20                        rep     #M_FLAG
+ 2109                                        longa   on
  2110 00:F8B6: A9 2B FC     	LDA	#RDSPSR		; PSR
  2111 00:F8B9: 85 63        	STA	PT0
  2112 00:F8BB: 20 79 FA     	JSR	STROUT
  2113                        
  2114                        	longa off
  2115 00:F8BE: A0 08        	LDY	#8
  2116 00:F8C0: A5 57        	LDA	REGPSR
  2117                        	
  2118                        psr_bloop
  2119 00:F8C2: 0A           	asl	a
  2120 00:F8C3: 90 0C        	bcc	set_31
  2121 00:F8C5: AA           	tax			; save
  2122 00:F8C6: A9 31        	lda	#'1'
  2123 00:F8C8: 20 7E FD     	jsr	CONOUT
  2124                        set_30
  2125 00:F8CB: 8A           	txa
  2126 00:F8CC: 88           	dey
  2127 00:F8CD: D0 F3        	bne	psr_bloop
  2128 00:F8CF: 80 08        	bra	prt_dpdbpb
  2129                        
  2130                        set_31
  2131 00:F8D1: AA           	tax			; save
  2132 00:F8D2: A9 30        	lda	#'0'
  2133 00:F8D4: 20 7E FD     	jsr	CONOUT
  2134 00:F8D7: 80 F2        	bra	set_30
  2135                        
  2136                        prt_dpdbpb
  2137                        	long_a
+ 2137 00:F8D9: C2 20                        rep     #M_FLAG
+ 2137                                        longa   on
  2138 00:F8DB: A9 3E FC     	LDA	#RDSPB		; PBR
  2139 00:F8DE: 85 63        	STA	PT0
  2140 00:F8E0: 20 79 FA     	JSR	STROUT
  2141                        	longa off
  2142 00:F8E3: A5 58        	LDA	REGPB
  2143 00:F8E5: 20 89 FA     	JSR	HEXOUT2
  2144                        
  2145                        	long_a
+ 2145 00:F8E8: C2 20                        rep     #M_FLAG
+ 2145                                        longa   on
  2146 00:F8EA: A9 45 FC     	LDA	#RDSDB		; DBR
  2147 00:F8ED: 85 63        	STA	PT0
  2148 00:F8EF: 20 79 FA     	JSR	STROUT
  2149                        	longa off
  2150 00:F8F2: A5 59        	LDA	REGDB
  2151 00:F8F4: 20 89 FA     	JSR	HEXOUT2
  2152                        
  2153                        	long_a
+ 2153 00:F8F7: C2 20                        rep     #M_FLAG
+ 2153                                        longa   on
  2154 00:F8F9: A9 4B FC     	LDA	#RDSDP		; DPR
  2155 00:F8FC: 85 63        	STA	PT0
  2156 00:F8FE: 20 79 FA     	JSR	STROUT
  2157                        	longa off
  2158 00:F901: A5 5B        	LDA	REGDP+1		; DPR(H)
  2159 00:F903: 20 89 FA     	JSR	HEXOUT2
  2160 00:F906: A5 5A        	LDA	REGDP		; DPR(L)
  2161 00:F908: 20 89 FA     	JSR	HEXOUT2
  2162 00:F90B: 4C CC FA     	JMP	CRLF
  2163                        
  2164                        ;
  2165                        ; command help
  2166                        ;
  2167                        prt_help:
  2168                        	longi off
  2169                        	longa off
  2170 00:F90E: E8           	INX
  2171 00:F90F: B5 2A        	LDA	INBUF,X
  2172 00:F911: F0 03        	BEQ	ph_1	; jmp if string exist
  2173 00:F913: 4C F3 ED     	JMP	ERR
  2174                        ph_1
  2175                        	; must strings <= 255 : Y = 8 bit
  2176                        
  2177 00:F916: A9 2F        	LDA	#$FF&hlp_meg1
  2178 00:F918: 85 63        	STA	PT0
  2179 00:F91A: A9 F9        	LDA	#hlp_meg1>>8
  2180 00:F91C: 85 64        	STA	PT0+1
  2181 00:F91E: 20 79 FA     	JSR	STROUT
  2182                        
  2183 00:F921: A9 D3        	LDA	#$FF&hlp_meg2
  2184 00:F923: 85 63        	STA	PT0
  2185 00:F925: A9 F9        	LDA	#hlp_meg2>>8
  2186 00:F927: 85 64        	STA	PT0+1
  2187 00:F929: 20 79 FA     	JSR	STROUT
  2188 00:F92C: 4C 7C ED     	JMP	WSTART
  2189                        
  2190                        hlp_meg1
  2191 00:F92F: 3C 3C 3C 20  	db	"<<< Universal Monitor Command List >>>",CR,LF
       00:F933: 55 6E 69 76 
       00:F937: 65 72 73 61 
       00:F93B: 6C 20 4D 6F 
       00:F93F: 6E 69 74 6F 
       00:F943: 72 20 43 6F 
       00:F947: 6D 6D 61 6E 
       00:F94B: 64 20 4C 69 
       00:F94F: 73 74 20 3E 
       00:F953: 3E 3E 0D 0A 
  2192 00:F957: 3F 20 20 3A  	db	"?  : Command Summary", CR, LF
       00:F95B: 20 43 6F 6D 
       00:F95F: 6D 61 6E 64 
       00:F963: 20 53 75 6D 
       00:F967: 6D 61 72 79 
       00:F96B: 0D 0A 
  2193 00:F96D: 44 20 20 5B  	db	"D  [bank:][start addr][, end addr] : Dump Memory", CR, LF
       00:F971: 62 61 6E 6B 
       00:F975: 3A 5D 5B 73 
       00:F979: 74 61 72 74 
       00:F97D: 20 61 64 64 
       00:F981: 72 5D 5B 2C 
       00:F985: 20 65 6E 64 
       00:F989: 20 61 64 64 
       00:F98D: 72 5D 20 3A 
       00:F991: 20 44 75 6D 
       00:F995: 70 20 4D 65 
       00:F999: 6D 6F 72 79 
       00:F99D: 0D 0A 
  2194 00:F99F: 44 49 20 5B  	db	"DI [bank:][start addr][, end addr] : Disassembler", CR, LF,0
       00:F9A3: 62 61 6E 6B 
       00:F9A7: 3A 5D 5B 73 
       00:F9AB: 74 61 72 74 
       00:F9AF: 20 61 64 64 
       00:F9B3: 72 5D 5B 2C 
       00:F9B7: 20 65 6E 64 
       00:F9BB: 20 61 64 64 
       00:F9BF: 72 5D 20 3A 
       00:F9C3: 20 44 69 73 
       00:F9C7: 61 73 73 65 
       00:F9CB: 6D 62 6C 65 
       00:F9CF: 72 0D 0A 00 
  2195                        hlp_meg2
  2196 00:F9D3: 47 20 20 5B  	db	"G  [bank:][start addr][, stop addr] : Go and Stop", CR, LF
       00:F9D7: 62 61 6E 6B 
       00:F9DB: 3A 5D 5B 73 
       00:F9DF: 74 61 72 74 
       00:F9E3: 20 61 64 64 
       00:F9E7: 72 5D 5B 2C 
       00:F9EB: 20 73 74 6F 
       00:F9EF: 70 20 61 64 
       00:F9F3: 64 72 5D 20 
       00:F9F7: 3A 20 47 6F 
       00:F9FB: 20 61 6E 64 
       00:F9FF: 20 53 74 6F 
       00:FA03: 70 0D 0A 
  2197 00:FA06: 4C 20 20 5B  	db	"L  [offset] : Load HexFile", CR, LF
       00:FA0A: 6F 66 66 73 
       00:FA0E: 65 74 5D 20 
       00:FA12: 3A 20 4C 6F 
       00:FA16: 61 64 20 48 
       00:FA1A: 65 78 46 69 
       00:FA1E: 6C 65 0D 0A 
  2198 00:FA22: 52 20 20 5B  	db	"R  [register] : Show or Set register", CR, LF
       00:FA26: 72 65 67 69 
       00:FA2A: 73 74 65 72 
       00:FA2E: 5D 20 3A 20 
       00:FA32: 53 68 6F 77 
       00:FA36: 20 6F 72 20 
       00:FA3A: 53 65 74 20 
       00:FA3E: 72 65 67 69 
       00:FA42: 73 74 65 72 
       00:FA46: 0D 0A 
  2199 00:FA48: 53 20 20 5B  	db	"S  [bank:][addr] : Set Memory", CR, LF
       00:FA4C: 62 61 6E 6B 
       00:FA50: 3A 5D 5B 61 
       00:FA54: 64 64 72 5D 
       00:FA58: 20 3A 20 53 
       00:FA5C: 65 74 20 4D 
       00:FA60: 65 6D 6F 72 
       00:FA64: 79 0D 0A 
  2200 00:FA67: 42 59 45 20  	db	"BYE : Terminate",CR,LF,0
       00:FA6B: 3A 20 54 65 
       00:FA6F: 72 6D 69 6E 
       00:FA73: 61 74 65 0D 
       00:FA77: 0A 00 
  2201                        
  2202                        ;;;
  2203                        ;;; Other support routines
  2204                        ;;;
  2205                        
  2206                        STROUT
  2207                        	short_ai
+ 2207 00:FA79: E2 30                        sep     #M_FLAG|X_FLAG
+ 2207                                        longa   off
+ 2207                                        longi   off
  2208 00:FA7B: A0 00        	LDY	#0
  2209                        STRO0
  2210 00:FA7D: B1 63        	LDA	(PT0),Y
  2211 00:FA7F: F0 07        	BEQ	STROE
  2212 00:FA81: 20 7E FD     	JSR	CONOUT
  2213 00:FA84: C8           	INY
  2214 00:FA85: 4C 7D FA     	JMP	STRO0
  2215                        STROE
  2216 00:FA88: 60           	RTS
  2217                        
  2218                        HEXOUT2
  2219                        	longa off
  2220 00:FA89: 48           	PHA
  2221 00:FA8A: 4A           	LSR	A
  2222 00:FA8B: 4A           	LSR	A
  2223 00:FA8C: 4A           	LSR	A
  2224 00:FA8D: 4A           	LSR	A
  2225 00:FA8E: 20 92 FA     	JSR	HEXOUT1
  2226 00:FA91: 68           	PLA
  2227                        HEXOUT1
  2228                        	longa off
  2229 00:FA92: 29 0F        	AND	#$0F
  2230 00:FA94: 18           	CLC
  2231 00:FA95: 69 30        	ADC	#'0'
  2232 00:FA97: C9 3A        	CMP	#'9'+1
  2233 00:FA99: 90 03        	BCC	HEXOUTE
  2234 00:FA9B: 18           	CLC
  2235 00:FA9C: 69 07        	ADC	#'A'-'9'-1
  2236                        HEXOUTE
  2237 00:FA9E: 4C 7E FD     	JMP	CONOUT
  2238                        
  2239                        HEXIN
  2240                        	longa off
  2241 00:FAA1: A9 00        	LDA	#0
  2242 00:FAA3: 20 AA FA     	JSR	HI0
  2243 00:FAA6: 0A           	ASL
  2244 00:FAA7: 0A           	ASL
  2245 00:FAA8: 0A           	ASL
  2246 00:FAA9: 0A           	ASL
  2247                        HI0
  2248 00:FAAA: 85 62        	STA	HITMP
  2249 00:FAAC: 20 6A FD     	JSR	CONIN
  2250 00:FAAF: 20 36 FB     	JSR	UPPER
  2251 00:FAB2: C9 30        	CMP	#'0'
  2252 00:FAB4: 90 15        	BCC	HIR
  2253 00:FAB6: C9 3A        	CMP	#'9'+1
  2254 00:FAB8: 90 0B        	BCC	HI1
  2255 00:FABA: C9 41        	CMP	#'A'
  2256 00:FABC: 90 0D        	BCC	HIR
  2257 00:FABE: C9 47        	CMP	#'F'+1
  2258 00:FAC0: B0 09        	BCS	HIR
  2259 00:FAC2: 38           	SEC
  2260 00:FAC3: E9 07        	SBC	#'A'-'9'-1
  2261                        HI1
  2262 00:FAC5: 38           	SEC
  2263 00:FAC6: E9 30        	SBC	#'0'
  2264 00:FAC8: 18           	CLC
  2265 00:FAC9: 65 62        	ADC	HITMP
  2266                        HIR
  2267 00:FACB: 60           	RTS
  2268                        	
  2269                        CRLF
  2270                        	longa off
  2271 00:FACC: A9 0D        	LDA	#CR
  2272 00:FACE: 20 7E FD     	JSR	CONOUT
  2273 00:FAD1: A9 0A        	LDA	#LF
  2274 00:FAD3: 4C 7E FD     	JMP	CONOUT
  2275                        
  2276                        GETLIN
  2277                        	longi off
  2278                        	longa off
  2279 00:FAD6: A2 00        	LDX	#0
  2280                        GL0
  2281 00:FAD8: 20 6A FD     	JSR	CONIN
  2282 00:FADB: C9 0D        	CMP	#CR
  2283 00:FADD: F0 36        	BEQ	GLE
  2284 00:FADF: C9 0A        	CMP	#LF
  2285 00:FAE1: F0 32        	BEQ	GLE
  2286 00:FAE3: C9 08        	CMP	#BS
  2287 00:FAE5: F0 18        	BEQ	GLB
  2288 00:FAE7: C9 7F        	CMP	#DEL
  2289 00:FAE9: F0 14        	BEQ	GLB
  2290 00:FAEB: C9 20        	CMP	#' '
  2291 00:FAED: 90 E9        	BCC	GL0
  2292 00:FAEF: C9 80        	CMP	#$80
  2293 00:FAF1: B0 E5        	BCS	GL0
  2294 00:FAF3: E0 0F        	CPX	#BUFLEN-1
  2295 00:FAF5: B0 E1        	BCS	GL0		; Too long
  2296 00:FAF7: 95 2A        	STA	INBUF,X
  2297 00:FAF9: E8           	INX
  2298 00:FAFA: 20 7E FD     	JSR	CONOUT
  2299 00:FAFD: 80 D9        	bra	GL0
  2300                        GLB
  2301 00:FAFF: E0 00        	CPX	#0
  2302 00:FB01: F0 D5        	BEQ	GL0
  2303 00:FB03: CA           	DEX
  2304 00:FB04: A9 08        	LDA	#BS
  2305 00:FB06: 20 7E FD     	JSR	CONOUT
  2306 00:FB09: A9 20        	LDA	#' '
  2307 00:FB0B: 20 7E FD     	JSR	CONOUT
  2308 00:FB0E: A9 08        	LDA	#BS
  2309 00:FB10: 20 7E FD     	JSR	CONOUT
  2310 00:FB13: 80 C3        	bra	GL0
  2311                        GLE
  2312 00:FB15: 20 CC FA     	JSR	CRLF
  2313 00:FB18: A9 00        	LDA	#0
  2314 00:FB1A: 95 2A        	STA	INBUF,X
  2315                        
  2316                        ; skip space
  2317 00:FB1C: AA           	tax			; X=0
  2318 00:FB1D: A8           	tay			; Y=0
  2319                        skp_splp
  2320 00:FB1E: B5 2A        	lda	INBUF,X
  2321 00:FB20: C9 00        	cmp	#0
  2322 00:FB22: F0 0E        	beq	glee
  2323 00:FB24: C9 20        	cmp	#' '		; check space
  2324 00:FB26: F0 07        	beq	skip_space
  2325                        
  2326 00:FB28: 20 36 FB     	jsr	UPPER
  2327 00:FB2B: 99 2A EC     	sta	UNIMON_DP+INBUF,y	; Absolute Indexed!! INBUF is at DPR
  2328 00:FB2E: C8           	iny
  2329                        skip_space
  2330 00:FB2F: E8           	inx
  2331 00:FB30: 80 EC        	bra	skp_splp
  2332                        glee
  2333 00:FB32: 99 2A EC     	sta	UNIMON_DP+INBUF,y	; Absolute Indexed! set null
  2334 00:FB35: 60           	RTS
  2335                        
  2336                        UPPER
  2337                        	longa off
  2338 00:FB36: C9 61        	CMP	#'a'
  2339 00:FB38: 90 06        	BCC	UPE
  2340 00:FB3A: C9 7B        	CMP	#'z'+1
  2341 00:FB3C: B0 02        	BCS	UPE
  2342 00:FB3E: 69 E0        	ADC	#'A'-'a'
  2343                        UPE
  2344 00:FB40: 60           	RTS
  2345                        
  2346                        RDHEX
  2347                        	longi off
  2348                        	longa off
  2349 00:FB41: A9 00        	LDA	#0
  2350 00:FB43: 85 65        	STA	PT1
  2351 00:FB45: 85 66        	STA	PT1+1
  2352 00:FB47: 85 67        	STA	CNT
  2353                        RH0
  2354 00:FB49: B5 2A        	LDA	INBUF,X
  2355 00:FB4B: C9 30        	CMP	#'0'
  2356 00:FB4D: 90 2D        	BCC	RHE
  2357 00:FB4F: C9 3A        	CMP	#'9'+1
  2358 00:FB51: 90 0B        	BCC	RH1
  2359 00:FB53: C9 41        	CMP	#'A'
  2360 00:FB55: 90 25        	BCC	RHE
  2361 00:FB57: C9 47        	CMP	#'F'+1
  2362 00:FB59: B0 21        	BCS	RHE
  2363 00:FB5B: 38           	SEC
  2364 00:FB5C: E9 07        	SBC	#'A'-'9'-1
  2365                        RH1
  2366 00:FB5E: 38           	SEC
  2367 00:FB5F: E9 30        	SBC	#'0'
  2368 00:FB61: 06 65        	ASL	PT1
  2369 00:FB63: 26 66        	ROL	PT1+1
  2370 00:FB65: 06 65        	ASL	PT1
  2371 00:FB67: 26 66        	ROL	PT1+1
  2372 00:FB69: 06 65        	ASL	PT1
  2373 00:FB6B: 26 66        	ROL	PT1+1
  2374 00:FB6D: 06 65        	ASL	PT1
  2375 00:FB6F: 26 66        	ROL	PT1+1
  2376 00:FB71: 18           	CLC
  2377 00:FB72: 65 65        	ADC	PT1
  2378 00:FB74: 85 65        	STA	PT1
  2379 00:FB76: E6 67        	INC	CNT
  2380 00:FB78: E8           	INX
  2381 00:FB79: 4C 49 FB     	JMP	RH0
  2382                        RHE
  2383 00:FB7C: 60           	RTS
  2384                        
  2385                        ;---------- unimon message data ---------------
  2386                        OPNMSG
  2387 00:FB7D: 0D 0A 55 6E  	db	CR,LF,"Universal Monitor W65C816",CR,LF,$00
       00:FB81: 69 76 65 72 
       00:FB85: 73 61 6C 20 
       00:FB89: 4D 6F 6E 69 
       00:FB8D: 74 6F 72 20 
       00:FB91: 57 36 35 43 
       00:FB95: 38 31 36 0D 
       00:FB99: 0A 00 
  2388                        PROMPT
  2389 00:FB9B: 5D 20 00     	db	"] ",$00
  2390                        IHEMSG
  2391 00:FB9E: 45 72 72 6F  	db	"Error ihex",CR,LF,$00
       00:FBA2: 72 20 69 68 
       00:FBA6: 65 78 0D 0A 
       00:FBAA: 00 
  2392                        
  2393                        SHEMSG
  2394 00:FBAB: 45 72 72 6F  	db	"Error srec",CR,LF,$00
       00:FBAF: 72 20 73 72 
       00:FBB3: 65 63 0D 0A 
       00:FBB7: 00 
  2395                        
  2396                        ERRMSG
  2397 00:FBB8: 45 72 72 6F  	db	"Error",CR,LF,$00
       00:FBBC: 72 0D 0A 00 
  2398                        
  2399                        DSEP0
  2400 00:FBC0: 20 3A 00     	db	" :",$00
  2401                        DSEP1
  2402 00:FBC3: 20 3A 20 00  	db	" : ",$00
  2403                        dmplmsg
  2404 00:FBC7: 20 20 20 20  	db	"          +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F"
       00:FBCB: 20 20 20 20 
       00:FBCF: 20 20 2B 30 
       00:FBD3: 20 2B 31 20 
       00:FBD7: 2B 32 20 2B 
       00:FBDB: 33 20 2B 34 
       00:FBDF: 20 2B 35 20 
       00:FBE3: 2B 36 20 2B 
       00:FBE7: 37 20 2B 38 
       00:FBEB: 20 2B 39 20 
       00:FBEF: 2B 41 20 2B 
       00:FBF3: 42 20 2B 43 
       00:FBF7: 20 2B 44 20 
       00:FBFB: 2B 45 20 2B 
       00:FBFF: 46 
  2405 00:FC00: 20 20 20 30  	db	"   0123456789ABCDEF",CR,LF,0
       00:FC04: 31 32 33 34 
       00:FC08: 35 36 37 38 
       00:FC0C: 39 41 42 43 
       00:FC10: 44 45 46 0D 
       00:FC14: 0A 00 
  2406                        
  2407                        
  2408                        ;IHEXER
  2409                        ;        db	":00000001FF",CR,LF,$00
  2410                        ;SRECER
  2411                        ;        db	"S9030000FC",CR,LF,$00
  2412                        
  2413 00:FC16: 41 3D 00     RDSA	db	"A=",$00
  2414 00:FC19: 20 58 3D 00  RDSX	db	" X=",$00
  2415 00:FC1D: 20 59 3D 00  RDSY	db	" Y=",$00
  2416 00:FC21: 20 53 50 3D  RDSSP	db	" SP=",$00
       00:FC25: 00 
  2417 00:FC26: 20 50 43 3D  RDSPC	db	" PC=",$00
       00:FC2A: 00 
  2418 00:FC2B: 20 50 53 52  RDSPSR	db	" PSR=",$00
       00:FC2F: 3D 00 
  2419 00:FC31: 28 4E 56 4D  psn_bm	db	"(NVMXDIZC)",CR,LF,0
       00:FC35: 58 44 49 5A 
       00:FC39: 43 29 0D 0A 
       00:FC3D: 00 
  2420                        
  2421 00:FC3E: 0D 0A 50 42  RDSPB	db	CR,LF,"PBR=",0
       00:FC42: 52 3D 00 
  2422 00:FC45: 20 44 42 52  RDSDB	db	" DBR=",0
       00:FC49: 3D 00 
  2423 00:FC4B: 20 44 50 52  RDSDP	db	" DPR=",0
       00:FC4F: 3D 00 
  2424                        
  2425                        RNTAB
  2426 00:FC51: 41 02        	db	'A',2
  2427 00:FC53: 4D 00 E1 FC  	dw	REGA,RNA
  2428 00:FC57: 58 02        	db	'X',2
  2429 00:FC59: 4F 00 E3 FC  	dw	REGX,RNX
  2430 00:FC5D: 59 02        	db	'Y',2
  2431 00:FC5F: 51 00 E5 FC  	dw	REGY,RNY
  2432 00:FC63: 53 80        	db	'S',$80		; SP
  2433 00:FC65: 7B FC 00 00  	dw	RNTABS,0
  2434 00:FC69: 50 80        	db	'P',$80		; PC, PSR, PBR
  2435 00:FC6B: 87 FC 00 00  	dw	RNTABP,0
  2436 00:FC6F: 44 80        	db	'D',$80		; DBR, DPR
  2437 00:FC71: B7 FC 00 00  	dw	RNTABD,0
  2438                        	
  2439 00:FC75: 00 00        	db	$00,0		; End mark
  2440 00:FC77: 00 00 00 00  	dw	0,0
  2441                        
  2442                        RNTABS
  2443 00:FC7B: 50 02        	db	'P',2
  2444 00:FC7D: 53 00 E7 FC  	dw	REGSP,RNSP
  2445                        	
  2446 00:FC81: 00 00        	db	$00,0		; End mark
  2447 00:FC83: 00 00 00 00  	dw	0,0
  2448                        
  2449                        RNTABP
  2450 00:FC87: 43 02        	db	'C',2
  2451 00:FC89: 55 00 EA FC  	dw	REGPC,RNPC
  2452 00:FC8D: 42 80        	db	'B',$80
  2453 00:FC8F: AB FC 00 00  	dw	RNTPBS,0
  2454 00:FC93: 53 80        	db	'S',$80
  2455 00:FC95: 9F FC 00 00  	dw	RNTABPS,0
  2456                        
  2457 00:FC99: 00 00        	db	$00,0		; End mark
  2458 00:FC9B: 00 00 00 00  	dw	0,0
  2459                        
  2460                        RNTABPS
  2461 00:FC9F: 52 01        	db	'R',1
  2462 00:FCA1: 57 00 ED FC  	dw	REGPSR,RNPSR
  2463                        
  2464 00:FCA5: 00 00        	db	$00,0		; End mark
  2465 00:FCA7: 00 00 00 00  	dw	0,0
  2466                        	
  2467                        RNTPBS
  2468 00:FCAB: 52 01        	db	'R',1
  2469 00:FCAD: 58 00 F1 FC  	dw	REGPB,RNPB
  2470                        
  2471 00:FCB1: 00 00        	db	$00,0		; End mark
  2472 00:FCB3: 00 00 00 00  	dw	0,0
  2473                        
  2474                        RNTABD
  2475 00:FCB7: 42 80        	db	'B',$80
  2476 00:FCB9: C9 FC 00 00  	dw	RNTDBR,0
  2477 00:FCBD: 50 80        	db	'P',$80
  2478 00:FCBF: D5 FC 00 00  	dw	RNTDPR,0
  2479                        
  2480 00:FCC3: 00 00        	db	$00,0		; End mark
  2481 00:FCC5: 00 00 00 00  	dw	0,0
  2482                        	
  2483                        RNTDBR
  2484 00:FCC9: 52 01        	db	'R',1
  2485 00:FCCB: 59 00 F5 FC  	dw	REGDB,RNDB
  2486                        
  2487 00:FCCF: 00 00        	db	$00,0		; End mark
  2488 00:FCD1: 00 00 00 00  	dw	0,0
  2489                        
  2490                        RNTDPR
  2491 00:FCD5: 52 02        	db	'R',2
  2492 00:FCD7: 5A 00 F9 FC  	dw	REGDP,RNDP
  2493                        
  2494 00:FCDB: 00 00        	db	$00,0		; End mark
  2495 00:FCDD: 00 00 00 00  	dw	0,0
  2496                        
  2497 00:FCE1: 41 00        RNA	db	"A",$00
  2498 00:FCE3: 58 00        RNX	db	"X",$00
  2499 00:FCE5: 59 00        RNY	db	"Y",$00
  2500 00:FCE7: 53 50 00     RNSP	db	"SP",$00
  2501 00:FCEA: 50 43 00     RNPC	db	"PC",$00
  2502 00:FCED: 50 53 52 00  RNPSR	db	"PSR",$00
  2503                        
  2504 00:FCF1: 50 42 52 00  RNPB	db	"PBR",0
  2505 00:FCF5: 44 42 52 00  RNDB	db	"DBR",0
  2506 00:FCF9: 44 50 52 00  RNDP	db	"DPR",0
  2507                        
  2508 00:FCFD: 0D 0A 28 45  emu_msg		db	CR,LF,"(Emulation mode)",0
       00:FD01: 6D 75 6C 61 
       00:FD05: 74 69 6F 6E 
       00:FD09: 20 6D 6F 64 
       00:FD0D: 65 29 00 
  2509 00:FD10: 0D 0A 28 4E  ntv_msg		db	CR,LF,"(Native mode)",0
       00:FD14: 61 74 69 76 
       00:FD18: 65 20 6D 6F 
       00:FD1C: 64 65 29 00 
  2510 00:FD20: 49 52 51 21  IRQ_MSG		db	"IRQ!",CR,LF,$00
       00:FD24: 0D 0A 00 
  2511 00:FD27: 4E 4D 49 21  NMI_MSG		db	"NMI!",CR,LF,$00
       00:FD2B: 0D 0A 00 
  2512 00:FD2E: 42 52 4B 21  BRK_MSG		db	"BRK!",CR,LF,$00
       00:FD32: 0D 0A 00 
  2513 00:FD35: 49 52 51 2F  IBRK_MSG	db	"IRQ/BRK!",CR,LF,0
       00:FD39: 42 52 4B 21 
       00:FD3D: 0D 0A 00 
  2514 00:FD40: 20 44 65 74  dct_msg		db	" Detect ",0
       00:FD44: 65 63 74 20 
       00:FD48: 00 
  2515 00:FD49: 53 54 4F 50  stpmsg		db	"STOP!(User break)",CR,LF,$00
       00:FD4D: 21 28 55 73 
       00:FD51: 65 72 20 62 
       00:FD55: 72 65 61 6B 
       00:FD59: 29 0D 0A 00 
  2516                        
  2517                        ;;;
  2518                        ;;;	Console Driver
  2519                        ;;;
  2520                        
  2521                        ;CONIN_REQ	EQU	0x01
  2522                        ;CONOUT_REQ	EQU	0x02
  2523                        ;CONST_REQ	EQU	0x03
  2524                        ;STROUT_REQ	equ	$04
  2525                        ;WUP_REQ	equ	$ff
  2526                        ;  ---- request command to PIC
  2527                        ; UREQ_COM = 1 ; CONIN  : return char in UNI_CHR
  2528                        ;          = 2 ; CONOUT : UNI_CHR = output char
  2529                        ;          = 3 ; CONST  : return status in UNI_CHR
  2530                        ;                       : ( 0: no key, 1 : key exist )
  2531                        ;          = 4 ; STROUT : string address = (PTRSAV, PTRSAV_SEG)
  2532                        ;
  2533                        ;UREQ_COM	ds	1	; unimon CONIN/CONOUT request command
  2534                        ;UNI_CHR	ds	1	; charcter (CONIN/CONOUT) or number of strings
  2535                        
  2536                        INIT
  2537                        	; clear Reqest Parameter Block
  2538                        	short_a
+ 2538 00:FD5D: E2 20                        sep     #M_FLAG
+ 2538                                        longa   off
  2539 00:FD5F: A9 00        	lda	#0
  2540 00:FD61: 85 18        	sta	UREQ_COM
  2541 00:FD63: 85 1A        	sta	CREQ_COM
  2542 00:FD65: 85 23        	sta	bank
  2543 00:FD67: 85 24        	sta	reserve
  2544 00:FD69: 60           	RTS
  2545                        
  2546                        ;
  2547                        ; request CONIN, CONST CONOUT to PIC18F47QXX
  2548                        ;
  2549                        
  2550                        CONIN
  2551                        	short_a			; Make A 8-bits
+ 2551 00:FD6A: E2 20                        sep     #M_FLAG
+ 2551                                        longa   off
  2552 00:FD6C: A9 01        	lda	#CONIN_REQ
  2553                        
  2554                        wup_pic
  2555 00:FD6E: 85 18        	sta	UREQ_COM
  2556                        ;wait_again
  2557 00:FD70: CB           	wai			; RDY = 0, wait /IRQ detect
  2558                        
  2559 00:FD71: A5 19        	lda	UNI_CHR
  2560 00:FD73: 60           	RTS
  2561                        
  2562                        CONST
  2563                        	short_a			; Make A 8-bits
+ 2563 00:FD74: E2 20                        sep     #M_FLAG
+ 2563                                        longa   off
  2564 00:FD76: A9 03        	lda	#CONST_REQ
  2565 00:FD78: 20 6E FD     	jsr	wup_pic
  2566 00:FD7B: 29 01        	AND	#$01
  2567 00:FD7D: 60           	RTS
  2568                        
  2569                        CONOUT
  2570                        	short_a			; Make A 8-bits
+ 2570 00:FD7E: E2 20                        sep     #M_FLAG
+ 2570                                        longa   off
  2571 00:FD80: 48           	pha
  2572 00:FD81: 85 19        	sta	UNI_CHR		; set char
  2573 00:FD83: A9 02        	lda	#CONOUT_REQ
  2574 00:FD85: 20 6E FD     	jsr	wup_pic
  2575 00:FD88: 68           	pla
  2576 00:FD89: 60           	rts
  2577                        
  2578                        NMI_SIG
  2579                        	short_a			; Make A 8-bits
+ 2579 00:FD8A: E2 20                        sep     #M_FLAG
+ 2579                                        longa   off
  2580 00:FD8C: 48           	pha
  2581 00:FD8D: A9 FF        	lda	#WUP_REQ
  2582 00:FD8F: 20 6E FD     	jsr	wup_pic
  2583 00:FD92: 68           	pla
  2584 00:FD93: 60           	rts
  2585                        
  2586                        ;===============================================================================
  2587                        ; Interrupt Handlers message out
  2588                        ;-------------------------------------------------------------------------------
  2589                        prt_nmode
  2590                        	long_a
+ 2590 00:FD94: C2 20                        rep     #M_FLAG
+ 2590                                        longa   on
  2591 00:FD96: A9 10 FD     	LDA	#ntv_msg
  2592 00:FD99: 85 63        	STA	PT0
  2593 00:FD9B: 80 10        	bra	prt_str
  2594                        
  2595                        prt_emode
  2596                        	long_a
+ 2596 00:FD9D: C2 20                        rep     #M_FLAG
+ 2596                                        longa   on
  2597 00:FD9F: A9 FD FC     	lda	#emu_msg
  2598 00:FDA2: 85 63        	STA	PT0
  2599 00:FDA4: 80 07        	bra	prt_str
  2600                        
  2601                        prt_dtct
  2602                        	long_a
+ 2602 00:FDA6: C2 20                        rep     #M_FLAG
+ 2602                                        longa   on
  2603 00:FDA8: A9 40 FD     	lda	#dct_msg
  2604 00:FDAB: 85 63        	STA	PT0
  2605                        prt_str
  2606 00:FDAD: 4C 79 FA     	jmp	STROUT
  2607                        
  2608                        prt_ibkm
  2609                        	long_a
+ 2609 00:FDB0: C2 20                        rep     #M_FLAG
+ 2609                                        longa   on
  2610 00:FDB2: A9 35 FD     	lda	#IBRK_MSG
  2611 00:FDB5: 85 63        	STA	PT0
  2612 00:FDB7: 80 F4        	bra	prt_str
  2613                        
  2614                        prt_nmim
  2615                        	long_a
+ 2615 00:FDB9: C2 20                        rep     #M_FLAG
+ 2615                                        longa   on
  2616 00:FDBB: A9 27 FD     	lda	#NMI_MSG
  2617 00:FDBE: 85 63        	STA	PT0
  2618 00:FDC0: 80 EB        	bra	prt_str
  2619                        
  2620                        prt_irqm
  2621                        	long_a
+ 2621 00:FDC2: C2 20                        rep     #M_FLAG
+ 2621                                        longa   on
  2622 00:FDC4: A9 20 FD     	lda	#IRQ_MSG
  2623 00:FDC7: 85 63        	STA	PT0
  2624 00:FDC9: 80 E2        	bra	prt_str
  2625                        
  2626                        ;===============================================================================
  2627                        ; Interrupt Handlers body
  2628                        ;-------------------------------------------------------------------------------
  2629                        IRQ_N:
  2630                        	long_ai
+ 2630 00:FDCB: C2 30                        rep     #M_FLAG|X_FLAG
+ 2630                                        longa   on
+ 2630                                        longi   on
  2631 00:FDCD: 48           	pha
  2632 00:FDCE: 0B           	phd			; push DPR
  2633 00:FDCF: 8B           	phb			; push DBR
  2634                        
  2635 00:FDD0: A9 00 EC     	lda	#UNIMON_DP
  2636 00:FDD3: 48           	pha
  2637 00:FDD4: 2B           	pld			; set Direct Page
  2638                        
  2639                        	short_a
+ 2639 00:FDD5: E2 20                        sep     #M_FLAG
+ 2639                                        longa   off
  2640 00:FDD7: A9 00        	lda	#UNIMON_DB
  2641 00:FDD9: 48           	pha
  2642 00:FDDA: AB           	plb			; set DATA BANK
  2643                        
  2644 00:FDDB: 68           	pla			; get user DBR
  2645 00:FDDC: 85 59        	sta	REGDB		; save Data Bank register
  2646                        
  2647                        	long_a
+ 2647 00:FDDE: C2 20                        rep     #M_FLAG
+ 2647                                        longa   on
  2648 00:FDE0: 68           	pla			; get user DPR
  2649 00:FDE1: 85 5A        	sta	REGDP		; save Direct Page register(L)
  2650                        
  2651 00:FDE3: 68           	pla			; A
  2652 00:FDE4: 85 4D        	STA	REGA
  2653 00:FDE6: 86 4F        	STX	REGX
  2654 00:FDE8: 84 51        	STY	REGY
  2655                        
  2656                        	short_a
+ 2656 00:FDEA: E2 20                        sep     #M_FLAG
+ 2656                                        longa   off
  2657 00:FDEC: 68           	PLA			; PSR (Pushed by IRQ)
  2658 00:FDED: 85 57        	STA	REGPSR		; save status register
  2659 00:FDEF: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2660                        
  2661                        	long_a
+ 2661 00:FDF1: C2 20                        rep     #M_FLAG
+ 2661                                        longa   on
  2662 00:FDF3: 68           	PLA			; PC (Pushed by IRQ)
  2663 00:FDF4: 85 55        	STA	REGPC
  2664                        
  2665                        	short_a
+ 2665 00:FDF6: E2 20                        sep     #M_FLAG
+ 2665                                        longa   off
  2666 00:FDF8: 68           	pla			; PB register
  2667 00:FDF9: 85 58        	sta	REGPB
  2668                        	
  2669 00:FDFB: BA           	TSX			; get SP
  2670 00:FDFC: 86 53        	STX	REGSP
  2671                        	short_i
+ 2671 00:FDFE: E2 10                        sep     #X_FLAG
+ 2671                                        longi   off
  2672                        
  2673 00:FE00: 20 94 FD     	jsr	prt_nmode	; (Native mode)
  2674 00:FE03: 20 A6 FD     	jsr	prt_dtct	; Detect 
  2675 00:FE06: 20 C2 FD     	jsr	prt_irqm	; IRQ
  2676                        
  2677 00:FE09: 20 3C F8     	JSR	RDUMP		; dump registers
  2678 00:FE0C: 4C 7C ED     	JMP	WSTART
  2679                        
  2680                        ;-----------------------------------------
  2681                        ; Handle BRK interrupts in native mode.
  2682                        ;-----------------------------------------
  2683                        BRK_N:
  2684                        	long_ai
+ 2684 00:FE0F: C2 30                        rep     #M_FLAG|X_FLAG
+ 2684                                        longa   on
+ 2684                                        longi   on
  2685 00:FE11: 48           	pha
  2686 00:FE12: 0B           	phd			; push DPR
  2687 00:FE13: 8B           	phb			; push DBR
  2688                        
  2689 00:FE14: A9 00 EC     	lda	#UNIMON_DP
  2690 00:FE17: 48           	pha
  2691 00:FE18: 2B           	pld			; set Direct Page
  2692                        
  2693                        	short_a
+ 2693 00:FE19: E2 20                        sep     #M_FLAG
+ 2693                                        longa   off
  2694 00:FE1B: A9 00        	lda	#UNIMON_DB
  2695 00:FE1D: 48           	pha
  2696 00:FE1E: AB           	plb			; set DATA BANK
  2697                        
  2698                        	; BRK instruction
  2699                        
  2700                        	short_a
+ 2700 00:FE1F: E2 20                        sep     #M_FLAG
+ 2700                                        longa   off
  2701 00:FE21: 68           	pla			; get user DBR
  2702 00:FE22: 85 59        	sta	REGDB		; save Data Bank register
  2703                        
  2704                        	long_a
+ 2704 00:FE24: C2 20                        rep     #M_FLAG
+ 2704                                        longa   on
  2705 00:FE26: 68           	pla			; get user DPR
  2706 00:FE27: 85 5A        	sta	REGDP		; save Direct Page register
  2707                        
  2708 00:FE29: 68           	pla			; A
  2709 00:FE2A: 85 4D        	STA	REGA
  2710 00:FE2C: 84 51        	STY	REGY
  2711 00:FE2E: 86 4F        	STX	REGX
  2712                        
  2713                        	short_a
+ 2713 00:FE30: E2 20                        sep     #M_FLAG
+ 2713                                        longa   off
  2714 00:FE32: 68           	PLA			; PSR (Pushed by BRK)
  2715 00:FE33: 85 57        	STA	REGPSR		; save status register
  2716 00:FE35: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2717                        
  2718                        	long_a
+ 2718 00:FE37: C2 20                        rep     #M_FLAG
+ 2718                                        longa   on
  2719 00:FE39: 68           	PLA			; PC (Pushed by BRK)
  2720 00:FE3A: 85 5C        	sta	ILL_PC
  2721 00:FE3C: 3A           	dec	a
  2722 00:FE3D: 3A           	dec	a
  2723 00:FE3E: 85 55        	STA	REGPC
  2724                        
  2725                        	short_a
+ 2725 00:FE40: E2 20                        sep     #M_FLAG
+ 2725                                        longa   off
  2726 00:FE42: 68           	pla			; PB register
  2727 00:FE43: 85 58        	sta	REGPB
  2728                        	
  2729 00:FE45: BA           	TSX			; get SP
  2730 00:FE46: 86 53        	STX	REGSP
  2731                        	short_i
+ 2731 00:FE48: E2 10                        sep     #X_FLAG
+ 2731                                        longi   off
  2732                        
  2733                        	; check break point
  2734                        
  2735 00:FE4A: A5 70        	lda	stp_flg
  2736 00:FE4C: F0 22        	beq	ill_stop
  2737                        
  2738                        	; restore original code
  2739 00:FE4E: 64 70        	stz	stp_flg
  2740                        	long_a
+ 2740 00:FE50: C2 20                        rep     #M_FLAG
+ 2740                                        longa   on
  2741 00:FE52: A5 71        	lda	sav_dat		; get save data
  2742 00:FE54: 87 73        	sta	[sv_adr]	; restore original code
  2743                        
  2744 00:FE56: A5 73        	lda	sv_adr
  2745 00:FE58: C5 55        	cmp	REGPC
  2746 00:FE5A: D0 14        	bne	ill_stop
  2747                        
  2748                        	short_a
+ 2748 00:FE5C: E2 20                        sep     #M_FLAG
+ 2748                                        longa   off
  2749 00:FE5E: A5 75        	lda	sv_bnk
  2750 00:FE60: C5 58        	cmp	REGPB
  2751 00:FE62: D0 0C        	bne	ill_stop
  2752                        	
  2753 00:FE64: 20 94 FD     	jsr	prt_nmode	; (Native mode)
  2754                        	long_a
+ 2754 00:FE67: C2 20                        rep     #M_FLAG
+ 2754                                        longa   on
  2755 00:FE69: A9 49 FD     	lda	#stpmsg
  2756 00:FE6C: 85 63        	STA	PT0
  2757 00:FE6E: 80 13        	bra	b_outmsg
  2758                        
  2759                        ill_stop
  2760                        	; re-adjust PC
  2761                        	long_a
+ 2761 00:FE70: C2 20                        rep     #M_FLAG
+ 2761                                        longa   on
  2762 00:FE72: A5 5C        	lda	ILL_PC
  2763 00:FE74: 85 55        	sta	REGPC
  2764                        	
  2765 00:FE76: 20 94 FD     	jsr	prt_nmode	; (Native mode)
  2766 00:FE79: 20 A6 FD     	jsr	prt_dtct	; Detect 
  2767                        	long_a
+ 2767 00:FE7C: C2 20                        rep     #M_FLAG
+ 2767                                        longa   on
  2768 00:FE7E: A9 2E FD     	lda	#BRK_MSG
  2769 00:FE81: 85 63        	STA	PT0
  2770                        b_outmsg
  2771 00:FE83: 20 79 FA     	JSR	STROUT
  2772 00:FE86: 20 3C F8     	JSR	RDUMP
  2773 00:FE89: 4C 7C ED     	JMP	WSTART
  2774                        
  2775                        ; Handle NMI interrupts in emulation mode.
  2776                        
  2777                        NMI_E:
  2778                        	native		; set native mode
+ 2778 00:FE8C: 18                           clc
+ 2778 00:FE8D: FB                           xce
  2779                        	long_ai
+ 2779 00:FE8E: C2 30                        rep     #M_FLAG|X_FLAG
+ 2779                                        longa   on
+ 2779                                        longi   on
  2780 00:FE90: 48           	pha
  2781                        
  2782 00:FE91: A9 00 EC     	lda	#UNIMON_DP
  2783 00:FE94: 48           	pha
  2784 00:FE95: 2B           	pld			; set Direct Page
  2785                        
  2786                        	short_a
+ 2786 00:FE96: E2 20                        sep     #M_FLAG
+ 2786                                        longa   off
  2787 00:FE98: A9 00        	lda	#UNIMON_DB
  2788 00:FE9A: 48           	pha
  2789 00:FE9B: AB           	plb			; set DATA BANK
  2790                        
  2791                        	long_a
+ 2791 00:FE9C: C2 20                        rep     #M_FLAG
+ 2791                                        longa   on
  2792 00:FE9E: 68           	pla			; A
  2793 00:FE9F: 85 4D        	STA	REGA
  2794 00:FEA1: 86 4F        	STX	REGX
  2795 00:FEA3: 84 51        	STY	REGY
  2796                        
  2797                        	short_a
+ 2797 00:FEA5: E2 20                        sep     #M_FLAG
+ 2797                                        longa   off
  2798 00:FEA7: 68           	PLA			; PSR (Pushed by NMI)
  2799 00:FEA8: 85 57        	STA	REGPSR		; save status register
  2800 00:FEAA: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2801                        
  2802                        	long_a
+ 2802 00:FEAC: C2 20                        rep     #M_FLAG
+ 2802                                        longa   on
  2803 00:FEAE: 68           	PLA			; PC (Pushed by NMI)
  2804 00:FEAF: 85 55        	STA	REGPC
  2805 00:FEB1: 64 5A        	stz	REGDP		; clear DP
  2806                        
  2807                        	short_a
+ 2807 00:FEB3: E2 20                        sep     #M_FLAG
+ 2807                                        longa   off
  2808 00:FEB5: 64 58        	stz	REGPB		; clear PB
  2809 00:FEB7: 64 59        	stz	REGDB		; clear DB
  2810                        
  2811 00:FEB9: BA           	TSX			; get SP
  2812 00:FEBA: 86 53        	STX	REGSP
  2813                        	short_i
+ 2813 00:FEBC: E2 10                        sep     #X_FLAG
+ 2813                                        longi   off
  2814                        
  2815 00:FEBE: 20 9D FD     	jsr	prt_emode	; (Emulation mode)
  2816 00:FEC1: 20 A6 FD     	jsr	prt_dtct	; Detect 
  2817 00:FEC4: 20 B9 FD     	jsr	prt_nmim	; NMI
  2818                        
  2819 00:FEC7: 20 3C F8     	JSR	RDUMP		; dump registers
  2820 00:FECA: 4C 7C ED     	JMP	WSTART
  2821                        
  2822                        NMI_N:
  2823                        	long_ai
+ 2823 00:FECD: C2 30                        rep     #M_FLAG|X_FLAG
+ 2823                                        longa   on
+ 2823                                        longi   on
  2824 00:FECF: 48           	pha
  2825 00:FED0: 0B           	phd			; push DPR
  2826 00:FED1: 8B           	phb			; push DBR
  2827                        
  2828 00:FED2: A9 00 EC     	lda	#UNIMON_DP
  2829 00:FED5: 48           	pha
  2830 00:FED6: 2B           	pld			; set Direct Page
  2831                        
  2832                        	short_a
+ 2832 00:FED7: E2 20                        sep     #M_FLAG
+ 2832                                        longa   off
  2833 00:FED9: A9 00        	lda	#UNIMON_DB
  2834 00:FEDB: 48           	pha
  2835 00:FEDC: AB           	plb			; set DATA BANK
  2836                        
  2837 00:FEDD: 68           	pla			; get user DBR
  2838 00:FEDE: 85 59        	sta	REGDB		; save Data Bank register
  2839                        
  2840                        	long_a
+ 2840 00:FEE0: C2 20                        rep     #M_FLAG
+ 2840                                        longa   on
  2841 00:FEE2: 68           	pla			; get user DPR
  2842 00:FEE3: 85 5A        	sta	REGDP		; save Direct Page register(L)
  2843                        
  2844 00:FEE5: 68           	pla			; A
  2845 00:FEE6: 85 4D        	STA	REGA
  2846 00:FEE8: 86 4F        	STX	REGX
  2847 00:FEEA: 84 51        	STY	REGY
  2848                        
  2849                        	short_a
+ 2849 00:FEEC: E2 20                        sep     #M_FLAG
+ 2849                                        longa   off
  2850 00:FEEE: 68           	PLA			; PSR (Pushed by NMI)
  2851 00:FEEF: 85 57        	STA	REGPSR		; save status register
  2852 00:FEF1: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2853                        
  2854                        	long_a
+ 2854 00:FEF3: C2 20                        rep     #M_FLAG
+ 2854                                        longa   on
  2855 00:FEF5: 68           	PLA			; PC (Pushed by NMI)
  2856 00:FEF6: 85 55        	STA	REGPC
  2857                        
  2858                        	short_a
+ 2858 00:FEF8: E2 20                        sep     #M_FLAG
+ 2858                                        longa   off
  2859 00:FEFA: 68           	pla			; PB register
  2860 00:FEFB: 85 58        	sta	REGPB
  2861                        	
  2862 00:FEFD: BA           	TSX			; get SP
  2863 00:FEFE: 86 53        	STX	REGSP
  2864                        	short_i
+ 2864 00:FF00: E2 10                        sep     #X_FLAG
+ 2864                                        longi   off
  2865                        
  2866 00:FF02: 20 94 FD     	jsr	prt_nmode	; (Native mode)
  2867 00:FF05: 20 A6 FD     	jsr	prt_dtct	; Detect 
  2868 00:FF08: 20 B9 FD     	jsr	prt_nmim	; NMI
  2869                        
  2870 00:FF0B: 20 3C F8     	JSR	RDUMP		; dump registers
  2871 00:FF0E: 4C 7C ED     	JMP	WSTART
  2872                        
  2873                        IRQBRK
  2874                        	native		; set native mode
+ 2874 00:FF11: 18                           clc
+ 2874 00:FF12: FB                           xce
  2875                        	long_ai
+ 2875 00:FF13: C2 30                        rep     #M_FLAG|X_FLAG
+ 2875                                        longa   on
+ 2875                                        longi   on
  2876 00:FF15: 48           	pha
  2877                        
  2878 00:FF16: A9 00 EC     	lda	#UNIMON_DP
  2879 00:FF19: 48           	pha
  2880 00:FF1A: 2B           	pld			; set Direct Page
  2881                        
  2882                        	short_a
+ 2882 00:FF1B: E2 20                        sep     #M_FLAG
+ 2882                                        longa   off
  2883 00:FF1D: A9 00        	lda	#UNIMON_DB
  2884 00:FF1F: 48           	pha
  2885 00:FF20: AB           	plb			; set DATA BANK
  2886                        
  2887                        	long_a
+ 2887 00:FF21: C2 20                        rep     #M_FLAG
+ 2887                                        longa   on
  2888 00:FF23: 68           	pla			; A
  2889 00:FF24: 85 4D        	STA	REGA
  2890 00:FF26: 86 4F        	STX	REGX
  2891 00:FF28: 84 51        	STY	REGY
  2892                        
  2893                        	short_a
+ 2893 00:FF2A: E2 20                        sep     #M_FLAG
+ 2893                                        longa   off
  2894 00:FF2C: 68           	PLA			; PSR (Pushed by IRQ/BRK)
  2895 00:FF2D: 85 57        	STA	REGPSR		; save status register
  2896 00:FF2F: 85 69        	STA	FLAGS		; save disassemble EmPCR
  2897                        
  2898                        	long_a
+ 2898 00:FF31: C2 20                        rep     #M_FLAG
+ 2898                                        longa   on
  2899 00:FF33: 68           	PLA			; PC (Pushed by IRQ/BRK)
  2900 00:FF34: 85 55        	STA	REGPC
  2901 00:FF36: 64 5A        	stz	REGDP		; clear DP
  2902                        
  2903                        	short_a
+ 2903 00:FF38: E2 20                        sep     #M_FLAG
+ 2903                                        longa   off
  2904 00:FF3A: 64 58        	stz	REGPB		; clear PB
  2905 00:FF3C: 64 59        	stz	REGDB		; clear DB
  2906                        
  2907 00:FF3E: BA           	TSX			; get SP
  2908 00:FF3F: 86 53        	STX	REGSP
  2909                        	short_i
+ 2909 00:FF41: E2 10                        sep     #X_FLAG
+ 2909                                        longi   off
  2910                        
  2911 00:FF43: 20 9D FD     	jsr	prt_emode	; (Emulation mode)
  2912 00:FF46: 20 A6 FD     	jsr	prt_dtct	; Detect 
  2913 00:FF49: 20 B0 FD     	jsr	prt_ibkm	; IRQ/BRK
  2914 00:FF4C: 20 3C F8     	JSR	RDUMP		; dump registers
  2915 00:FF4F: 4C 7C ED     	JMP	WSTART
  2916                        
  2917                        ; COP and ABORT interrupts are not handled.
  2918                        
  2919                        COP_E:
  2920                        COP_N:
  2921                        ABORT_E:
  2922                        ABORT_N:
  2923 00:FF52: DB           	stp
  2924                        
  2925                        	;;
  2926                        	;; Entry point
  2927                        	;;
  2928                        
  2929                        	ORG	ENTRY+0		; Cold start
  2930                        E_CSTART
  2931 00:FF80: 4C 00 ED     	JMP	CSTART
  2932                        
  2933                        	ORG	ENTRY+8		; Warm start
  2934                        E_WSTART
  2935 00:FF88: 4C 7C ED     	JMP	WSTART
  2936                        
  2937                        	ORG	ENTRY+16	; Console output
  2938                        E_CONOUT
  2939 00:FF90: 4C 7E FD     	JMP	CONOUT
  2940                        
  2941                        	ORG	ENTRY+24	; (Console) String output
  2942                        E_STROUT
  2943 00:FF98: 4C 79 FA     	JMP	STROUT
  2944                        
  2945                        	ORG	ENTRY+32	; Console input
  2946                        E_CONIN
  2947 00:FFA0: 4C 6A FD     	JMP	CONIN
  2948                        
  2949                        	ORG	ENTRY+40	; Console status
  2950                        E_CONST
  2951 00:FFA8: 4C 74 FD     	JMP	CONST
  2952                        
  2953                        	;;
  2954                        	;; Vector area
  2955                        	;; 
  2956                        
  2957                        ;Vectors         section offset $ffe0
  2958                        
  2959                        	org	$ffe0
  2960                        
  2961 00:FFE0:              	ds	4		; Reserved
  2962 00:FFE4: 52 FF        	dw	COP_N		; $FFE4 - COP(816)
  2963 00:FFE6: 0F FE        	dw	BRK_N		; $FFE6 - BRK(816)
  2964 00:FFE8: 52 FF        	dw	ABORT_N		; $FFE8 - ABORT(816)
  2965 00:FFEA: CD FE        	dw	NMI_N		; $FFEA - NMI(816)
  2966 00:FFEC:              	ds	2		; Reserved
  2967 00:FFEE: CB FD        	dw	IRQ_N		; $FFEE - IRQ(816)
  2968                        
  2969 00:FFF0:              	ds	4
  2970 00:FFF4: 52 FF        	dw	COP_E		; $FFF4 - COP(C02)
  2971 00:FFF6:              	ds	2		; $Reserved
  2972 00:FFF8: 52 FF        	dw	ABORT_E		; $FFF8 - ABORT(C02)
  2973                        
  2974 00:FFFA: 8C FE        	dw	NMI_E		; NMI
  2975 00:FFFC: 00 ED        	dw	CSTART		; RESET
  2976 00:FFFE: 11 FF        	dw	IRQBRK		; IRQ/BRK
  2977                        
  2978                        	END


      Lines assembled: 3429
      Errors: 0
